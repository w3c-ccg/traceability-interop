{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "30335f97-8a3c-4e9c-ab36-15f7c0550b2b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "65deab93-86e0-46da-95f9-93f14ff513f1",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6acfcb8c-6a54-4cbb-9069-77a895cb6a1c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f5982f5-5490-422d-9d63-bb003d4effa6"
                }
              }
            ]
          },
          {
            "id": "82fcef2b-1b15-472f-990c-90045ec59364",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da9b94b0-56fb-428d-8be9-14a992c88ea6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ec16a86e-6216-44c3-ae28-10c78313f81c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "43e1e669-4fd6-45fc-8fc8-4dd440d66d00",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9b49cb17-0d44-45e5-b639-caa964117a13",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb30620e-598e-4038-92ac-5d0da10fce36",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee9e3f95-cbcc-4408-9a2d-7a582183c468",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c4b74fd-6b8c-4457-9b19-299ac3459c4e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2f86354-9f9e-429e-a187-e67f0cb4a681",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44e002ac-8f5a-420b-ab73-7a7e7e7a99a0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5970ffe-056a-4525-902f-26d101c8223c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "244e490d-d0d7-40c1-ba18-4bdb62274a29"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "754203d5-a29e-4e91-842f-5faf27fe826b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0f7003a9-ead4-4d3b-9480-e0f5ca58f5d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37620be3-c31c-4f6c-aa9e-bfe75791707a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65e717a4-fc74-412a-8ff1-cca4c9c9a916"
            }
          }
        ]
      },
      {
        "id": "f819cd9c-c45e-4792-ac76-309d8b08a72a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7be1a3ff-9c0f-4a63-b982-8e3190c5a78b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e6b5d5b1-ebda-4968-9a7e-91a1a881f650",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66514110-07d5-4d00-b5b4-4fedea029c44",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df63605c-999f-4f99-9d24-0dc5f2efbe40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79bc37eb-d7e6-49ee-a0c1-711e0d698a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21896d86-6249-4fa7-90c5-387faecd8544",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b5728-a630-423a-ad06-3ca9f5ad8bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "babe6371-ea40-4588-bbea-eeb7e881df91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be824d8-d934-40c2-a176-936a03576fa9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6ccdf1-b608-4f23-839d-f6503c82b483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5dfa5d3-cdab-42d0-b2d3-285d2381b2ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f8b5bb9-4555-4a3b-a9c5-1700234d7dba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f19ecc8e-8c48-426c-aef5-0a2d89d476ef",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc33321-1f10-470e-a957-abdf0af1271f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ba8c97d-eabc-4232-b451-4378622cf9f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6500d57c-5841-40c8-b6f4-8ad2eb140046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f121147b-b657-44c2-8937-c36a3ea43ccd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef8ca28b-caac-4c29-a1b5-46e6027f1961",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f4a0aa73-8c39-46ba-95ab-19d0e618113e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "200d275d-0ecb-4c8e-a401-28fca77048e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "835c5024-e67f-4d0c-bc0d-480f308593ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5b5a970-9347-428a-9910-fea591e30e62",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fabb5e26-1618-4889-8ab2-7b1bcbd063a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29c301f7-6d63-4a35-a1e7-a802fcbe603b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36a0c8f0-8022-45af-9f59-001a19a95f2c"
            }
          }
        ]
      },
      {
        "id": "e6304ace-2897-492c-b45a-9f5ac835e185",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2c7f33bf-0e49-406b-97e9-301defcda305",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65efcd1b-8c06-4a66-aced-7cbfdab52152",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e67e312d-11d8-407c-b4dd-b80a8a97b9b7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5404501e-c941-4729-9825-d8d110e5d33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ffcaa4-6c6b-49e8-ae2a-d6c61383171f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87a5984-a292-4cf3-b5f2-b4938b3234f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7120455-e75a-4c19-b78f-86342f950f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33443429-10f0-4a31-9d6d-69d90837e85c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387d7095-f66b-44f3-8ad7-aa1a0c3ffcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027574bc-2ceb-4892-8485-793e76b2f770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01efd0d4-6637-4043-9570-294e8109c77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9a7549e-883d-451d-bc98-dcc32bd2115a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1cfc26-3aa4-4a96-9aa3-28a65e0567c2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db72fdee-0351-42ef-be9d-a708ea93e274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9fa3db-8faf-4043-8f12-b219368faa56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e426cd-ed46-4b3a-95f6-598a89a6fb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6d8977e-1042-4931-803f-8fa07358d0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7841b2e-74b6-4ec7-9415-b35344bc3819",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c48581-cc22-418a-87c8-856abe3c65d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7011c5bd-1212-4780-900d-fd751ed43c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c810c15-5ae1-4478-b942-8d518213e506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1dfb816-c628-4b56-af82-f2c49ba13b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fa2900-8aa5-4b88-828d-9bad16c58fac",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaa5a2d-d154-465c-9595-b54dc3f2e766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272adaf4-4ae2-49bb-a605-32f1815efd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5498908c-d0d9-4ff6-a1e6-0347d7176def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8c64555-8a06-4a44-bba7-af0bd73cd6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f35117-454c-4c7a-862c-c73d7474b06d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51593f1-da47-48e1-a778-ffbaeb508f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918bd76e-9f7f-4649-a9fd-69da57f1a74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a93499-bd30-4e2c-875d-9b58059c2a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11bec861-34c6-4711-8dfb-1f0a3008b5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6103c3f5-8e83-4d0e-aab0-1329fe8fe85b",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bedda8a-7906-44ae-8276-9aade4c967c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadca9f4-1108-4492-a213-952028880aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c15a36f-b4b3-4132-b5eb-f2cb9081b7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2a3df78-90a2-4ab9-95f0-7a1cc99d0132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e8c69d-9cd2-44fa-92ac-84087a1dfcb5",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e1679e-6595-43f4-87ef-c4df8bc3d421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e651df8-c7a8-4376-a078-309cc34c0543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdb3491-59bd-4df9-a4a7-ea9033d77355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e17a8c49-dfe0-4211-88ad-eef5c39c590c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3390be34-11bd-4dd1-bdc7-265bd815dd85",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c144cb-789d-473c-83b7-4d4cb3e8f534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7958a429-27cd-4b92-a67f-e7e4ed906936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c12928-c811-4b93-b1c5-0fcb753fef85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4491d32c-1e9a-4b06-ac79-a83008d3f8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e252ef39-536f-480e-b3d1-ba2cea2e4120",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab5d449-757a-4fea-b4fc-cafa0794063a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66455712-ae19-4335-a89a-17d089e7669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647d23ce-b4de-498c-b3d8-d42fc2d63a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d31a7c9-93e9-4ccf-a34a-799b2e09a1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5555d6-5bcc-410d-87b9-484baa44e0b6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192af53d-fd73-4d7c-9aa9-d7402b3dcff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66073aa9-2237-489f-a441-4b4ce4809a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87bbb2b-c474-4aac-ab8b-f74aa0ea28de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f13befd8-9311-4370-bea0-36646497e5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a2325a-bbb3-4868-bdad-2915f0f00606",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42dc108-16e7-43d1-8850-12261460d025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beda98e3-053d-4966-bcb4-be1d28abe7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d5fe90-a723-4d63-abff-c18c8ff612a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d3ff930-b771-4fe2-852e-10bdf5916f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49169b99-fb3e-4a77-a695-183dbbb1c8aa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9548cf1d-af89-423a-8a36-52386329661e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0486f986-7699-4b02-9c40-b62f440814e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c740de2f-e635-4381-acde-cee39262ed86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "157f64d0-12ec-4c86-aa52-e5e83a9e79b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff73fa0-777d-4833-ad58-c4e121ea6568",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b81cc58-a3c4-4f8d-b826-0a21a8686a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0195af-6051-46dd-beff-9a5a02a5885e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c8a164-9b6f-4f8e-82a8-a351563b31d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9b20402-6bcd-4018-ac2f-73d034f64e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11f7a57-90e7-4bba-91fd-ad204d40ccd8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c311dcf-2eb2-4b07-9187-a7454a4d4b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d000a5-cae5-48fb-a93e-bd4ee77ed720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07e0f66-1f65-423c-af56-851e51175115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b0b9d6c-b506-47e1-8c08-9e2780c47b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf33c4db-74b7-4aaf-8c11-1b2888b7a8f2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec71ec2-06a3-461d-883f-394bc430e5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9dea1d-098f-4b2c-af4a-c04c301968d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81b9e15-13fa-4295-b85f-aa8931926c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75ce24b9-ac76-4287-9c55-5f882ed9f63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18bcccec-d00d-41d2-8fb4-4904a04c41ff",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a96cce2-a156-43f8-ab11-b0066f9c11ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed93397-adae-4011-8a46-c4554184ae1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb5839d-86e9-4a76-aec4-e7d5e58d4d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eabffef-f062-4625-8785-157f4e94d7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505f29b8-5c1d-4508-8722-a1dbf4d492dd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d32b057-5c87-418a-a4d3-ecdf7397ade5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f53fd4-f3bb-4a23-ae1f-8fc1fabc9fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7367104c-4eb5-4d03-9e6e-b79a89838130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76ae6fa-95ad-4f7d-b1ef-ed37721cc335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d950c64f-08f1-447b-93b9-971dc65f46c8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606898c9-096e-4da2-8cf0-c0170f96ddf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27beb4be-d07b-48c5-a7d5-bde1d256a888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21292208-ef64-4d03-8738-bfc172c14125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8821fa67-da35-4d66-9ccb-fc8554da6873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bbb2e2-e693-4fac-b214-b15ce4474f94",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8efc3d-51ca-4a23-b1bc-3c657e9d19e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ccc6b5-339e-4a06-8d7b-d944aa22a979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a9b532-90bc-45a7-8353-37c3cd881584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2650f36-7ed6-43f9-8039-07b76def9397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2fc534-0aac-4e8a-9f78-d19c79453237",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805b0cb3-a1b4-4396-92c5-9c7a366c348d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45993304-1a7f-4567-b01b-2a9817cf7ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677749f9-5b1d-4f78-8a4f-b9ed75ae21b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a39b69b-0d58-4afb-bb0b-450f8f16d4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2025775c-002f-4d54-9552-dd83dd18836f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0593b72-b247-412e-970e-42995008a563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27be891-f3fd-4b09-887b-2e1507f283a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900645e0-ce86-4e57-9c4e-1e0e7746ba83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bedc6af7-c626-4264-9eca-fbd36fb298bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488e93d3-abb1-47ec-b754-6c0de705e7f3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f5113b-03d8-4280-9370-1513a769603a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0c7fa6-c3ae-4154-8916-14298f0ccc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94158943-c22b-42e9-a212-aaa88246b94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20ef758a-138f-4e3b-be5a-dd2a3a2db8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c574e4a-3a9e-43a5-a04d-dcba1a54ad06",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8855fec5-6e28-4f83-b82e-f44fc8fa770a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278c7170-74c0-4b16-8e29-b1957d382c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44b6a06-5819-45a7-98fe-0622c724a7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc31006-601c-4a2b-9a48-a0b27ded6928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a140ce3-b4ac-40ca-9298-3e2bd73d0519",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fb871e-aa67-4656-bba3-29bf08c178cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cc1fe0-0bac-4228-a39b-428456acf62d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bca108-cc32-4667-b2d6-75a38af1e722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d20b2b-d770-4b15-8b42-949571cd46af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279f809c-8e4f-44cd-9b2b-044e46b84381",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623cc9f2-0991-4e1c-bfd4-238ae9ac7778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fc08e8-5961-44ce-9e6b-4c1b63b99ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3b046f-ed5e-446d-b4fb-2a39af144800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f16bcc-a931-462d-9cd8-dbcb73694af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f6f714-573c-478c-b68b-c7982e8b1f53",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5341a431-3a26-47db-8ed4-3278655f0760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176a0b0e-b2e4-40c5-8034-e14f6945ba49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623ad433-7beb-43e8-96f9-2cca8c6822ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2322307-74f0-4bc3-82a9-2f1a5f7726ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6f71b9-c61d-4193-a973-afb0bedb6387",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b90ec91-23e5-40ba-b3aa-76af34716e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242e0638-5f6c-4431-a279-45377d2b0b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6611bac-855b-4845-bcc0-ba0a194d1cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "118203d3-a958-4d54-aef9-9a3e96e78f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e20659-1f84-4cd7-8360-2ad81814dbac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6434de2e-c13d-450f-89b6-9fd38071c30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8445c496-6b1c-4af4-9bd8-ba062fef9d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5b531d-b637-4660-a46c-e3e7aaab0efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5442a5a-2d5c-4a79-aebf-e330c731bab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ef9868-e8b6-44d1-8e42-0b5c2a9a58e1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48792d8e-cf5d-4a85-a144-52d91944e5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c57351-5040-4c37-9744-303ec077b702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f41e2b-b20e-42a2-a3e9-bcc2207359e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "75a56493-1f5b-4cfe-84e6-2437ce8eb2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ecf7f2-c191-464a-be11-0eaf7f83755c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c504274-8e74-4da9-b2ed-8509e79107da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9623685c-2cb7-4d86-94cb-d15b5da7d980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98dcfe9c-11ae-4911-9617-5f30bd6f5dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c18e5cdb-6dba-4646-a994-b83c19afec42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e674d9-27a4-48ae-a1dd-2bd3755e6829",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ebf5ff-dc06-48b6-a64b-315c1278148b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3823fc3d-dc59-422e-a0b6-f91ee8078c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dbd1ad-68f9-4969-b532-0a1066a1daea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f6b267a-3da1-4d2a-83d9-38f9411497a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5ba8df-db0a-4788-bfc3-11daacd24f34",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bb8318-82c8-460c-847f-2b222c27658c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c242906-9ebe-474a-8fef-02a43d7e0dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c386943-7738-45b6-bb60-8c71f8fcc6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d04283-00be-4faa-a418-e71d2832f0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875a96ca-8060-47ba-8792-42c94336c525",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2612bbd7-bc97-4c40-a587-5196758852c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0002983-7f87-4d6d-b0f7-250d89df8976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77809f4b-f3cb-4f73-a582-254a193135e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac6392c-3279-4555-8246-74d5a3e01248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c120775-cd06-400f-b192-9acdc3b1ace4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce8c435-282a-4c62-99eb-534633b7bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fa2859-9846-4310-8cd3-5be3ee6aa850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca633de4-786d-4e8b-adc2-28322bba4dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad83dae-8bdb-49c9-a625-c8af920b73a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d554b9-ef2f-4733-a491-1f1a4c9603d2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b9b991-2d23-4dec-a6ef-f32b7c7b7674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3639824f-9199-41b4-bfb1-2a06dbc35206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbea5b5b-3880-41ca-8efa-d75ee82ed216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e90869-df9f-4312-a1e1-86a773e643b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f70bbe-22f3-4fff-8957-9dbd57359795",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e16fdac-b81e-463e-9b80-fa6973d1e181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9f0734-52e0-4caa-92d4-0e5d60bd90c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60eea3c-0209-4a7b-83e0-e44307546b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26f05fd1-8471-45bf-ad8a-ffcc0b2dea89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c595b00e-c8f7-4e55-8dea-3a4135156ce5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6e0855-6b18-48b4-acdf-f81dbd3854c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6af2e8f-8eb0-43a4-8142-e4d2f3dba5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2026fbb8-899e-4cc1-a455-84439184b233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "658543a8-c8db-4c09-8f1c-a7adbe6b9ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb29d17-da41-45d9-b8dd-b9b713f0281c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208e19cc-4781-4bb8-a77b-4335e398b1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879bb850-6ba9-4333-b048-9c87c83685e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90b0f87-34d3-4280-a90e-ec58adef3c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "50f9cb95-a583-4775-9984-eb38b7e305ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebf3d6d-faf2-4d3a-82d4-8d5b061f0beb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12ccc7c-5067-4361-b8dc-0aae482309bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ad6766-e180-4d5d-9018-7676bc5266fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f63cf1-6466-459d-b8ca-d9b28e6d32bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "966439f1-e1c9-423a-bd5d-8184d96aac37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396b441e-44bd-4fcf-be0f-5c200aaa46f3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d562693a-5b9a-43fe-9bc9-c41ef9fee2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c91b3bc-52cc-498e-9778-e4318e24d0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fdc9db-0d2a-492d-b379-3ef3f3612bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e718e598-fbde-4e31-8c65-dd0a3038b9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b29d75-23b2-4152-8796-e6d2876c271c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3180748-6dfc-4723-8bce-ef0ec6d2af34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6ac12a-c2bc-43d7-acc3-622d546e082d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35649cab-03ea-4f3f-8c5f-2f476222aba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "68102ca1-3e30-4618-8b58-d835623a58e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac8e76d-5c33-4ab4-b73f-d06b28d4d2df",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c05c43-4140-4a8d-b872-1e0d5102edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5659430b-3306-4577-87fc-46366f112295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b338a9-4e60-4461-bc21-8a32429504b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "961b934a-5781-4a5f-9945-039f5e87c314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e80e543-363f-4c74-b5ec-5ff64196be67",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0632030-c17e-41ac-ab52-e3d86b794332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4647e1a1-cd58-41ee-924f-4e4bd51f1a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf88455-c163-4cfb-b431-63956e77f3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "46062213-7735-4944-a9e5-5e6aee4ea786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b10b869-5174-4d96-b0c6-2daca26d7a00",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da59a77-4869-4208-b4c7-4be4f7285ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4d7212-3eeb-4687-8248-f18afa74841a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5848e5-9c7d-4c1d-bc09-03147732f91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e6a5fde-8306-48ae-b56b-ef41e0b48f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9088d70-ea5a-4b71-9a84-dd71aa51fc0f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbda7df2-b951-4496-a54b-0a1b00a2142a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a979d0dc-f1c5-4f90-9724-183fad390929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d96ff0-bd04-4c99-8298-9aff82dacb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81098a5b-ab35-44a9-9cb8-72e193b693f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c003fc1d-6875-4291-9125-f84d74e3fb17",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4bdc47-da75-4c51-9f03-85283bf674b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ed4873-1bdc-4a48-b33f-5b705ec6e355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0fd8691-04d9-4fcc-ac09-c840fa443ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "461c9473-80da-4cd4-8bd6-827f3a91591a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766c3081-4910-4126-aebe-d953fc6bb817",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1db05a6-1fc5-4c9d-a595-36851f35e2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b4dd2a4-73fd-4d36-8d1f-257cbd782816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71de515-95e7-4ddd-b883-37a6b1801927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb66b31e-c863-459f-94fa-afe066bef21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af8ae21-b4c4-4cba-aeac-05407d7e40f2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56152cd6-8aed-4b7e-8638-d32dfe24a9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2eb7b4-7589-4a0d-b435-a37e19dcb804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3d80af-3983-4769-806f-173c2e346395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31386ec3-3f80-4ca3-8821-1ea4b8ec4e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e68e83-bc1a-4de7-b936-18ef6091dd38",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c9154b-4637-4cd9-a817-d056596b4468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d5fc5c-7c02-41ea-8902-ecb7726024d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fb15eb-dbd4-4800-8f59-86ef7b175d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df1fbd16-a191-42ad-ad2b-a0b72b248a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b93647-e51d-45c5-9ee5-7b6c522d010c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b4a513-3608-46fb-82ad-334d5e767795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda4e842-60c9-489e-b352-e5591cb6fc35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6e14ce-5c7e-4d40-8d35-add53f7480ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2e9c4a-85b8-4ea0-a187-6d19e9914312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd0f328-64aa-47c6-bfeb-0f597b0bc9bd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24f6ba3-641d-40a5-9314-95f82bcc3bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e230c08-5d5b-4416-9c73-24603a8a677b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02b0e6f-cfa4-4481-b371-eec197e1e882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf133ba-2522-441e-b6f2-ffc7fd263641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cde522b-b13b-4563-bd70-33bdbb58396b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ede0315-238b-433e-870d-7aebdc893d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6bcacf-154b-41dc-b7a6-9efecc7682c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eec63eb-bb7d-4a7e-b5ee-dc45f50f5ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7577983-d344-41c8-9936-aca368418304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9974dd-d46d-45e0-9409-c892d3333620",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4457c7b4-7326-45e1-be4e-60eeae1ac659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e738ca-0ea9-4f69-930c-4a58bb7762d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6199393a-c012-43c6-a841-b56830377aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "353d72d7-829f-4877-9a8e-b5e48a1ff3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8423c16-347d-430a-a561-2df8cc5c9abf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a546d2c3-2891-4f49-81ac-0364130ee501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fc88bb-e4b9-4aae-8061-5c928eb1a1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd2b71b-cf37-433d-9d4e-4df1a21fa095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25a0dbd5-cf18-4b72-a44c-b3551222b558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e52df3-31f2-4bd9-a722-1ccac2c7f822",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f35283-f338-49e3-b184-3412a254b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3070a819-2ce0-4ee7-87c4-3ffa8b5a4bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb6fe77-2584-4019-b93d-63b861a3f498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5273e0af-5391-49b9-b006-e2e9ff55a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5729dc-1ed8-4031-9c23-e6fa70354d91",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be201843-41e8-460c-aafd-b0c1ef43568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2d66a0-b8f9-4f84-a1a5-765abf50075e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14a7868-f536-4330-963c-b101ab47a3e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb9c559-7405-4020-9bb0-5284637beda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417cfada-8294-4b75-b164-9d0bc5dab8d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb976ef-d756-4c58-a7f4-c9df942b433d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab6744b-cabd-45ba-bab1-4276f983e64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf35fa33-acca-4c6f-944d-d91f10d3f344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0465343-2280-4564-ae01-d6499a76abfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95faa36d-934d-4beb-8b39-58fb84c73143",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2038c627-03af-4976-8745-b1df90fd03fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8728f5-e99f-4dd1-87d5-7000eedc9502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccfd1f8-9b44-4e8d-91e8-3972c99f04e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8306653f-984b-402c-a4c2-48b7ddfccf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17598adc-a64d-4117-800a-904908af6b17",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50027118-e2f0-48b4-9ff7-0fa935f81a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3078a9-3b47-429b-96af-e2035857e86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5753e5-7897-47eb-b9d3-f414b5d5169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "20d79d5e-bb7f-48e3-9748-8fe5e91a7930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3caafd-c43b-4448-ae81-61d6a137be1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3495bd-9d97-4de2-911f-36c19831cfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1d18d4-86c5-41d2-8e4b-b96bedefd603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c6bbf2-2c6c-4cf7-b11b-a51ed4b48354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba379ac0-2234-4323-8596-553f98695bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8736ac9f-ad4e-493b-a9ff-1a8870837f80",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "191d2056-6a7b-4c07-b45b-eb95344d95c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812264e2-5359-425f-bc81-8f66d6086a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f46623-29fa-4fdc-9efa-c6a98e7a1570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e63de5f9-70b4-42b4-bb9f-18b0eaa330c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d7ff91-2358-463c-b0be-dd06ce0e2b7a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7303c5d-d65e-446a-be77-701e2adf6d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bbbe49-8571-4ed3-a2ec-66eec92b21f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebe6c0a-bec4-4b98-bc55-f1f1a3b2923c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b76e264f-b529-4d74-b3c0-fd3eb6bb1dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bad75ea-798c-4109-aeea-d1f8c5b5e468",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc83b8d4-1d2b-4c02-8ff1-6f5cb770c39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2280b9d-b270-47cb-9e70-ba03a60def95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e88770a-0562-466f-82b8-720535eb94ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6374de15-3a29-4bea-b326-99c75172bf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ff12c9-0e95-4537-b72e-c46d6e18efbf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab973d6-3d07-464b-9961-019518f25e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c1f09c-c02f-439f-be84-afc712627cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b00bec-0015-468a-99b1-254d93960f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2225e72f-416e-47e8-8180-fef1ca137527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400933bb-2b97-4e3b-8305-c61bcd706d2e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af4aebf-8109-4254-b454-d3afb8a33d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6801a72-b82e-41dd-bd63-c34980929f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2af3a81-7136-4ea0-bc12-0213dbd29a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6863bfc4-a82c-4f16-a705-b9d27fe68d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8c9eaa-1f56-404d-a831-7cc746d3d2c7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2557b599-07b9-46b5-9c8d-5b1bab18634f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe41001-3cc4-4137-8e66-b786c0fb7cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bc87df-a586-41c4-b6e3-3ed664739a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec8f84e-9670-4ffa-b182-ce2beb904f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d83bfd-8dcc-441f-931b-632d1bf3e964",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac875eee-6bbe-45bd-a208-e792b861c445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13494e3-f257-43d4-899b-0925652f1e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c1394f-2266-47d9-9ace-f94a65b46519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cafce70-b033-4ec4-881d-7bef22f6c9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f9f553-67cc-4a3a-bfbe-211b14ad47e5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c07eb-fb57-45ae-b61c-36ca2e64100c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55320334-bb74-4630-9229-155491c6c100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503dabb1-b161-49ba-a71e-f95577932a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "631e43d9-3fc5-4bf8-bd1f-6997642ae925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767604b4-d32f-493d-8c2a-03690c5213c5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7838bd-1b0a-411f-8d42-a573ccdfb2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e8822a-2ee5-493f-a631-ecdd3c874f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d501c88-8efa-4940-a287-fddd8cc66a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d360f9f6-3d80-45f5-b19d-12606a6cdfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e0defb-2ea4-43a7-bc8c-74ea4d6ada22",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2806f3d3-99cc-4c69-ae63-168edb1e3c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051904cf-ccac-49c0-a862-0c2129514db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f980c35e-0699-4b28-b4e0-aa9375f2ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa5fe08-5554-48b7-a095-23cd38a8f7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041f3200-fbcd-4859-8398-2bb075b04699",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abf264b-e27c-4492-992b-47d11bd3e32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233f8e76-6800-4d69-9007-3d632d68a4ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fa54d7-de06-4527-ab6f-ec5a8566c643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3942643e-bee6-49d0-a7ab-61cdfdcd4789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9be99c-33fc-4082-9807-cd46c15438c5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b81d00-f008-4b44-9c32-ee0fed830886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7c28a0-7fb5-4773-87ff-444566962455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a054588a-e0e7-4854-a82b-1a47cc7bb8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3032acd3-022d-48bb-88ff-4f09dc0a652b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad473209-c8e1-450d-b080-692108d5d7a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8522848-9b39-4d5d-81d5-d1e722391879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81c6c94-243d-41c0-b42e-c1619e75875c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc09df4-49fc-4b8e-a0b4-fc420467c797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9acfba70-320c-4c62-8061-a5491ad9d65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3bc7f2-5c83-4c57-b2d3-c283bfc99eb9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81958882-2d85-4002-8340-7ed44303e35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4729fc0b-241a-4196-8159-80d4587bca63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58fc681-cb84-4631-bec8-c73f916104e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b99c45d-4c8d-46d3-9969-c4a55d82cfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bb2d43-d03a-4491-a06b-0ad60c5d9657",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c301ba6-204b-4632-bc94-651e8e8c4783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d7657b-7ce0-4d46-bd72-5de88352e061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55929f08-8730-40e6-a6ee-be0dcf49f338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a946a1d-eac5-4b83-9f0e-6cebed2ae12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590670ac-c0b2-494b-88fe-6482b3e34927",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00fe34e-7a81-4d4b-bd2e-42606de8c2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc24382-2a02-45c7-8042-12c4b3c86195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f4c09a-4319-4bfb-af22-a171cae10b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78214433-9f06-410a-9e6f-014dd35fee1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3029ea0-7a8a-4972-adfd-6e8e2410f516",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bd90f9-b3f9-4f53-9962-fde25f23053a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e252389-cd64-4436-afb5-e9da559e1c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe609ec2-fe16-4f43-a221-2e1405894fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec2ba1f-e9df-438f-a3f5-d3b79731569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ed5e69-3716-4591-a43a-5aaf07cf7bd0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38435ad8-9cbc-4a95-82f9-f6cac2ba69ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecba62f-1cff-4da1-b807-110c34895e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4999bc7-2382-4f7f-a0c3-be19b309d51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89f4f81d-2e3b-4616-8900-e1aebb1a79c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b986a5-c97f-43fe-b080-d7ccbea9e30f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c1dbb5-ebf0-4320-a0c2-b70999c16175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b82e331-f1f1-42f2-b130-37396ba7ba6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d348c27-fb07-4a9b-967f-f3791c5a0cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "856fe52b-46bf-4c2d-a94e-c32f154bded2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "856eb44f-e719-427c-8425-5a58e9db7801",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9ce997-9421-4ac6-83d7-e8daaabd23e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab8c462-4ffe-456a-95d6-86a27cd35aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5d2301-5cca-4485-b779-b703bf8a2b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ccd31f-0453-45fb-8224-15469f9b8950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2430c5f9-061b-4549-92dd-d57854a87641",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205174d5-a89f-4016-aa15-002c1a0bebc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed81e95-23ab-4bc0-b9bb-8839b283378f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd00adde-883e-450a-88c8-1b9984f8ba7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49fdb3a6-2692-43c4-ab95-0e86c6249a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135e0e1f-daf1-420b-8c0d-0106c94e1a9a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd6d0a5-eff9-45c0-ab62-a92b0eb2198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fc4a46-4b0e-4477-8690-595ece38d95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbf810d-2b6f-4e9b-8428-6043fe77a25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "541c479c-7d2e-43fd-821d-f0d7c76173a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e629c4-690b-4564-ac9c-81c545289b15",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257384e5-e420-4ca1-87b1-46fe94d22d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164724f2-3c09-47fe-8362-9902e6e058be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a22928-11c3-4eb3-83ab-7fd96faae1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9660e708-ee6a-4616-a0a6-aae2bcdd8ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd07027-e23c-4b57-b144-522c3252a429",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ca384b-87a6-47fe-a54e-9d13ec29a8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9037b4-7b34-4c0a-9064-b84f5b6bb1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46578c5f-f71b-4d13-80b9-3700ce0d9dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa17394-91c6-4e15-9e62-db8c2f4c0cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072a028a-689c-4f1e-b01d-b1d20bc84a01",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0790f018-6179-4d62-91b3-59af1e21886f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13bd3d84-bab8-4191-bc9b-a1b10ffbe085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e15024-be02-421d-9e51-d488bc23c030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7bfa30-ccb5-455d-8ec8-d55af65e3c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb65de53-5cd0-497f-af93-1152e880036f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d24201d-67fd-4c24-9080-355726863ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "557339ee-7d3b-49bb-a09f-231255a70601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2e5b87-5c65-4f74-8651-01bda2fea8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c74f8f-9509-40d9-8dde-921b7177e1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4429d5-e7fc-4c39-b6a5-7b3301540e72",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb6e7c8-11a2-4116-a8eb-da1e5d218071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3094d4-4a2d-4e91-b748-c0a3594958d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ba9a65-42bc-4aa8-b72a-4a8c73775c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d28108b4-edc2-4bce-8352-10c98925463e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3251e695-74fd-4206-9f41-a24bb301287b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e775e1-707e-473f-83f6-393c1d8b18fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75384f90-e6cf-496d-a0df-154119a42d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14e92c5-a981-43bb-b2ba-4af5f5790246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "186426b0-115c-4dfb-8c76-f0678f7c5194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86107de3-a80f-4e7b-9a08-b26e5191507b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e7c82c-83c8-4658-8a77-7e5641b9812e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9cbaa9-3f2d-435b-aca1-cdd39578ef88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77df75c9-1e99-4261-b623-4fa338da223f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c457459-067b-4a9b-9e07-54760055e6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd37188-dcc1-47e6-9b5d-34a5c5862be0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de19248e-8129-4291-ba6e-7080e15f3dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109906da-76ba-4404-9886-c6f9d07b032c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825e4a92-89aa-4f39-8aa1-d2e2274e176a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1c65c2-3e2e-482d-b6ff-befe85126132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3152add2-248f-40e0-8072-b103bb9d89d4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a9d29e-8a0e-4def-8da5-944732ff8a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d570d349-6b01-43eb-8679-29c640b8d027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6fe07f-8ff2-419d-8052-644cfe4b50b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3530db2d-d0fc-4da4-bf22-210818371829"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "536b51d6-e121-4dab-86b6-2965d793fdb3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47bf8e98-37af-4ba8-a6d3-8261fcd095eb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a67d9a-f094-4aa2-9a1f-ea6583dc03ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10e58f08-5966-43e8-97a8-bce94efef7cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf0c1e4-b594-4389-b312-c9df68c1541c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d405b624-b3a2-4d5e-8da6-b5038100ed03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9e86d7f-477c-4045-9aae-191c2b0548e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a295d0af-0df1-49ec-9971-048f4ccc7334"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f1ba752-9d0d-4d63-aa3e-a991a7ff2fbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e165dbd9-75d5-4c6a-be43-81e93aa9019d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "578d7a92-bec6-4c32-b5b6-9888f79b593d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "61fdd591-ff82-4bbc-a1f6-5edba4656296"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33af9803-600d-4e21-8424-9f3d25fce164",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fe08f8c-9bf2-44ab-b973-b5cf44413cc6"
                }
              }
            ]
          },
          {
            "id": "ec0f2a79-6740-4e01-8715-d7548558dbea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "64977371-1740-46b7-9996-3791d3d6cd09",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dcdcfce-b7f9-4a94-a3f8-acc1a70f59cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f55f8dd-2399-467c-af29-4945c17273cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "255e1467-f70b-4124-a9ee-ca7028715bb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b418cb02-4f52-4d77-8d54-4ad0bbaea768"
                    }
                  }
                ]
              },
              {
                "id": "f5f7140e-6a03-4d8a-a93a-8bf51d941c94",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26088abf-518e-47e6-898c-ff6f8025c23d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b0a203c-ba26-4f56-a92b-7e70cc80d59d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28f7d208-0464-4456-88bd-dc9aa0496a3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebdde964-23da-4e92-9c66-b943e0f77974"
                    }
                  }
                ]
              },
              {
                "id": "a97399b7-75ed-4c98-82db-fd65905e20ae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97c20a54-bce1-48a4-bca2-040c6e1cca01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cb91569-ba46-4c3e-bb51-0029aaae1cd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae3c817c-4ab5-474b-95f7-7f2e46dcd05d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22f3237c-eb01-4012-b61f-f66e1d816ffb"
                    }
                  }
                ]
              },
              {
                "id": "1fac5c2d-ebbf-4906-948a-70606d95b9b4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd08fc1f-67ce-426f-81f1-d78403271e03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4534b9f3-dec9-4377-b165-e9514d322b14"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "856fdd71-8d49-43af-a8d3-177c61007ef5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9a7cd211-e16e-4e2d-ae33-79a6ff8bac4e"
                    }
                  }
                ]
              },
              {
                "id": "8b2a9173-c879-4644-9974-def156cee0b6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa9724b7-8b1a-485f-8b2c-08d4f25d9260",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22a1d018-19c1-4fe1-999d-05c2d88260c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ebca928-536f-40a2-bdd4-cb964bce5933",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7b7a84e2-49b4-4ba2-a1e9-856b508ac14a"
                    }
                  }
                ]
              },
              {
                "id": "c2091146-16c3-4f71-b9ae-a731c5079a54",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1f9a901-3a86-43f0-8aab-350cfc05113b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6714bd8-ed4c-48c1-93cf-10ea186daab8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc2de978-8414-4e38-b18d-ca3c70c14fe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "84364d32-ed92-4f40-9489-578c7aeb32fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "18d063c2-067d-4712-b478-683ec5a98ba6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46c4c1a5-abff-40f1-a7e5-fe628bef369d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44752b99-15f1-4d56-9474-7b5a2180103f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bd71d5b-dec8-4f94-bc45-38500f3b4c66"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22d40343-4276-4db7-a916-e2de51fb6599",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c0b801f9-967c-4f40-a7b6-daa5574babd1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b606ab8-b0fc-463e-8034-5dc35f128f08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8819dd3-1c70-4c46-ade8-9c68f53c8d1c"
            }
          }
        ]
      },
      {
        "id": "5470cd17-1348-4323-ac79-bd57bfb5a2ab",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "16469a83-c648-417b-aa6b-7ecce9a4f47a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abc57447-7c8e-46b7-bc96-2e27d0b9d874",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fcd6393b-a690-4d38-9631-4c3f1a29acb8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452d45ca-7910-4497-94a3-9e0a35a5f4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4853775-46f2-4810-8d7d-9bd2b82ba951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6b3655-ebdc-46f0-a67b-a526a30ab86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "411075b4-bd43-47c5-9ac1-2bbb9d860b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39339c3e-92a1-42da-83e6-2e7a7166430d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2304bde-be69-45bd-9d4f-820854ac3fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f8d419-c65f-4587-84f1-afb2b002da13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055b3883-8d92-4ca5-9c0a-37de28402ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6b29f3-d688-4676-ab5e-af5f958a38cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de6c722-a01c-4407-9519-992ff02b2a2c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574e6562-a455-469b-8d00-d7a52d0d8a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab798d3-4c74-4d50-8511-fce9cd1af64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b26ad1-7d2a-4378-a7eb-daa1e6dd602a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f01f128e-9316-4e56-b542-4258f3953b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0bb33a-4f35-45a0-a5a6-75d191218d68",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557bb2ab-2593-4c38-a7db-3814aac794db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afdfc01-e455-4bb8-8035-151de44057e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498a8727-1396-4840-853b-57189806969d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e28ba23-c272-42ab-9299-369156b88406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92141e72-946a-46a1-ab7a-c5a0fc8c9501",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1a691c-6b33-4381-ada1-d18e9f17da3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adabbec3-cc0a-491a-a3b9-4c91e6f64bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c6195d-873f-47c3-81ea-fcf70f7a1fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1186dd78-205a-4b25-95a1-b73121b5ae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0983f02-751e-470c-930a-5383d756575d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec4b351-03b8-40c0-8a3e-68089c26d4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad24eff-5072-40cd-95cf-bc61cf8d27ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b20d16a-43bd-447b-a894-c3a716e8e2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c425b365-4a93-414b-b8d3-a8982d22e080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef2f031-23ae-42a8-8360-8dbc4aaad7a6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d455bb92-5fdd-4a40-bd03-32b6da9fef3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b52b74a-70a7-4e3d-b4f4-cd5d7f2fbb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eaa486-8ac8-4ca1-93ec-2796a0979251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "49565e40-c626-46b8-961f-bfae4078a4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a95178-573e-4290-a94f-9b4054dbafa6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c1d098-823e-46cd-9a1a-9792f12aa2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2feae386-b958-491f-ac98-71e7ec94c6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4e1ba8-c9f1-4b04-961c-c90647b59e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bbcf05-1059-47a1-abb6-cc367758a769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9eb315-fe2f-48b9-b884-56c04eabc24e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7193659-e68f-484e-94dd-8e3609bf4c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb027b0f-9bf2-41b5-9136-3fcedf4b96b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdc9e31-0872-4a8a-bf16-ab0eadf39d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b63c091-cf19-4b0c-b7de-efd8de0f340e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457885fd-45ab-406e-8b11-928403bec9d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10049c7-d4c8-4d5e-9b1b-6de0902f9078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c2467a-d260-4a35-870a-416705ac6704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed0cf3c-2b3f-4aa5-9dbb-35cc698ec072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fc4caf-23c0-461e-b0d2-27403e137560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2021a5-dd32-438d-a972-36d2c85ac101",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182e4254-f798-4f2a-9762-66ae344f002b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf514fb-e531-460a-953c-70362b9b3564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0655fbd1-7a43-472e-819b-d3d04f2fae61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6c2756-3ea6-4f1b-b8c1-cfaf04722365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cee012c-0be2-4cbf-8a34-308747a36c7c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0949ee77-ebbb-4efc-b2ac-1ed990488523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333b7d28-abbc-43d0-a689-b1babeb63da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23e071c-c451-4de6-8ef3-54efe9e0d78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd1a5f8-b21f-4631-b53a-5114668450e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb610e1-f3c4-412c-94fa-771d4aca749c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "463a2a99-9ed9-4b95-912e-55e9a3dd833f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9349ac-a434-4bf7-87ae-a5089fb2a88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f135c0-c5c5-426a-9797-d212299d0692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91d5c616-79a4-4a72-a328-112cf2568d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f573553-48f8-4be7-8f24-a27af95f89de",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c603c7-e3a9-4dfc-97e4-6ede5ad3ff22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2503ff0a-a3be-416d-bd36-51bc992437c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366b3675-d9c4-4ebc-954e-57cc4aa9999d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "21316aca-8d29-416f-b366-83db82c1e1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadea734-7621-4b54-9881-7c43e12574c0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9366d685-a543-4f06-aaed-a6c933a9227c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a052db66-ce0f-45e3-acb3-73c193781783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc38f9a-7c58-4e2b-9799-edb990af79d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d958c196-9bfc-42eb-96f1-efe88eb93662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a1555c-4487-46fb-b32b-fa47db6901df",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d877be7c-ccea-4024-bff4-19e212dc9e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a544e66-ca06-4105-9b8f-1599d6f19483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407ec288-4c6f-4150-8a5d-43e26f520c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce1b549-72de-4f78-8aa0-45ee9801050d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44abef09-7318-4735-99db-66c0e0fdd14d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9317fb02-8392-4b90-a211-663a87bb7348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d376019-03df-4998-960e-b963463c88d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7152f0a8-dcc3-4e04-a698-9812c12a99a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "47ac734c-7d47-4efd-b3ed-b083a990210d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13368ee9-3d18-4b4a-9776-5b4d29b8a8f8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79afaa5-f707-4902-882d-16fc58f6f0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d9683f-04a0-495e-9fea-f8aa6a9259d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87de83e-8d61-4781-ad47-77ebc406a1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bade799-77b7-4a09-8032-328a307316cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbed1663-eff6-42bd-ac3a-bd434012d0fa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f64244c-1990-436a-be78-2ba4ab783548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d4e7de-f69e-460e-ae6b-7386f8206915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6abb17-3cee-4f0a-bc3d-de4be708f6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbb5fea-608a-41f2-b813-c2f9c2efb2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ca514a-eec7-434d-8ec7-6ae101c38f13",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0fbf84-1bfc-495c-97b8-107c134602be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce09385-79c5-4025-9a1c-ed22024657e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9a600d-0190-48a8-88fa-888f50d4855c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5f18cd-f300-436d-b1ec-8c1d55ec666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76f4aee-fc2f-415a-be30-cc743ec42902",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca5b429-6f0a-47e3-a04a-1bb726b6b465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0f9b1c-4cac-42ce-82f8-bf20c6d21f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26650ab-5876-46fd-8fb4-54b79cc98f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3c82bb-c7b6-414a-9743-f6b2ff3cff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46413e9-a5aa-441c-a011-51b86476a0d8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b4ad30-2f55-4a46-b4b2-6a86cf1e4cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47f6df2-d839-4408-97f8-d1ea2d1e48be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56394386-8bce-45e0-8c4d-840be7e6e791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c62a53-056c-4c57-b15c-e2d764e236ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc8858b-6bda-4c84-9668-4fff9cfb1b06",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f5c7b-5d04-4c0c-a0c1-4844f5e0ca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a082f6-d089-40d5-842d-f6ebf4ce3ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70f8626-a65c-4f2e-ad01-b8b3780408a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "416d86a4-e2e0-486c-b459-9ebc034a9ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16de401-7837-445c-83d5-f108be04c0e8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87ee48d-6dce-42e8-a23e-36996afa8d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19835670-b5f2-4817-ba1e-4ce3d2250712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6c2e0d-8bba-4f6e-8a5f-6f19c1b60f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc1e52a-7f89-4255-98a8-42547d8a2523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7db5ec-a1bf-472f-9a06-ca8bde46fd0c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1b0e1a-e939-4c6c-b745-dc4ec5e3edbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cbd079-1236-452b-9e0e-993c9e66db44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb25863-bc20-4cd3-ab7b-bd8482dfd41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1745467d-37eb-421e-a551-912e6a06345c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8880ce2-12f9-4488-8207-f08b7f797c08",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04df2442-2e82-4388-987d-e95e0a4e2499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa333ad0-c69d-41d0-ad8f-c05aec6bcd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abe8129-4c3c-49ba-9175-0935ddb7c1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5801c1e2-916b-4448-be9e-cd1dbe969783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7642ca4-e158-47ee-90b0-c14ff3ab1e16",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbfdcc7-1b3f-4cfb-b547-3b2927772eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe0deb4-f392-4d8a-8725-751c901666db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cf8444-248e-434b-bcf8-0840d5b721d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec83ef9-1fe1-43b9-8730-893e9bc7af02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23bc453c-18ae-4ecb-a2ee-545b3cc4147a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07374ccb-6fc4-43ae-9f3e-5acde99ab059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbaa598-ebd6-43d2-817b-c3875c318ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2896ae21-7b88-495e-90f5-a3953a664f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24bcd87c-8200-4466-9679-058b6bd6df46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc41bede-59eb-4850-a6cc-93e8b315a81b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f301e7c1-b039-4c9b-b2ed-897e22570546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128f878f-5374-439b-94fd-0c3d85de51dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4891e45-a4fa-488f-8303-fd04f8d41006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3489e5a-0f3a-4b9c-984a-ea1ac74dae15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d184ae-0390-42b8-9c3f-9f2e3254c089",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7653c8d5-f21e-4ad3-9ba5-7af87e46eb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7613bb-e638-4a46-b43b-6ddc25c34e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae43ba-de18-463a-a168-1e644d264d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd86e7c-4253-4f18-bccd-bd52cad4dfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278d315f-61b5-4e61-bf3e-fa8fcb0f9e57",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d91c39-b112-4881-be01-f8deaaee3c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86c7a56-d509-48e9-a373-441758f13415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659d019d-534d-450f-8b8e-9233f07c60ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d50fe0c-35d2-4162-bb96-5b8b034074aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ce1bb3-933f-4af6-909a-7c48b31209d2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e912de5-35e9-4692-bb32-d16b7b3fd816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204b4801-7ab8-4462-950e-dd0b38f7baa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca9e83d-95a9-4b8b-9b6d-a05dbaafaf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da140a73-0116-4b9a-9fe0-1aac0e0d8263"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b2ba129-239f-48f1-9c46-b3dd4802e032",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac261c3e-f570-47b1-99f9-a1c9165b0fff",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526ac230-be14-486a-aad9-6d387764a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a91d5808-7a21-4ea1-aa8d-54e0f3068729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b3884c-72e2-47a5-aed3-8839b40908c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f19805af-8ac7-498e-bdc2-8caa1a01de52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbecbe63-3b46-4855-a10e-1c7d85e9c766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd39b885-d7eb-4643-acbf-5df316fe2068"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81dbbc91-f97a-4e85-adcf-7ad3dcd61106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57091aaa-86ab-4bd9-ac0c-5399a6d81e42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daa1568e-30ca-4f4f-b956-b8d52dac95dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e696c64b-ea9c-40ca-b24d-c5bd35ba5fab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b67be84-b2f5-474d-a066-e346ab5f7ce5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7cc5ef1-8fa9-4b37-9e8b-76b3ef212a21"
            }
          }
        ]
      },
      {
        "id": "d4d0e04c-ae31-4abe-9310-d53a9aa75884",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "64f2527a-c75b-47bf-86b8-d9e482bc0f31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73b0fe82-dcb4-4e0d-a0c9-a6607b1288db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5677d44b-99a9-4a47-b3dd-d00be78b9f2d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9d7e7-5610-4b40-9269-8eea16847cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427f4bdc-274a-4144-80c8-8815f066d305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0013c79-2db2-450b-8919-69e3e2ea648c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "26c317ed-6e0d-4e2c-8aaf-bdd06228caa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb8dc83-7e46-42b0-b021-8da1b487ad87",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04b7c9f-288b-4b98-b9ee-29625e11a9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f391ff76-72c9-42f0-896c-ef209039702c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c232494-9de1-49e9-bc67-fdaab8e61bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a529727-3979-46c9-8542-7772d29d6364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87534a3-f60f-4fb0-a654-9b6a8bb52416",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347c35f9-aa5d-4930-974d-c32c21659a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b3a7de-c418-4bfc-8ae9-7a9d5ecae80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f8cd9a-9b5e-4624-b971-f5274656bdb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b543d3d-3b32-4bcc-841e-3958445a6b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af28c3e4-ce47-407f-bc83-8e092f6fddb8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5469aa-4293-48c7-8054-b7184fd2f1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28273ff-844a-481b-8a7f-d08ba089e4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da60248-bf97-4a56-912f-72e93b4425d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e78f860-8109-4e87-8359-ca84398ab00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f30f85-908f-4fae-8fe7-2f51aa9e29ce",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43283394-6977-4243-bbc5-21202499388a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12092a9b-6ce4-4b97-9585-97c3ee7757d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c74e7c-c2d3-43cb-8818-0c109602d05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6feefc-72f6-4602-8bb0-5fcaeffb8206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7541249e-5a14-4df7-9b76-4c0e9871619a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dfff8b-5095-4e73-98bf-238e71098203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdc719d-ebb3-4c23-998e-2e6ca14fbb55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf92a47-cbe9-4fa1-88b0-1098475155b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d10dd405-4eb4-4093-8e14-edd9e76ab685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac9aa1-63dc-4e7f-8bcb-0011ae06e4e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f7267e-ca96-42d1-8445-434f0c225ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0941326-2b6d-4c83-8b52-0027a95fe60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aba712-9ce4-4ab5-9ae7-fa0e8c6fb351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "19e86176-e59c-4e88-ba2d-e6241efc5e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd8abb0-63f2-4c82-93e0-6f26f656ef4b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48a87f2-8625-40e7-b6fb-047cc8b7290b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02a993c-6d24-489b-8b37-81245e129cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8da3491-cc44-4cc9-b52f-0a296a3f6d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b370d0-97ac-48b5-a79b-804f8b8e7485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e43fff-4211-4798-a28a-8a780accfbfe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0ee149-4a58-422f-890e-0b16d3cad4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc01d7c1-6d92-4fcd-9853-8cf79d4b4212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60837fe8-c175-41a2-b4d1-c5cbb8fcdcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "091c5f11-7e86-4822-ae65-631df50864ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2a359d-7a29-4a38-9f71-3938cffe8955",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666bd6d9-2164-4f91-9c33-942672462253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f399b3fa-2318-4271-8057-4145a20c9a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b44624-9c18-4f26-8c8f-0397b58869ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c25b1bb-6769-4d84-a7ef-0dc277f944da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19212c22-f2bb-45bc-b983-54b2d59100bb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8fa6a9-8b56-42c6-8c0b-bf3e5d03d0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebebbc55-22c5-45bf-bc62-a651ec5b58cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61245a97-b137-41b4-8d0b-41cd2df6b7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1beafe81-ca6b-44d9-95ef-900becfed7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb9a66d-05fc-4316-adf0-ab39af40ca69",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0387acd9-9622-48fc-8583-36eecf973a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937d4a6e-d41e-4fee-8bdf-a3a32d535237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4723902d-39fc-40dd-8bd8-682d3f00f5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4631d0-d225-4f9f-ba01-46db7499a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6215b766-926a-4086-8969-04c372a75151",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5570f8ac-1190-43f4-8855-38b9c09f81be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b0a005-82c5-42a0-82da-5ca519c47728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9a2fe1-1649-4881-9756-35b78abdbe0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd449646-abfd-44d1-9e0f-9ac2b9d3f46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada288b5-ecdb-4ebc-9417-aa93e5a7c9ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a5a624-0093-44e1-b911-ddfa2ddcc262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d32812-cfc7-472b-b253-db8b9269f4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5cb7425-4c0c-4564-b175-c63601e82133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "db96819a-9e1e-4c1d-bf5d-55f254060944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdf3876-84f9-4589-a225-0f3b7c820a2c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45211158-69ab-464c-8f8a-9266e2f5bdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6e3436-e790-4c0a-8a69-95e698426466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e2ddde-3b6d-43d3-8ff7-b352ff4b08eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1644b87-adc4-4ed5-ac9c-14599c11ed74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e325bd-dcf5-4aca-bb2e-62c10836cd1b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9728bbcc-bbb2-4523-b677-0dc33a776a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b85eb61-ec0d-4451-8a6c-1215d15ee092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d7bcfa-6e91-4e26-afa2-af2574ebfffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a973443-e1a9-4e9f-ad48-07e734becd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8ee10c-cc61-466b-8a76-cef8c1a9b78d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc7c464-ea7a-40fc-af12-0fff89358ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0152c5cb-404f-40dd-ae01-e36cf1d94228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5f8795-a374-4372-bd79-863cab8aa72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e05b4e8e-a1bd-4347-9339-6419bc9f6437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6188a49-62d3-4ed2-b4cb-284c2e713806",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3892647b-b8f9-42c5-b7ee-7cc071ff9f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1f46de-3a32-4e31-8127-aaece3d65ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d895789c-2b5c-4487-ad60-d60d5b180131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a847db1-73ba-4b47-a9a7-b7805a6993c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2d4bbf-9ab9-4698-a114-201113f5858a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0c39d3-86f8-41d8-b811-b95b1deba891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a4670f-3dd8-4c7e-9439-c7b8542d7500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1379a1e5-1e8f-4a43-95a8-8e166cee0d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef24801e-abc0-4f5a-a244-1ebcf9388a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042f29f1-3a6b-4a52-95ee-25b6878b6b79",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a3a387-9fc9-4583-919e-3805b260c877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734b366d-0ba0-4ccd-955e-9015ee01865f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4985415-bc1c-4daf-886d-8adacd3835c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "229bebaf-596c-4cb5-b1cd-16d8483cb899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c05c7cc-4941-4ec3-9fc9-d99d21f42a77",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89597385-81ab-4e76-9109-b8f9ca4dffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c047c92a-3b01-468b-a9a1-73f0afbe7b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea894e3-8001-4ea4-9e4a-42fc7697b906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f131f5b-bff4-4913-9fbd-33f4eb4e0698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95d26b2-805d-42e8-945a-35824407ba14",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddd8811-876c-442e-9545-96fb7ed3669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7875715-0a99-4354-8db0-afe3e96476bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ca3849-e23e-4497-a49f-e7a534be6bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0f16f0-378a-4a8a-8064-d0011d56c0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222a7bea-23d6-4f44-b943-699a60f98ab7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3878e2eb-da63-4bbe-b791-278db898e33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cc3c2c-a7b6-474b-8a19-1d26c855d145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ade8de7-ecb2-483e-9b08-6f5c33d6d475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1c18f0-daa2-4d36-940d-25cce9a2480d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1508a8-cc6b-486f-a2df-2bed01a9b4fa",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a596cd20-9ecc-42aa-949f-e1b0e109ad88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95502d42-5071-4ee6-be93-9cdf8b8e07d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38f641d-bf1a-441d-b08f-8a22ff2e3cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3102e2-13dd-4f73-9090-c323c84d6be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d6bf77-6bf6-4c44-b122-3e0ba621a8eb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfd56f3-cbea-4b9b-90f8-2f8a518f3a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d545572-5bba-48ba-a9ae-1eeefed9f545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2b1b2a-7201-4568-9a66-478890c6d1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2263ef44-bbc9-45f5-803c-f5a757dd093b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3307d1-8c9a-4c3b-8261-b115652b5cf7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe38761-14e3-46fe-a766-161361548152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dce272f-2905-42ff-ba33-b2f39c2dbfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0ec93d-4f82-4cfd-8b04-1415b5e73a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef6697e-86ba-4fa0-84f1-b6c611638897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4daea21a-d510-40be-93b1-d49da09a50cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78246edb-448e-4e0d-b125-089d8f2625f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f6f2cb-7a0e-4bef-9433-2bdf8d755937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac74bad-5707-4748-abe6-1378448592d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a52c105-ea43-47f6-b395-c673403199e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e98bf86-d36a-4802-bde5-d89c08126fd5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf88c56-4c85-4dab-ac74-73182b3d4a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cfb5db-da0c-4736-af75-97ffc778946e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bac7ba9-c0a9-4c2d-8837-074771a9cc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22a37787-48cf-4839-b690-54fec415ecdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b220874-723f-4e69-aaf9-fba399877550",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b537d516-01e3-46ed-ac10-e2ddc06ddc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6781f2e-b386-40a8-afb9-75751ee17ab7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b902cb3-41ff-4668-9de0-f8c33878d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9a26aa-dd38-4988-ba5a-ab27fcf9d4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e872b1ba-4874-4180-b2d6-594b20a1b952",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e15d49f-cc01-4b51-9097-1d16f2fab876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21605bff-124c-4a59-a482-53efe1fa888f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ca7fca-a15f-41e1-9ab4-9b6c2b7e032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "444b8c84-35cd-44e3-b9aa-d0c747051c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae7d227-b01d-4884-93fb-666e4df35668",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5731c70-3b91-4c76-a36b-6ee2ae621de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842b8408-39d7-4e57-a297-751edcd3e4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076dce60-7bea-4362-a350-b78de14d073e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92bf4cef-6777-4791-8eae-ee4a02cf29e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea4efa0-1297-4d27-b4a2-adea344f4c4f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ba0a50-9799-464b-94da-7642ee2f1de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca2d595-2c37-499a-a39f-35ddb01d05eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93cb63b-59e2-4f2b-b86d-d3dae746d3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b95615c-1f74-42a9-83a4-d25b0c42ece4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34699c03-d39d-4185-af84-dfcf1c4cebe2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc31871-69ee-4856-8933-7a4cb3aa40b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff824240-7b49-4b93-a178-edeb0295fc67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8472cf80-5e51-4910-9d4c-1deee7b77cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b390a4-b1d7-49e8-a4f4-2ee6a7751098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e756ec-bc54-40bd-9e5f-6bf118c938f1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0430be-270a-4970-9ca1-4c494d02d28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4675c911-8ae8-4981-aa8d-9d68f162c466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3a8ba8-e35b-4ca4-9c4a-4bb1bb9e0f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "411368a1-08e1-463a-9405-863dc233d578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539d8e1b-e43d-436b-9cd2-7ec5c9ac174c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6134eb1-6290-4051-aed1-1ce1c01146bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b78797-d708-4bf0-ad51-6512145182d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda4e44f-e66c-4801-a8ef-b030e0ae4f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6298816a-a06d-40e3-9acd-1f559fd7cdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24ac43f-5a3e-484b-ad68-cd6180674002",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e187d2-4294-4873-a89c-06455235afc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8e8e05-83b3-4d43-9f7e-044048e301b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5554e2b-72d5-42f9-b09f-3e5669a9b750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7818291e-55a3-4f66-bb1b-8714f25a52d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ce43ac-1538-4912-8f12-b0df224872f0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45446c9b-6af9-4d56-b30a-b35248d6a136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2502827-b72c-4b40-80d6-84b22cc83e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b28f12-28f2-479e-b90a-729d80aae35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48fd511d-fd52-4112-9580-6724d287cb92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34be02ee-ab32-4deb-9f5d-335127f01ee7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb7a193c-c8d1-4e2c-a639-b2ad3d45e67d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc39967c-ac17-4c9a-b7e2-23dd38b485b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5e47da5b-eca6-4331-b340-5a371013fa2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee45da72-4a47-4037-ab2c-0b002d4b368a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92afae17-5818-4e01-a7ff-6aa529c1e340"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab1544f0-5fc5-4102-826b-dd1be2e38f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19c02bfd-d0ea-4bc9-8e9c-72c0c9a09690"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3ba46d0-d133-4b2c-ba47-1c588ef1e599",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07e96106-2212-46eb-bba9-7611f1ab9d1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b1ac7e8-8844-4861-8546-a3ba2d04954a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e72a921e-ea68-4e39-9931-d8782f83e125"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1834949c-d3b7-44f9-be57-ba071a8bf810",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df749ece-d1e0-45ef-be3b-f917cde82575"
            }
          }
        ]
      },
      {
        "id": "d60b146d-2664-404b-a108-d98802ba98e8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "37245041-a689-4006-a745-5c151ee10c6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04660a61-128d-456a-9f59-20ffd5dea1d6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5f00d8b-80b1-44c6-ba7f-4b58a20baa7b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c875807-afb7-4d05-9f34-67479e3d05b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03eca52-a88e-4919-99ac-d27c83850338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af5c837-7400-492a-a75b-ced6b59037b1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff547d7f-f62c-4377-bd94-37471105f023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0812d99f-4f52-4eea-89e0-dd87598f90d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1d9663-5a4b-4bb1-a557-1e3d6aff500f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8110abea-cf28-4f69-983e-630070ad25db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b91c6d3-81f3-47cd-87d1-77cedb81baa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6fef22-ddf4-40e4-b727-37b2b5eb2366",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19f3815-ca6f-4281-a1dc-fa47327476e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802f4f0c-8c9e-4f19-b887-701ab1ef5b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2487a0d0-378d-4ab7-80e2-2ac6b5a2bc9e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234fe0aa-968b-400b-b080-e7f4bc025eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46bdab61-0916-40da-acbf-e7a09e4698d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5f41de-bfe5-4146-9a37-66ad7d0f40bf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5751fb56-25b1-4ea3-80a1-887ccc46629c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c7642b-7dec-4126-a978-6363a85a780d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b950cd7-2ef9-4bf1-8dbd-ebdd1b78139b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46ef360-34d2-4b33-8616-179e631c9762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91210731-5d4a-4489-845c-ef5a0cd9bf8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17673b82-b94c-47f3-a87b-da5c4894dc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4c9278-c46a-455c-aed4-4188268b5e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922c9d6e-b1dd-4b23-b60d-91063d5c9828",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ba149a-a0f2-4f62-aa95-7dfc5903af64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d7a0314-0962-4ae2-836b-0b0b61037203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af38307-09eb-4999-8cd1-7845d33417fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe02103-4f2c-49ac-994a-1ca669acb716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228eb101-c171-4257-825f-d3f8e0506cd6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b55b72-692d-4e06-9359-e7df95c880c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e906cc-2c55-43aa-ba1e-18968c119692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf61f5a3-2268-459f-9540-fd3118f0444d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5ce100-fa18-4e5d-9c50-c2ec2bb4f39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144cd3d5-075e-485d-98ce-0f28db029760",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98403afb-38ed-4bc6-8b01-98cf7b189e3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "764647a2-620e-44dc-adaa-e2f313345b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4debbbd-6782-4412-b7ed-8e31d66ecc8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ce555e-e382-45b5-8f6a-97c378f12738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fbdd34-6a3b-4335-8215-8b69589f85d0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596b1037-fbb7-4c8c-97b9-97fcc854c2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761fa1d7-cc0f-45fe-80e9-3bb307036866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b359ac2-41be-49bb-8ad6-ee6d07d0a3c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba69e9d7-cdbd-4136-9444-9a760b468d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf879dad-ecd5-4fe1-8bf3-8549dd266207",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bd05b2-2cf6-445e-8cf9-5d19c18816aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af30a528-d661-4b58-a740-0c43ea73441b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6fa2e9-034b-4303-aa18-ccee6634e446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72753a49-616d-4104-ac40-4ab4b0f8ce83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01966ea-b8fb-458a-9301-9ee636dab3dd",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae62664e-0f3f-4216-96a2-3a5ae897a599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af471f6f-1eb1-4537-aa3a-9b2ec085ba02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0384a9ea-8d34-454d-98a5-dce14e600934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe84100-0dd5-4855-83dd-0b16ffd3e94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f8ab0a-9471-4763-a364-0963b7939f1e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd618d86-b8ca-4e3e-86c3-a5dab489cdc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed557b9d-ce40-42e0-beeb-b857ff258c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f1a441-25ff-4144-af7a-2d3c45010096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75ae69b-1f10-44f2-b72e-106517e78650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccafeb2b-c63d-477b-9d99-02a640f4a98f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412b2bc7-507e-4842-864e-39435f35da6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e7e037-2246-4d6f-b7ba-c83841e9368c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c57736-1130-4c9e-b7c9-fc50a949189c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0683ecb5-2684-4754-b743-1334d11dc3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dbce9c-04d2-4ba7-9cf0-ea503057410e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9924ba7-d6a8-40d0-976a-29636d5d3c10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a33ea8-a3f5-4a45-b86a-803dd6e28441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cb9215-1c60-4119-bd42-7c8eecbf164a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd79f5e5-15eb-47e7-8bec-1168c7c93951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9db339-317d-48d5-a283-e2dcebd4dcb2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3ad5e1-2d25-4124-aa86-224e75751a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20819761-abf1-48d6-b93f-8cf3b19a7b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f566c8-791c-42f1-8d25-d21ba06d5dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a690ac5e-70f8-43f1-b6de-e59dfef61dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35645bdb-3ba9-463b-af11-173738de5de2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0b3d3f-9428-4bae-89ac-bb79bdd8f198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f602cb-649f-48ad-b2bd-55767251b2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02e1fc-2a47-443f-a68d-23698a13d8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe034c4-6b81-4008-81be-8222719ffb04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae1bd55-ae0b-4bb3-88be-1cf538ac2da6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114c25dc-b017-455a-8f86-7dfd9c9b1e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbc4669-24ed-412b-be66-bd3a28d531eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb9dedc-133f-4eb9-971a-7175e634c9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a87be3-ef8c-45ed-b4d4-553b49d9a61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48ac20e7-58e1-4c3b-8a73-69e7cea0c1b0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc70c94-9dc3-4c69-bfab-69b284476912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "344ea18a-e8e7-4cb9-be69-5728c54da554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f538b5-2dc8-444e-899a-44e067ac4fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2759d6f-1844-4989-81f3-15c198190c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f92db68-27f0-4721-aa5e-df825e0f1497",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523539af-d3a3-4043-83fa-138d1fe074c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d811bc6c-a550-4246-b9c4-a416d873c550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3f362a-1fda-459f-879a-93ae4593d9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3e8766-0864-4096-9556-0fcd74f807c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e3d82d-9c19-49bb-88e3-112c34c26490",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eaa9520-0340-4e7f-b1e9-fc247d922da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd27a9d-d20a-49d2-b09d-3396e21e48ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41a7104-6ea0-4f03-b078-965b09b18a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266c82d7-ddb8-41e9-801c-ed7948f9ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad45b0b8-baae-4552-9d41-377c7d5b2856",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e304f1-bd6d-4b1c-9faf-d023c81f9316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0467ce84-03d7-430d-a292-62ede375006b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cd8236-2b1a-47e1-80b5-4b7fc3af304d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76dadc0-405f-4d49-95a9-110a44851b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0fa712-b821-4207-84b0-54b779a6fb94",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dcf4bb-7d3f-4e6c-8b14-c37b5db5e9db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5c0c0a6-d744-4b6e-9de0-c1ec63503e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8881002-703c-4b23-b89a-90a4bcd93284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d93b58-2444-4d58-8189-0290d0fc5dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2613a314-5b4f-4c33-baac-18e67461aea7",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416d3169-6975-4150-aa1e-3d05ade7bcf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6888cc2b-74a2-498d-908c-71d748fd5dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b99b11-3d76-4cf4-8632-fa38100a6bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c94a4a-3cb6-4b30-8379-77421d3c2814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bae7108-194e-437a-8f96-997c89bff1da",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c618d1-ef1f-4d4c-b4ea-dd5c002fb576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dcf7b7a-7ce7-4e2b-b5f3-0413ec8e3f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1cd88e-f567-4c8c-b6c4-84811b2b14e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417e494f-4601-48f7-bc65-ab6ae79bf2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3537655-325d-4266-9573-28d7a289bf9a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec30f57a-db6c-4c85-8f90-6639957d6c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b01712-b494-4ac3-9dc7-a067042a86f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7af4006-79f9-4e2b-bff9-e48b1a5c7c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad05f16-5c10-46ba-87b7-bc424afc3534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58b7bea-4c33-462d-bc0c-ec879948076b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b20456-30d2-406c-a6aa-83ab5462cc87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0f1871-3206-4d57-9e91-5894ee084396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2975b4b-f291-4ed1-b010-efdf5995a359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbd9374-5541-409e-a56e-bb785104e4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fcc74b-a3ea-454c-8bd7-b23e38ea9c4c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001c06e4-1b0d-4834-896e-20c734a1c6e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c815b0be-899b-4ac4-b218-373a94e60edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3036a7-1e2a-468a-bc90-bd66fc664c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca49c8eb-34f7-4828-b7c6-c7589812df68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4781000-7734-4867-b1ad-11bac21ddbfd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727e0044-c32d-4b88-8787-b4afd1baf1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c67c282-81a0-4bcf-bbbe-17d75c53e504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1416b2-f721-439f-b0c1-d670f224155d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51f2eee-47d0-4389-9c61-ee3ac5b01b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f84bbd-ebb2-42f6-8d6a-c73f85e9ad55",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c75c20-4a58-4e71-bade-e6d61aa47845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d33714c6-400b-4a96-af30-380b3a4ac0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1137e7d2-4891-40e3-a1ee-74639ef9310b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af29f2d9-69a4-4f81-9c28-d527f8b675dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e13a079-afc0-4ab0-be68-386f9cc573f5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428fa832-d6ee-44d2-a71a-32ce6e6f3f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a88a79-8747-4aa8-be4f-4116f90b6943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263f89fe-ffc3-45cb-a29e-2d254f8df7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de65e9b9-07fb-445e-9552-f7e8ec11ca5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb49e03a-5209-4e19-8f0e-445d8063b5a5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb5234-7000-4209-a198-25cc7692b542",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbeb9f47-0052-4f13-8ac8-ab6f5d5c1ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714c0651-b726-4928-b347-60bbb35c4bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6189b64e-71fe-44e1-be98-d757c54e1a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a23cbc7-7047-47ba-9e5b-d208204c154c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d68f7b4-124a-4ff3-9d58-fac0d99171f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2376ddf-5c12-460d-bc32-5300d65e6646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43abc627-a4ae-45a6-a828-dc6e4004fecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f2e44a-28bc-48e8-adc8-440212ca4e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b5023b-79b3-4cb1-8355-84d6004097c3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bcdaf0-c7a8-4133-9f5f-8d07f53cd667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0b84b8-a88d-4e21-b77c-10aa7a959bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8200ed-b6dc-457f-9466-64833be6cdbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08fcaf9-9604-4aff-82bb-7ff74bcb28d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4d3060-6d8a-4fbf-bbe8-438cc981e573",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f94ab8a-daa6-4153-abd6-725417acdcfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc53206-f82e-4687-9c7f-d15f997629b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa412bc4-8561-43fa-b75d-912dbbb4f888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149f1565-77fe-4140-b12e-9f97b632a7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c5b214-c735-4055-83f7-29736fd52122",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd1cf32-885a-4888-8148-3db0bc5331d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237f5aee-882d-457e-9163-3186a9513664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816ba7b9-3a9d-4837-93de-2ffdc44d5945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc3dce4-ecf5-4fd5-8b25-baa2f5dbf741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c0a8e4-40c6-4c7d-9c92-e6454adec788",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1185b5-497f-476a-a6d6-88c742b78bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d54d96b-8a87-4b34-bdfa-a5d64ef5fc94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1041072d-a383-48d3-b65f-3773a6051163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b02a5f0-ac86-4194-b48b-fc3ec51133c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970dd5ec-e593-4092-9ea2-7a8faf820dbc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270b5cda-9deb-4fc8-bb35-dc15aef560ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d129cc04-11dc-4fc4-9877-1d17b54afbce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4c1822-0a62-4cd7-85a3-4c73baf67cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9e7e1d-2cc5-4af6-9911-ac60dd91ee34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a041f510-c599-46b3-8776-8d117e0d0ce1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f68c95-5642-43b0-930a-13e77c85674e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2de6224-8290-456d-b587-358a44586145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c1aa25-4fd5-46d0-ab4d-b06ae666b30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0857f05-225a-4d36-8db7-8296e0af02b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3240af3d-5f86-4359-b2fd-dc51eeed6d86",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6effbf8e-0e95-43f6-b294-55e3bab47f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed3216b1-e0bb-4561-b1b7-82621564018b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1afd288-f4b4-4674-a6bd-f1211b144ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f794046e-dc89-403c-b1d5-ee63bc7d8deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8700fa27-e3aa-4699-be14-f1a8f3b29fd9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600bdef8-28c4-4d08-97fb-6399a1ca1449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9959848e-386b-47a1-914f-0377e4e682e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946b65f1-31aa-41f3-941e-3a805807777b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ffdc1b-6cd5-485f-9d0f-f2eb278d351c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f5624d-8815-4808-937f-60d7eb08d550",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1615443f-99d6-4280-b9c5-9b4516e5fcc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cbdcec-4010-442f-820b-bb6fa3666866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7d11b4-0357-4a50-89d5-7847e5eabe6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a58633-d786-4630-bc99-3ec1888d627a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b44b338-8ca5-4672-a39e-cce1e29f0517",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b000bb91-8565-4d21-9a1c-20ae3f7f9acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62fdd3d-8c41-4bec-b4f5-22f802dc934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a1d1ec-2d8a-461f-9767-cbb358f7c415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3b8cff-63d9-4353-8616-c14a7ee831a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20d6c3d-407b-429c-863d-746a6b082586",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f60a38-224e-4f59-b0ae-77573c218487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5c508f-2159-4bd9-a755-f59a1dde720b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ed8ba8-09d5-418f-8135-3191484a8101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c341e0b-8b9c-42bb-bb01-65625bff1a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ea74c8-9efe-473e-a188-6c7b6ac1d1d5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458b3baa-c100-4139-a8e4-793da8ed0b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756d3e12-cc24-4975-b326-9857545c9f09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd224aa1-bf4d-41a6-b39a-7b7b4440ce5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606d71cf-8b5f-4378-8478-e6d237333ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c13b04-04a2-49d1-84fa-eda66e5fe8db",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c8dfa5-2982-4b66-94a5-a85a1859dab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd0da2f-7ecb-42dc-9dff-59adfe64c928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbd19e2-b899-4120-a294-3f33111762e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde10c13-02d3-4e30-aee2-18c8f926a0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c79fef-f5a8-463f-a421-1d05432c0f03",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fad678b-8ca8-4f6f-b4c8-4ec431ccbe14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae222cf-77a0-4361-9c23-67a28282b4e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b219ac8-b3ee-4932-84d3-957040994392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171b76b1-fe69-4db9-b3fd-86ce5567fad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57370cb6-de4c-47aa-8711-3796d0e57a54",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f914069c-9c12-4cd4-a2ce-40f5547215ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf92f7d-d552-49b6-83ba-e80d9ae952d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8285e76-55c0-412a-ab06-cef0ac86fe9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee707721-71b3-49fc-a8ae-de4340f07966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe98ae1-88d7-48e1-a829-64baac78eb1b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5923da48-7af4-40c8-a695-7e3cfcceb6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bb56db-484d-4408-93de-b66cf530f06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50ef316-adc3-4614-b6aa-0a492d4e1256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb32bdd-0e3b-41bb-a473-7732746ff2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b999cde7-c889-459e-953d-c3d4d45f246f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4976b76-a704-4681-85da-612657469c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e077043-f623-42a8-a317-009eb34d0c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8573c708-c8d3-4e84-a303-9255a204438d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e244b22-6a57-4ca1-8644-9b3d8be467b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a657c08-38c7-4d27-a4bf-c0128d6f7ce5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818c65b4-ef2e-4c77-8086-dcf181dd5343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff87703-b34e-4210-9e15-ea7f0b54ab7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3aee00-01c6-4f6f-9867-bc8fcbe676a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a0729d-da73-485e-9c86-15eb36a923f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9e3e68-8c97-4434-9b2f-aa538d4f6e90",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83f81d9-d5a0-4d80-a34d-ee5282cb56dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f47f9d1-9339-40b2-a98a-e3b450c74355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36257da-3ec2-4b56-836c-8cde8aa0ce44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4101b7f1-0b2f-4dc5-ac99-049734c56136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b212f33-8628-471b-982f-79043ff5b871",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d90335-76a8-4519-95b0-6b9754a45994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcca5fc-cc63-45f3-a651-e0cc9dba946d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca65e84-e037-4cfd-819f-9e305df5a110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707db250-4b07-4a30-a7ce-dbecf238b36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0177fb22-5bd3-42f7-b7b3-e3875979d280",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfc9d77-14b8-4f50-bd6f-7111f5d3f6c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27d493b-602d-495b-bccf-6639342c0fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbbf18b-6189-4c9b-8d77-248d971fa5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b1f3b1-2c12-450d-a7e8-4c3fe7f70e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961fba01-087a-43eb-a914-c8920117ab87",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d8a990-ab32-45bd-8700-a4750f644b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295b4805-0e04-4fc2-b9e5-05f0128327ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05be1dee-667a-455a-a540-b2a351e54328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca05c0c-e980-4ca0-8ba8-c033e3ec8e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4df0843-e092-4ac7-9f28-ef63f56e7aee",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e259e-a138-483a-b7a6-fd5a9e5cc249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b899aaa-5842-49a9-bf10-02a8afb07f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d69022b-318c-484c-b0a8-e49dfe7f7a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cec7059-b159-4c1d-a959-1f6b99814409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa865a3-e1a5-4a92-9133-e72659eebeef",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2f7cac-a750-4da6-acb4-e12b6d8defc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3329d82b-0e4e-4d5f-b6fa-47d55b3dc17d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faf444c-b26f-467a-bcfd-0aa34d603322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a9830c-af41-40ed-9aea-67fe611db9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8de06be-0fef-4ad7-bdb2-4595e6883415",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d9ca90-7fa8-4ca7-8c35-b881111c1376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f528b817-4ba6-4fc0-b393-b1467d3f5982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5ecadd-ee09-4a37-b5d5-ad530c1dda8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfecd3f-5eb9-424d-896c-2b6b3cce314c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f299f9-7ef1-49a7-a459-b69ad226f0f7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c4dcef-f2a1-4966-899d-23625d474d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07ec517-f473-491f-a006-1f133f35696c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdd5c09-81a4-4c16-8b54-eee346250cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e3e6d6-ee3c-4d40-b9fb-ab80cadd6350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b81350-f501-4000-b230-eb6b5b461fe2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69de8df-a802-46b0-9791-f17fc24a55af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c951b6-88e4-4ebb-be84-1f7e47cbb220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bb750f-5e30-4227-a0f8-b016018a7f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f147c7ea-3dd3-41d9-ac3e-826a5ecb95aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf28c40-91b0-4739-8833-26220dd6cef6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0f6975-b816-481e-85b5-295d47ab584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545c3c95-bf0b-49d8-91fe-4631ebca730c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4652a664-21a7-4bd4-825c-27af40613ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f17323-2ffa-4398-9b86-c1a99842e13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0405807-c3e8-4305-80f3-26dbf0913e36",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09875280-42c5-4bf3-ab0e-a7cd646bc4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1de1d3b-1ff5-4e83-9a8c-b76709e35c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aeec983-f6b0-460a-8281-77b96a241eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c0ff1b-b5ff-49db-a8b8-96fa3f9e72a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b6a675-a5ba-4fca-bec7-abe113ae6d02",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263ccaec-7f7f-41e7-88c3-852c10ef58ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a50ec9-7338-4f03-bfa8-2acb8d9b8fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4b649c-234c-41b5-857b-693c312372eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146780d7-8736-4c55-b007-95248721942e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91117276-af3b-49d5-8299-015c67cc2e8e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63153a38-4635-4fe1-9da1-0fba55cb8ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c294402-db73-4bfa-a215-402782cf872d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b9a6e-3479-497c-bd57-784a461c2e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6546c07d-4f0f-408e-8b0a-3d690ae7c5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8745565f-6f98-41b0-9e7e-fe518f3636dd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d4ce7e-5c6c-45c3-bb8a-cf0f64d8c6c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a13c20f-2be4-4095-91b7-43c4e17f0933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a5925d-fabf-4010-a254-d22a3ae674e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a9ea70-55ec-4578-a245-c3c52fa77207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ea18c1-f020-4bd2-bb2c-0c1c86b965f6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd25187-e3d7-4ef5-8265-71d44bb0571c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71fa4137-2806-4768-a2cf-020797065530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8f1261-438c-47b6-a07e-7924c26ea2ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86640f4-6efe-4fcf-95d1-d28abb660960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b09b2f-d47f-4324-b44b-d619c0303423",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ee1a7-ccbb-476c-ae9c-9d4863ae5be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e229895d-1406-440d-9f37-a028df916c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab13b4fe-88e3-4c49-8637-d27986c6adb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4370bc3-4f99-4f08-8506-3bafd3265df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbf2072-8d02-45f2-aaa0-a85015b69a9d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a283051-7ec1-47f1-8721-dfc00a6de766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f372d352-c06d-40db-9789-0eb66da7846c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1de80ab-22c3-4003-90cd-7376a142539d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c61799c-d357-4a76-a057-d8b06685c6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f884217-5b3b-4f29-b025-c6f76c9631f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd24c5-ec70-4af5-aecc-7aab78c3b22d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbae57c0-6f42-4562-9e80-6f05e9f2d23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4277c2c-639b-4cdf-88e2-57d6a3a1ca12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9083f4-4234-443f-b3df-f98da73e9bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c22b941-a164-4267-980a-c0686d13f310",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf6fd9d-07e7-4702-9386-f07800ee2f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3304313f-d43f-4418-a75f-5eb2b50c1f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9503323b-ec63-422c-bbad-ef8a061d4ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933d4494-eed8-4455-9647-7d6ff4d6538d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81c9a44-9ef6-4d16-a509-96c357c34d75",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d162d3b-b731-43e1-8967-eba4058ae964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "326428e6-12bd-4e26-992b-c70c560e8e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3babbf59-9847-4be9-97bb-1ce41ba65dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a9d6d8-caf2-420d-94b0-563d34c6a8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4539b1f3-c3d1-4dfe-85f6-e47f5a1aac27",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f434d794-45d0-4ce1-ac9f-9d45505df5bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "990de29a-c3f7-481c-9282-827565f7f776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5c9e86-fea4-48bb-8e7a-20876e131b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a531ebc-2e2c-4b10-80c4-69526b159aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09372ba-6364-4e58-93b8-16a8e0f1646d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e8547-a34d-431a-9eca-cd849c010a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd61f941-8b3d-4230-b3e7-47a86585887f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06e48ee-827c-4810-b354-45aef43fa497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b18864-1cae-435a-93b8-7c0c91a39b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d362908-599a-4bc3-9d7a-4dad1b69442b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0a5a1d-3efd-42df-bc78-723bb0dc6718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a2d70e-e7d8-4963-aedf-7653d97ac454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "661125fa-a1b3-4646-a19b-381f935124c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77206cf0-40c5-4a1d-8465-ff61027b3d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f62ae9-db97-4662-b7ff-04b635d89362",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f3bd35-c909-49b0-a392-022fa03dcd8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5242c00-d3cb-4634-a4df-637e38ebb320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adfde64-8942-4095-8b05-208ea3c900d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6583bc8a-f23f-4496-a2ef-7a716e78cfb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f14a5c5-059d-4a34-8eb4-dbd2217d984e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecebf350-37d5-4a64-95a0-fb9c31bd35df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13226a25-a6a6-47ea-8f0f-2c2f791d68f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1d131e-bd36-4e13-af9f-ef93bf6a7e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e436fc0-b4c0-482c-869a-33bfefad1aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c7405-4195-495e-aeaa-3c681be4a593",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2e2baa-db7d-4f6b-8fdf-9aa343b23db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c4df6ec-ecb9-4fce-b9de-db106770f23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb969ed-b5cb-4e32-befb-7e7d0a47fd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ee75e8-9064-442f-aad8-fff8db6b12bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344f14cb-e99b-480f-a613-e7baa45a1633",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3d50a3-fd4a-4004-ab13-921f2381d6bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5382e91-993f-4804-9926-31c530459ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed5bb06-280f-449c-8bcd-c923dfd1fb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f9ea83-7164-440b-bbb0-349ac1c1b17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb02ad62-e640-4215-9196-0f448e996dff",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5a9c40-c20d-4d3b-8624-9373ed45249d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5531076a-f8bc-46e2-bd0b-fd76ec0bc231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8f66ae-8ab7-4ef2-be98-f4776d171da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff2c0ca-73b0-4c97-9c77-80e50bfd4db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d055f0-fce3-484b-913b-b51893eb97c4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d7b6ce-0e2a-4167-a586-9156317ba63b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bca7fc1-f6ac-4c17-b903-eaf0a7f60e2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5501eace-a873-4685-8b9b-161544b0bef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3379d58-661a-4701-b5aa-83ce03ca181b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a921474b-f3f7-47b4-9f4b-5da1d1760320",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c963b51-9501-418e-8ee6-15b7a2efffbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b6a01a-1b22-44b5-892d-83939d5d80d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631034bd-bead-477f-b3b7-0fb2542766fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb55efa-e19b-4ccb-9e15-25437c82013c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58554fce-bc08-48c0-95dd-9278214957a6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97439b46-ef34-45b2-b204-ec932848a0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae484cc-102d-4bf2-b456-7877bf9945f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7057eb-fb51-47d7-a7ae-e67b5dc4e99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f21cf5d-73b6-4757-8d15-1db10a82cca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b0a967-ec5a-42e5-a789-509aaac91398",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8c6ad6-4a5f-495f-a008-e88c2809b3ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96d275b-10f1-456c-ba32-0ba80d7aba44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263e9c92-8777-4ea7-8dbf-e7977a76b3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ca2743-4368-4d1b-829d-87be845d50ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931ea34b-5f42-48ad-b22a-dc4b941b5857",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ba2151-5135-410d-8c09-9b8cb8df24d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a92127a-f789-495f-9c7d-45f26e248259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11927dc6-6257-406d-998e-7048f9c628d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e348cc-6dc1-4435-a3ef-01b6adf73cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be41f26-53ec-4d14-a109-69cc071a1c35",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c342199a-a1a3-464e-aadf-9d742fcbb125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c2743e0-f01c-4967-965e-8b868cc431e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda8fdcf-3336-44cb-996e-9a0fab4e3332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5aed75a-f315-4e14-bb6c-c3cc2b7bb996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81bb6b8-cd50-46ed-867a-efdf772c672a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbde4fe-33de-4db2-a04b-a976d36aa209",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0cd0af2-5edc-47a6-9e60-d2fb121b1084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca30f65-8ac8-4dfc-9bb6-3211eb870f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587752dc-2f10-4845-a4f2-127fffd3a5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fdf61f-8c56-4882-88a2-894ebe0528b4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010c5091-4458-4d8e-be3a-4e30547a5575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36725923-896c-496e-8714-27970e0600ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758cb9b0-b2d2-4f20-9f0f-71b23eaf60fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6223b1f2-336a-4a9f-a03c-06e6bbc8bbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d131cb00-8cb1-45ff-9720-b6533f6f993a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c26f55-50ae-41a7-8a7e-80deb9cf3732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8274dc69-912f-4ba4-90db-c54466207085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053dc86c-a2f1-48a4-9d59-1289d3f84ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade69cdd-8098-4ae7-a070-733151e21d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefaf54e-f5c3-4c93-8550-a07b25eb96aa",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d727f653-293a-4e20-a7d1-8cd243db534f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6185643b-53e8-4bb8-a83d-5b8ff4d3ad16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24bb863-985b-4a9c-bdde-81a208aaadd9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b08f92-3088-40ce-af89-167c40ac4c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4368ce-0939-4465-aea3-0ae0fc7d3457",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1462799-c48e-4524-8d38-acf5248fd135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce30b732-bfda-4a13-9ea7-af1b41d577fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577f6e17-1dbe-404e-8d35-ca64237c545d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5484d879-387a-4d01-99f8-df75b8bd5518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eea109f-9c87-460b-b0ac-a48e6dffb6e8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927afaa4-eeb6-4638-a867-a0169d8742b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1e18c0-5a86-4405-b5b7-1b9c39b2a06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d0a47-ea2f-4f50-961e-465b16b7631e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68313820-4c9c-4263-ae61-4bd96460036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8289eb-2a96-4a57-b88b-77e1dd0fa169",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f051453-e459-4629-8113-bbc9d45b679b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88d8918-bbba-478c-9d28-223d06fa962e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2316dada-9c0f-4e4b-ab94-7319ebb36c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a48e4f-ced5-4bf7-9deb-e38e3c506079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb7f5c2-2c7a-4d28-8550-30b4e38f1fd2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fed9cd4-4a45-45a5-857a-6f3e90d56c43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e699f5-4354-4625-b1ed-e9bd866fbb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c22d400-ec29-45a1-acaf-a6f535316c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc58e0b-ffbc-445a-ba18-9d5d46dba876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccb751e-376f-4b2f-9430-1f36e21a354e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc88eb30-1b2a-4531-815a-0c7e8bee8117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50fdbeb-8bbe-43e0-9c4b-70ea73dc2a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd42d2e9-032a-4a80-a09c-b92ba67c464d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df6b9156-0a3c-43d5-9228-677d47d8a2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeabb2a7-7d9b-44c6-9be4-4d6f45bbbaa5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cffa4fe-f3ab-4004-b4c2-c239ea2f0539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a34fbc5-c2df-40af-aa1c-6225fb7df090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f986176-d55e-4e20-afb0-3934cefe80a0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2038c4be-8131-43bd-9d6a-634713f2c989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4571b7-02cf-4aab-a016-68ed704992e0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a60774a-ae4b-40f1-80bf-0a3dfb9b9b65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6515e8f8-30b5-41a4-a8dc-2d5bd72edb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "221823e3-ec76-45a7-ac34-050415b1bda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe53817-1cb6-4eb6-8f6a-76a112604140"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fdb1a66-f4a3-42f2-b284-2a4740c7a20e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4b947db-71d3-4f8b-88a5-e8a48b53b03f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "077b3988-cc00-4938-b7b5-31512eccc66a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3ef9db3e-b629-4973-80b6-181c00f898e2"
                    }
                  }
                ]
              },
              {
                "id": "f1bf66b7-7179-4087-a21c-799f12c12a50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4a9a019-acb4-4faf-82a1-3e82c8f61f8a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd526577-867b-425d-bf2e-546194b5cb5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1de9bf15-a4c4-4a3a-bed6-66826612bc88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e91f51a-1d16-4a88-9093-179fc05a61f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b33c882-bc14-47dc-ab99-5a35d00cdcb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06f2a7df-8f81-433e-b466-5eade7c7ca2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb35ae26-04c1-40f4-b7c1-576834a29c3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce1c3ec3-6d38-41e8-a7f2-939bc23c51a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a55c876-7f3d-4f4e-99ee-4ae3ac28cfd8"
                    }
                  }
                ]
              },
              {
                "id": "aa105778-7b18-4e15-944f-4fb4b5f5da3d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "eb7dc189-ba50-45ed-bf98-ca93dc597220",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aba8dbb-5340-4799-9f6d-67aee127176b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "38aa1a14-bd6e-4a10-9b08-d787e39be744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37ea79c-36a1-4625-b00f-7d1f99d5aa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a610625c-4cab-47c6-b99f-04fd131a52f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d8dc1a92-6e23-426a-872e-4a2e01d92423",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7eaad992-eb8e-4e7b-9df3-de093905367b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba8f5883-a74f-4074-9894-15ef0fae92fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7f11b9ed-3179-4b9f-8061-288f88d1bff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8833e358-af50-46e2-928f-7d0ef66d0c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f66a16a-8dc3-4b7c-adbe-f7527d448226"
                    }
                  }
                ]
              },
              {
                "id": "070c1d45-dfb3-4db8-be64-598a60115ad8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "133849d9-00c1-4ee8-b14a-b7031d2c8deb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c6973d5b-1ca2-415a-8698-a09344458b02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2dfcd667-8c45-461b-ab79-2e8a90b239e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3800b07e-31d2-411f-85a8-89b4b73765bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c89baf32-ba45-4b52-8bb4-5a5da50c8565",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8c3d16ae-bdd4-4574-9831-354a3b9531ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eae4cb42-6b99-4a90-8b1f-519cc7cba7eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb67e487-6c4a-42ad-88b1-b4c198fb7179"
            }
          }
        ]
      },
      {
        "id": "51f4fa56-cbff-491e-aeae-09e98f8eb82b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8fcf79dd-14bc-4adf-b6a3-a9ffdc65e80d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb16451c-5dee-488d-b708-1b2473977243",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa892cc7-9374-4054-9bd8-1a2c064aa0f3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bcb58f-9787-4802-aff9-a8eb514bf800",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd98f712-3aec-49cc-bd6e-a2fb230af783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5049bd19-2ce6-4b9b-8f81-d353b3ec5b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c4e5940-7143-4f65-9e30-13f17bde1017"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8698e618-044a-4e10-b7e5-915b0b0ee3b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48057f5d-3a9f-487e-be83-0fc58402ae4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae0dba2d-8ae9-4dae-8029-6f3e51c8b87b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55e3a7be-02a1-4cc4-b447-778d95a83131"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "500efaa8-49fc-4508-bb5b-a8190fdfbad6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa510630-5176-4688-a20f-863ea22d3046"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1db1acb9-9905-421d-996f-9123a0a4822f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d47080aa-7dd7-480f-8396-2257249475f1"
            }
          }
        ]
      },
      {
        "id": "a3a3f1bd-3e45-4e84-835d-a7586b2bc818",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "326d3323-ad57-46b2-82a3-cde4e48453cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1a1fb50-f1ab-4c17-abe0-02b3c695f7ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "285870d4-fb2e-4490-a516-4c78f116c390",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ffe67c2-ef9d-4cab-9da0-30c7c2181ec2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f3e02d8-b6ff-4d3f-a416-df00fb6eb1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ce0090-791d-4d4c-b7da-657949569b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15c4996f-529f-464f-9609-12a2dce46d34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12419ebd-3cfa-4888-b38a-57c526e6783e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6bbbfdc-8e1f-40df-beb8-a1fd27c575e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dde908c4-f0f3-4f36-b272-e42ef27b4b49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cda9b23-036f-4f78-ad4f-2a234688f21d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3e7a8d7-ccc7-434b-a3f2-dbd7a41d116f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d96efb13-1a68-4352-8c1d-e588d33cf969"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c12757e-20f0-4e31-a81e-aac22687ccca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76d37bf9-e2c4-4e02-af3e-9e0136a32aff"
            }
          }
        ]
      },
      {
        "id": "f6d0be52-f8e8-4b9b-8372-1819771aa191",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "64c6aef9-1409-46b8-8bfa-65c8dabb81ca",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abe0bcfd-7949-4f62-8169-4e356578c819",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36a7d608-f253-4a7f-83dd-4eacd98b2cbf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9625a6f7-15eb-4a8b-95b4-16a2f97db4c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c972dcf-5851-4e09-95fd-4ee73a8d8aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93da4403-19bd-4005-9403-11c44eb96d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3137dfeb-0f28-4154-b704-72fb1c3a640a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c852341f-3ae3-4912-931d-75807f14ad3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f48587b2-6a6d-4e37-8411-780fa78bd91d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efa5c2ae-53c5-4fb9-936c-bde7d3147543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9c81e21-d91f-4ff2-9c33-e9ac560e4366"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10a20046-bc27-4e22-a4e1-6faea5d3e2d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8e1e830f-d5cc-4b74-9293-350b47df4038"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1352607a-1943-4151-afb4-e01ba8f8d07c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41b189db-f2d1-4ce6-b747-e80ec3a212e4"
            }
          }
        ]
      },
      {
        "id": "f992f78c-4e5c-47a3-9854-1f1246209167",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9453f43e-7fa9-45ca-80c6-3d7e6569573b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "939f0be2-2aab-4b2f-9f53-1ab879cb09ab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8bff90fd-df57-4144-8809-c2ff0b7460a5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "076d75e8-6397-4d66-a92e-563f824f47fc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a241526-cbcc-4ddf-8568-8eaa2804ab3c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 178.6760563380282,
      "responseMin": 9,
      "responseMax": 1897,
      "responseSd": 309.02118413403736,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694910925197,
      "completed": 1694910991620
    },
    "executions": [
      {
        "id": "65deab93-86e0-46da-95f9-93f14ff513f1",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d2ced0d-20ae-4ed7-9e29-dec2b23a5e70",
          "httpRequestId": "eb1605e5-d161-4e1f-bca2-4d9cea32163a"
        },
        "item": {
          "id": "65deab93-86e0-46da-95f9-93f14ff513f1",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e4bae32d-aeb5-406b-b970-1ed6187c538f",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "82fcef2b-1b15-472f-990c-90045ec59364",
        "cursor": {
          "ref": "1ab6b6fd-9b32-427b-8cd4-575140e71236",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "50c4ff9d-3248-48ab-a8d1-190b7e0a3f1e"
        },
        "item": {
          "id": "82fcef2b-1b15-472f-990c-90045ec59364",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b83cb411-6730-4a6d-8993-7e006e0066ab",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "bb30620e-598e-4038-92ac-5d0da10fce36",
        "cursor": {
          "ref": "6fd68dc7-acd8-4cfe-bd05-59ad05e7c9c6",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "949e9984-eaba-43e6-b333-51ac6616724b"
        },
        "item": {
          "id": "bb30620e-598e-4038-92ac-5d0da10fce36",
          "name": "did_json"
        },
        "response": {
          "id": "e90c1253-a650-459a-9315-0370f7d05271",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66514110-07d5-4d00-b5b4-4fedea029c44",
        "cursor": {
          "ref": "b0dfbf94-2743-4bfb-ab1b-44255fc5548d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ee58e2bc-80d3-4d06-abf7-54f59fccc35f"
        },
        "item": {
          "id": "66514110-07d5-4d00-b5b4-4fedea029c44",
          "name": "did:invalid"
        },
        "response": {
          "id": "07833034-5bc2-4479-8c29-a85980318eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66514110-07d5-4d00-b5b4-4fedea029c44",
        "cursor": {
          "ref": "b0dfbf94-2743-4bfb-ab1b-44255fc5548d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ee58e2bc-80d3-4d06-abf7-54f59fccc35f"
        },
        "item": {
          "id": "66514110-07d5-4d00-b5b4-4fedea029c44",
          "name": "did:invalid"
        },
        "response": {
          "id": "07833034-5bc2-4479-8c29-a85980318eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21896d86-6249-4fa7-90c5-387faecd8544",
        "cursor": {
          "ref": "be01cc75-a5d9-4f1a-a37f-552da74dac3a",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8e82ef01-b2b8-44a1-854f-cd10d36fdc05"
        },
        "item": {
          "id": "21896d86-6249-4fa7-90c5-387faecd8544",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "176d213c-f2fb-40ae-abeb-2553b81eacd3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be824d8-d934-40c2-a176-936a03576fa9",
        "cursor": {
          "ref": "d97d45ee-2336-4911-b25c-c3b858b0108f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "76f1d3d2-498d-405f-ae8a-f5ce8c8db480"
        },
        "item": {
          "id": "8be824d8-d934-40c2-a176-936a03576fa9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5183fedf-fe93-40a9-b8f8-68cfe5f88ed2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19ecc8e-8c48-426c-aef5-0a2d89d476ef",
        "cursor": {
          "ref": "5b5117c8-31ce-46fc-a1f9-b6668926fbb6",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5a443627-d59b-4045-b4dc-10b6ac23629f"
        },
        "item": {
          "id": "f19ecc8e-8c48-426c-aef5-0a2d89d476ef",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "216d2705-a397-47a3-85ad-ab602455ebe1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a0aa73-8c39-46ba-95ab-19d0e618113e",
        "cursor": {
          "ref": "6d4fa1fd-dbcf-4d63-b82c-cbd4ff5cc048",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c0dfa594-0c63-48e0-9f31-ec2eb650272e"
        },
        "item": {
          "id": "f4a0aa73-8c39-46ba-95ab-19d0e618113e",
          "name": "identifiers"
        },
        "response": {
          "id": "d51e10c0-408f-45a6-a83f-f1e98eeee919",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67e312d-11d8-407c-b4dd-b80a8a97b9b7",
        "cursor": {
          "ref": "e661ae9c-5185-44d6-af03-fbbccf6c3a90",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "094d12c8-747b-4cc7-bcea-a4c0c129e3a3"
        },
        "item": {
          "id": "e67e312d-11d8-407c-b4dd-b80a8a97b9b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ad23a0be-cb39-4637-9dd7-4519ae709b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33443429-10f0-4a31-9d6d-69d90837e85c",
        "cursor": {
          "ref": "4466a110-0b9e-4755-81cd-2d07d553e386",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3c4220fd-7fa2-4209-b133-1133d05b84b1"
        },
        "item": {
          "id": "33443429-10f0-4a31-9d6d-69d90837e85c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7a7c8907-61b7-4b22-bc87-b51d862620ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1cfc26-3aa4-4a96-9aa3-28a65e0567c2",
        "cursor": {
          "ref": "0aaa15e0-6382-4e4b-9372-4b14e2797878",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a9ae668a-c088-4d31-88d1-e79209fedef0"
        },
        "item": {
          "id": "bc1cfc26-3aa4-4a96-9aa3-28a65e0567c2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a3265b45-9ccb-430a-ac90-30953098c028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7841b2e-74b6-4ec7-9415-b35344bc3819",
        "cursor": {
          "ref": "14606e20-73e4-4b4f-8c5a-7b6e52a221f8",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "70cfd866-e84a-4897-9087-432e6889a846"
        },
        "item": {
          "id": "e7841b2e-74b6-4ec7-9415-b35344bc3819",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6f882eab-885b-4d35-8955-219a398c677d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fa2900-8aa5-4b88-828d-9bad16c58fac",
        "cursor": {
          "ref": "1a950701-ef20-4ceb-afcf-eb314e4fe1f1",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a00d0421-e288-4cea-bb8b-10b296194994"
        },
        "item": {
          "id": "97fa2900-8aa5-4b88-828d-9bad16c58fac",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0f2a7696-bfef-40d7-96d6-c4782008e144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f35117-454c-4c7a-862c-c73d7474b06d",
        "cursor": {
          "ref": "a908be07-752d-436d-addf-f48a6724042c",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ab9077b0-b718-426a-b58b-65c28e210751"
        },
        "item": {
          "id": "d5f35117-454c-4c7a-862c-c73d7474b06d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "736ea6a7-6d92-4c60-b469-7304ef7dd0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6103c3f5-8e83-4d0e-aab0-1329fe8fe85b",
        "cursor": {
          "ref": "c69c6f27-5653-4106-a1f8-c72a9b796140",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "82a36a02-cbe1-4b56-a7e6-1d2042225094"
        },
        "item": {
          "id": "6103c3f5-8e83-4d0e-aab0-1329fe8fe85b",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a74e5c2b-16d1-4b57-8ec0-636425fe8e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e8c69d-9cd2-44fa-92ac-84087a1dfcb5",
        "cursor": {
          "ref": "788d756c-e716-47b1-8674-34f930a64379",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3748c6cb-bfaf-40ee-a076-1e9117ad192d"
        },
        "item": {
          "id": "d2e8c69d-9cd2-44fa-92ac-84087a1dfcb5",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bc83ccc2-90bf-479c-b5d8-3f40e5e15a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3390be34-11bd-4dd1-bdc7-265bd815dd85",
        "cursor": {
          "ref": "573ac73c-c915-4b14-b8dc-0641c56e1151",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "459f9316-c667-4a6c-96e4-785926548594"
        },
        "item": {
          "id": "3390be34-11bd-4dd1-bdc7-265bd815dd85",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "00455288-55a3-4227-afb9-1dc6e187689d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e252ef39-536f-480e-b3d1-ba2cea2e4120",
        "cursor": {
          "ref": "abba1d50-fd01-43c3-9434-beaa40d96c92",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b214d40c-2b00-4f3d-bf76-eafaaf71f615"
        },
        "item": {
          "id": "e252ef39-536f-480e-b3d1-ba2cea2e4120",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "21f85627-77ed-48ae-b2c0-d1c5f514ddcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5555d6-5bcc-410d-87b9-484baa44e0b6",
        "cursor": {
          "ref": "688ec7c3-4e9f-4e47-971c-98a1c7aca80d",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "06ed9686-b33f-4b26-ac4d-799e6ac5e28f"
        },
        "item": {
          "id": "9e5555d6-5bcc-410d-87b9-484baa44e0b6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1215befb-fea5-41c8-b669-a4e8d5bddca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a2325a-bbb3-4868-bdad-2915f0f00606",
        "cursor": {
          "ref": "8ab5af02-2422-4487-817d-4fedb69ad76d",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c3224e23-f575-4fac-a448-7ab641f22a2e"
        },
        "item": {
          "id": "04a2325a-bbb3-4868-bdad-2915f0f00606",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dc52ee05-d350-4602-b7cf-449dd8675066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49169b99-fb3e-4a77-a695-183dbbb1c8aa",
        "cursor": {
          "ref": "04272a6d-c07c-4d80-8e10-946838fb0729",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "30371d65-5da2-44b7-9e0f-5183995199a9"
        },
        "item": {
          "id": "49169b99-fb3e-4a77-a695-183dbbb1c8aa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b3a98faa-3bca-4419-aa0e-d41faa855163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff73fa0-777d-4833-ad58-c4e121ea6568",
        "cursor": {
          "ref": "2c8a4cf2-7c32-40a9-afda-5dd80ad6a88f",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5d17757e-810e-4c7e-9180-12fbdf81a20b"
        },
        "item": {
          "id": "fff73fa0-777d-4833-ad58-c4e121ea6568",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "953ca9ce-2105-4de6-bd95-017a746abbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11f7a57-90e7-4bba-91fd-ad204d40ccd8",
        "cursor": {
          "ref": "4fce88af-65e9-4658-867f-0c89f51d8337",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ac5a4e86-90f8-46b5-b6d1-2004687c3e54"
        },
        "item": {
          "id": "c11f7a57-90e7-4bba-91fd-ad204d40ccd8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6b3ac6a0-019b-44ee-824e-ca2192dd42b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf33c4db-74b7-4aaf-8c11-1b2888b7a8f2",
        "cursor": {
          "ref": "c68ee574-fe92-4287-bb3d-2f14887f2d20",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d22d38e9-7f0f-485c-8c4b-b4eb87854aae"
        },
        "item": {
          "id": "bf33c4db-74b7-4aaf-8c11-1b2888b7a8f2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b5e04b58-4091-49ad-a48d-49516a66fa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18bcccec-d00d-41d2-8fb4-4904a04c41ff",
        "cursor": {
          "ref": "0364030c-c251-4759-9b47-9af62271d519",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5ea3013d-717d-4623-bb91-2827b1c4ea52"
        },
        "item": {
          "id": "18bcccec-d00d-41d2-8fb4-4904a04c41ff",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bb632930-c5d8-4c20-9700-9ffbb455af89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505f29b8-5c1d-4508-8722-a1dbf4d492dd",
        "cursor": {
          "ref": "091f66f2-eedf-495b-b029-fdc696fafd12",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7c1f1624-8f54-4383-b580-dc265ffe8fb9"
        },
        "item": {
          "id": "505f29b8-5c1d-4508-8722-a1dbf4d492dd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d722e478-1ab0-45bb-9555-41c0dcd89199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d950c64f-08f1-447b-93b9-971dc65f46c8",
        "cursor": {
          "ref": "58fd312c-17a8-492f-afdd-d14840d83264",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f6f3df6f-4426-4ee5-8301-7ed7451d93cb"
        },
        "item": {
          "id": "d950c64f-08f1-447b-93b9-971dc65f46c8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c5e967e4-ce92-47a1-8b84-1720374d98d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bbb2e2-e693-4fac-b214-b15ce4474f94",
        "cursor": {
          "ref": "2cb3acec-7dd0-4a2d-aaee-405ab5eafb82",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1d54222c-e593-4dec-9ce0-e8fc7c61f226"
        },
        "item": {
          "id": "93bbb2e2-e693-4fac-b214-b15ce4474f94",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "63849bcb-4950-4e9d-803b-93fc3fbddf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2fc534-0aac-4e8a-9f78-d19c79453237",
        "cursor": {
          "ref": "c433656b-0acd-43d9-b54e-dc103bfc1c21",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f37d3183-1174-426e-88a8-091c751f04cc"
        },
        "item": {
          "id": "5d2fc534-0aac-4e8a-9f78-d19c79453237",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "41e1c7f7-af42-4ac6-b294-6b2d07ff48fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2025775c-002f-4d54-9552-dd83dd18836f",
        "cursor": {
          "ref": "0166b19e-9de3-409b-920c-6177c845cf76",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "65be27d0-4410-4905-a270-569bf82ed963"
        },
        "item": {
          "id": "2025775c-002f-4d54-9552-dd83dd18836f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2b86e585-4136-4e73-a43b-ca58718ed9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488e93d3-abb1-47ec-b754-6c0de705e7f3",
        "cursor": {
          "ref": "db6f9116-df0b-4df5-a976-4e5bef2e2a4d",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db6c1958-96d2-4062-bcf0-642c2f25eade"
        },
        "item": {
          "id": "488e93d3-abb1-47ec-b754-6c0de705e7f3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4d27dd79-a39c-45b9-8574-a501a9e9971b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c574e4a-3a9e-43a5-a04d-dcba1a54ad06",
        "cursor": {
          "ref": "6917305e-a699-494a-b349-15d6c7ae17d4",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b672c230-424a-48d7-82d8-d886fe16c08c"
        },
        "item": {
          "id": "5c574e4a-3a9e-43a5-a04d-dcba1a54ad06",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b2abb08e-8b7a-476f-8f4c-97d8362a263e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a140ce3-b4ac-40ca-9298-3e2bd73d0519",
        "cursor": {
          "ref": "288c1af3-064f-4eb0-8e97-e3a08aea3569",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f9cc4e51-afb2-41ad-9882-5b8cf42f931b"
        },
        "item": {
          "id": "0a140ce3-b4ac-40ca-9298-3e2bd73d0519",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "17da2e0f-ba8f-47da-8f1e-805e114d8fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279f809c-8e4f-44cd-9b2b-044e46b84381",
        "cursor": {
          "ref": "0b0d9155-48e9-4b05-b43e-5ce20837a923",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6aba8f3d-5a95-47b6-a815-54ebc6f5626c"
        },
        "item": {
          "id": "279f809c-8e4f-44cd-9b2b-044e46b84381",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "52de93f7-f1ef-45b4-b18a-6b260f6e5f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f6f714-573c-478c-b68b-c7982e8b1f53",
        "cursor": {
          "ref": "993e3c7a-fad7-4cdd-82e0-a08bea89fcef",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b8c0d0a1-ee05-4d87-a2c2-34ad66f9df5f"
        },
        "item": {
          "id": "b7f6f714-573c-478c-b68b-c7982e8b1f53",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9cc79497-6581-4b47-a59e-5cd093975e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6f71b9-c61d-4193-a973-afb0bedb6387",
        "cursor": {
          "ref": "5c059ef7-ff80-4407-b5ce-1e8cff33694f",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1c8c50ae-b92d-41ee-ba1d-71478729042b"
        },
        "item": {
          "id": "0e6f71b9-c61d-4193-a973-afb0bedb6387",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f4e453c5-2232-4d03-bbd2-2e054b10a5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e20659-1f84-4cd7-8360-2ad81814dbac",
        "cursor": {
          "ref": "e865c34a-1590-4f54-81b2-88d0f280264b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4742dc08-e8bd-4091-ad24-a368966ff988"
        },
        "item": {
          "id": "49e20659-1f84-4cd7-8360-2ad81814dbac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4cc78537-6079-4dba-a91d-a3091cfcdbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ef9868-e8b6-44d1-8e42-0b5c2a9a58e1",
        "cursor": {
          "ref": "ea3dcc6e-44ce-43e3-8de7-f67dcce79d82",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c7f0e0b1-8201-4b4c-9e90-186fd813b7dd"
        },
        "item": {
          "id": "57ef9868-e8b6-44d1-8e42-0b5c2a9a58e1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "50c28476-c771-4da5-88c6-5bc7fc8b561f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ecf7f2-c191-464a-be11-0eaf7f83755c",
        "cursor": {
          "ref": "47aef88d-fe1c-481b-9d42-25160c780509",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cbb2ae39-9da4-4aec-bfe5-acb47626e62f"
        },
        "item": {
          "id": "84ecf7f2-c191-464a-be11-0eaf7f83755c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fa2a9a7b-8e8e-4819-8d51-26f3458aec19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "03e674d9-27a4-48ae-a1dd-2bd3755e6829",
        "cursor": {
          "ref": "c154b73e-022c-4544-ac01-a4204f361046",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e785dc73-30eb-4104-8cff-13288b73df44"
        },
        "item": {
          "id": "03e674d9-27a4-48ae-a1dd-2bd3755e6829",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "12e7299c-8a3d-490c-9f5b-a2aba07b7802",
          "status": "Created",
          "code": 201,
          "responseTime": 1897,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ab5ba8df-db0a-4788-bfc3-11daacd24f34",
        "cursor": {
          "ref": "aff3998e-1a5b-4af3-8db9-ae22072da10c",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5b0504d6-f0e6-42ee-85f2-51a2f35c0d66"
        },
        "item": {
          "id": "ab5ba8df-db0a-4788-bfc3-11daacd24f34",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e10c0d96-1be4-4c0b-a260-3425a10a9c91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "875a96ca-8060-47ba-8792-42c94336c525",
        "cursor": {
          "ref": "15097545-ca7a-4aa1-a781-17f25876256c",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1575fc07-8a6d-406d-a519-16e342a680bd"
        },
        "item": {
          "id": "875a96ca-8060-47ba-8792-42c94336c525",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7faf714b-6538-4637-a689-6e9fdad69e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c120775-cd06-400f-b192-9acdc3b1ace4",
        "cursor": {
          "ref": "46f9bc08-471e-4f54-b57b-6c99af4c6c92",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4704e150-9178-4352-8af7-e069d76e6836"
        },
        "item": {
          "id": "1c120775-cd06-400f-b192-9acdc3b1ace4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5f984c4c-4cdd-43b6-a52b-00bb6e21db8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "79d554b9-ef2f-4733-a491-1f1a4c9603d2",
        "cursor": {
          "ref": "eb4e3adf-d57a-42a5-b53e-61592287c189",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5cb1d968-518f-4c4b-b8a4-3965029efefc"
        },
        "item": {
          "id": "79d554b9-ef2f-4733-a491-1f1a4c9603d2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b40073b3-86b0-44b8-8c3b-cc8e0d25666c",
          "status": "Created",
          "code": 201,
          "responseTime": 1464,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "27f70bbe-22f3-4fff-8957-9dbd57359795",
        "cursor": {
          "ref": "94704b07-522e-4888-bfb7-84fdc6450870",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "819ff633-22ba-448b-89be-2bac5b53aef1"
        },
        "item": {
          "id": "27f70bbe-22f3-4fff-8957-9dbd57359795",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "75430107-c802-4518-ad9e-6fbc156929ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c595b00e-c8f7-4e55-8dea-3a4135156ce5",
        "cursor": {
          "ref": "175b5680-3458-47ae-aa60-99e27487764b",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8cd14cf1-2355-4836-92f7-d4cd8ff06ef0"
        },
        "item": {
          "id": "c595b00e-c8f7-4e55-8dea-3a4135156ce5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3fc84e56-e2a4-4fa9-88d8-f3ea324e6b54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1203,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fdb29d17-da41-45d9-b8dd-b9b713f0281c",
        "cursor": {
          "ref": "91d9e5c4-ea3e-460c-97a3-b2d571acc2dd",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9eb9d606-bd23-49bd-87ba-01fec23a03c3"
        },
        "item": {
          "id": "fdb29d17-da41-45d9-b8dd-b9b713f0281c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "df4976d9-85ca-4225-b11a-83bc2f0b8044",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9ebf3d6d-faf2-4d3a-82d4-8d5b061f0beb",
        "cursor": {
          "ref": "511aad6d-2e11-4841-97ea-b26b3e7757b9",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "29fcfed7-457c-4b6c-b78d-2876c8ecc082"
        },
        "item": {
          "id": "9ebf3d6d-faf2-4d3a-82d4-8d5b061f0beb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "60ff3b12-7e84-432e-81b4-8035c225a020",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "396b441e-44bd-4fcf-be0f-5c200aaa46f3",
        "cursor": {
          "ref": "a44deaf4-859b-421a-8ec3-af970f4182aa",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fb07c225-a382-4d69-b8f5-6cf23bfb2d75"
        },
        "item": {
          "id": "396b441e-44bd-4fcf-be0f-5c200aaa46f3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2ba3b462-428e-44b8-985a-4e8926657c51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "23b29d75-23b2-4152-8796-e6d2876c271c",
        "cursor": {
          "ref": "1f56670f-8bc2-4b21-ad2c-7301a9d6f43b",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0d86bae0-c1c1-454c-b004-1eeeb2f2aebc"
        },
        "item": {
          "id": "23b29d75-23b2-4152-8796-e6d2876c271c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a7637b67-9c0e-42dd-833b-34ffbd2416e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6ac8e76d-5c33-4ab4-b73f-d06b28d4d2df",
        "cursor": {
          "ref": "d73531c5-96c7-4230-a664-65c6e77ef171",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "205d4a3f-7f41-4891-884d-1a448510aff1"
        },
        "item": {
          "id": "6ac8e76d-5c33-4ab4-b73f-d06b28d4d2df",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "408e908e-5e61-4bb3-85c4-051f64d64ca0",
          "status": "Created",
          "code": 201,
          "responseTime": 1429,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5e80e543-363f-4c74-b5ec-5ff64196be67",
        "cursor": {
          "ref": "5d058067-38f6-4e73-a8fb-b82281fec43a",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "54142d99-c672-4e57-82f1-a4de53f44208"
        },
        "item": {
          "id": "5e80e543-363f-4c74-b5ec-5ff64196be67",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eb427f12-bee7-441c-82f6-d78e83cf7701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b10b869-5174-4d96-b0c6-2daca26d7a00",
        "cursor": {
          "ref": "f5ac9ef9-2d91-4b6f-83c1-651d699de8f1",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b6725680-cd99-41b3-9bd1-92cb5dca528d"
        },
        "item": {
          "id": "2b10b869-5174-4d96-b0c6-2daca26d7a00",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3f043c9a-e7f4-4d86-b3d3-ea721a5397ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9088d70-ea5a-4b71-9a84-dd71aa51fc0f",
        "cursor": {
          "ref": "c61db3ba-b7d3-4748-b3f6-62d2a0660aaa",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d2120112-803e-461c-98da-100458025232"
        },
        "item": {
          "id": "e9088d70-ea5a-4b71-9a84-dd71aa51fc0f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "00571475-f5ed-420a-90db-ff683874e2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c003fc1d-6875-4291-9125-f84d74e3fb17",
        "cursor": {
          "ref": "cdb45bd5-32f7-45f5-a9f7-ca57882fb011",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a5cc6fad-ca44-490a-acd5-c5e0abdeaad0"
        },
        "item": {
          "id": "c003fc1d-6875-4291-9125-f84d74e3fb17",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d0d48f75-01c1-4199-9a67-f59810c94140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766c3081-4910-4126-aebe-d953fc6bb817",
        "cursor": {
          "ref": "d9fd99c2-773b-4247-8e25-9eb0a71a8cd8",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "58a4cd22-891d-4c43-853c-71d492ef684b"
        },
        "item": {
          "id": "766c3081-4910-4126-aebe-d953fc6bb817",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5957b85c-d0f6-4169-99d4-3fc7560a1a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af8ae21-b4c4-4cba-aeac-05407d7e40f2",
        "cursor": {
          "ref": "dec61c77-7225-41bb-b1da-f74132d45ed3",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a2882088-4010-4075-a8b3-c63d8c5576f6"
        },
        "item": {
          "id": "4af8ae21-b4c4-4cba-aeac-05407d7e40f2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "59b80c1f-da90-4011-95f2-5b3513f1ad72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e68e83-bc1a-4de7-b936-18ef6091dd38",
        "cursor": {
          "ref": "94d08db4-95c0-4cea-bf58-fd005854a554",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b78c8507-87a2-45f2-b8a2-ff32f74e9032"
        },
        "item": {
          "id": "e0e68e83-bc1a-4de7-b936-18ef6091dd38",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "63bc251e-b528-470d-8f36-12d27f8154b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b93647-e51d-45c5-9ee5-7b6c522d010c",
        "cursor": {
          "ref": "88cde73a-60b5-4a8a-9964-a2cef895de79",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "50a1f302-95fe-4293-9c24-e859ba7795fc"
        },
        "item": {
          "id": "01b93647-e51d-45c5-9ee5-7b6c522d010c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1ae6b204-1ddf-45e4-903f-9a60a79017ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd0f328-64aa-47c6-bfeb-0f597b0bc9bd",
        "cursor": {
          "ref": "e4dcc76e-6a53-4c65-845d-f0a9530f5777",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4b737bc4-7b7c-4ca1-98f9-2be80660fa43"
        },
        "item": {
          "id": "bcd0f328-64aa-47c6-bfeb-0f597b0bc9bd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "95d32826-45fa-4651-9009-9fa49de643bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cde522b-b13b-4563-bd70-33bdbb58396b",
        "cursor": {
          "ref": "ee0ccb33-0354-434b-b244-b5bb894faa2f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "41f98d9e-97b4-40ea-9807-dfe9faa03a28"
        },
        "item": {
          "id": "3cde522b-b13b-4563-bd70-33bdbb58396b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bb38bf70-42f1-43cd-a3b8-74dc8b8e2a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9974dd-d46d-45e0-9409-c892d3333620",
        "cursor": {
          "ref": "984e4e66-6c53-4618-bf68-cd2b13b6d37f",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fe0dd14e-a052-4238-a865-ed1261269f71"
        },
        "item": {
          "id": "9d9974dd-d46d-45e0-9409-c892d3333620",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4fb6bb08-6e51-47ad-b7c5-5099def770ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8423c16-347d-430a-a561-2df8cc5c9abf",
        "cursor": {
          "ref": "b59343ae-bd46-47d0-bc62-445847f5b4e1",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "da640223-44bc-45b1-b799-5afacd113353"
        },
        "item": {
          "id": "f8423c16-347d-430a-a561-2df8cc5c9abf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "45668b2c-caae-4680-982c-0fdfa97c5c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e52df3-31f2-4bd9-a722-1ccac2c7f822",
        "cursor": {
          "ref": "6e2dd24a-edb6-4017-a02e-dbc7eec828ea",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2723d6ed-fd0d-4bf4-8d26-04ec02c84b63"
        },
        "item": {
          "id": "52e52df3-31f2-4bd9-a722-1ccac2c7f822",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37c7baa5-6160-4577-be53-9b709f35553b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5729dc-1ed8-4031-9c23-e6fa70354d91",
        "cursor": {
          "ref": "a9ef58c6-5b68-4dad-82b7-a09ef77cda8f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "af9823b4-a54d-45e6-bce2-daf0b68dc02c"
        },
        "item": {
          "id": "5f5729dc-1ed8-4031-9c23-e6fa70354d91",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "41654fc0-f003-4441-aca2-1d95e44ed079",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1170,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "417cfada-8294-4b75-b164-9d0bc5dab8d0",
        "cursor": {
          "ref": "52625ef4-5fa4-4a4b-bbff-4cdbf8cf2e56",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f0d2b0ba-cef5-43d8-b2a0-551c313e67ad"
        },
        "item": {
          "id": "417cfada-8294-4b75-b164-9d0bc5dab8d0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cb25f625-f11e-4c14-a770-8da0c8eb7542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1219,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "95faa36d-934d-4beb-8b39-58fb84c73143",
        "cursor": {
          "ref": "1a2fac59-54ed-4da7-a85e-ccd796487172",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "70c9245a-19f2-466a-b62e-bce22242ff47"
        },
        "item": {
          "id": "95faa36d-934d-4beb-8b39-58fb84c73143",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "64e0dee0-7cde-45e3-91f6-f42e057e875c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "17598adc-a64d-4117-800a-904908af6b17",
        "cursor": {
          "ref": "10146313-e563-49e2-b340-9e9c2226942f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4954e01d-5e36-4c9f-ac47-cc4f852e364e"
        },
        "item": {
          "id": "17598adc-a64d-4117-800a-904908af6b17",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ec46927-d809-44fc-be3e-98f6205ff4db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1200,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8e3caafd-c43b-4448-ae81-61d6a137be1a",
        "cursor": {
          "ref": "0a0fec80-18ff-4339-b1c6-d8c765cc484c",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "539cdfa7-e813-4932-8511-b57aa669ba44"
        },
        "item": {
          "id": "8e3caafd-c43b-4448-ae81-61d6a137be1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c006d759-4743-457a-bed9-47172cbc6448",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8736ac9f-ad4e-493b-a9ff-1a8870837f80",
        "cursor": {
          "ref": "383a4a5c-6d00-4114-a964-731f33e2aa72",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "083de183-e5df-4f38-af3c-61f4d2597e25"
        },
        "item": {
          "id": "8736ac9f-ad4e-493b-a9ff-1a8870837f80",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "739a3f4b-fd36-47c6-b083-8e637cde28d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d7ff91-2358-463c-b0be-dd06ce0e2b7a",
        "cursor": {
          "ref": "f01c912d-d2a6-431f-8a95-4b4ef2e6d0ff",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8dd0b02d-472d-49d3-b7a5-36984dc491cf"
        },
        "item": {
          "id": "55d7ff91-2358-463c-b0be-dd06ce0e2b7a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "59cb6ab9-20d4-4f91-8708-eec247fc36e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bad75ea-798c-4109-aeea-d1f8c5b5e468",
        "cursor": {
          "ref": "a1ed6d4e-48f3-41f1-ac23-58d3da8b42b6",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f73adb0b-8a55-45c5-8ca9-3789299e0a69"
        },
        "item": {
          "id": "9bad75ea-798c-4109-aeea-d1f8c5b5e468",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d3bfc591-6fab-4903-973d-aee22f144398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ff12c9-0e95-4537-b72e-c46d6e18efbf",
        "cursor": {
          "ref": "1d4fd9df-9da9-4202-ae42-5c710de7bfc9",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7bbe3067-7b3e-4625-b1d0-8bc21db21bd4"
        },
        "item": {
          "id": "21ff12c9-0e95-4537-b72e-c46d6e18efbf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f5e5a033-2ace-4e17-b2be-0465ef112e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400933bb-2b97-4e3b-8305-c61bcd706d2e",
        "cursor": {
          "ref": "24636ff8-31b5-4c24-818d-43091a208882",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a333d870-e019-46f0-99f9-724dbbfccd25"
        },
        "item": {
          "id": "400933bb-2b97-4e3b-8305-c61bcd706d2e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "06e4ec73-cb23-43bf-8b79-f866a7b82c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8c9eaa-1f56-404d-a831-7cc746d3d2c7",
        "cursor": {
          "ref": "04400816-5978-465d-b83f-6f05dbdad9ad",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ea4fa878-87b3-42a1-81fc-542131df700d"
        },
        "item": {
          "id": "fe8c9eaa-1f56-404d-a831-7cc746d3d2c7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "00036c76-6b41-40b8-b935-a1ab05403532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d83bfd-8dcc-441f-931b-632d1bf3e964",
        "cursor": {
          "ref": "2b2f6fe4-df63-4e04-a4be-0c8ee7d5cfe4",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2c93fecb-c795-41c7-9de1-29f56d11588a"
        },
        "item": {
          "id": "f7d83bfd-8dcc-441f-931b-632d1bf3e964",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bee19323-8d9c-4dbd-9fdf-e1dd870dc328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f9f553-67cc-4a3a-bfbe-211b14ad47e5",
        "cursor": {
          "ref": "f7673d50-8772-4783-8378-32c69100924e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cd120902-645c-4ad0-85ab-c5f31c218b2e"
        },
        "item": {
          "id": "b7f9f553-67cc-4a3a-bfbe-211b14ad47e5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ac95fa55-b4af-4aa8-af16-2d2707077d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767604b4-d32f-493d-8c2a-03690c5213c5",
        "cursor": {
          "ref": "53376889-55b7-437b-99a3-583ff359c67f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "75177fe5-0bf8-4873-8330-b1ec5bb20acd"
        },
        "item": {
          "id": "767604b4-d32f-493d-8c2a-03690c5213c5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c8306651-31dc-4456-b1af-886cb6d52ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e0defb-2ea4-43a7-bc8c-74ea4d6ada22",
        "cursor": {
          "ref": "7880b27d-8d02-44ea-a174-431a967796b9",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "89bc095b-9d20-49a5-bb66-e2b28a589b25"
        },
        "item": {
          "id": "c7e0defb-2ea4-43a7-bc8c-74ea4d6ada22",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9bb1b638-9542-47f1-b765-914f4bafd2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041f3200-fbcd-4859-8398-2bb075b04699",
        "cursor": {
          "ref": "32455d17-fa8e-454a-9e5d-e1f4ce6245d5",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a346b45f-3010-4ae6-9ddb-772eaa5006d9"
        },
        "item": {
          "id": "041f3200-fbcd-4859-8398-2bb075b04699",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "08ff9157-f75a-4f21-b999-5ba78c88b1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9be99c-33fc-4082-9807-cd46c15438c5",
        "cursor": {
          "ref": "63517bfd-cc2c-4636-9a3e-1020e05bb6e5",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0f044fd3-f02f-4d51-85c8-05df341e8ee5"
        },
        "item": {
          "id": "ed9be99c-33fc-4082-9807-cd46c15438c5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8901ea30-1dfb-4407-b9fb-b096937c782f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad473209-c8e1-450d-b080-692108d5d7a7",
        "cursor": {
          "ref": "f277ba7d-f880-48ae-96d9-6a4c3b985531",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6b2f624c-2f03-4e93-8c84-8b50872326e7"
        },
        "item": {
          "id": "ad473209-c8e1-450d-b080-692108d5d7a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7fe7bc37-5005-4bea-9b2d-8ef4fcc5b8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3bc7f2-5c83-4c57-b2d3-c283bfc99eb9",
        "cursor": {
          "ref": "e644c223-8026-4256-a48b-c3eb9f642d28",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e0491410-3b90-486b-9a95-8ccda9867254"
        },
        "item": {
          "id": "ab3bc7f2-5c83-4c57-b2d3-c283bfc99eb9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "36cb5496-980d-4ad4-8341-26c6c1ef884f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bb2d43-d03a-4491-a06b-0ad60c5d9657",
        "cursor": {
          "ref": "3619057b-1bc3-4318-9f78-80dacfcdbff0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8142bbbe-92db-4af9-aa06-5c3296128354"
        },
        "item": {
          "id": "52bb2d43-d03a-4491-a06b-0ad60c5d9657",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cefe59f8-c669-4df7-af4b-84c7ec4bde17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590670ac-c0b2-494b-88fe-6482b3e34927",
        "cursor": {
          "ref": "ad9506f6-05e3-4abd-a097-9e6e729d90df",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "51f36fa0-5194-4b92-8ecc-088c38b05246"
        },
        "item": {
          "id": "590670ac-c0b2-494b-88fe-6482b3e34927",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a175c165-77f3-4d89-9d95-fb42d8c1b061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3029ea0-7a8a-4972-adfd-6e8e2410f516",
        "cursor": {
          "ref": "03c5b70a-1d05-431f-8951-6c136d4bdcc2",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3b73ad53-86d8-4348-8a92-d17c9b34d225"
        },
        "item": {
          "id": "a3029ea0-7a8a-4972-adfd-6e8e2410f516",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "01a3544f-142d-4205-80ef-622c64064a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ed5e69-3716-4591-a43a-5aaf07cf7bd0",
        "cursor": {
          "ref": "f4ebd4b1-6d05-4219-bac9-feb3a606ea58",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f4a42b54-3366-4270-a238-c39cb425275d"
        },
        "item": {
          "id": "61ed5e69-3716-4591-a43a-5aaf07cf7bd0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "601c6969-f787-4af3-a591-8b312024c581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b986a5-c97f-43fe-b080-d7ccbea9e30f",
        "cursor": {
          "ref": "ce5761fa-d6bd-4792-9f53-7aeae952c847",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "80bb7204-8b9e-4d5e-a438-292b6151fb9c"
        },
        "item": {
          "id": "f0b986a5-c97f-43fe-b080-d7ccbea9e30f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0410ff40-fd75-4635-a5c7-ad9ef839a0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856eb44f-e719-427c-8425-5a58e9db7801",
        "cursor": {
          "ref": "64a27f33-4be3-4104-85e3-bf8907671e3c",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0f6d42d3-6282-425e-ad0e-c47c023fa54b"
        },
        "item": {
          "id": "856eb44f-e719-427c-8425-5a58e9db7801",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b319e097-4abd-40a7-9f29-24e4e0d2c040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2430c5f9-061b-4549-92dd-d57854a87641",
        "cursor": {
          "ref": "25c5dd7b-26a3-4c36-8519-9bf15c79e8e2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4089d29c-35a4-4540-809d-61964093b3aa"
        },
        "item": {
          "id": "2430c5f9-061b-4549-92dd-d57854a87641",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8e06d5b3-10d3-4b25-8a4a-f3441ab3e489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135e0e1f-daf1-420b-8c0d-0106c94e1a9a",
        "cursor": {
          "ref": "d2ff78cd-1f52-47ef-9a56-445c6f9fd65b",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9a172de5-3f27-43c9-a8c6-41348f8339d2"
        },
        "item": {
          "id": "135e0e1f-daf1-420b-8c0d-0106c94e1a9a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "22725f3b-c5ae-41b0-898d-d1d2f8196d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e629c4-690b-4564-ac9c-81c545289b15",
        "cursor": {
          "ref": "dc385dc6-8c36-4466-8f77-ae87f9ab1a18",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "420fdd6a-3a38-4aa5-a785-b01f67cc700d"
        },
        "item": {
          "id": "49e629c4-690b-4564-ac9c-81c545289b15",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e7d85737-644b-4099-b213-106a0805dd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd07027-e23c-4b57-b144-522c3252a429",
        "cursor": {
          "ref": "472484fb-6ce3-4b90-b324-151d50d6778f",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9a633c46-3b09-42d3-9616-15544f20132b"
        },
        "item": {
          "id": "bcd07027-e23c-4b57-b144-522c3252a429",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "18468a0b-b92e-48a7-8dc1-a284ad656a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072a028a-689c-4f1e-b01d-b1d20bc84a01",
        "cursor": {
          "ref": "a8aec0c9-5990-4827-b4a3-22b0e718a496",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d1f8f4e5-62e1-42cf-be3d-5663715b0cca"
        },
        "item": {
          "id": "072a028a-689c-4f1e-b01d-b1d20bc84a01",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "52026224-0910-4b44-a64e-a08cdd9fad16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb65de53-5cd0-497f-af93-1152e880036f",
        "cursor": {
          "ref": "3095e518-bda5-4b0c-b16a-f69493527e0c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f157d47d-6cc0-4a0a-95ac-c4b0878f8867"
        },
        "item": {
          "id": "cb65de53-5cd0-497f-af93-1152e880036f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d57a7fed-b5fb-4afb-90dd-527bf436384a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4429d5-e7fc-4c39-b6a5-7b3301540e72",
        "cursor": {
          "ref": "98481035-219c-41bf-be74-d765e592ceaa",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cd1b30a3-482d-4902-9cb5-65c3f755e257"
        },
        "item": {
          "id": "6b4429d5-e7fc-4c39-b6a5-7b3301540e72",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5cd6c06e-fa08-4875-ad2b-f540caff6d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3251e695-74fd-4206-9f41-a24bb301287b",
        "cursor": {
          "ref": "f61452c6-4782-4cb2-8beb-a6b1de1793e9",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5125f3a8-6d1e-4515-bce4-6539ada17849"
        },
        "item": {
          "id": "3251e695-74fd-4206-9f41-a24bb301287b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "833f540d-e601-49db-a58a-1e2344a837b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86107de3-a80f-4e7b-9a08-b26e5191507b",
        "cursor": {
          "ref": "fff48c78-9965-491e-8c32-780db6e4bb65",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d1e04d5f-8079-4a1b-919e-cf5bf42a4525"
        },
        "item": {
          "id": "86107de3-a80f-4e7b-9a08-b26e5191507b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "75c8916f-5205-4295-9371-01becbebb535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd37188-dcc1-47e6-9b5d-34a5c5862be0",
        "cursor": {
          "ref": "487dc3bc-c317-4c6f-8055-dc4764751fa1",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "19c4c1fd-d26c-4a4f-a3f4-d4f367a3ff3e"
        },
        "item": {
          "id": "4fd37188-dcc1-47e6-9b5d-34a5c5862be0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f3b350ab-ddf3-4a35-9276-7928e4896e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3152add2-248f-40e0-8072-b103bb9d89d4",
        "cursor": {
          "ref": "a7fc17c4-0138-4c60-b70b-a2ebfc018927",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7a006c59-3800-4b0e-84ef-37038b29e346"
        },
        "item": {
          "id": "3152add2-248f-40e0-8072-b103bb9d89d4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7f276514-a8d2-4879-9724-1b0dd05b8c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bf8e98-37af-4ba8-a6d3-8261fcd095eb",
        "cursor": {
          "ref": "fb65dd45-366f-4baf-a1a4-966da86279fa",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f9c58ce1-9b21-4f3b-9daa-fcdd04addb02"
        },
        "item": {
          "id": "47bf8e98-37af-4ba8-a6d3-8261fcd095eb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9345af4b-c204-4a68-a45e-f7d05f5cbf40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64977371-1740-46b7-9996-3791d3d6cd09",
        "cursor": {
          "ref": "6935feaf-faa3-44b2-8e74-625daa76dff2",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "71b58245-1d41-4e24-a8a7-68904c55077b"
        },
        "item": {
          "id": "64977371-1740-46b7-9996-3791d3d6cd09",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9792a1b6-96c8-4a45-b930-90630a84106b",
          "status": "Created",
          "code": 201,
          "responseTime": 1545,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f7140e-6a03-4d8a-a93a-8bf51d941c94",
        "cursor": {
          "ref": "b7d8d9e1-3f63-4dd2-94bb-3c7c9becb5e5",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "682f353e-e92a-494d-98c0-170f1fc3281c"
        },
        "item": {
          "id": "f5f7140e-6a03-4d8a-a93a-8bf51d941c94",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0487be43-5658-4354-9e0a-68f80e8af287",
          "status": "Created",
          "code": 201,
          "responseTime": 1455,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97399b7-75ed-4c98-82db-fd65905e20ae",
        "cursor": {
          "ref": "300545b1-5ba5-4b48-9895-22a5e4bd580d",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6fbf4646-bdfa-4a3a-bfa2-fa491f818b10"
        },
        "item": {
          "id": "a97399b7-75ed-4c98-82db-fd65905e20ae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7998c222-61fa-4049-9378-f6f9c74e9294",
          "status": "Created",
          "code": 201,
          "responseTime": 1428,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fac5c2d-ebbf-4906-948a-70606d95b9b4",
        "cursor": {
          "ref": "63bdfc37-2ec4-4277-a927-b1e48a32be20",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0cc35de5-60df-49a5-b8a4-f4ab671f1cd3"
        },
        "item": {
          "id": "1fac5c2d-ebbf-4906-948a-70606d95b9b4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "40db17b1-0146-41aa-a205-5b8ea7d690b4",
          "status": "Created",
          "code": 201,
          "responseTime": 1468,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2a9173-c879-4644-9974-def156cee0b6",
        "cursor": {
          "ref": "e2b9c72d-3b7b-45c5-b034-6077ab794217",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd88da03-51db-46d9-bcd8-4b941f365cf9"
        },
        "item": {
          "id": "8b2a9173-c879-4644-9974-def156cee0b6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "34a9ee83-3f1a-4f31-b46e-d4cc75ca03b1",
          "status": "Created",
          "code": 201,
          "responseTime": 1451,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2091146-16c3-4f71-b9ae-a731c5079a54",
        "cursor": {
          "ref": "a81c6c36-fcc6-4d50-abfa-a459ea3815fc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "48d45813-3288-4a77-8a61-0176809351be"
        },
        "item": {
          "id": "c2091146-16c3-4f71-b9ae-a731c5079a54",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "296362c4-4e54-4ae3-8042-d2d3444840db",
          "status": "Created",
          "code": 201,
          "responseTime": 1383,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd6393b-a690-4d38-9631-4c3f1a29acb8",
        "cursor": {
          "ref": "2f9527bd-4302-4dfd-bd37-9cd131ea467b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86bd57d0-9b82-48c1-b6a7-dad6cde54308"
        },
        "item": {
          "id": "fcd6393b-a690-4d38-9631-4c3f1a29acb8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b8a0e9c7-0d68-4a4c-b7a7-a5b04826ffcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39339c3e-92a1-42da-83e6-2e7a7166430d",
        "cursor": {
          "ref": "12d79518-e62c-4d70-92e7-344250f7e880",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eb912604-186c-4e6a-87fd-793ce03764d5"
        },
        "item": {
          "id": "39339c3e-92a1-42da-83e6-2e7a7166430d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a28c877f-ef10-4511-8ff0-4a1a2d9aece3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de6c722-a01c-4407-9519-992ff02b2a2c",
        "cursor": {
          "ref": "abc42660-7c81-43e2-bebe-a6fda8efc6fc",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "95744aec-eb8a-4f25-b82e-25f2e8df6974"
        },
        "item": {
          "id": "2de6c722-a01c-4407-9519-992ff02b2a2c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4c852805-8bc9-4c9e-ac72-0b372507cd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0bb33a-4f35-45a0-a5a6-75d191218d68",
        "cursor": {
          "ref": "8d97f9d3-ebcf-41d0-9ccf-d954e43a59e1",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "385eadeb-3ddb-4a14-937e-ddc6aba70a8f"
        },
        "item": {
          "id": "ae0bb33a-4f35-45a0-a5a6-75d191218d68",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7bf13be5-91e8-4d0f-adb6-87d52b8f90da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92141e72-946a-46a1-ab7a-c5a0fc8c9501",
        "cursor": {
          "ref": "36a526bd-cd37-4f5f-aad4-f9fc6d8818a8",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9e6baba3-ccfa-43ab-9a03-173db8a81313"
        },
        "item": {
          "id": "92141e72-946a-46a1-ab7a-c5a0fc8c9501",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5ae50b3d-da5c-4fde-bd74-3412299f2993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0983f02-751e-470c-930a-5383d756575d",
        "cursor": {
          "ref": "586f1c05-8939-4c24-9f11-e3aace9dafd9",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a7e6b1cd-6943-4842-9ac4-e2ac9036fb5e"
        },
        "item": {
          "id": "f0983f02-751e-470c-930a-5383d756575d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9a754131-28c0-4391-9c02-cd63738fa969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef2f031-23ae-42a8-8360-8dbc4aaad7a6",
        "cursor": {
          "ref": "024c5543-c3c9-4e09-bb14-18077d662c4d",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "74981d06-d4fe-48d8-b5a6-9884fef43f0b"
        },
        "item": {
          "id": "1ef2f031-23ae-42a8-8360-8dbc4aaad7a6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "da69b243-6684-4464-8f6c-8aa8a5e37107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a95178-573e-4290-a94f-9b4054dbafa6",
        "cursor": {
          "ref": "d975ffe7-7012-4bc9-903e-3fe105d2d471",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5630afe0-5468-4add-afd9-13c0aa466c8d"
        },
        "item": {
          "id": "61a95178-573e-4290-a94f-9b4054dbafa6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e7b8df04-8d74-4f85-ab09-552878536c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9eb315-fe2f-48b9-b884-56c04eabc24e",
        "cursor": {
          "ref": "1ad2d038-508e-43e3-bafc-ad9f7d801305",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "11f0824f-37ff-484d-8f92-ac429a4e6c8b"
        },
        "item": {
          "id": "4c9eb315-fe2f-48b9-b884-56c04eabc24e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2ea5204b-72f0-45b4-81a9-d716260238db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457885fd-45ab-406e-8b11-928403bec9d6",
        "cursor": {
          "ref": "cbe1badd-4224-4c79-85e7-0b7604c63462",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7c02862a-77a3-4029-86bb-a3cdda7c7dcd"
        },
        "item": {
          "id": "457885fd-45ab-406e-8b11-928403bec9d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a28ff4d7-5a49-4dc5-8cad-970205be59a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2021a5-dd32-438d-a972-36d2c85ac101",
        "cursor": {
          "ref": "60fb88d0-d3b9-494c-928d-fa39d4bf870c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "90cff956-9c26-4975-87fe-9c37d7117f4f"
        },
        "item": {
          "id": "bf2021a5-dd32-438d-a972-36d2c85ac101",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c7d1d8e8-e41f-4bf7-b5db-9e4783354f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cee012c-0be2-4cbf-8a34-308747a36c7c",
        "cursor": {
          "ref": "3770e586-3ec9-4e25-afae-bdbdb1714dfa",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "72b60663-bf52-4f26-81fd-3c07790501de"
        },
        "item": {
          "id": "8cee012c-0be2-4cbf-8a34-308747a36c7c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "600d7222-7fd4-423c-8267-853ace7c47ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb610e1-f3c4-412c-94fa-771d4aca749c",
        "cursor": {
          "ref": "f2be0e87-f830-4378-a806-26b6bde6a13d",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "98fac16d-6c79-4551-9b57-b0c9350efd66"
        },
        "item": {
          "id": "ecb610e1-f3c4-412c-94fa-771d4aca749c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e57632c8-895c-438b-8d47-7429ba76ec7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f573553-48f8-4be7-8f24-a27af95f89de",
        "cursor": {
          "ref": "0db80848-d9c2-4895-9434-5a13df38a745",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c79a6d76-f49e-4214-a219-346de551ee16"
        },
        "item": {
          "id": "3f573553-48f8-4be7-8f24-a27af95f89de",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "99a7341b-25fd-4ecf-8b32-3aba5cccee93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadea734-7621-4b54-9881-7c43e12574c0",
        "cursor": {
          "ref": "d1a732ad-7d24-4fbf-a88f-3edc950934bf",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "41833fc9-1b00-496e-b97b-6e02c706c05c"
        },
        "item": {
          "id": "fadea734-7621-4b54-9881-7c43e12574c0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3523b1fa-5eca-4bb9-b650-ff3f65c63ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a1555c-4487-46fb-b32b-fa47db6901df",
        "cursor": {
          "ref": "07ffde5c-c867-45de-9dfa-330dfa8efeb6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b02edf29-09f4-444f-92f0-6cf5fd6d35d6"
        },
        "item": {
          "id": "51a1555c-4487-46fb-b32b-fa47db6901df",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f36d0cc7-6a8b-4522-8c09-42ebd8356e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44abef09-7318-4735-99db-66c0e0fdd14d",
        "cursor": {
          "ref": "558805fa-ec29-4309-9dcf-e02a11d1f8c9",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a6da30fb-e519-4637-a599-99ff4bb7f27f"
        },
        "item": {
          "id": "44abef09-7318-4735-99db-66c0e0fdd14d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e99eedd7-c098-479f-90eb-e3bb7d4c24ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13368ee9-3d18-4b4a-9776-5b4d29b8a8f8",
        "cursor": {
          "ref": "270fba49-a03c-4638-8d4e-e7d76089ab10",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3bedc638-5a0d-4867-ae1d-6bda6819c269"
        },
        "item": {
          "id": "13368ee9-3d18-4b4a-9776-5b4d29b8a8f8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "52d4f355-d55d-4244-983e-268c7dd6f875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbed1663-eff6-42bd-ac3a-bd434012d0fa",
        "cursor": {
          "ref": "3b0804b5-a7c8-4493-a8a8-f2a67b7eaf97",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b6c5ea81-4ea6-4849-9523-1c3fa0cbd0e2"
        },
        "item": {
          "id": "fbed1663-eff6-42bd-ac3a-bd434012d0fa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a48fa5c0-6a0b-476a-bc50-1b4b605cb5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ca514a-eec7-434d-8ec7-6ae101c38f13",
        "cursor": {
          "ref": "0d87c758-d72f-4377-a352-b68da4afcc33",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e9bdfa99-732c-4d72-a47e-915334c60014"
        },
        "item": {
          "id": "65ca514a-eec7-434d-8ec7-6ae101c38f13",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4ae2f194-3c50-4b84-bea3-191b5b60c6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76f4aee-fc2f-415a-be30-cc743ec42902",
        "cursor": {
          "ref": "8f777dc8-a271-48f2-9315-68392f983c1a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2f371dab-830b-4ce3-ab44-a581c8cda06b"
        },
        "item": {
          "id": "e76f4aee-fc2f-415a-be30-cc743ec42902",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "55f83a3d-326a-4922-8390-37d75da0c373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46413e9-a5aa-441c-a011-51b86476a0d8",
        "cursor": {
          "ref": "feb9c34a-31d6-4746-9867-aba0e270aab9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "65c94e2c-3a88-40e7-b7ac-7beecc73915a"
        },
        "item": {
          "id": "c46413e9-a5aa-441c-a011-51b86476a0d8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "319ffec8-641d-4adf-a4a4-68479150e4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc8858b-6bda-4c84-9668-4fff9cfb1b06",
        "cursor": {
          "ref": "905b98f3-08d0-479e-bf89-944aa8637136",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "accdeb3b-978a-4575-84ae-3c0cfddc25c6"
        },
        "item": {
          "id": "2dc8858b-6bda-4c84-9668-4fff9cfb1b06",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1ff16172-d5de-46ab-a1c5-c303326350d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16de401-7837-445c-83d5-f108be04c0e8",
        "cursor": {
          "ref": "bfd49cdc-a3ed-4730-abd9-aaa6b89b3418",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0beca090-c19e-4020-a772-149dc67ff72b"
        },
        "item": {
          "id": "e16de401-7837-445c-83d5-f108be04c0e8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6bd6acd3-7b39-4759-b39d-ac9ff848e275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7db5ec-a1bf-472f-9a06-ca8bde46fd0c",
        "cursor": {
          "ref": "fcd27df0-968f-4241-b285-da93cf20fb09",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "462d6edb-ebab-4d50-a3f5-d49405f73bac"
        },
        "item": {
          "id": "2f7db5ec-a1bf-472f-9a06-ca8bde46fd0c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa2801b9-9f80-42ee-ba22-d6e05cdddaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8880ce2-12f9-4488-8207-f08b7f797c08",
        "cursor": {
          "ref": "4038d251-8a06-4e89-8e7d-34c9023bbfe2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7c69324f-dc09-497f-a6f2-d505e4cc14df"
        },
        "item": {
          "id": "f8880ce2-12f9-4488-8207-f08b7f797c08",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2cdecdf7-d73f-43f5-8484-bf2792b26e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7642ca4-e158-47ee-90b0-c14ff3ab1e16",
        "cursor": {
          "ref": "6e623928-fe31-4c41-86f0-2432f227f8b7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "00806dbc-efd4-42ac-b0ab-06e7db5234e9"
        },
        "item": {
          "id": "b7642ca4-e158-47ee-90b0-c14ff3ab1e16",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "548cdff6-8c64-44dc-b9d1-b6611143bcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bc453c-18ae-4ecb-a2ee-545b3cc4147a",
        "cursor": {
          "ref": "74204526-4753-4b9f-8f61-684f5776738f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0027d4fb-378f-420d-be80-fee43e1ab26e"
        },
        "item": {
          "id": "23bc453c-18ae-4ecb-a2ee-545b3cc4147a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "048c51bd-a2f2-4747-86c5-5cb7dd09fdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc41bede-59eb-4850-a6cc-93e8b315a81b",
        "cursor": {
          "ref": "d7259a73-4cde-4b83-a57d-68857c8a49c0",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4c3e7b2b-ac7a-413d-8f23-b9c9051deee8"
        },
        "item": {
          "id": "dc41bede-59eb-4850-a6cc-93e8b315a81b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9778f81-3775-4aa2-b476-c85f028bb2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d184ae-0390-42b8-9c3f-9f2e3254c089",
        "cursor": {
          "ref": "93f01d3a-9329-4e28-b3e8-054c84af7c52",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "853c30ee-106e-4517-b885-a358fc6efaf0"
        },
        "item": {
          "id": "17d184ae-0390-42b8-9c3f-9f2e3254c089",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "97891897-fc94-49ae-a345-bc8dc6e68108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278d315f-61b5-4e61-bf3e-fa8fcb0f9e57",
        "cursor": {
          "ref": "f212f6c0-ab85-45c3-94e1-af73553ca83f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1b04e868-80e1-467b-9f95-fd59a4114ce5"
        },
        "item": {
          "id": "278d315f-61b5-4e61-bf3e-fa8fcb0f9e57",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8cc9be4e-7e8d-41ea-8aac-37dad40acd0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ce1bb3-933f-4af6-909a-7c48b31209d2",
        "cursor": {
          "ref": "f9b5318c-7a15-417d-8326-470bb142adad",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fc1b2025-3f85-4bf9-a5b2-6ec0b865cc43"
        },
        "item": {
          "id": "01ce1bb3-933f-4af6-909a-7c48b31209d2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "46b73b9f-5c57-4297-b8a8-2f977c9416a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac261c3e-f570-47b1-99f9-a1c9165b0fff",
        "cursor": {
          "ref": "f86c731b-ebe6-4078-8ba4-fe3aea78506b",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ba8490e6-756d-4c74-b2a1-8a6fde4a85d0"
        },
        "item": {
          "id": "ac261c3e-f570-47b1-99f9-a1c9165b0fff",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4a311e2f-4332-4b4e-b5b4-b3bdafcb9662",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5677d44b-99a9-4a47-b3dd-d00be78b9f2d",
        "cursor": {
          "ref": "72a23eb5-f70a-4fa9-94fb-cbebb271a2b9",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2f8a36d4-697f-44a6-af06-32e025263a92"
        },
        "item": {
          "id": "5677d44b-99a9-4a47-b3dd-d00be78b9f2d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9751ab80-e5ec-4173-b35b-bb93c3ee7127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb8dc83-7e46-42b0-b021-8da1b487ad87",
        "cursor": {
          "ref": "f1fc9d74-d587-4102-95af-2aeb1809a196",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c2720cb6-282f-4df7-b029-d7ee142f1b6f"
        },
        "item": {
          "id": "1fb8dc83-7e46-42b0-b021-8da1b487ad87",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4fc7e585-051a-4287-b76f-7f9e6c9f6e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87534a3-f60f-4fb0-a654-9b6a8bb52416",
        "cursor": {
          "ref": "a301a382-a6bc-4f8e-b6a0-84e627132001",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b95439a5-7686-4bac-a874-e97864f3dba2"
        },
        "item": {
          "id": "f87534a3-f60f-4fb0-a654-9b6a8bb52416",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6866b8c2-728e-4aa0-9ace-17d770c88d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af28c3e4-ce47-407f-bc83-8e092f6fddb8",
        "cursor": {
          "ref": "9a44b40c-0856-44a5-bd5e-62ded4d04d46",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a6d054fe-acc4-4a74-8eb0-0861ebb969f9"
        },
        "item": {
          "id": "af28c3e4-ce47-407f-bc83-8e092f6fddb8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "66b206df-1bc8-422a-92a8-f223ea107b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f30f85-908f-4fae-8fe7-2f51aa9e29ce",
        "cursor": {
          "ref": "8f4220a9-e7ae-429d-866d-d34cd6194ca0",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8430d86d-c883-49ab-a480-34001e40cc24"
        },
        "item": {
          "id": "42f30f85-908f-4fae-8fe7-2f51aa9e29ce",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "639fa6c1-61a5-41d7-90b6-48ecf391b082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7541249e-5a14-4df7-9b76-4c0e9871619a",
        "cursor": {
          "ref": "61831639-60dd-4a16-bde4-12e6385567c5",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "40968a28-9a3a-45e0-99c5-8e4ecf2044c4"
        },
        "item": {
          "id": "7541249e-5a14-4df7-9b76-4c0e9871619a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cb2be4b7-90ff-45a1-be6b-bdebfe3d1064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdac9aa1-63dc-4e7f-8bcb-0011ae06e4e8",
        "cursor": {
          "ref": "5a1eff0c-f2ba-497d-ae85-ddaab9ed32eb",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1a900552-a881-4509-bfca-b9298fb4765e"
        },
        "item": {
          "id": "cdac9aa1-63dc-4e7f-8bcb-0011ae06e4e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "64291df7-2265-4b3a-82f8-c8f5e9f9c630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd8abb0-63f2-4c82-93e0-6f26f656ef4b",
        "cursor": {
          "ref": "16f42302-d5e5-4233-b088-2a69f362cf26",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f0e91aa1-6e6a-4be8-a92d-cb79cf9b4814"
        },
        "item": {
          "id": "3bd8abb0-63f2-4c82-93e0-6f26f656ef4b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1e708498-687e-4e62-9c8d-0faa3aa38c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e43fff-4211-4798-a28a-8a780accfbfe",
        "cursor": {
          "ref": "43071765-0972-4c44-8b5d-466b37008ffd",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f0a2ea1b-0cb8-4e23-8d71-d2a3b4709b77"
        },
        "item": {
          "id": "71e43fff-4211-4798-a28a-8a780accfbfe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "58cab8cb-ffb4-4882-969e-bea1ab5f0257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2a359d-7a29-4a38-9f71-3938cffe8955",
        "cursor": {
          "ref": "a293e465-7299-4f47-9083-6ce84f9bc210",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7aacb8ea-6b02-43de-96ef-6acbb2e67dd3"
        },
        "item": {
          "id": "ba2a359d-7a29-4a38-9f71-3938cffe8955",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fe6c8dca-abe3-405e-8dc7-0d4462c54125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19212c22-f2bb-45bc-b983-54b2d59100bb",
        "cursor": {
          "ref": "52cf2478-6e53-46d9-8a47-2ad2dde37e93",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0295d2d3-c057-41b7-aa08-41ce0987433f"
        },
        "item": {
          "id": "19212c22-f2bb-45bc-b983-54b2d59100bb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "09e24487-b550-4dc6-9e6b-6b4852d825b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb9a66d-05fc-4316-adf0-ab39af40ca69",
        "cursor": {
          "ref": "00123386-8b12-441f-bed2-805cc01b6991",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d1e742e6-4c0b-4624-8fb3-f9fc96bc9eff"
        },
        "item": {
          "id": "3bb9a66d-05fc-4316-adf0-ab39af40ca69",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4e8d00c9-0dce-4983-aee7-4911a95ca472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6215b766-926a-4086-8969-04c372a75151",
        "cursor": {
          "ref": "0f0d4368-4563-462a-9776-3db7c66d891e",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "09902e12-58d8-4457-bb07-fcf8d0631051"
        },
        "item": {
          "id": "6215b766-926a-4086-8969-04c372a75151",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8f8742f6-6c06-403f-9945-1f72885e42bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada288b5-ecdb-4ebc-9417-aa93e5a7c9ef",
        "cursor": {
          "ref": "160142c9-6a28-4626-bdfc-a887d8c46d7a",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "971b2155-76ae-4774-93e8-f0a54a2679fc"
        },
        "item": {
          "id": "ada288b5-ecdb-4ebc-9417-aa93e5a7c9ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc3a1519-f163-4795-a1f0-cf331061dbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdf3876-84f9-4589-a225-0f3b7c820a2c",
        "cursor": {
          "ref": "69fef3a5-c14e-4a0b-9dfc-9560c2d9de7a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b92913bd-67d4-4880-8f53-702bea0b271a"
        },
        "item": {
          "id": "ecdf3876-84f9-4589-a225-0f3b7c820a2c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a2cb19f6-6d8d-4a3e-a7e3-dda7483883e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e325bd-dcf5-4aca-bb2e-62c10836cd1b",
        "cursor": {
          "ref": "cbb376ea-d253-40eb-997d-c232c27db950",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7da41209-c6ab-4bd3-9f1f-1a04758f1784"
        },
        "item": {
          "id": "74e325bd-dcf5-4aca-bb2e-62c10836cd1b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ef36ce8a-9020-46d9-92fb-f9584791ae54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8ee10c-cc61-466b-8a76-cef8c1a9b78d",
        "cursor": {
          "ref": "2330e414-078d-4458-be8c-d7637137e699",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "48c79390-8997-4167-86c9-f1f095bae179"
        },
        "item": {
          "id": "5f8ee10c-cc61-466b-8a76-cef8c1a9b78d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8136b84b-9184-4364-8fdb-b69b7e3d9898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6188a49-62d3-4ed2-b4cb-284c2e713806",
        "cursor": {
          "ref": "c0c94842-ffb1-457e-80d4-e9db536cb394",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "62d630d5-a360-4f7c-a83a-799095e67879"
        },
        "item": {
          "id": "b6188a49-62d3-4ed2-b4cb-284c2e713806",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fb540c9d-84c6-4159-9c4e-6bc6b6c23dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2d4bbf-9ab9-4698-a114-201113f5858a",
        "cursor": {
          "ref": "987f50d2-9537-4377-96b4-b76d771b4e7f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ee1e09f-3e57-4a41-8df0-cdae6bb74dd8"
        },
        "item": {
          "id": "2d2d4bbf-9ab9-4698-a114-201113f5858a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c79c4a18-1c0b-4f41-b68a-ba57751f35f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042f29f1-3a6b-4a52-95ee-25b6878b6b79",
        "cursor": {
          "ref": "d798ed74-1a28-419d-b038-20bf8d0175fa",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c66363f9-45f2-4f9d-b085-2c8c01b9fbff"
        },
        "item": {
          "id": "042f29f1-3a6b-4a52-95ee-25b6878b6b79",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "69a6ebd8-a74f-408d-a449-d7367871abf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c05c7cc-4941-4ec3-9fc9-d99d21f42a77",
        "cursor": {
          "ref": "178bf4ee-f5f8-4ea7-bf87-1bde2e4bedcc",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cfbfba7e-b885-44a9-8031-38f6f298a2c9"
        },
        "item": {
          "id": "1c05c7cc-4941-4ec3-9fc9-d99d21f42a77",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4ff25ae7-9ef3-48f8-b0ca-2e1c3739b442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95d26b2-805d-42e8-945a-35824407ba14",
        "cursor": {
          "ref": "271b1e96-897b-42f0-b2fc-695679ed97fc",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "55fbd094-eea1-47df-97c2-148ffb3668f0"
        },
        "item": {
          "id": "e95d26b2-805d-42e8-945a-35824407ba14",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5933c972-9aad-44be-9929-98a6759f3bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222a7bea-23d6-4f44-b943-699a60f98ab7",
        "cursor": {
          "ref": "c73c5cf0-6488-46d0-a394-a20b462e2676",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "13500e6c-c84a-4e42-9760-0fa3bb7b69d7"
        },
        "item": {
          "id": "222a7bea-23d6-4f44-b943-699a60f98ab7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b55f5abf-d323-4929-a353-97f14a15c8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1508a8-cc6b-486f-a2df-2bed01a9b4fa",
        "cursor": {
          "ref": "b5e031cc-ce52-4051-b823-52cb6390f72e",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c70f080e-7e02-47c6-8f33-423d7dd81400"
        },
        "item": {
          "id": "4e1508a8-cc6b-486f-a2df-2bed01a9b4fa",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8db406be-1710-4561-9dfc-1df0d6ae69d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d6bf77-6bf6-4c44-b122-3e0ba621a8eb",
        "cursor": {
          "ref": "b3c4db8f-a851-4b11-973e-35ad0fb68b49",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "51340048-58b0-433a-bdb9-38da0b271ba7"
        },
        "item": {
          "id": "d8d6bf77-6bf6-4c44-b122-3e0ba621a8eb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bfd8fbab-31ae-4da8-8278-cd0d6a1e1f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3307d1-8c9a-4c3b-8261-b115652b5cf7",
        "cursor": {
          "ref": "3087a7d9-c1b6-4f24-9a35-d66c78ac0628",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4bc98858-c882-454c-a94f-88b548459112"
        },
        "item": {
          "id": "ba3307d1-8c9a-4c3b-8261-b115652b5cf7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4e31c8fc-1a96-4a1a-a5ba-dafea0d041f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4daea21a-d510-40be-93b1-d49da09a50cf",
        "cursor": {
          "ref": "534d5972-c2bc-4519-948f-d16ffc1e6293",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4ae06639-e168-46ec-8446-a546580a6043"
        },
        "item": {
          "id": "4daea21a-d510-40be-93b1-d49da09a50cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "73ee084e-cdde-458d-9614-ec83b36156b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e98bf86-d36a-4802-bde5-d89c08126fd5",
        "cursor": {
          "ref": "6e6aeef9-4e07-4039-9092-8ffe1687f113",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "26ba6fbe-e4a4-4ea1-9425-3f54cba454ff"
        },
        "item": {
          "id": "5e98bf86-d36a-4802-bde5-d89c08126fd5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6252a151-bb47-40e4-94d7-74e19d9934b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b220874-723f-4e69-aaf9-fba399877550",
        "cursor": {
          "ref": "718a9b08-7b6d-4b6b-b08d-acdd317258d6",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "38d22c79-451e-4619-867e-ca9aa78c860a"
        },
        "item": {
          "id": "1b220874-723f-4e69-aaf9-fba399877550",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c965a969-edb2-4d24-bfec-fc53aaa5be9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e872b1ba-4874-4180-b2d6-594b20a1b952",
        "cursor": {
          "ref": "e7e9384e-7d48-4bb6-a520-b2e470cabc3f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c3f3706a-4071-426b-b0c3-a7bbf0c45b57"
        },
        "item": {
          "id": "e872b1ba-4874-4180-b2d6-594b20a1b952",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "24721657-5011-4362-9a0f-ac3015d003a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae7d227-b01d-4884-93fb-666e4df35668",
        "cursor": {
          "ref": "65c4477c-799b-4349-a79b-56902f70d84d",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7cb3d5ef-ce5c-4eed-8ea3-35e84e109ee1"
        },
        "item": {
          "id": "8ae7d227-b01d-4884-93fb-666e4df35668",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b72df0ff-1f45-46a9-8885-4abfa136be43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea4efa0-1297-4d27-b4a2-adea344f4c4f",
        "cursor": {
          "ref": "5b9595e7-8d10-49b8-94a9-0222e046ca09",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4c06b7d8-ecef-4738-a9f0-5b7428a3b1d5"
        },
        "item": {
          "id": "6ea4efa0-1297-4d27-b4a2-adea344f4c4f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3c6ab507-1cfb-4b12-9e0d-e18575769753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34699c03-d39d-4185-af84-dfcf1c4cebe2",
        "cursor": {
          "ref": "0a2c6e74-833a-4e19-b6a3-3af4c8659e5f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7d836f12-9485-4139-9cae-74fc45855adf"
        },
        "item": {
          "id": "34699c03-d39d-4185-af84-dfcf1c4cebe2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8b594e96-b646-4b8e-b22e-b8cb84ca09b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e756ec-bc54-40bd-9e5f-6bf118c938f1",
        "cursor": {
          "ref": "4af4f167-1720-4e02-8fdf-2097a126a5af",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "898f99d4-cdc0-40b4-ad98-2edef4ce25e8"
        },
        "item": {
          "id": "76e756ec-bc54-40bd-9e5f-6bf118c938f1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fb2ca705-82cb-47e3-8fd2-7d558b8418dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d8e1b-e43d-436b-9cd2-7ec5c9ac174c",
        "cursor": {
          "ref": "61d11f3e-8629-4d4b-8d22-80e88f8fc3d9",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7ee57282-5e2b-4df5-a1ba-7c28084c7e7d"
        },
        "item": {
          "id": "539d8e1b-e43d-436b-9cd2-7ec5c9ac174c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "66ae4891-cb83-45af-94a6-3e883cd21021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24ac43f-5a3e-484b-ad68-cd6180674002",
        "cursor": {
          "ref": "e876aca2-dc59-48c9-8022-c9df0f78424d",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c726bbe3-dd96-4ab4-8893-9682b2a03949"
        },
        "item": {
          "id": "c24ac43f-5a3e-484b-ad68-cd6180674002",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "20b6b689-4a65-4846-8ed7-14f370c0ebde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ce43ac-1538-4912-8f12-b0df224872f0",
        "cursor": {
          "ref": "4cb5e7c6-362e-4b82-afa6-967520818466",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "93f15873-19e1-4af6-baac-bc0c8650f905"
        },
        "item": {
          "id": "88ce43ac-1538-4912-8f12-b0df224872f0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8aec3cdb-d6e4-4c68-aea8-b6f694184ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7a193c-c8d1-4e2c-a639-b2ad3d45e67d",
        "cursor": {
          "ref": "f845c987-27a1-44fe-ac45-a860e6f45ff6",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f5e0a4a5-aad5-43c6-b5db-548da98fb9ee"
        },
        "item": {
          "id": "fb7a193c-c8d1-4e2c-a639-b2ad3d45e67d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8e989612-569a-453a-b620-7bf1810d5f89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f00d8b-80b1-44c6-ba7f-4b58a20baa7b",
        "cursor": {
          "ref": "d8a67897-8059-441b-85d5-12c64f307f95",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eb6f9a37-e95b-49ea-9fdf-85c987861440"
        },
        "item": {
          "id": "f5f00d8b-80b1-44c6-ba7f-4b58a20baa7b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d1605047-eeb1-4512-90f4-fe70682479d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af5c837-7400-492a-a75b-ced6b59037b1",
        "cursor": {
          "ref": "f0de3b00-13bd-45da-ab10-d2e6042d70ae",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff2476bd-4296-4957-b325-461382094df2"
        },
        "item": {
          "id": "6af5c837-7400-492a-a75b-ced6b59037b1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "91fa3e87-7861-4ae4-a775-b6b5bddf353b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1d9663-5a4b-4bb1-a557-1e3d6aff500f",
        "cursor": {
          "ref": "893495d1-6732-4c15-acf7-7c54f0158bea",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cd1f1668-0568-4aba-9bc2-11ca447f7f41"
        },
        "item": {
          "id": "4c1d9663-5a4b-4bb1-a557-1e3d6aff500f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "003e1cda-d5ca-4570-ae68-d6afbe50fa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6fef22-ddf4-40e4-b727-37b2b5eb2366",
        "cursor": {
          "ref": "fe55f4f0-ca86-4b95-88ab-41060ec099ac",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2264da2b-2543-4ec0-8f0e-6e9cefab2d87"
        },
        "item": {
          "id": "4e6fef22-ddf4-40e4-b727-37b2b5eb2366",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "03eba1fb-fc76-42b4-a777-5e1e649cb18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2487a0d0-378d-4ab7-80e2-2ac6b5a2bc9e",
        "cursor": {
          "ref": "3ef4f9c0-ea81-47c4-b3fa-7159ff68b63b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d29393d8-7677-4585-9e7d-63dfaec457ad"
        },
        "item": {
          "id": "2487a0d0-378d-4ab7-80e2-2ac6b5a2bc9e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4331c14d-7469-4acf-9a3a-4e25415103b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5f41de-bfe5-4146-9a37-66ad7d0f40bf",
        "cursor": {
          "ref": "1cbe490e-a20d-4c64-a81a-f3e4ac138a93",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8d865ae7-d666-4135-953a-51cd0a5f07bb"
        },
        "item": {
          "id": "3e5f41de-bfe5-4146-9a37-66ad7d0f40bf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bb55f037-9a66-475b-bbce-bf69c038aa4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "2b950cd7-2ef9-4bf1-8dbd-ebdd1b78139b",
        "cursor": {
          "ref": "4dec9197-c21b-4a7a-b783-5b28e61d8096",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "54e905d7-a284-478d-94c0-5b7c1954c106"
        },
        "item": {
          "id": "2b950cd7-2ef9-4bf1-8dbd-ebdd1b78139b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a166e57f-ed3f-4637-bfe0-86330b0cbff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922c9d6e-b1dd-4b23-b60d-91063d5c9828",
        "cursor": {
          "ref": "a193b8e4-406f-439c-88ff-07623768ad76",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8612bf82-ec3d-452e-8497-ff4e2c14f32d"
        },
        "item": {
          "id": "922c9d6e-b1dd-4b23-b60d-91063d5c9828",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b7a331d9-49e2-49d9-8e79-d9b851f8cf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228eb101-c171-4257-825f-d3f8e0506cd6",
        "cursor": {
          "ref": "bedf5a25-c2f2-4d13-a4a3-0f65630c7a71",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4af873f1-1921-4ced-9d27-9731d7371da6"
        },
        "item": {
          "id": "228eb101-c171-4257-825f-d3f8e0506cd6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "89da1d3e-c317-4b46-bef6-9a3c25df9da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144cd3d5-075e-485d-98ce-0f28db029760",
        "cursor": {
          "ref": "c63d7a70-3ed1-4f7e-8edb-ab6236ea1474",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "554152c5-e36b-457b-ac76-578a915289eb"
        },
        "item": {
          "id": "144cd3d5-075e-485d-98ce-0f28db029760",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7c32b08b-7ec7-45e4-8ffd-025ae874353f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fbdd34-6a3b-4335-8215-8b69589f85d0",
        "cursor": {
          "ref": "e75adecb-0559-411c-b7d0-ae976be39780",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "40d2e394-d26c-4015-9577-4e122ce2ca80"
        },
        "item": {
          "id": "02fbdd34-6a3b-4335-8215-8b69589f85d0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ec4ec242-fa8d-4451-88f7-6b8437b25d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf879dad-ecd5-4fe1-8bf3-8549dd266207",
        "cursor": {
          "ref": "5a5ed580-53e2-46b3-b365-2913959084e6",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7c608df2-e103-4746-a783-bea2878b8fb7"
        },
        "item": {
          "id": "bf879dad-ecd5-4fe1-8bf3-8549dd266207",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1c5aa8bf-0efd-4979-824e-cbb7df55d0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01966ea-b8fb-458a-9301-9ee636dab3dd",
        "cursor": {
          "ref": "1e416b71-152c-4fd7-887e-703643e919cc",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8f52c507-f55a-47cc-81db-6a59dbe807ab"
        },
        "item": {
          "id": "d01966ea-b8fb-458a-9301-9ee636dab3dd",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "385465da-9048-4326-a519-67a2598fff4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f8ab0a-9471-4763-a364-0963b7939f1e",
        "cursor": {
          "ref": "15509d42-03f6-4c97-ad25-789eaae68d9e",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "00b9536a-66b5-45ef-8490-8ca98f1f1302"
        },
        "item": {
          "id": "95f8ab0a-9471-4763-a364-0963b7939f1e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bb6dc6c1-bd45-436f-8f13-25649f93778e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccafeb2b-c63d-477b-9d99-02a640f4a98f",
        "cursor": {
          "ref": "58d032c0-b091-4125-887b-f2b38f6de64a",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e7fb768f-5844-42c0-a8a2-d74b49c5d32e"
        },
        "item": {
          "id": "ccafeb2b-c63d-477b-9d99-02a640f4a98f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "31ca6d47-49c8-462b-8d11-6d97be24b672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dbce9c-04d2-4ba7-9cf0-ea503057410e",
        "cursor": {
          "ref": "fa06a466-cb1c-4295-9888-754bd633b6f1",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f3f0b11f-f8a3-473a-b659-03a79a430931"
        },
        "item": {
          "id": "23dbce9c-04d2-4ba7-9cf0-ea503057410e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ef70944f-a43b-4e66-a994-5c5b1018b961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9db339-317d-48d5-a283-e2dcebd4dcb2",
        "cursor": {
          "ref": "9fda0662-aa53-40df-b7e0-722013765761",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3ee84948-1e19-4479-8c86-b021b6a1d845"
        },
        "item": {
          "id": "bb9db339-317d-48d5-a283-e2dcebd4dcb2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f07aad7d-3476-4100-be1f-9a33ac8600ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35645bdb-3ba9-463b-af11-173738de5de2",
        "cursor": {
          "ref": "eb5ed781-f3dc-483c-9be7-50c2abdb2d8e",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "da33bb66-0363-47eb-9a84-05825805323c"
        },
        "item": {
          "id": "35645bdb-3ba9-463b-af11-173738de5de2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "631108cb-0aaa-4b79-a6cd-2d8dfdf080a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae1bd55-ae0b-4bb3-88be-1cf538ac2da6",
        "cursor": {
          "ref": "481beba1-3a41-4f9d-8bc7-80ba53de2a9a",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ee8decd8-1bf3-415a-988a-e2f19d82835f"
        },
        "item": {
          "id": "8ae1bd55-ae0b-4bb3-88be-1cf538ac2da6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a02e045f-8354-4030-8cd3-a85cb65b3751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48ac20e7-58e1-4c3b-8a73-69e7cea0c1b0",
        "cursor": {
          "ref": "5e238a71-941a-4550-b022-17f8713be620",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "83949b6f-dc2b-468c-a2ff-b6c470f5ae5c"
        },
        "item": {
          "id": "48ac20e7-58e1-4c3b-8a73-69e7cea0c1b0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "56dcf8a4-a500-4a51-a713-f99c90c7db02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f92db68-27f0-4721-aa5e-df825e0f1497",
        "cursor": {
          "ref": "b117d570-3fac-48e1-a559-06b0e13c13db",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1c042763-92c2-43da-b009-cb9598eb61c2"
        },
        "item": {
          "id": "0f92db68-27f0-4721-aa5e-df825e0f1497",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4f2c285d-f709-442f-bb9e-f192a25b04b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e3d82d-9c19-49bb-88e3-112c34c26490",
        "cursor": {
          "ref": "cb860c1e-458e-4a4b-bd23-0b6f22ea2378",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "06e623f7-ea66-4a8b-8aa5-0a423ecd62ff"
        },
        "item": {
          "id": "f3e3d82d-9c19-49bb-88e3-112c34c26490",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a7bc90a9-82fa-4f99-8b20-7068f974f542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad45b0b8-baae-4552-9d41-377c7d5b2856",
        "cursor": {
          "ref": "d10752b3-d72a-4fc3-8694-80c12d223e95",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8d5d5564-faa8-49db-bba6-9bc23449aeba"
        },
        "item": {
          "id": "ad45b0b8-baae-4552-9d41-377c7d5b2856",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb359215-8aea-413a-9502-ee0bf86120b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0fa712-b821-4207-84b0-54b779a6fb94",
        "cursor": {
          "ref": "fbe3ba18-a684-4dd7-8097-b9e8605cd709",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6ce613f7-a2cd-4351-b2d4-d9b17ff618cf"
        },
        "item": {
          "id": "1f0fa712-b821-4207-84b0-54b779a6fb94",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b0e0b196-0cfc-449b-a45d-1f4ec0a75a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2613a314-5b4f-4c33-baac-18e67461aea7",
        "cursor": {
          "ref": "e8936454-44f0-40c2-899b-e057c91fb67b",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "51d63efa-1d2b-48be-8baf-b4498202442b"
        },
        "item": {
          "id": "2613a314-5b4f-4c33-baac-18e67461aea7",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cd051089-3ad8-4321-80b2-f7ed84b4954c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bae7108-194e-437a-8f96-997c89bff1da",
        "cursor": {
          "ref": "343f30fc-3c0a-48c4-8e31-2fa2ac5e6d53",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "49fbf74a-f6c1-4ee6-8976-8a86c6b626f8"
        },
        "item": {
          "id": "5bae7108-194e-437a-8f96-997c89bff1da",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cc71bdb7-d051-4dab-9f3e-f7d620ea725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3537655-325d-4266-9573-28d7a289bf9a",
        "cursor": {
          "ref": "9b27c43d-d9c6-4f76-9961-10beefff76ba",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "65efd451-3135-437e-969e-88a5260baea4"
        },
        "item": {
          "id": "d3537655-325d-4266-9573-28d7a289bf9a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f34bb3db-b7d4-43ce-a0df-f747a5941e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58b7bea-4c33-462d-bc0c-ec879948076b",
        "cursor": {
          "ref": "63014760-e02c-49e8-8832-ed75faf6451a",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a5024ec7-ed5a-4bd0-ade1-d2b33c3a7b38"
        },
        "item": {
          "id": "a58b7bea-4c33-462d-bc0c-ec879948076b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "552cb497-4954-4cc7-8537-89df3b57becb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fcc74b-a3ea-454c-8bd7-b23e38ea9c4c",
        "cursor": {
          "ref": "a67b4c94-33f9-4e38-8a44-f50af216bd6f",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "003b138d-bced-47d4-bde5-7c2e8a058a9a"
        },
        "item": {
          "id": "69fcc74b-a3ea-454c-8bd7-b23e38ea9c4c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ef6e8e54-5b08-4729-93b0-e4c14005fa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4781000-7734-4867-b1ad-11bac21ddbfd",
        "cursor": {
          "ref": "9f00c1f3-4c71-4881-8d24-aa12581c242e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d0dc3310-8500-4fbe-9c0f-8644d99e22ef"
        },
        "item": {
          "id": "a4781000-7734-4867-b1ad-11bac21ddbfd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "06861461-ee2e-4071-a5f4-885909c2c9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f84bbd-ebb2-42f6-8d6a-c73f85e9ad55",
        "cursor": {
          "ref": "081e3a13-7924-44d6-9aa7-928e65063240",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "da5d2401-683d-4d8e-b0e3-29397ff29df9"
        },
        "item": {
          "id": "48f84bbd-ebb2-42f6-8d6a-c73f85e9ad55",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2aba896d-2959-4dec-bab6-5dc133c13ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e13a079-afc0-4ab0-be68-386f9cc573f5",
        "cursor": {
          "ref": "df36ad40-3f91-4db8-9781-d71a84776203",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "68a0b0d2-5520-49b3-9115-59060074b801"
        },
        "item": {
          "id": "9e13a079-afc0-4ab0-be68-386f9cc573f5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3abd9866-9a6c-4e1b-a39f-6dded96817a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb49e03a-5209-4e19-8f0e-445d8063b5a5",
        "cursor": {
          "ref": "cdbb110f-18a7-4e16-bc9c-c24ecf2374e3",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c0b6fa65-4d0a-460a-8cd4-597e7f3c332d"
        },
        "item": {
          "id": "eb49e03a-5209-4e19-8f0e-445d8063b5a5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "21a89979-4a74-453c-a0e8-9a81dc89f007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a23cbc7-7047-47ba-9e5b-d208204c154c",
        "cursor": {
          "ref": "f3da6026-09ac-49e8-b44e-02b912ed5174",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a9b08739-d1f3-4d24-b53e-57d4f188df9d"
        },
        "item": {
          "id": "3a23cbc7-7047-47ba-9e5b-d208204c154c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7fae1253-e047-47e6-a792-31e8b52d052c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b5023b-79b3-4cb1-8355-84d6004097c3",
        "cursor": {
          "ref": "8f4e3846-2bcc-48c6-b1c8-2da60e77aeb4",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e3887165-86f5-4e64-b96a-cbcf5207b910"
        },
        "item": {
          "id": "e9b5023b-79b3-4cb1-8355-84d6004097c3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7159da0a-bd1d-4283-b6fa-c3b4755b24e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4d3060-6d8a-4fbf-bbe8-438cc981e573",
        "cursor": {
          "ref": "c6477225-33ec-4741-b371-1526cfd56ee1",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ccc01948-691c-47f2-9bd0-8be4eb074ea4"
        },
        "item": {
          "id": "dc4d3060-6d8a-4fbf-bbe8-438cc981e573",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "94d40f9c-3b23-4392-a06d-04eea4d54e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "68c5b214-c735-4055-83f7-29736fd52122",
        "cursor": {
          "ref": "6b20c033-6e39-495f-9ed3-cf4522348c43",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2c553480-811c-431b-a9b3-8b7b5821f154"
        },
        "item": {
          "id": "68c5b214-c735-4055-83f7-29736fd52122",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8dfa3ff5-593d-4e50-894f-537e773981cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "91c0a8e4-40c6-4c7d-9c92-e6454adec788",
        "cursor": {
          "ref": "ca15df25-00b6-4a15-9902-6eb07f710512",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6e8a79ff-9e1d-41ea-8e81-3e0d1af15a6b"
        },
        "item": {
          "id": "91c0a8e4-40c6-4c7d-9c92-e6454adec788",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7c4f5ec6-6e0e-4f92-ac3b-387b67a045b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "970dd5ec-e593-4092-9ea2-7a8faf820dbc",
        "cursor": {
          "ref": "ea236bd1-be25-4775-982a-4c6b8d8ee358",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ff7e3182-2fd9-49f5-9855-f2251a89fe9e"
        },
        "item": {
          "id": "970dd5ec-e593-4092-9ea2-7a8faf820dbc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5ad24928-522a-4c18-9592-4aafd2ce1c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a041f510-c599-46b3-8776-8d117e0d0ce1",
        "cursor": {
          "ref": "889821de-71a9-47e6-b5f0-d28537770c25",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d0a565ef-987a-40ea-92c0-4bbad8ea283b"
        },
        "item": {
          "id": "a041f510-c599-46b3-8776-8d117e0d0ce1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e1428543-d83c-4a58-8dda-30d7a68e3a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "3240af3d-5f86-4359-b2fd-dc51eeed6d86",
        "cursor": {
          "ref": "2856afcf-03a1-4193-9700-12f8305fd000",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cef0e70a-a9d7-44e5-9af7-d5dd54f4f61a"
        },
        "item": {
          "id": "3240af3d-5f86-4359-b2fd-dc51eeed6d86",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b443f448-05e7-4880-9807-4112a42110a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1109,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8700fa27-e3aa-4699-be14-f1a8f3b29fd9",
        "cursor": {
          "ref": "c4a9e246-8ed0-41df-98fc-1c6d8b335668",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d6f7f51d-ee69-44eb-857a-2f3e02fca1e3"
        },
        "item": {
          "id": "8700fa27-e3aa-4699-be14-f1a8f3b29fd9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "10cb78a9-1f0d-46f5-80a3-70cac88dd937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e9f5624d-8815-4808-937f-60d7eb08d550",
        "cursor": {
          "ref": "ae6563cd-ffd2-4d7a-b452-3a9fd40bd338",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f06aefe2-7674-4289-8201-d50b0c703929"
        },
        "item": {
          "id": "e9f5624d-8815-4808-937f-60d7eb08d550",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "83ddeb22-1275-4aaf-99a6-93ea57fa09aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1b44b338-8ca5-4672-a39e-cce1e29f0517",
        "cursor": {
          "ref": "fc65ae7c-a59d-4239-a1ee-d4cbe3e6311c",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cf10e80b-be88-4f67-b04e-9a85e46df1fd"
        },
        "item": {
          "id": "1b44b338-8ca5-4672-a39e-cce1e29f0517",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d9f63bf3-22f5-44e0-9982-2ec27a64d68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b20d6c3d-407b-429c-863d-746a6b082586",
        "cursor": {
          "ref": "ebdee040-e135-4378-a107-fde320909edb",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "381c24a4-b2ec-45e4-bbd5-fb8048f3fa05"
        },
        "item": {
          "id": "b20d6c3d-407b-429c-863d-746a6b082586",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "088925a8-a53e-4539-a8fd-e27fa6d989fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "95ea74c8-9efe-473e-a188-6c7b6ac1d1d5",
        "cursor": {
          "ref": "39c22463-6dd7-4d3c-a5e4-ec6b050b754f",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "821dea8b-69f8-4d89-8b0c-cb228b8c817e"
        },
        "item": {
          "id": "95ea74c8-9efe-473e-a188-6c7b6ac1d1d5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7f9c502f-c452-49a9-879f-5f15f0b45ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c13b04-04a2-49d1-84fa-eda66e5fe8db",
        "cursor": {
          "ref": "436edc06-3e60-4139-834e-3e834957df7d",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "61626f4b-9bdf-4ee1-8d9c-ea3de705f2b3"
        },
        "item": {
          "id": "c1c13b04-04a2-49d1-84fa-eda66e5fe8db",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ecfa648e-e9b0-43b6-829a-b677e6442aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c79fef-f5a8-463f-a421-1d05432c0f03",
        "cursor": {
          "ref": "ae9593a5-619c-4559-96c8-e435fa30c66f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "75dd46b4-2291-47cf-80f7-5206da7bf9be"
        },
        "item": {
          "id": "17c79fef-f5a8-463f-a421-1d05432c0f03",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f8cdb7ee-ca6d-46c1-b028-ebde0983cd57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57370cb6-de4c-47aa-8711-3796d0e57a54",
        "cursor": {
          "ref": "37eefaa1-cfb9-473a-aa1f-a5b22b14d6c4",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2d7b944a-f714-418d-9848-4c82d7b9bf81"
        },
        "item": {
          "id": "57370cb6-de4c-47aa-8711-3796d0e57a54",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3a297436-99d3-4c33-9f83-c8d902726243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe98ae1-88d7-48e1-a829-64baac78eb1b",
        "cursor": {
          "ref": "9b5008c7-88fd-4f79-b114-b8e0a1165c34",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2175267d-a99f-4a76-8174-06f4e523ddd5"
        },
        "item": {
          "id": "bfe98ae1-88d7-48e1-a829-64baac78eb1b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "46440bd7-45dd-4dd0-80b2-53d8c5d48c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b999cde7-c889-459e-953d-c3d4d45f246f",
        "cursor": {
          "ref": "27d2e973-70ec-4145-a1d9-3aaf61d3b285",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5da674c8-ecc1-4f6f-9e40-e952c34c8344"
        },
        "item": {
          "id": "b999cde7-c889-459e-953d-c3d4d45f246f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "78d231b7-430b-411e-9ccd-7590a40ded4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a657c08-38c7-4d27-a4bf-c0128d6f7ce5",
        "cursor": {
          "ref": "112ab11a-846e-4907-ab8b-ab3b19c78ef7",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "13c7e015-1c93-4069-ae96-e6507bee20a2"
        },
        "item": {
          "id": "4a657c08-38c7-4d27-a4bf-c0128d6f7ce5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "04300b7a-89fa-466a-b658-af3530e2ce4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9e3e68-8c97-4434-9b2f-aa538d4f6e90",
        "cursor": {
          "ref": "aba447c3-dc39-478f-9405-7bff11e81d63",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "71c4d9bd-a970-4e4c-a941-e794dfb3e0cd"
        },
        "item": {
          "id": "bc9e3e68-8c97-4434-9b2f-aa538d4f6e90",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f73deb45-38c1-449d-9382-d3d70b8bcde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b212f33-8628-471b-982f-79043ff5b871",
        "cursor": {
          "ref": "ac33e6a7-9c27-4efa-bf32-19ae5f89cfc8",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "65e18308-fada-4dd5-8d98-c27093669f82"
        },
        "item": {
          "id": "7b212f33-8628-471b-982f-79043ff5b871",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0c68236f-e48f-4a5b-8338-1d187de4da96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0177fb22-5bd3-42f7-b7b3-e3875979d280",
        "cursor": {
          "ref": "b2422d71-7a2a-4737-8eea-bcc7538f9061",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "908d0f2b-181c-4dab-be25-6e7a372037c0"
        },
        "item": {
          "id": "0177fb22-5bd3-42f7-b7b3-e3875979d280",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0b9aa95e-5067-4469-bcc2-8b22b0aa3b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961fba01-087a-43eb-a914-c8920117ab87",
        "cursor": {
          "ref": "3a803b39-ba97-4137-ad50-0d55e8ccaabb",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7f6b11f8-b424-440e-8774-4dd4984fb547"
        },
        "item": {
          "id": "961fba01-087a-43eb-a914-c8920117ab87",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d736213d-6410-4024-a944-1d477f45042f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4df0843-e092-4ac7-9f28-ef63f56e7aee",
        "cursor": {
          "ref": "ce6411a1-c988-4a3b-b305-5a0459fbc2ce",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "79a74e6b-2ab9-4b3e-b0c4-b6298d3f67e9"
        },
        "item": {
          "id": "d4df0843-e092-4ac7-9f28-ef63f56e7aee",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2bae5ecc-96ad-4598-8301-732fd2e2b774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa865a3-e1a5-4a92-9133-e72659eebeef",
        "cursor": {
          "ref": "e31533e7-c919-4945-898f-8dc89589f00a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ef797e25-fe27-4338-a628-ef2006623362"
        },
        "item": {
          "id": "7aa865a3-e1a5-4a92-9133-e72659eebeef",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ae6c18dd-d828-4469-8773-e7d467da0601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8de06be-0fef-4ad7-bdb2-4595e6883415",
        "cursor": {
          "ref": "8c7431c9-f3f1-49ea-86d7-3070e8be8544",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d56a2b36-6f21-4a13-a12d-ffe365257563"
        },
        "item": {
          "id": "b8de06be-0fef-4ad7-bdb2-4595e6883415",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9c98edb7-57fe-4ef6-b3e4-2911ddd8973d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1097,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "20f299f9-7ef1-49a7-a459-b69ad226f0f7",
        "cursor": {
          "ref": "33c14ea3-d7a4-44c2-805d-34148f9eaee0",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f9cf3a21-9de5-4f3a-a7fc-ff798a8bfe4a"
        },
        "item": {
          "id": "20f299f9-7ef1-49a7-a459-b69ad226f0f7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a6e2a926-4496-43f0-a2b4-2b81f79fdb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1099,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "71b81350-f501-4000-b230-eb6b5b461fe2",
        "cursor": {
          "ref": "209d9d79-4e25-411a-9144-1103d3cb0865",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "09633f1b-5a8e-4ec1-92e3-a7ce8c7c4ad8"
        },
        "item": {
          "id": "71b81350-f501-4000-b230-eb6b5b461fe2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "04ef7cc2-1fa7-4793-91ff-b74d44525428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ebf28c40-91b0-4739-8833-26220dd6cef6",
        "cursor": {
          "ref": "2299b92f-0fe6-4901-879d-41ea49619ea8",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "888876d5-3849-4ec8-82b3-be94cb18285d"
        },
        "item": {
          "id": "ebf28c40-91b0-4739-8833-26220dd6cef6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "985d9313-9877-4919-89ed-8c327c940374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1111,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c0405807-c3e8-4305-80f3-26dbf0913e36",
        "cursor": {
          "ref": "2296904f-61e5-4137-b9e8-13d37552ee3d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ef0d1091-36bc-40a0-9c4d-70e643209bed"
        },
        "item": {
          "id": "c0405807-c3e8-4305-80f3-26dbf0913e36",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d35e0315-520b-4da7-a323-59bb924aece2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f0b6a675-a5ba-4fca-bec7-abe113ae6d02",
        "cursor": {
          "ref": "44292f56-f86e-4a82-a298-e12e0e99c31e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c305b615-4664-4c75-bce6-1429a3a4a765"
        },
        "item": {
          "id": "f0b6a675-a5ba-4fca-bec7-abe113ae6d02",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "267f22fc-5320-4e5d-a770-a10b5aed3610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91117276-af3b-49d5-8299-015c67cc2e8e",
        "cursor": {
          "ref": "ae4d6737-8951-4e5c-b8a5-332a7d0a1553",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0471294d-841e-48ef-ac9d-71480bba0c12"
        },
        "item": {
          "id": "91117276-af3b-49d5-8299-015c67cc2e8e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bc70811d-69d1-4b28-8727-074b950c025c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8745565f-6f98-41b0-9e7e-fe518f3636dd",
        "cursor": {
          "ref": "a437671e-ee46-4613-828d-bad499487bf7",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "27635189-5ca9-4630-91ed-0783bb3861a0"
        },
        "item": {
          "id": "8745565f-6f98-41b0-9e7e-fe518f3636dd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "00ac1f0c-4473-455e-807e-510ee8b5ed44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ea18c1-f020-4bd2-bb2c-0c1c86b965f6",
        "cursor": {
          "ref": "07f0a7d8-c81d-4cc5-bf85-692e3fe45cd6",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ac38b95b-b0a5-416b-b857-749799232a36"
        },
        "item": {
          "id": "73ea18c1-f020-4bd2-bb2c-0c1c86b965f6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f812f8be-2fc5-4c0c-a2bf-6bd807d47567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b09b2f-d47f-4324-b44b-d619c0303423",
        "cursor": {
          "ref": "530a6003-52e9-45d5-9fd1-8ba080908b5a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4e047a43-3254-4267-9874-2a426ea8d84f"
        },
        "item": {
          "id": "c3b09b2f-d47f-4324-b44b-d619c0303423",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7a13fabd-b29a-490b-b886-5d08fd9c0efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbf2072-8d02-45f2-aaa0-a85015b69a9d",
        "cursor": {
          "ref": "218e741c-89f9-4413-a537-bcdc5a665923",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "183d70cd-0a96-491c-b3f1-4b1674bfe62e"
        },
        "item": {
          "id": "6fbf2072-8d02-45f2-aaa0-a85015b69a9d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "70b8e6d5-766c-4555-a3a5-f1dcb16c8ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f884217-5b3b-4f29-b025-c6f76c9631f6",
        "cursor": {
          "ref": "7f001cd4-923f-4604-9d57-b06f1a101348",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9d6bf50c-f245-4042-9ba4-448983c55e52"
        },
        "item": {
          "id": "4f884217-5b3b-4f29-b025-c6f76c9631f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2f131552-f927-42b6-bbec-ba1903c21004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c22b941-a164-4267-980a-c0686d13f310",
        "cursor": {
          "ref": "a08b7e42-676e-4e73-9274-8dc0742a87c6",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75cffdf5-b903-4e9c-a040-63ac117a964a"
        },
        "item": {
          "id": "0c22b941-a164-4267-980a-c0686d13f310",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "be90c830-2789-4667-bc4b-ca1efd58888d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81c9a44-9ef6-4d16-a509-96c357c34d75",
        "cursor": {
          "ref": "419ef1a4-dc9f-4bf7-b90f-16357da66fa0",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "03da5d23-4c72-44a4-9c0c-9a4756acb955"
        },
        "item": {
          "id": "c81c9a44-9ef6-4d16-a509-96c357c34d75",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1c37d66e-6104-4507-af88-7c3920eaf5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4539b1f3-c3d1-4dfe-85f6-e47f5a1aac27",
        "cursor": {
          "ref": "05f8bb99-d5ed-41de-aadc-2f250512a49f",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "140246db-0ad3-4294-8645-d89417d7697d"
        },
        "item": {
          "id": "4539b1f3-c3d1-4dfe-85f6-e47f5a1aac27",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f5fa4aac-5409-4907-8fd2-53600edea570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09372ba-6364-4e58-93b8-16a8e0f1646d",
        "cursor": {
          "ref": "7dee96a5-3e6e-466d-8deb-acc1b89d1ebe",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "04e8d46a-aa8c-4ff9-95db-2bb1a54bbeca"
        },
        "item": {
          "id": "a09372ba-6364-4e58-93b8-16a8e0f1646d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5d380629-d792-4584-ad31-9e52d7fefb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d362908-599a-4bc3-9d7a-4dad1b69442b",
        "cursor": {
          "ref": "fb0ddb13-5606-4b4e-af63-5f9c371b11e4",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5aced939-1962-4a9c-b074-2d0bac6a5e4d"
        },
        "item": {
          "id": "1d362908-599a-4bc3-9d7a-4dad1b69442b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "55a16d2a-1e03-478f-93bc-4884aa525b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f62ae9-db97-4662-b7ff-04b635d89362",
        "cursor": {
          "ref": "a9a0fb6b-61c2-4d6f-bef4-7203236a54a3",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "02b40b52-0123-4352-aed8-515d42627b22"
        },
        "item": {
          "id": "51f62ae9-db97-4662-b7ff-04b635d89362",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0337d1a1-47b7-4950-b724-8b9ab1e91bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f14a5c5-059d-4a34-8eb4-dbd2217d984e",
        "cursor": {
          "ref": "de268554-fdb1-4105-99f0-979107118d73",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b1976247-c9ce-4515-a2af-1674b5c273e3"
        },
        "item": {
          "id": "7f14a5c5-059d-4a34-8eb4-dbd2217d984e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "384e89c4-3226-4ba0-9c83-7fb4ae6f6e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7c7405-4195-495e-aeaa-3c681be4a593",
        "cursor": {
          "ref": "9d34c894-f22a-44ed-8531-2c9b1980d458",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "95621551-568e-4511-bb4f-cef1d4c8f63f"
        },
        "item": {
          "id": "ff7c7405-4195-495e-aeaa-3c681be4a593",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "61dbd031-2fa4-4886-b79f-7bd3ee3fcc88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344f14cb-e99b-480f-a613-e7baa45a1633",
        "cursor": {
          "ref": "b377c956-8817-43d2-baa5-b279f8ac0908",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "658c3df3-d041-4459-8253-bf36c795991c"
        },
        "item": {
          "id": "344f14cb-e99b-480f-a613-e7baa45a1633",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a1ddedbb-6f06-410d-8a95-f892d4cb76a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb02ad62-e640-4215-9196-0f448e996dff",
        "cursor": {
          "ref": "9cf81e5a-3463-4e6b-96e8-0af754c4bd5e",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9929d9d1-df18-406a-90a4-4c1f9dfc0feb"
        },
        "item": {
          "id": "cb02ad62-e640-4215-9196-0f448e996dff",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9767760f-6fc1-4a97-932b-e3a66a0c032f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d055f0-fce3-484b-913b-b51893eb97c4",
        "cursor": {
          "ref": "b45bdb5c-e857-45d9-99f8-56e148f7e124",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1819f887-1f8b-429f-a1f4-dccac0c40221"
        },
        "item": {
          "id": "d4d055f0-fce3-484b-913b-b51893eb97c4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4dbd43a0-c7cc-4054-9e15-667bfb6c30e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a921474b-f3f7-47b4-9f4b-5da1d1760320",
        "cursor": {
          "ref": "d9cd8cda-efea-4754-970b-7087d5a05737",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dc6e96b6-dfee-4e4d-93db-6a541b747c87"
        },
        "item": {
          "id": "a921474b-f3f7-47b4-9f4b-5da1d1760320",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8fb44f17-5c05-4c32-a01a-b345f9fcebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58554fce-bc08-48c0-95dd-9278214957a6",
        "cursor": {
          "ref": "73dc01cb-d75a-4d26-a463-c023e71d7553",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e106d81b-67be-49ec-b47f-6c1b28b427ea"
        },
        "item": {
          "id": "58554fce-bc08-48c0-95dd-9278214957a6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "96ca427d-d3b3-45bc-8f2f-21df96f53184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b0a967-ec5a-42e5-a789-509aaac91398",
        "cursor": {
          "ref": "c5ddbc36-aca3-4ab7-a2aa-9ac141d6ea59",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "610162f0-68a5-4b24-9140-3ca648fb2570"
        },
        "item": {
          "id": "b0b0a967-ec5a-42e5-a789-509aaac91398",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "88349634-7754-4190-b63f-269e0effd442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931ea34b-5f42-48ad-b22a-dc4b941b5857",
        "cursor": {
          "ref": "6010c0e7-9fc3-4407-9464-86ce07585eaa",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4df74b99-e9fd-4e28-88c2-18f4ad919a99"
        },
        "item": {
          "id": "931ea34b-5f42-48ad-b22a-dc4b941b5857",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e75db7a1-cf08-4c86-9e03-dd75e659d20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be41f26-53ec-4d14-a109-69cc071a1c35",
        "cursor": {
          "ref": "52150e7c-bb6a-44ed-af17-59c0638d45ec",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4a7cf98d-2393-4905-b351-8bb768d78bf9"
        },
        "item": {
          "id": "8be41f26-53ec-4d14-a109-69cc071a1c35",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "87b91a68-3c3d-481c-b726-12435c8e8e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81bb6b8-cd50-46ed-867a-efdf772c672a",
        "cursor": {
          "ref": "a8eb4493-0bbf-4c78-a557-a7e5932c7e54",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "50313121-69bd-4b38-90bb-3cac116085d4"
        },
        "item": {
          "id": "c81bb6b8-cd50-46ed-867a-efdf772c672a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2d80ecc9-317d-4229-8604-ec856e3007b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fdf61f-8c56-4882-88a2-894ebe0528b4",
        "cursor": {
          "ref": "37d1ca5d-1f35-4f5e-b78d-e5d8dbdd3245",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4d4b862c-1bd1-49c7-b744-9edcd9849fdf"
        },
        "item": {
          "id": "04fdf61f-8c56-4882-88a2-894ebe0528b4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "93279122-4162-4d94-b6e2-17f264753de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d131cb00-8cb1-45ff-9720-b6533f6f993a",
        "cursor": {
          "ref": "73084619-5523-4445-b7a1-c8057878e697",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e220378d-9b57-41e6-8782-129aff404d78"
        },
        "item": {
          "id": "d131cb00-8cb1-45ff-9720-b6533f6f993a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f68fcee0-032e-4b67-a63a-1a948961646a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefaf54e-f5c3-4c93-8550-a07b25eb96aa",
        "cursor": {
          "ref": "ce4b33e4-2134-4597-b097-1ac696ea107d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d6410a71-337a-41ad-a181-02ef645bedb9"
        },
        "item": {
          "id": "cefaf54e-f5c3-4c93-8550-a07b25eb96aa",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d74c12c5-24be-4b3a-baab-475525cbfd50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4368ce-0939-4465-aea3-0ae0fc7d3457",
        "cursor": {
          "ref": "edb0885f-3a29-4113-8273-a2e407c07690",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f318466c-6da5-48e1-9efa-4535af69790b"
        },
        "item": {
          "id": "fa4368ce-0939-4465-aea3-0ae0fc7d3457",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "10c00fdb-a82e-4f8d-bcf4-9daf6151308a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eea109f-9c87-460b-b0ac-a48e6dffb6e8",
        "cursor": {
          "ref": "29d762e9-5950-4846-b0de-5551a50989ff",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6619a3e2-0e84-4bb7-9144-e4363f5c6d72"
        },
        "item": {
          "id": "1eea109f-9c87-460b-b0ac-a48e6dffb6e8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1c013006-87af-41ab-b877-d56628f576c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8289eb-2a96-4a57-b88b-77e1dd0fa169",
        "cursor": {
          "ref": "92fde45d-d39e-4b2c-8e64-d7fa54cf3a48",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8f8b79df-ccba-4b62-aff6-28fa8e54974a"
        },
        "item": {
          "id": "2a8289eb-2a96-4a57-b88b-77e1dd0fa169",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "647e54d6-7d68-4e5d-9293-f5a8cf2ea1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb7f5c2-2c7a-4d28-8550-30b4e38f1fd2",
        "cursor": {
          "ref": "d677b24f-0ff3-4e79-971d-a13e49e8f15a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "010b1101-403d-4ff1-9ed5-745a6858e6e6"
        },
        "item": {
          "id": "4cb7f5c2-2c7a-4d28-8550-30b4e38f1fd2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9fcf89c1-f1bd-4b01-a77e-6f354b645a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccb751e-376f-4b2f-9430-1f36e21a354e",
        "cursor": {
          "ref": "02b6dedb-9435-49d8-a8db-158e4326ebaa",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "19639299-6e9a-4742-8f93-3060494aebb4"
        },
        "item": {
          "id": "eccb751e-376f-4b2f-9430-1f36e21a354e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c896f314-8150-4b5e-971c-2ad3234957c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeabb2a7-7d9b-44c6-9be4-4d6f45bbbaa5",
        "cursor": {
          "ref": "bf04543d-160a-475d-baf6-cb042d100f42",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e290a35e-6612-43fc-b3cc-f736cb823863"
        },
        "item": {
          "id": "eeabb2a7-7d9b-44c6-9be4-4d6f45bbbaa5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cde124f1-cb18-4c95-8bb9-6fbd40ec7102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4571b7-02cf-4aab-a016-68ed704992e0",
        "cursor": {
          "ref": "3bf9566c-3dfb-441e-b906-202f8ec04bd8",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1e092cf2-9e5f-49d5-9a70-c93bc9fd2cfb"
        },
        "item": {
          "id": "7b4571b7-02cf-4aab-a016-68ed704992e0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "07e7ca23-2c6f-4c61-bf38-36941d77eb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a9a019-acb4-4faf-82a1-3e82c8f61f8a",
        "cursor": {
          "ref": "4ec50d6c-0c47-4dff-bc54-1d61bb204849",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "93b5d297-dbae-42de-93d9-20e1249c5f7e"
        },
        "item": {
          "id": "d4a9a019-acb4-4faf-82a1-3e82c8f61f8a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dda6211a-cdfb-404a-a688-d987319db1db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7dc189-ba50-45ed-bf98-ca93dc597220",
        "cursor": {
          "ref": "7e0f479d-b2a4-4709-aab1-67d2ecfe4332",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d78e56c8-fe3a-4778-8654-8be525260486"
        },
        "item": {
          "id": "eb7dc189-ba50-45ed-bf98-ca93dc597220",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "422c2b01-f02b-44f9-845f-0d34da0bd4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eaad992-eb8e-4e7b-9df3-de093905367b",
        "cursor": {
          "ref": "2330a041-e617-4eb7-bff2-f1d0e98d9fa7",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "612eb299-bc4e-4faf-83c3-5d0771e0880a"
        },
        "item": {
          "id": "7eaad992-eb8e-4e7b-9df3-de093905367b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d012b0d5-5ff7-4d9d-a67d-0c3af2405f78",
          "status": "OK",
          "code": 200,
          "responseTime": 1086,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "070c1d45-dfb3-4db8-be64-598a60115ad8",
        "cursor": {
          "ref": "d5b618ce-d46f-4fe0-9eb2-b27b0b00702f",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "15633941-196a-49b3-8eb3-2b542a10e7e7"
        },
        "item": {
          "id": "070c1d45-dfb3-4db8-be64-598a60115ad8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "87554413-e64f-4c3f-a727-86133b9d8889",
          "status": "OK",
          "code": 200,
          "responseTime": 1138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa892cc7-9374-4054-9bd8-1a2c064aa0f3",
        "cursor": {
          "ref": "5f45cbb8-d681-4e18-be6a-c9980408d532",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de6cb6b0-33a6-4fcc-8b10-114060eec869"
        },
        "item": {
          "id": "fa892cc7-9374-4054-9bd8-1a2c064aa0f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98bbfa93-06ab-41c7-a9a4-13250a1f26df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa892cc7-9374-4054-9bd8-1a2c064aa0f3",
        "cursor": {
          "ref": "5f45cbb8-d681-4e18-be6a-c9980408d532",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "de6cb6b0-33a6-4fcc-8b10-114060eec869"
        },
        "item": {
          "id": "fa892cc7-9374-4054-9bd8-1a2c064aa0f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "98bbfa93-06ab-41c7-a9a4-13250a1f26df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285870d4-fb2e-4490-a516-4c78f116c390",
        "cursor": {
          "ref": "0c29ab31-d0d9-4958-a42b-19de5ea913ff",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "69ffb084-41c5-4c73-91a5-1081939a1c0f"
        },
        "item": {
          "id": "285870d4-fb2e-4490-a516-4c78f116c390",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8d9ed8b8-ad4d-4315-ba9a-93019f453235",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a7d608-f253-4a7f-83dd-4eacd98b2cbf",
        "cursor": {
          "ref": "4119d9a3-5509-4d24-b370-4d2c26d6d89e",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "83e4a013-9127-4910-8711-1b57f71e84f9"
        },
        "item": {
          "id": "36a7d608-f253-4a7f-83dd-4eacd98b2cbf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "90b03892-5fe6-48cb-aaf1-bfda5b1120e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}