{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e8fb8898-e837-4f92-ae3d-415b983e6771",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e3573428-856d-4f3d-8746-c629f0e1b8f4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "acffab2e-609d-466d-ab9e-6eb1a7cd4280",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0958df1b-5c5e-4f4c-be81-adc24418deca"
                }
              }
            ]
          },
          {
            "id": "c743bc16-6685-4265-8546-971fdc5bd4ac",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "75e99e36-efdc-4666-80ad-2794bce29743",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d18800ec-eb92-4273-b777-4a80a34d91da"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5c74fd60-a688-4ddf-a38c-0e64d69ee15b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9d46fd22-c5a3-467d-92cf-fefc0048df5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c274c61a-b69c-454e-a990-911904954fb7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0027e1db-0777-4f94-89ae-b72121f0c767",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9b669cd-05d0-4c22-af68-77abe61db53b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "927b6981-d950-4988-9f8a-36f0ae979cba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13ab9823-2008-4b2f-a868-efb6e36134b9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ff8ff74b-eb4a-4e25-9e39-3ed41390cc4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7f96e87-7826-45fd-9a8b-87ac5182dc47"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81e7a897-6cc9-4a8f-a190-d5cc469ba89e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8d6b5448-251f-4503-8182-f4982f93cd10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4bbe12a-36b9-45bc-9c52-9e95c2e8bb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d7b0537-81b3-4d39-88e6-08b7c0389e23"
            }
          }
        ]
      },
      {
        "id": "891be3a4-a926-4952-87cd-90a421ed7fc3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9e6dcef1-aa20-4cda-9c7c-46d09d6d72ff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "458fd860-8205-474a-89e7-6b6bd3c0ff27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4b8541e1-16e9-414e-9ac6-3e7c10802068",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98e5bd8-ae4b-4cdb-9bf8-b119dc5e11ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f52ce3f9-1bf6-4a7a-a2e4-0a3274b8d989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b620f9-7c32-42df-9961-c2ea1192e8cf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6585ebeb-9fb6-449a-9543-b615b40d2516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b5cc423-0895-46e2-a2f4-f5b8ebe89eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa46b56a-4380-4d3d-aaa1-fdadfc06acbe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29adfbe5-b341-40dd-896b-771d2d451a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd669c1-9549-4bac-93a2-efbb328a43b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "969ea854-8aef-46d6-9140-b80246bb1703",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d78b04a-858d-4bbd-bcd0-18e10bda4614",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78118e9d-72f6-4c51-9f86-9ceff1885a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "153dbb1a-2218-43a9-b54a-d3b78e613ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771fd546-ae79-4557-9c4f-0c603f33d4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75abd089-5139-41de-81b8-7003eff95c0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3acc34b0-639a-4ac3-8cb0-9d8210454ce3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e7244ce5-2787-4ab1-b3f8-9b3bf682fd21",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "174ed151-a507-4020-a8c2-8575ccd7134a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e45105ff-2df8-42b0-b236-9db886829f50"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccb06207-eed7-404c-83ef-19268a4cb1c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ff288f91-8284-407f-9cd0-d1a77281bc50"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40549781-51ad-484e-b272-46f35ea98086",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22875659-3214-46e6-bf60-1751a3b7a2a1"
            }
          }
        ]
      },
      {
        "id": "2148b767-c31f-4203-9761-23900b20dae2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "08899c6b-392e-4a51-a5df-bc4a58ed6ba4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1882a4c-5272-42f7-94f5-026b29b5b351",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "53c38384-f972-42cf-bf79-7cb1bb5c7a3f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7508e05b-5d2e-4715-83b7-8a3af8c5b010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb4f21e-13d7-4eec-b413-66d1db8cf2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa9330b-ec9b-45a6-a10a-841e8fc0d477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "789e1980-67bf-49d5-9280-52798e3fd0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08975b1c-d2ed-4de5-b0be-4637dd16332e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027a3eab-695d-4084-8ec6-fb66aa33cdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef74c96d-b5f7-4d41-b033-2555094cad4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d558aa-743c-487b-9241-d015b90d9711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75577922-08b7-4505-84ec-7a7424df5aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29847112-6613-4f80-93eb-44d83b417189",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09281ea1-7c3e-49f0-8379-3509ac48a9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0069b306-4507-4b43-90e9-6a1ac2719715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17aa30b6-a22b-4edd-9dfe-4c4d1947e948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2409b256-210e-4d0e-bb66-480480bc2757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fa20fc-cc7b-423b-bc9b-1df43985362c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129acf3f-d35e-4e69-9ffe-c9f8d8f7c622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5093937-2f85-4348-bdad-cc41982007d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4339b7d-295d-4486-92f3-a6a22c40c81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f34cc6b6-16fa-422f-9175-3d63fd6eb526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448289a8-6ee1-405c-8b00-eacc2816bd4a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5c5c6d-fdc3-4999-8c7c-7c7ac087935f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fb5d2e-83a3-4f43-aff4-d2a9aa4450e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c41850-d69a-4424-9d67-3d750ca36694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71dac073-3386-44ac-9316-5229d6f72a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8207eb07-c465-46cd-bbfc-cf8e6c43dd94",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282cb78e-e7f7-4e4f-a49c-803278e2cdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6f5b84-f10c-4c33-b16e-4d4622277044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5423f2-b01f-4f86-b96f-3231a6be3807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b882cbf-6596-4f29-b904-38d770e7a8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6271e5d-ed99-4b3b-84f0-0f7a0374067a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623f774a-41d0-4862-877a-b3f7ceef888b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9a0561-efe2-4116-a470-48ebf0d70e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5043bd-36de-45ae-86a1-8321da5397b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e59959f-a3c7-44ff-8954-a3b462042637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da7c9be-81da-4938-b20e-1cc7e1f53106",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b7dffd-2b5e-4ae9-959e-353e161d4e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57657164-e4ac-4843-9f72-8523265f1463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a850e00b-3829-4769-aac5-037a3fb72da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6889296-5f60-4819-a430-070b344a00d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf998151-6c57-43df-9e3c-036e2a6fa98b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cfbdbb-a8a4-4fb0-a835-94789d6652e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1be7ff-4156-4693-9527-44b7fd9821f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d08602-826c-433d-b48b-b9cfb74000ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82c5b714-6331-486b-9b59-58c35bdab96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59c7aa6-3c40-4fe6-a71c-0963be4e5931",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87841f87-d328-4335-a95f-67c96bc137c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d42c98-11d3-4b0c-9be3-1ea204ed8b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca3877c-e700-4684-86ff-f21f01a81372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae34eb17-584e-4f99-b0f8-fa4082e4d077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e4ebf1-4afb-4cfe-87b7-3ed19d2450ea",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a089c1-978b-46c3-b4ab-afdb1d3d9812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3432bf0c-3ba1-4be0-b947-31befc20c678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78db1768-a455-432e-ba22-197b8e205a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "297a70d5-b5d0-41ed-a413-256ceddb3678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c125ed9c-5091-4d5c-8967-fade5288857e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a8f2c1-6c4e-4550-860f-e36416fef9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e8d494-4590-43c4-9ee5-f4f98102688e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9f6603-70f4-4179-955b-f7b0a1a24ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a4ef2e6-6495-4392-be09-7ccd00d4f1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b76c6f-2c74-4ef0-93da-a895500fb159",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6f3b0f-52c4-4316-ac24-73952da88f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef9ba66-84a5-474f-8a1e-2ba6a5f40b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd7261d-42cf-462d-bd86-d397dc349d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1bd1a6c-877d-4387-aec3-a6cd0dbf9c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06a3a31-7f0a-44da-be91-1c6280c42028",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248404b2-f62b-496e-81a7-4371bd245020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ff0689-0428-40fa-a87a-7582721ff72b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6410b5-8537-4007-8f65-55c5415f605d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f935b474-52e2-49c0-943b-0aecde227c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c95c57a-be0a-4a7b-bb4d-c60bc01cc9cd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d17114-06ef-42b3-a408-acd569efaf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1937673c-4633-4100-8739-f608c4221abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c1e992-18b1-49fe-b97a-8c4a5873b224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2579d7ad-132c-4899-9684-e3315a1a3f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a19b6a-7f24-42c2-979e-12c687eb13db",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b14e3c-4dda-4ecb-bbc6-625b0e095876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75fc9d7-a47f-43e9-b94c-a7e50161e968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff718614-17ed-4da0-8814-98f35e4d2d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8f0f49e-b35d-4ac6-b691-69e55cf8b489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ed4527-36e4-4d4f-80b9-43aa7648aa5b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162ecfda-92a0-4a7f-9bc6-c35724b1b60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71429a2c-51e3-437c-8a51-52b72a9857ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b990e3-78cc-4954-94ac-f53652bdd54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79aa142a-18bf-4ccf-94cf-91fbd6ffc521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d43d23a-831e-44e5-982d-50e7895c71d4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0564be-9571-4269-a480-578644d00cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420bef06-c49a-4852-a31b-523e82f36458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05f505c-ab74-4558-b563-3a866675a6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c6210f-8c1b-4e1d-b056-1f91e255351c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23531c62-f238-4af9-8f48-24ef39a2aa82",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfebb86c-a316-496d-b504-762724edcab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996be43f-b468-499c-bee9-493b22749153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c0552f-cd92-4555-be74-8010a443da71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efdfc553-3ddf-4647-8cbf-c06e9894e487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34caf3eb-40fd-47a8-b967-d4f7a0652456",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f88393-86e2-4f31-91ff-01adac591850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47807c0f-57e5-4410-8cbd-2c537e556b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1e5ce3-5795-4f38-aab3-39e4639e184c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "815d7ee8-c6b4-445e-9681-611697597aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d99a3ce-d1bc-4578-ab14-2eec5cfc8de7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb50fe2-59a8-498a-aa27-56bf8f9145d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58830963-d350-4c77-84c9-220f9634978b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac0dc3d-dc17-4a4c-b681-91fae84db8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a45faaa6-85b9-4777-99e5-ccfc17e55462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba6c957-8a43-4a38-9b7e-5d5dcfb31cec",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c05d99-ef75-43cd-bedc-dea2da0b1d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffb3dcd-442f-4697-aff0-8b3335862b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3463b639-fe97-435c-8cc9-a91765b190d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc56ecdb-1189-4519-a4f2-7fcc1bd0d0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff9caf8-4cef-4103-b17a-f60057485ae7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2f5474-6364-4130-9b0f-82b79391ea30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322f1488-1d9d-47f6-bcf1-624234d8ce0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80634cb-f266-47af-99c7-b99f5f8a13f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df90032b-3376-4c11-aacc-f3b3e55834f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9237af-88a2-4058-9357-eec4c421f7e3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9be8be-8bf9-4d99-bbd9-93705b403f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071724a9-49d1-460c-96e7-59a415189c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daffe0c-1589-48ec-97d4-5294f1dbe644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ff9e68-48a8-4831-b753-f5d0a7b55766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033c5537-0898-4137-bcfb-96267d88ff44",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0802d3cf-613a-4cc4-a925-e32cf616088a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2792d4b-8fcf-4a2a-a2d0-e16eebd4f192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd2f6f7-ca76-4f68-9c23-dd1568017564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a8a505-d54b-4532-96df-ed1ae142618c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf4514c-6d4e-46dd-ace9-8a3aecc89c0e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6139479-12f2-4492-9506-ca852473b73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb5fbe3-2b7c-4cc0-9c5d-b4ad1aa69aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec03c11-faba-4aab-af37-4adea278428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b12a7ca-ceb0-4f8b-a2dc-a857fee0a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391597ff-dbcf-4328-9c2d-654eae434ed9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240e437e-a524-461b-98eb-2d8cd1977421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e27d53-b046-4f3a-ac40-b13c198843f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c63606-0ef7-4d3b-8289-b8924c1521f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "320a6dd5-cebd-44ef-846d-3b1a38a1acb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b472797-0ba1-447b-ab52-80bee4abe391",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce613e2-c860-469c-9d8d-8174578f84f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96dc19b6-b6c5-4624-9113-d27843cb1e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8f6465-f142-4698-9a1d-5a9a670f8c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "472d18af-5e20-4246-8519-1b266db8ef82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3fbd4b-66c6-4d15-b595-f373ac79ad02",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a91af01-f2de-484d-9232-c673d064ee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67414d37-e57a-433f-9fe0-21f12797c833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f9972d-e021-4205-a21e-5ee503004ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6d0d8d-46a1-4c6a-a946-b9e56b326cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f555cdd6-5320-4a6f-8a21-7c981d9f201e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21715657-f60c-4a7f-aec8-cdb0caf411f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce6f420-4d48-4205-adee-90464c4fbc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0699fe5-53bf-4e30-8d2e-e856750886ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0f3001-e604-43ec-88a6-bed45916fa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1087e01f-cb65-4f5a-a2c7-ea45384a24d1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec030740-4bb6-46f4-a6c6-ce0ad85615d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60dfffd6-070b-46ee-8b15-c2999778df23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967f9062-cf40-433e-8018-3dbaa219344c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "284a645d-0181-4633-89f1-1eabe0059df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e303fc6f-4e81-46f0-ba3f-35f483a9e914",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b01e3d-35bd-46dd-ba8d-42c7d58d4f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46072a64-a25a-472a-9ac6-0c6f845979c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a45f0f-2544-4d6f-a082-548e539c9cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92056338-0811-4b7e-a4d8-30a6d660b8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420ccc19-b39a-41a8-a7f6-cc90d3633f9a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f3d6e6-5746-434f-a19e-df13ada406d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e516fd7-3a15-42df-a410-89f043dc685f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1f0349-002c-4b03-a0a6-823424481279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "372ed38a-4d16-4a1e-904e-aaa7c0a7a469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f45e4c-e4ef-4280-9c5c-1821932b2125",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf613603-b7c9-4e0c-be98-19b3bc36aa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6442a5c-d4cc-4b21-8163-0b6782aa5fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ad8435-208f-4ad9-93cc-b0115637ae27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd96f297-f2ab-47f1-aa05-38cf2b0f612f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6272b2f6-5c49-4158-b8cf-36beee69d3d3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d5d373-c1fc-47b5-9c65-c020e3762920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13516735-11d3-42a5-92e9-bf5e47fe9067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1db4616-3ea6-43ef-a4f6-7276219d2875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "339721b3-d5cf-40aa-b686-908b1f249495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc3c2e-78cd-442c-845c-3ee534e486fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6905302-464c-407a-b9e7-5796be7ccaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "475e0e63-6bd4-4cad-8b7d-04d010e8df53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799b278c-87bb-474a-bd0f-79a15dc6bb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "651566fb-6a2d-4614-a1e4-2ebad724c1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae040ef9-30f2-469f-bb9a-53cdf7d9622a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4875b11-ec00-44b3-a313-af47fc678f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac14a1f4-a405-46b4-99a8-5a5485414289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433cb3b2-72f0-4958-8ef8-7a1735888b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f8c2cfa-9354-4ec8-ac06-b7fbfc9ba9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c887c104-0a59-440e-97fe-8b0a46f631f9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b20c95-96eb-4fd5-bdd5-370843ad31c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "915ee2ce-f9c8-4e06-baa1-d18d82b886a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b05272a-3c23-4c44-842b-48c2a235232a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e676b56-2749-4672-b173-ae312e635f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b5f48b-2c1f-4ca5-afc7-e4e613854747",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa37e752-cef0-4d65-bc4a-6c27e3281561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3128803c-38c7-412c-b744-e420959d9358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758aa7b5-7b94-418a-a9b1-3ca5a796cc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7867d700-5d3a-4e3a-a973-61d0cdaf9ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf07fe2-e45d-406b-9282-4ac32c08b162",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9576cd1-34d0-47cc-ada8-7c092a86fcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74916568-906f-4314-b444-382561f77a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a938018f-1d48-4493-840b-8d2aa7e74970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b009dc5-079d-432c-8a60-69f49d245b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1d0e8b-9d68-4054-9d6d-bd463d720cd4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73fbea6-1e1f-46c2-85cf-c206f2115e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b587cc-977a-465f-8537-53b26965a4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd01139-5ffb-4634-85d2-a8249749c8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a48a3c08-56f7-4064-8348-d101b6bb7f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21462ba-0c8c-4cb6-93d2-aece91c12229",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b35704-fd3b-444e-b368-f6e8bbf841c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e675c1e1-ef12-4b31-a76e-4d4864844c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf160eb-121d-4ba8-90e3-b83c8c0ad899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "16f97caf-f4b3-44f5-81a5-ef3053036892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11ec616-5339-437e-8d3b-8f7e0f6e6594",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb988a7-7fd6-40d8-b19a-65049108da1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f98f74-94b9-415f-a5aa-6713f07925b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab28f08-aa56-45eb-a8a7-3179737590ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "51aab04c-cc99-489f-bfbf-09ece3faeef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e810e26-516d-4ad2-ac8e-83b97fecbee3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "054e5cda-49b4-4e20-8e16-8a1cc9ee4e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f496daf5-8960-4458-9d5a-5a22e1cf71dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b8d0cf-c64b-4d1f-9384-c6e5007b9378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "530784b7-2c30-48da-bca3-1cad0dd51283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386dafde-a30b-4729-bafa-0585548bfeb7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a089e0aa-03f9-42dd-9440-0433ff51d4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877a9b8f-a961-4734-86bd-e41b2ff7d6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f270277-e3eb-4571-a81d-92bcd04ab582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9145345e-d599-48d0-a176-6c9746793d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3973e2-5c16-472f-a017-961f7ff3ab91",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b29c6a-4e95-460a-b1ed-664205988d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955e4acc-34f1-4fa9-b682-e41cd2dbb740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef5f437-a112-45e1-8465-9e0301da2c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f113616-a5a2-4d68-a850-a9a72a3bb6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52112ed9-af0e-4571-921a-fefde09aec36",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910204cc-31ff-46db-b9bb-20655b13fdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47e8787-37ac-4a1f-99f0-2b5ad7b94c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8025c4-7151-4707-b8f8-98f8e4832980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0123181a-574a-48e0-a875-9076e66c19f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233622e1-289d-4937-a2c2-b5da45d80919",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6b58bc-12da-4602-b56b-0db56efafd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3ec106-0ec3-4ed7-92cd-6df790fcd5d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0202c439-1eb7-4a8e-a3de-210991f27ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d268c5-7cbf-4c50-9009-3172a02fcb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f680e2-8f18-422a-aee4-d65bda69b6e6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f9f113-aeb5-456b-b669-b43852cd7e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ab0ad4-d2cb-4135-8631-5723237c7eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9def614-681b-4881-a939-61bac7fcb86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09eb0899-aea1-4105-a9e5-d18c0ef34c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebf832f-7eb5-4658-bff7-c7b7aa6cbeca",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1cf500-1075-44b0-ac47-a7d16d3e26ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2188c3a7-8488-4941-86c9-19d399c87168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddaa6537-76c7-42f4-a915-39c269cba82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae587d4b-372f-4618-bece-85dfc1988ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b2ba2a-2773-4acc-a68f-67811eaa3359",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b144058-371d-48ca-8792-999156a55a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9cca13-78a1-44ee-90f2-6ffa827f7147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a34a05d-6bea-4890-8cb8-7a670926ea64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3495d42-f79a-4855-a7d0-f04af9c3f6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494c9c63-86d3-42ab-b311-6481cbc8a6cf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be02b004-c51a-4576-9230-11736fa94f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93d86b9-9834-4058-971b-b37445f4e3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6940316d-6755-4f36-a2dc-205139961e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77e5c0d3-24fd-44cc-ac8c-40cca8610b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3f17df-064d-4099-ae29-5be4a98c0cb8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17307757-1bcb-4cc9-889f-e6d8d00244eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53887667-9354-4a26-989d-b61afe6dc0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e67d77a-7a11-438e-901d-ab023a121469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9a67b8-a765-487e-816b-a5c6c9dbd037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2a7fc1-93e9-475b-b164-2dfb482bc468",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec9ac4a-59bc-4d31-bb41-397ce3bcf22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6cc74c-e676-4fad-8ea8-18f274db595c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eea330f-ecfc-4fb8-ba37-7e7bc9710e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30153709-9653-466b-9376-76439991b770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a550a0d7-3236-4c0e-8c30-baa936527526",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b650fb-f66b-434a-867a-38bf18b87885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1c7af3-0bb6-4b38-b760-0f09b558bc7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e357db61-c82a-4e1b-826e-67eeb6e0ae44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d551c5e4-1e8c-4e92-9fa5-049d8428ce92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bc0f76-4bf6-443c-b19c-601df63769fc",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1004197-1d71-4c9c-b42c-7c1c0a6626c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea77523d-753b-43d3-ba08-b03a2bfc4231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3337ba2-15eb-4561-86b7-847442d4dde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2442c76c-2aa0-488a-b514-04f2af6dea54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16990d7-65c9-48d9-8b54-c554f68243ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0b6867-cf5e-404a-9dea-f9cbee122919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0aa776-1cb8-40c0-81a7-ce427b13a0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6608c198-32e0-42f4-b251-1abfd813c79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3ddd11-5de6-4568-8e9d-b945717bffec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b722081-3003-4d4e-ad09-a5d2fc058e28",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53043c4b-fe4d-48a7-9b99-175768fc74ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea1915f-1dbc-48f2-8e02-abbc939ac7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aec848e-8bc3-423d-8c57-84c43446151d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec481a0-dd6e-4518-9b57-2d756dbc0dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c814ae5d-4e18-48fa-abbc-d29035d5d8a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997b3e27-dd2a-48c7-8f27-40babfdb3c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fb1ae3-1111-4f04-87f6-881e99c257c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec87b39-dc20-4d2c-a84e-c4b85abdae75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "67f0d0fc-3689-4c83-b6ba-675075fdd3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edbfc01-1cdb-49e2-9c46-6a6466eb2d4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461ef4bd-7577-438e-868a-85ea2a026868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969859ac-3bf3-4a31-8bfa-e00a5a640bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b9d108-b56d-41cf-9c13-9b4fa21fe2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c67f6054-91ad-46fd-a442-7488cac63718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b82de9-8db0-419c-ab6c-6ca664e168dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6749f71e-9081-4e39-b35c-ade317ee7614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc80ab04-4732-4108-a076-cac72ecbdaca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04a6e17-2d92-4d2f-9e50-b1584de2ed72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b47b2b-6e33-4811-9be9-921b44c06e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881048fc-8a87-4c63-ace6-3a813c0e3f94",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a158dc81-4ce1-490b-8c09-0e296feacf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0230baae-685c-48f3-bd7b-2522f26affb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c4ceef-24fc-4011-8ce0-9f8391526a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd4ab95-8d14-4c22-93f8-e6c2004a1bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8d20dc-82cf-4252-bc46-08d899c0c498",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd192a6-f780-458e-8a3c-1d5140147294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856ff3d2-aca7-4499-89bc-8d7ea9ec22d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad065734-cb57-491b-a00f-dd9cdb10c1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f80c58f-2874-4be2-97d0-d0f5204b994a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa10a48b-6000-4637-b390-2f428f120056",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f94a648-f212-484b-99ac-b4bf9d75e913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb17354-c43e-4d4e-9b28-f5df45b3143b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df211708-5117-4dea-a910-7149c507b25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe9db55-5b6f-494c-b34e-8dbbb1566b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ea206a-ad89-42aa-96e6-40de9c1424df",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a644fbad-9ebd-4c83-b934-301168232a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac683dc-c097-43cb-a8a8-db7102fbff18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fbf3f6-18d2-4ff2-b8ed-890f869e98e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dd031b-e283-4e50-8cb9-48bb90d72db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b21215c-28ce-4b6d-982f-6d84af048cac",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8758383-0a51-462c-a582-6ae5271f1292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d45348-1875-455e-86cb-7ed3837d7a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786e88fa-396d-4cd9-a3a8-5e5a02977972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "706863dc-0889-4c97-be1d-e37f2a0004af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11181c7-a351-4116-b4b7-6f82681fe070",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62058e70-ad23-4f64-b0c2-480659f29063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224d2f15-cc24-4f77-bfe4-5d90ff5a0109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e93dfe-a502-4928-b048-ee1929a8a057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "981e29a6-11f8-49b7-8d6f-252986750965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96eb121-392a-4cdb-9a2a-417e8c23c0a8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2922e868-7318-4fc5-885b-7ece51315702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dd53d3-ec02-4980-83df-83a7f52b9b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec9b74e-fecd-48be-87a7-d384d4a52b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd1b1af7-7146-49af-a053-3c916448ed46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01356615-8773-4963-a89f-f772b1e6332d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdae1db8-4a54-4e36-9a01-faf041ea66b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48028621-4ad5-4da7-b53e-a72fdd533bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b20337-ab7f-4773-826c-3fc2e1027729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11200ff5-7bc8-419e-b7c4-2b8cd2a3a0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36679ac-782e-40f7-a78a-ac2bd146d0c0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77e3679-fd84-4912-8e96-06e9928d7306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc488d6-07ac-4b33-a4e3-46664b3611e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f919499-2291-4fde-870e-1b15c2a119b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90e364fd-c8b0-4056-80f1-4ff615dca0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42f8e98-e9c4-418b-8593-d4791c85c491",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb77facf-d20b-4f59-8073-fdfeb7a2878a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fe5611-f47a-4c2d-83d0-a002d0ca580d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3993c68b-6ade-4309-8cdc-d91ac40d537e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e75efc62-f90f-4a34-bd6f-f59430de5226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57d38f8-09c2-44ac-a67c-8ff8e2c8d28a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eede2555-c8df-4d1f-a623-d28ec1a3ece4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01885360-7ab7-43a4-b3b6-7193e05f2d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdba8198-827d-4a52-a984-81ca52b3acd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b20659f-71c4-4a4b-a4e5-5b4f771dc9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69489aeb-6156-4ae6-84de-a2a413351d12",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94864686-53db-4ec8-817d-4c470b3b7d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b009091-d25b-46db-b65b-6c17d6c795fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd535394-089e-41ee-98f6-48a78b0410b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf3ad8f-ccf3-4015-8b60-d988403fdcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53faf03c-79ae-460d-85ac-efb20c1f764d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff68d2b-f73f-4f25-9ae1-6d63400b9a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8413261-722a-408d-b8dc-a537a36668a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded6c147-c022-4cec-9b38-739ea4fd275e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f49cb8-c79a-4174-9e13-a76283ab9337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2201c3-d057-4f74-a0f7-24af52c1ca53",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2021fcf-554f-4b7e-998c-87f588a212a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb57942-a323-4a28-a7ab-c57a2f3a6576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4bafbf-4994-4c6e-9d99-f73994d1f8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "856f2307-6d44-45f2-9b67-ab0e3990d3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265be5ce-5890-4eb2-a6fc-b7714dfec120",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be4fde6-09b1-468f-9ac7-6621701b7200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44e9345-a4b9-4103-b008-0ae52fb2b0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3a37d9-3050-4ade-9240-1eff6a1dbd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "493fe2c4-4f92-4984-a5a3-c455769e7985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cb775b-5468-45e1-a8a0-2245c9f45c69",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f76159-7762-44d9-b0a1-08e25e0cbd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af30b0b-a13a-422d-964a-6b8f5199b24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5862be2-e003-4df3-9d79-e0df7b2515e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3d9a78-391c-4d2d-87c7-2f74900f119d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd519337-52b7-433f-88a5-6498f06d6c19",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692135aa-d58c-474f-8f16-8b3f2871f7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ac56e6-12b1-4a83-b191-79b13be4f61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ada8ed-7640-4a44-9a5d-b9d6536dd850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0908513-5ea9-454b-9ccc-4207e8b0698f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d37589b-2b11-45c8-aaa4-20ef54853dc2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab832a44-55a3-4fe4-82be-693bce2c81f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3296c57-87fe-4e51-830d-f5ae73e94b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1ac541-996b-4ab3-9a5b-bf4a8830c6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e850f52d-b5a9-41cd-ab9f-495d3f6afe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d7f4d0-e5a2-441b-97d8-a95025e4d60b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95565f74-7c63-42fb-acba-f0a8b7ef24b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a627f7-6d08-4b65-b4f3-747e9b2d7acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2049e3-bcd0-4efb-993b-f0961fa54270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7f0a58-51d1-48cb-8c04-39edee0d7a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccdc469-f868-4c6f-8d3c-3da3d500b982",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8511d0a2-4560-479b-b591-c9c132a370d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb8c7b1-9c65-4773-82de-ba61f3545e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d493c91c-bc59-4ad4-bfde-e8c94bfd81a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26ccf84-f8d7-4923-8f76-27a48827f9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd288cbd-af5b-43ca-9fdc-66c6bfa29ac1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2f430e-5914-45cf-ab61-7ebad709a061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab5bf39-96c5-41f5-b096-28532f9a2a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826b926a-9a59-458f-b949-a41ee327f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c0d813-cc78-4fc5-9183-eb95a15c531f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18139f9-757a-4718-b01f-40ffc051e6d3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe449b1-1ed3-426d-a35c-c9b7f1d3b4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f65e77-6af6-4c4c-a267-63dbdddd3f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa27832d-0e82-4168-ba0c-e7f90a8c9090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6317821c-cb0e-47be-a480-e769e9386a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132cd1ab-7d9f-41a7-96b0-7877374fe015",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16409707-dda7-4333-ac6d-7ca231bd5778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb6d0fe-397b-4688-94bd-597eb20918d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53603c4f-cf1d-4d8b-b086-ccd8ca931f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d4649d-b0c1-471d-929a-e806ed4c441b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266e423a-b101-47be-87f5-4a99b2f996ba",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e158729f-152f-4578-bdf3-4d9e20c1dba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fe43dd-3617-4334-8833-925fa90ef6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc70d09-348e-4e9f-8cb5-c881d8bb4c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a29f554-3787-46a1-ab00-956c17d978ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96465fd1-a341-45db-b8c3-8e193159d9d4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438c6f6c-8d05-4a74-8384-2a37bbc25d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c9eb15-0083-45a1-a96f-6474f25c4b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5356934-0bfa-42a2-a5af-444bd106d709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d6c414-51ef-4f68-bfec-0db413d8799c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6ec360-ce22-4b94-8071-34a790816c83",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e510705-6c9c-4423-aacd-a8fd673f09ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c01eb29-f8c6-4a20-a4c5-3b8fb798155a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98865c8e-cd07-408e-b770-e981d604ea8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b034574-2dba-4769-9de9-de52c0a4c76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafe7282-16ce-4c4d-a173-06fb7b6317a3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebb5db4-c505-49f7-99d2-572b03d7a80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760f273c-f7e6-439d-a8b1-166c51a25a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e852bb7-9379-4a3b-baf9-3191fb9815bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a332f64a-9ac2-4418-baf7-0a2bfd47a66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9d1498-6877-4fe2-8aa7-c0a49d2af248",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6f3b6d-33ea-4831-ba1a-3ed3f1615a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52de2e71-8870-481c-b4d4-e4f403f0f87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35594427-255b-45ba-8b2b-6cab44f429b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e03b273-dd88-435b-ad60-2de2eb4b7c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ec015d-3ada-4354-b7b8-4e977cd5f8b9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbf2bc1-3765-4937-b3c1-b99ace09c15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e4b150-2885-4046-80da-02abf18f6732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d31f47a-fcab-481a-94e3-9a16c3759615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6db3bf57-5951-4db2-8fb8-6a58985ecf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1684b897-0193-46b4-bd06-2afe6f8be0b3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5185d851-9aaa-4512-9e49-9c6281cda66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41ef783-bfcb-4cf9-b082-9e26a0a7e9f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27895594-4ca2-4b72-99a0-2f50c6aed24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5fca77-3b01-446e-aeba-3f744f02d982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2acecff-be00-45ea-adda-735008436af5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2ba901-1e58-4a6d-b3f0-e9ec7372ca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "23b55411-d1c7-406e-8fee-0138aac4ac3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1ce87b-0e8a-401c-8f3c-950652456aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d375d83-eadf-49bd-af18-bdb5f8e7888d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "11941c68-833f-40a2-9150-f062991f1c01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b181b73-0034-4d18-a563-36a6a9b79186",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "576195a0-3e97-4cec-b96f-1837f894302c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93061089-1160-4852-b059-e2cc427968a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e2ef98-ab80-475c-a9bf-74fd55393aec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "746e77d2-bf16-40dc-8517-9abebd35f782"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b40bfb8-57f8-4d42-b435-493912211d6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53174a38-6d29-436f-a29e-28b544c51b39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7549556-8be1-436b-8870-c263a254031c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41743acc-beaf-4bb4-b073-2322714f5e02"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32c0e80e-f5df-4812-b11b-3d148cf47fdb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "def72e50-4ed5-41a5-9ca1-8ea24560d616"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1dfb62ee-4810-481a-9e33-758f40e9e3f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b47943b7-bd78-42b7-aac6-e5521f0fa87e"
                }
              }
            ]
          },
          {
            "id": "5a375aee-d2d7-4d70-b902-72ac59d447c4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1762272f-a1c1-42e7-9cdc-6ae4424c71f9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc222e03-d5b2-4522-80cd-593ef2a71970",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a115779-2007-471b-8f3c-35b281a0877a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ced635c-5e8a-4ed8-ae83-e531b86399f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6d3ab5e-1ef7-4618-9012-670dcd5d032d"
                    }
                  }
                ]
              },
              {
                "id": "98bff862-a467-471e-a0d3-9e60eb4d02d3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "257cae4e-687b-4b34-91a0-2683fc8f97d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a30030c-2ff5-4a87-8ee1-e989b524c361"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1411dfc3-a09b-457c-a694-7c86402052fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8dccf0d-d234-4e61-97b1-a164433dea37"
                    }
                  }
                ]
              },
              {
                "id": "a7214165-ba5f-4bf5-a71c-579acab88015",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aca307b-9986-418d-800e-abc77f381dd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b961dcdc-f66f-4804-b1df-343692838422"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96514786-2671-49b8-b183-f3ba51b4f156",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f554c632-b964-41f8-ac5f-65a0a0555762"
                    }
                  }
                ]
              },
              {
                "id": "65457744-09d5-4ffe-aeda-50e27a3d2969",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01fee38e-59a6-4677-8059-43dc3c3fce05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89cb5b1f-6395-4d6a-b7b9-a3757512287f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "003ff804-7a58-474c-979c-78796a1ee318",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a7a6c17e-df88-4c70-8bdc-a51db4d7ef23"
                    }
                  }
                ]
              },
              {
                "id": "362e76c6-3abd-4fb7-88fa-dd33ccd18541",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6456c850-14e6-4710-8333-2c2d3c1e16bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a75e5fa-f29c-48bc-8c5f-5cbbb7aa5096"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a64aea77-7ec4-473b-8e6c-39936eeb35b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "794bae2f-275c-4015-8041-c0f6acd80a05"
                    }
                  }
                ]
              },
              {
                "id": "4530b8bf-25f0-45d2-914e-0dc179a414c0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "346767fe-e2d6-4098-89f1-381af0db62cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd5cd4c7-152d-4fe3-9279-f4b1ba057043"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893f2575-940a-435d-8258-3c2c0e1aae18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "193b74b7-6e20-4161-9f5a-2bd1f0160390"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "edea0510-4708-4001-9190-4953952af824",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3cb30bb9-7418-4940-8cff-ea59d9d51999"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a394895-ea52-4d9f-8d2c-9dc6d5444af4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fda53290-3a0d-4a04-97cb-d029a3a3e4cd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "390319bb-7e9a-4bff-b5b6-15eb5feb004e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c23c2f19-ace1-4d68-86f5-aef33e589ae4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9112b8d-c8b2-4bb4-b182-9acea7291ac0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ae2139f-ab43-46cc-afbd-19a896db0519"
            }
          }
        ]
      },
      {
        "id": "5035178a-8efa-45a4-8ef8-82a7a03b6dcc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f43dd960-1737-4bbb-9fb2-de6055ad4e2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2449d13-1259-467d-be91-d2fda5d266bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6ec4a176-1e3b-42e3-8e2e-a23b7bffe175",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d50b1f-be32-4204-8e96-a372d5d34a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "519abbe5-ae3c-4946-bfa0-f3b03be404a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dd7b70-20f7-4778-a57a-538896347f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "020b823d-7702-4560-adbf-c60b44fa0599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddf7a36-e526-4303-a523-6efbd49e7948",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ac8b06-0caf-48ee-8e0e-4bf590e65dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cdb1b6-8297-4125-b001-d189968317c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499af301-5607-493f-a67e-ef3318395c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a6b149-e373-4d0b-8f50-d00e416b6bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1124694-b4e0-42ef-a9e2-9dce2115c8c5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512b3222-7537-4bb6-be69-55075fbe985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9485255d-f10b-4678-8943-89424bad4948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78befadd-1c86-4f8e-bcbc-e96773702a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3f9cbd-d566-498b-8b18-b282c4d46b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba62852-d04e-4ffb-9348-aafa200ec90f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bdae83-ced0-452f-acb8-b2efb4730703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fde125b-b197-442d-a9e0-9220234ba4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0e056a-24c7-4ad2-ab90-e70cbd717afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c086459-1b64-4244-8be7-b2c86722812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c46633c-cf35-4d7a-925d-721f39ba840e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f971f53a-1f87-4649-8b32-aaa6e063e953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d30011-8be5-4a57-b394-34ca425a8e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386c1c61-c531-46db-9a89-66864977803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe00d258-1a87-4085-80d5-0674b2cd10d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dfc885-82b5-4fa5-8d88-815de2a6a312",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7013471-acf3-4465-8571-b61ec5e8039d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff756084-82bb-4bba-ba33-661acaaf46e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd15fab9-7a94-416f-b099-08ab7006423a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae58c61e-b8ad-428d-8df1-529ffa972e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1041eec-c587-45d6-9bf8-57f4553817ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346fcd8d-2e5f-41e5-b3e5-7a6936bddd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eeebe59-35cd-4806-b3e0-34d2c2989d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6591a70-f359-4b22-911e-89c8d1ce5f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a526d6-8b73-48e1-bda3-ef591cdaeb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c794c74e-3928-41fb-b026-baa7d3f3e163",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96c219b-3d9a-4673-9ee5-3f1f6150b9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b029d5-c063-43a9-9663-fcda9497c1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2079edc8-49c9-41f5-85ce-4bf1c2d5f8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "879578a1-a753-41fe-8c95-10122f789f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fccb4a0-644e-437a-b6f1-99a1b105ee5d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc2eb5-f86f-487e-9282-f4ad92fc4257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c97b661-2a12-411d-87c0-68ed43d8631c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af3ca01-5910-46f9-8703-ec7644b89337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0179e4f-9a7f-4924-b088-c392d2a3bb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4a7767-96fb-4ba3-8b7b-b52541e52139",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74187b6-a7e0-430c-82b5-efba0ee1a1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfd1a8c-5022-4093-9dde-c060ed25cd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1c69b9-caf8-4ec0-ad01-4084cc81dadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a289f361-55a8-405a-b2a0-25a2b5e5f9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca7cc4c-e12e-44b6-b2ac-65a61385b57f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f04bb8-a3d1-4238-8f7a-0c46a8c1ab96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43261d60-39ab-4f93-bc60-047b1a37b97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c7631d-1c38-4a16-aa92-df226010a296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "31a0c6e0-12e2-45b5-89ca-7eef2a33d017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2c288b-29b7-4db0-aa5c-642d51e2dcd6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eec5901-a28a-4054-9475-68fd9a051fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4c2a1e-7aa4-465d-910f-1385c122355d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00745818-a563-426a-9d4f-c48816686c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e037679-88a9-406f-b1cf-537e6ecac1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccbdbe4-3d66-4d74-a4dc-9c5e1b0be61d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f7ead7-9d27-422c-9a23-8503399003e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c9581a-dfe0-41a3-93a4-b74e156b8a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4692b43-4b14-4313-9c93-8666092485ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d93a55fb-7f90-43b8-81ac-e0751ed94d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f406e50-78f9-4327-b6a4-95e99e4270c7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ab452-348b-47b5-ae4c-daa4a0280022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de7195a-db03-4006-becc-c58fec81d684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca43041-3a12-49f6-bdea-9b2b5dad2c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "52758b32-f887-467a-b1d7-29651d3eb0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9bd7ef-73c4-4633-818f-79361c6719d5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5fbf55-b9a6-4108-8df7-5a206793145b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813a9688-84b8-4988-bcd0-9a25166ac079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c6395a-d22e-4140-9c22-03835cb06d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7fdb269-6919-4f77-91be-574f99467b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce63513-779a-45ca-8d20-8b8c4a7cca8d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ddd0e6-9f57-42c5-859d-edc5483937d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edec6c86-4eb0-44e9-a618-5e169ee2b916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d6ff49-027c-4599-99d3-822e8be52c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1eab672-ed74-4751-be14-5c53aeb2ec3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2e7b4b-42b6-4492-b6f3-4c530502cca3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d22d386-d838-4b1a-a5be-0da0512bcf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9cb16c-c6d2-436d-beae-f1c19849e285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cbcd6c-ed8c-452e-b563-33c7d47434d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6178e295-1fbb-4d0a-80a5-c5d65c8bd1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9b8ead-b207-4c73-a3b7-267867528626",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66aa8b3e-2f95-4f32-976a-2e51f39311d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69ec1c1-ff1e-4e0d-8c88-cafc81ac6159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a51840-afaf-40c4-93b6-9702fb7b4b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc96cc0-4669-4457-85bd-03438f55a6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28037f44-3a2a-4bd4-b4ee-d222aaaf5572",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6723288-b4ae-43c8-bebd-50989d86c959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b60b67-7b82-4684-9004-9c0a69e4349f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0b7c20-f97a-4d54-b5b1-a1dc29babb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "888f6ace-b218-4fa5-a8c0-52380550695d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8be0150-1069-474c-a8f6-eeed5f4dac6b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68025c19-d26c-4a7c-afff-f47d7e7cc004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57499f71-6a78-4191-befe-ad8643c9c660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5354af-e056-4a8a-8141-639b451ff05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64fe86f1-beb1-4957-b643-721742a34b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e984d8-e92e-4338-a517-5af0241895c5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d61f3c3-57ee-44da-a1ac-39e1ba60b372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca46214e-44e5-4292-8dc4-bcb4d43d1c29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4562e68-265e-45dd-8102-711335fbaa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc12778b-e8b3-4776-b7b9-0d767b654a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8760f710-1805-42c3-a893-9519e9aacfd1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cb9cf7-887d-49c2-a7bc-20cd7a939748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c71856-f220-45d9-9bc5-57c6cf3b9edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d72a6e-9514-419d-913b-0aeef84a516c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8983e3-bdba-4af1-a471-f228cb820447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b679a71d-d9ac-44eb-b9c4-8226f5c65579",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fecbe18-c881-427c-b5d1-2e3ae7668b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394f989f-efaf-476b-8fa3-dd25a860f172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51179fc-36c7-4877-abbe-b4eb0fd053f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "338591b7-2be9-47b5-89f0-8985e282bc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66157d9d-84eb-48f0-9e52-484078b1fdef",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b6e09a-90f1-4f1a-9382-dcaa3b29017e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d9c2e4-b1dd-44cf-8d7b-470a176549cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da3c83d-e752-4152-bd08-db5cb4836f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1634d081-b32d-4401-9cc9-8c2bbeda706e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1052638c-43bd-47fe-9f12-24c3d7b34020",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5c3772-aac3-4c6e-950d-5b5bd55258d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d599275-69a1-4993-b5ea-39a1b203a6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1287f9e5-c3b4-4946-a7fc-937ed77d26c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1da5a2-a156-4e10-a6a6-64952c512851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e77453f-59c4-4a06-a7cf-3c233c023e38",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f035672b-377d-4dfe-bd9b-07ef563c3020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251c83a1-c0da-43b0-80a0-85d3b8df7001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73838f2d-5c4d-4ae0-b337-dfbd73c9eb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c7cbe7-37e5-4ba1-a418-2d08d184938c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6b8eb3-2411-427e-b53c-a0ac7926cfb1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82071e8-6e0e-4c3c-8a63-874722463e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0270bb-971e-4b9d-8a68-4c2a5ddcc2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32318cfb-40ba-4606-aeaf-2abc5749e16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b92f69b0-d259-48f8-afbe-d3c5585a710d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59c491d-37cc-48e7-9301-7847b0673a66",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4390d8-dc80-4ef8-b940-5c7442c6ecf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3367053b-a29b-4958-a99b-48ea2b767078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4534e6-6816-40b4-9d14-7b7ffaf55d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fae8c45-5cfd-4695-bc93-9ce0a3557474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649e0533-56fb-4e30-8255-34978d20dce0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6e7df5-c78d-4deb-93f6-9d9cd4bcb3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b1067c-4fa2-4d4b-825e-403b59cb8a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9c5bf3-0de3-4aa0-8fc4-2965313e31d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c57be0-9528-4f08-aa32-f9b5e891a665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbaa6d6-638e-4d50-872c-69361794cde7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e0b2d0-e8ed-420d-ba8b-2ef0ee298e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82257be-977b-4d20-8135-8a02373817cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e505bf18-6f0b-479b-bd04-f716da55ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65cde8b0-fd70-4ed6-9fe2-4fa82ecab0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf70679-3322-49ad-8fb2-fe431b8e9688",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e12ef8c-4a8f-4b1f-972d-6d9024d3700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5eee8e5-1f6e-4ad9-8549-f8627b7c6517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a320bc96-0074-4242-8860-11b15a1ab360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a3efdf-bb05-42ef-b6a8-955e18ed2d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ea0571-df49-4e2d-ad90-e8d499ab7299",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be494966-d97b-4828-a228-81205bb7b042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403ce314-d1d7-47b7-8ef6-8e333111edce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60762aea-9789-44db-93ee-649eddbdd0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5ababd-4a56-4c22-81f4-278ec4acdccc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51af03d5-9045-42cd-b529-d0d8052a6e72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee8b1632-0ce3-4656-b563-3ec189638e0e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d447cc32-c904-4cda-82e1-6a57b24b51c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9af5492d-af12-4d50-bee7-0c7263ed667d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78133f4c-553f-4d66-98f5-4dd79a05fe02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76d1b257-75af-4980-9382-e700a2981663"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b31d3a0-8236-474d-83ac-618729c1714d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf79b30e-55a4-4361-8984-2a82f6957782"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd37d87d-7da5-4fe1-8d2c-835cef8e0726",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f92711f8-83ce-43e8-8e21-41c495a03e3a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c46d11f-2d70-4670-bbfd-4764d1c02859",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7f3e2528-37f4-49bc-8c6f-12271ad166ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64ed8496-e9d0-4a3f-b7eb-55e6a553089a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4718abb-b518-4a18-acc8-8a655b54d30e"
            }
          }
        ]
      },
      {
        "id": "c86f3cb5-1d40-4c49-a042-43924df2ae2d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7b8c29ba-34c4-4a71-9451-5b47a67a113d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "197b089d-d7d4-4bde-a541-608f0863326c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b32fbffa-447a-44ea-bc11-a0969c71eb5d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61ea9cf-27f0-4101-b007-0c92e7a5f394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe2610b-2b48-4ad1-a3a2-7af0abce50e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57044f30-9529-43b0-9e41-ff3a0f49be4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "52203aaa-0e36-4ae7-893e-00a2ad45bea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e10ac7-326f-49ab-8de8-780a5dab5d1c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63841e95-efe4-43ea-a3d4-4f2d685b5042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c869d1-428f-47e6-a15c-7d30f5d6f163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b2fd4d-9535-4109-9f9b-61ce0aee3d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5697a7c-56b0-40fc-abfd-fdffd698fc74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9949851c-7b8c-45bb-8e97-4d9253f4e0f8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7189b4b4-7e70-420d-823f-2bc8cb21214b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e1aae2-27ab-4326-9bb6-9a1dd5e0fc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b3c0db-3faa-4d68-90ff-e64d1eb4bcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74915514-5a97-4a72-9b90-01f571a719a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fca8d0-f463-420f-8804-d29bde191737",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17236459-1e50-46e4-a025-4df2974a6643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2acae9-dbf6-4826-811d-810ca0a90f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0497d545-a6e1-4fad-94bb-4fafc050647a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "762e0183-8c88-4262-a48d-387762dd036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b95a41-f7da-481d-bc74-e9607dae3948",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b52bde3-1a15-4bba-967a-c5cbddc99158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61733883-4bd8-4d91-ab23-b6e417fb6fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06488da-272c-4065-97a4-acbda8f06047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d989c16b-a8f7-45b3-a8d5-33c2c569a6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e08c958-090f-4a06-a0da-02e0289631ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7327b187-5e68-4512-bd65-7400d23081f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e751c16-f790-491e-b086-abdf0e545f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0948992a-4f1b-4e57-9d7a-56dbfb31c008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b116c1-ef36-46fa-bd9a-8df9b95cebaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274fdd02-d2ec-49b7-88d7-ca1e60dabfab",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf07ef3-8698-4c3e-9e31-d95dd5d85103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3be0e8-71c4-40e7-a664-22bdc162d017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19edcdd4-f1f2-4f34-b8b1-718d57616f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ade5d247-6867-4a61-a4b7-dce77b213433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962895f0-b829-4195-97ba-1e7b32dca073",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ba3576-6fa5-4409-a159-515c9674411e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c496ded4-53dd-4748-88f7-ca1065d32931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fee2a1-8056-4ec9-9f11-fc4b08db27c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "136d5e84-f504-4da0-8c76-06171154e26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc049ac-2cd5-4d41-bb6a-0ee188718dd1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc91eae-0c9e-46ca-8584-f134a64da8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4986c3f2-266b-4183-98e1-0c26751a0405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2335fa40-4b1f-49af-8e13-9ce06bcdc69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd1261d-99ab-443c-b4c7-f6992f5923c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e441e1c-9465-4e25-9d35-f6c60029a455",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9e6cfd-62c6-454d-a1b2-d31f613ac579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da96b0a0-36f7-430f-9e30-5bde54b78c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5f1c5b-df9f-4fa9-815b-3e49ceabd664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d27b0dd-d080-4c15-8666-52aa8b0f65b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b007dd82-d13a-44c4-be36-aaaf57882ebb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0387ca-262b-4bfa-84de-032c4e044cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d11a71a-bfa4-4a15-bb77-a8ecde5c340e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6645c670-fe7c-4419-891f-7ae983ac3a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "35050f8e-006b-489f-8dc1-80500198bf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081dd2a9-2f1c-48b2-9214-1863c6fd8cc0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ed3caf-be66-4c5e-a76e-78f15963ea10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89b531f-420b-44b7-9c9a-6b3cf346b7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bda4cb2-4d21-4325-bf76-6dc3dd0709c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "347a765b-def6-4ba5-bd52-7c30bb45679e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdcc1bb-a732-4c39-88ab-49b0ed50e059",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3be675-f26d-4845-b784-f87c248155bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea98ca7-975e-4a05-825d-a44fc18008b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c283b48d-805c-4033-966b-599e76bc4c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2cb82e7-7c20-4168-a76e-797cfa272d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f899ace-08c2-4aa6-b77b-9da86532ce1b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e58b90a-48eb-472d-82cc-7f9832c75ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edc4f24-ce8a-4dde-bde8-258831d0f9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1952a6a1-2e7c-4b93-9113-06d2d43b440b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6448826e-f026-4bed-9121-8ac2109086d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63402419-b913-4ffc-8b1c-23f2a420034f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acaba99-b396-49a4-8d4b-e76a7951b2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0e4d72-2f9e-4ba4-b490-927a2ace90b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95562f56-6ebf-4ef2-adb6-4fe5810ad7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a907fbb7-cf8f-4329-84de-2651212c0a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aabd8c4-a4cb-43e2-9729-4bc0e7655de1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fa42f5-b435-471d-8a81-e53f9bc515c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6aab0a-9c6e-47c7-8aa5-9ccd77845b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0f47e7-dbe6-43bc-a4f9-861a41ed5528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bed7e27-a85c-4f88-8a7c-180d4433b505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f8a8ac-e06f-4d20-ad12-bf2b80a66c8c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ead71b-f3bc-483b-b4c5-279f263b6143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87bd26d7-e629-4fbf-9bee-cfa5b0376dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561881d1-0486-46e8-a7db-09d8c88ff22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a9c16a-d264-447b-8456-16ed201a74c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59762e4-4135-4ed7-be27-329698f7cd55",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fdf4a8-e373-4d6b-967d-84ee93ea1232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cbfc06-1d3a-4ca1-8375-f50688c5cdb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3143f30-e63a-4440-ab24-3c2431622e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d6742ad-340d-43e4-9f60-ce1caae75d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cb1f0c-8436-43c4-8e53-8dc2a0ba2fe1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25e6144-afcd-4a60-b103-c22e2da3b56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c6f4f7e-b9c6-48ad-9055-bc76b0f3d301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defa8fc9-6044-40f5-aba7-d6274a4510ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8697a069-d9af-4b77-8f27-623f6b4f0ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490283e5-6566-497d-b8fb-9c80963a9664",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512a1e52-b893-4955-8d23-7d63220204f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19db296-7231-4ba4-9f7c-d769b714734d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754082ed-4dee-4ad4-a2f3-003d44b59628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60253ef9-7ced-492e-8f6b-cae874a482d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d6cf02-4151-4691-ab49-f5ac5cb1d1e6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "428a9180-ef1f-4d90-a56c-6a40f8149c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8684196b-ed89-45e7-94b9-a87ff2c41f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5717f4-7a61-4a2b-8c33-9c8d12fe2d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87abcd6-eb69-4937-bf9c-3af485101715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89835b8-c723-46e4-a394-cc3d43358dba",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e4d3fd-9765-4599-b95d-74d1c49b9da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e8343c-c012-46db-b2f7-d51b106d8ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d80bd9-a8e8-4134-9bf5-1a29fa4cb413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee3f8d6-0971-4d0a-b1f8-5c547b0127af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452d21e3-4b0e-4f33-92d4-4c32aedb127e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b1195a-a8d4-49f0-8cd4-aa026236740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dc77ef-4705-4a0f-b3c4-ebd8a9d03107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3bb4a0-bf55-4452-9016-308bddf04c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c920baad-4144-4586-b7b8-89b2794ef615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc737d2-6304-499c-9e71-caacb74b5b5c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bedb34e-fe75-456a-85bc-3db3a5e511d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6717e2-b67b-4e88-83a3-760dd9d17c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c30aba-db07-420f-8d45-eb02b17608f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7511745e-239a-4cde-a140-4519c0a08ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d326108b-2bf7-4774-b100-75eb7f817a2a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b732eee-c211-4d9c-988d-3c97bc8ce6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5159e768-c6bd-4797-82a2-eee3ad7e0ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7724b3b-2012-4e12-b0ec-6b14a8cc7d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcb1f80-5940-433d-83bb-2adb74d8fc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e67774a-af3f-4142-87b5-75a50f6fbacf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f937c8-a058-49c0-8430-f750984f055d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5545278f-0c7d-412c-9f22-443352fe907b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1764050f-3179-4b32-8442-b9607ccd9742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1491b296-af30-4dce-a0e7-65ee9ea1b39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d884b797-764b-47e3-8d2a-71851f4a6c0b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25b1e71-331e-4d0f-b8ce-9c5c76c677e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2fac1b-b270-4398-befb-117674de0a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd5aed4-0ef9-488a-8edc-c3c3b5954615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4af6ded2-25a2-41f0-8fdb-166226d79c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f483ab-3ea2-4303-9c64-5a520996e65b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444fc2c9-ddaa-47df-9266-ec7313a95a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ca2fc9-ff72-4f45-a3a4-5bd7d2f35191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecde5f9-96d3-4abc-bfb6-bf5e6e722b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc162c08-80c1-4a38-8419-dd3c3addcd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab16e36e-d388-4b62-bb63-f3bd117acd4b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dafb8631-f34f-416b-8563-bb1e2c84eeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55105eed-b174-4424-a34f-7b5258987fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0b9be7-99c6-44a3-b124-b7af54698c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5420ce55-6db8-44c1-866f-38b0bc7ff592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de5eda8-83fe-47a7-acf3-6812fe5d071c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8924a1df-7452-4a93-8d12-241821776086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb515708-6c2a-402c-b4ed-4ac1d0539f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd43115-49d2-4555-8dc8-eb6f19d97c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f538b413-dc23-4c4c-881a-433627950db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0276d86f-74ff-4d8b-87f6-29c861569331",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26ab7b1-5ffc-4355-92c4-4f1e3dbbfb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c35682-b5ea-45d5-85e9-93d2e11aa551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1168c3db-5b3e-4774-9431-8e7bad8179cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56917335-663d-4d80-8c41-598341276ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3d7daf-02dc-4a66-bac0-7aefc309f4ce",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee98c6ac-c993-442a-b23d-4c28b695d89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af179c3-eb32-47f0-95b8-b2fdea53ebe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ccdea4-9ee1-48af-a823-27e33eeca65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9023ebf3-5fdf-44db-b84e-d755a75bc4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db19a255-0838-4d77-9715-cf3ab23040a1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a732f711-f122-457a-a218-31310014ca91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f817c6b8-c368-449a-844b-b0ba0fcd1c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619a5655-89ef-4570-b023-db06484dd31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc5a23c-2975-4565-8aeb-f485e7efb1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54880d73-021c-404a-afb1-29d77a67a686",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a3149b-e40a-40f7-9f1e-ec5ed9c9a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03da4fe3-e808-4f19-b65c-cff9268f5a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4475dc6a-cd66-44b3-a9bf-2604f1e3186a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "433e01d0-2a3b-4d61-8be4-b62937be6aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9301383-ebfc-406a-9b1b-9d09c3b5cfeb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94711fdb-34f1-418b-94d1-6cfc9e4ff9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73962821-759f-4b99-9ffa-c60ff1e7a16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa75d34-ef62-4f11-b3a5-1a70c8971feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae788369-6c55-4eb1-a44f-8597513ef0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853fd63f-0f5f-4443-ad60-2f2df8a1ff30",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd66c06-5a24-461c-b2d5-e96cb9bb952f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a59857b-56d0-493a-b86c-e27a6f912d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7ce9e9-29b7-4085-ac2b-9f5c72bd46fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e020d58-0e8d-4f9b-90af-ff121aab16af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45978295-132a-4d27-ae08-4fd4b300d8fe",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c9bef5-053b-411e-a4bc-eefc26b56bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7917f8f4-efd5-43a5-8f03-fb4ac9419e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e543b08d-a5f9-4771-8c49-f64f48d8b4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ea4b77-7358-4a04-9613-5ce6e180f438"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "88e535b3-fa5f-45ab-88fa-a38c5398fe67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e2e3a8aa-651f-43c3-950b-d17a6227d4ed",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9a0ff0-dba3-4644-8238-8483b0bb206b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a04bcd3a-42ce-4d1b-82ef-4d690ccc8aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e79859-0145-427b-85b5-857d861f565d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d70ea89b-8ab4-45e9-913c-31f63ff842ca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c802183-23ad-4a92-a6bf-abf0f26eaf6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1090409-05db-4fb3-a1b1-0e85a6b226a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cb99c3c-255a-451e-8a26-ef886f5cedc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a0a7ae0-5fb1-48da-890a-90488571442b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89423cee-10be-4347-a7ad-56559552053c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ba74d966-914d-4582-9c0d-7ff8e119a995"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51144168-079a-40d0-b00b-4517abf2f4ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b81e7da3-15b5-45da-b92c-c465e9b2138e"
            }
          }
        ]
      },
      {
        "id": "7c7c1aa1-7fc9-4bda-85db-4053c3323df6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3a567f6a-db73-46d1-9ec4-3aca98017428",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5db5b62c-e575-4c2e-a13c-bf27e560cf3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e69363e-cd60-41e3-a58f-fe17f40adef1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c63967-65a4-4f4c-b5fd-bda523a05506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9c755d-ea1b-4b90-99e6-1211a669456a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4a1af92-fe80-4f05-9e26-7e7b4b2d08aa",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14bdf0e-e428-46fc-8066-19d89f58c60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28db0f07-27e1-4882-9c51-5b43d0751ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8545a84e-2180-4c42-ab6e-a4c81f65ee73",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0088ef8c-533f-47ea-a67f-d7610999469a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb1be27-b8ca-43dd-a4f7-0340ca9a12d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c5f1c0-eaca-4314-a49c-647e009774d6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6b8657-36ab-46a8-99d6-cfca477f0921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265224b8-fda6-457a-8672-c63675efa5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbc0f68-cdff-40ae-ad05-5459db8fd9af",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5ba637-9f67-495e-92c4-27fd667e3fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaf2274-a3a3-4d43-8741-62c5e82ee5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba66aae-2b78-4f40-81fc-f53d472611a9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb8beb4-4934-4f8a-93ed-4014951770b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2f5433-674b-4003-acbf-3dbf6ca862fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec31ab2-1f5f-4580-9e2d-ee6ea7c5ba7a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb9b429-4fa9-4074-851b-e7bb18ae9618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29252fa0-df4b-4cc7-9ce7-4546fbe74afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55b8a59-7fa8-4a5a-8d26-ef3b26b29190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3f844c-17ac-46e2-aa23-f1f2f7b98c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdd1076-d7fc-48bd-9ef4-7160e467a264",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486ec65e-3dee-40b0-b64b-976ab5ed0f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a77804a5-b272-4759-8894-40f60328fa67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1b2694-c5e3-402a-a7a1-1d9431b83969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7441915f-e788-471a-aaea-b30c382b18ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e90f15-797f-4259-95c0-e8a88617d249",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0d71d0-8363-4819-9f5a-59d751de02db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a82964-f3cb-4101-be8f-82f4740034f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719b7887-ecf3-48d1-82ce-80f24eedf474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cb35ba-dd32-4385-b600-caa005a55255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21500b7d-3628-4e2d-8c26-053e6ed5a250",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87c88dd-44fd-40d4-a5bb-e1d55f8c265c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d424cdb2-ff4c-440a-9677-009f534ee4ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd59e140-26dd-4c2d-875d-c8d36c9660eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a457110-4eef-4f75-af2a-82c553aac30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef21f077-9511-40f2-a415-1601e873a121",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8520f317-e980-46bc-8ceb-02064c1a82ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1684e4-fde5-4edb-a6b7-c224182b84b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ce9114-d3ec-4eef-a457-7b1f70f83c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb6acdf-954b-4190-9e1e-d11a96edbd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f0c795-a5bf-4f32-b470-00168203e966",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e0e00a-e6b3-4174-9ca6-e54a1bd2e337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae17076-7793-42d5-bed4-73d8f39fc7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b32c22-01f7-497c-84eb-8beca7f1351b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5672efbf-e163-46f8-be61-404fdc3146d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e506727b-5884-457c-a305-583d1cbd0436",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025eb534-e793-40ef-8f22-a3c1b4c498fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b5e4b3-8049-490f-beba-37d52d94acb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dbc40b-e7db-4436-92fe-7087c89e6ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b0076d-2caa-411f-ab95-bbc7e9c6c7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31979e2d-8d20-4b7b-a919-a993d6e4f12f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df99541d-079a-49f5-a956-7378bf1aeb5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5956d1ee-6db3-4f27-96f3-959f21efb7eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5148c50e-1ce5-42e2-84d8-9c05ff3d9518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffd50c7-633a-4cc9-9c2a-6deb249694c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2351dc7c-97c6-46c1-bf4d-93b68e6baa1a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990c8537-0820-49f3-8a2e-6aa1c271c74c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3afdc8f-126b-481f-aeec-edcd7d79a44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b36aeef-44d6-409e-85e3-1d31bcaf7e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b2b4873-afd2-4f85-914c-0e64bc8974e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c716e3-b444-46f0-bac8-4309f507aa5e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861154fe-df85-4756-9057-32511eb7f663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f5bf6b-899b-4635-8ed9-076bcec5d3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17fa60b-b3d1-4c22-afc8-648866a932dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea238f4-8ff7-4f3f-ba16-763cd8bd5693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfca9c67-56a8-4ffc-89ef-65d4ea61b9e3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e121722d-146a-4a86-89be-e95f7d460e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e2ed99-ecbe-40e1-9c24-73920a87fba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a887bb-a349-4c9b-9bf4-135e9961b85c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b23055-daf9-4948-9ff8-3ed38e85e7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fee698c-a8bf-49e9-bd2f-82a4f73ad8f7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e20087-848e-45ec-82fe-d870eed2376e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf19976-149b-48ae-88dd-10107734fd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a224378-e4d9-4591-8ee4-5fbf59859780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5109283-397d-45c1-878e-33532c4aad55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38340f46-e7d7-4b2b-b74d-09ed1e052011",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6650582-d345-4633-b871-d03bfa623137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163f037c-eb9a-4bc6-b20a-fa9c8980b204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef8738e-7e9d-4b44-917e-df666d26d0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb735823-372f-4191-9987-a740c8985981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cf987c-2e8d-4a71-9e18-0c369d1d3b85",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefcf411-5f22-4093-b3f5-e373591efa28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b74f6f-d4c8-4603-bf1b-028b750220cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73b77c4-f011-41f4-b494-85905987790a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e40fc55-0609-478e-a18f-da73002437e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6470a043-6da9-49a5-8db6-a336df738d20",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaa4a9f-392e-491e-a197-99f1554fcb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016865c0-86b6-4058-af08-0581af5f8c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39901eb-8a4f-4978-ae40-96e295ef8440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff0855c-16bb-446f-8274-7fdd4a962b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433430cc-659f-4dd1-8de0-d5f53688f385",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9082da0-61ad-43b4-bb3c-17ae5ec799a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ed7755-ce72-470c-bc76-84ce29959325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a957cb0-9000-46b3-9f0c-ab7a5368076d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854bd763-d410-413a-9486-3f0227d2a3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c7b05b-3978-40b4-8e4b-f52a970e09d1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a143298b-2361-4112-9b99-b7cfab86e4d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6b222a-878d-457a-936e-76f7ab0a55df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25257f91-24d6-4e31-91b4-01ef5b7711f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa84bba7-fc82-4dc1-b58d-5e799a40299c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5026a81-3401-4b97-8a14-0f80cd3ae4ee",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae6b436-f171-404b-a06f-b570b2ca38f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ff5fd6-cb21-4b1d-b1ec-fe3a6179f472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ef81a5-dc23-4df8-9af3-20f06ebd882f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f812dac9-8d35-4b14-bde3-dbbb8e47093d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981fd776-9ad6-4992-ba56-07d7a31e889b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1003b6-1754-43b1-ad03-b58c1737859c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e707d1a-02e0-481c-bef9-53ab40bd38e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edc6909-8ddb-4df1-8d4e-3b1c752d9e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b487a29-b91e-4bc1-b79f-db7ae6d34364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45690ea8-afd3-4f97-87a4-93de491ecc0e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6f4f65-455d-4e0b-b863-167627f7e232",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1cd01c1-4da4-4f8a-aaf7-36c3bd7bd284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e88deb-6125-40b1-9052-03913763322a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dd705a-bd1f-4fc0-b08a-2d5cb24c4768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27e858a-ec2a-4ca6-9b4e-200072b246b2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff254e37-7c0b-4dc3-9761-77abd145c181",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4afe7290-0a9f-4425-b1ca-e0a4d0425bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18e89c6-9fe4-4233-8ab9-d64241f9fbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e61c359-039f-47d9-a7e4-ebb674eb8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8883f13f-28d9-4679-8097-4e0ab866c7d8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565873d3-d911-40cd-b5f3-165d28278207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1122d08a-a36b-4376-b985-00aa37a2cf0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b7bd86-3191-4383-beb6-8f06696656d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ddaaed-c6b1-43ea-92cc-5e389919cc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dcd245-20f4-42ba-8a8d-d955abddc163",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbecf5bf-975b-42f7-9839-e5332b177420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645734c5-613b-43f3-9b5b-2d5f165a36dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0450e95b-d925-40a4-8d9a-780fa2a12f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd1f3d5-34f5-49d3-83a8-3bf712d14e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266895ec-af30-424c-91f5-23de7b36d21b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7922de8-2fc1-4ce1-bf2d-a1cf167d1d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aac94ad7-64cd-4f96-9000-2d26acb79dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b570fbc-277c-41f8-b5cb-1b0f4e2a4921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b07760-f598-45f2-b3f8-f217fa34d1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d621c227-d705-43cf-8c0c-c4325c13a92b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521b29d7-5fbc-4842-bd97-86eac224b831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a61039a2-d2bf-46a6-a40c-ab2548aeb5e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34790682-839b-4c8d-b3b5-6f6cd27c070e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d43c689-735b-4a67-b6c4-e300b3c9b765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84accb8c-3df3-4889-9629-38038ced47a3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51067a0-0452-4801-a2cc-705e5b7bdb21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38c0c81f-47cf-4cef-8946-217c8ef74e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88472818-c1ab-4e22-8bf9-d57dea1b4eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d33d6f-ce54-4911-a8df-852e29ac0bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f488741a-1f67-40b4-9a64-432792cfb30a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba930c37-e20d-4619-8dce-3d1b46a021cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f493d3-8c1e-418f-be0a-1bfc04e6390a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5ecdf7-75b5-4c7d-ba43-30c8393bdc23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e92e13-94ff-4332-b6fa-b3c43a47fcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40dd8810-6d1c-443f-985b-2e8205efb1e1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0639bb2-3517-4f24-ab2b-93926692d103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28090dc3-35bd-4a1b-8457-e4e18ea43595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9bee20-36a8-4799-9404-199f82d2a56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72522696-da7a-4c9d-8031-6d636e723413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f7604d-a615-47bb-bf2e-fcc438f2c2cc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3ffe61-c9aa-4e33-984d-251a8d84309b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbbeb73-46b4-4436-bfb9-7a83450fa85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443bf9fc-86aa-4d8d-bfbc-b5cb33478fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b270c925-49f8-4dfa-8267-18513698f498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f5eaef-a8b9-40ac-9462-b2d922e4345f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b432c74b-a779-40db-8a9b-ca167f285fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80398cc9-b751-4709-b039-50e60cb0b6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231ab2fc-d3de-42af-a067-90056655545b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b37a73f-6098-4943-9c40-195b190cb254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b092a27-1dc2-43ff-8d92-77ddd75c7fd2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67df58-8a1f-4de4-b777-be579a9ab9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c460702-c2d8-46b4-b0cd-bab5ba9b2725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc82b86-f3c8-484a-aa7c-6600b2304565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead65c94-e0f6-4c61-934b-76782c98070a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b27966-d5df-40bc-8dd7-58aa9e297b37",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b651bc84-7eeb-4436-aa50-0c35decde355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea59694-6224-4c19-8613-88a07e68fed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9359d8be-672d-4462-957f-5b31d0a6bd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a1f8af-f8c3-4448-9759-8c6b05c31fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f54b665-1190-4d7f-b90a-759edb9900c3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30cd940-3e79-4327-b963-d6097e844123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb48ac9-9a4b-4b10-af04-a1334c461386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f243cb9-d860-4d74-b856-e39543c563f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aa3afab-1b9e-41d2-be1f-3d7d9863f325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d5e326-c369-4103-9ee2-29f57a3e54e1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac5fd29-e1bb-4761-9ffb-cb3e394ed55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418bc433-4d42-4d56-b7ce-dddf00bac2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9620834-2e09-423f-9bf5-5265289de1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a347aa-901d-4241-a844-e42bb194e956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f25a20-24df-4535-ab37-18e7ec7fa068",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94cb09f-1ca2-4df8-a0a6-776653e2a56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cde013-cf50-4ac8-a1ee-fec188aa8826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6bcde9-57f3-4d13-b93a-5a7fe755aa86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce734adc-2713-4cbe-922a-eb5cef6646bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2523a4c-a808-4f77-9694-a80b1cace41c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c009d6c2-bed1-400c-a113-f84cdfad436c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c2abce-d835-45c3-b2c8-1b08f9e37520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9feecf-cfc3-4d79-9040-2fa4bd15ef36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc958209-0739-4e25-9f93-d081e8acc0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35525ac-7df3-40c3-9cc2-516585edbe30",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee80bfd2-c1b4-4734-9e55-6c260e52d345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc49bc8-a565-4fb2-b14c-fbdb613ad446"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427d68b8-42e4-42ab-8943-89cf37149134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852045d4-abb5-4c27-a0c0-3350f72a867c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb356f3-2e3b-4733-9fbd-481d82b95aa7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d0c4b5-ccb2-4228-a7e3-fef14c3186a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea0a412-208a-4c02-9d2f-71ba8d6342a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f0d0d9-8641-440c-98a1-6cd7dddba46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a036ebc-a233-4ec1-8aad-7b396ecaa1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da566dc1-614d-4f7c-8404-2756319bb96e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03afb6f-e83a-413e-8d8c-b05e6227b45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d66ce1-de3b-499b-abfd-e988639af390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b5ad8b-ddd7-4a39-889c-0411fa7ff264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0084e4f2-74c9-4427-9e26-6ac1e2e93495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16554c2a-1faf-4626-aa5e-77c699a4af6b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfefbe1-23d9-43ec-8610-251276430892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efad9469-43cc-4846-9e9c-e8ad57b1c067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb7faa7-679b-457b-b593-2af9c890a84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7ef874-e3d5-4daf-80e7-83a20ab775fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d210b2-f105-417d-9da1-0fbe63b913f4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd43eb9-b389-40dc-b875-be2f6f33d08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0380d825-6e5d-4f8f-b583-d06376c4fc0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da575c1-872c-4a50-a3ef-02e84d24b915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4aa6be-680e-4524-af0f-fea759dbf350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaea6e1-3bbb-4680-813c-e00d752668a7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a35860-a689-4333-a293-8a195415df66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9495ed27-6b07-40b4-b0b2-8718458b53f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aceb592-d2de-431f-a689-7bf6041b88d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e854d2e5-e9c9-40c1-8e5c-1cad32ecbc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bad187b-3b2e-40ad-94ef-9aa913e60fca",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6d6583-024f-4b6c-b803-11a1553a1458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f223c4d7-5cde-48f5-a8fd-478471442e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303c6bf6-5ff6-4955-974e-44d40969b85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e432e975-3fc4-42f8-8031-dc74e9101ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b48002d-9910-42f6-a400-6f57cb8863a4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9655e28a-e78c-45d7-8d75-73d2598588e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7b3cd6-2e19-412e-82cc-d6a892105196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334b697b-a927-484a-aa56-5e4f140bd24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cad2bd-a2bb-4bda-bd56-7558a5eb57af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af783e63-647c-48b4-82a9-311247e7e695",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e3e9d6-ae7f-434b-a176-871681f16d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a752fb-28bb-4cf7-ab58-65f5f943af1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c7559a-c767-46d8-bd93-00047b1214e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844b2da3-fb0b-47cb-bd5f-d02f79df5b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3630e8a1-cb19-47fd-ba7a-afb5aade07b3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb85ce37-c268-4d91-8a5d-671c2a141fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8205743-e10f-4082-849a-3a3d44cf9fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f61c696-233a-4fd2-b588-b020c1675ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9b2565-66c2-4bd5-ab2d-900f736e447e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227a527a-3057-4a5a-9a22-7783fc6b896c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b08cb-dce4-4b6c-b676-9fc1c4ebdd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a260d3-9319-45b9-9b05-e80b730184d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4288e3-796f-4faf-9214-1902375d0918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ebf8d8-3644-4e1d-8ab3-0801925f98cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70d3f81-7cc3-40e3-8bf2-f5ca026c97d6",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61aac047-e33e-4617-ba4b-7d2d080a95cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8de073-68af-4e6c-8984-ca4111a93cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c194a8-dcd1-46de-b352-dcfa8d388563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3451e78e-4ad7-4960-bac9-2586935fdbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce2b94f-ae96-494c-8619-2abaebd80498",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c80b8b0-cceb-48d9-a9ad-140c5aab85b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e0021e-7435-437a-b986-e3bc4e7e4840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e5014f-94ff-40e4-ac6f-0f808dba5e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a8e6c6-7605-4e59-83b5-dabf81698167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1d787a-3c74-4e20-b253-89d2b0f4e55a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab021bf7-316d-4bc6-a791-033a61924dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fd735b-0604-47ba-a4fd-19a429303278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3ce18d-7319-43d6-8140-307cf488085c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bf2082-aae1-4e12-8b46-3c54ff1adbd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd63c33d-2697-486a-8307-1474943fa270",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919f8549-10e1-49aa-a7b8-23fea837196b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564fb730-a385-4f0d-ae65-fbf130476eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3adc489b-0a6b-4b47-94b2-fe7abe152dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5785bb-4626-4ced-b24e-fedc8a176cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62018fc8-c504-4ba6-aaca-e149bd6725f7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6572d96b-8bff-4240-8a42-33a4ee4572a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "736318b2-07dc-457b-bd88-c895f6344c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f92764-64bf-4e6d-b46b-22fe3604ceab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5447de84-ed55-4cdd-868c-4ca2689ff9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41111965-07ae-40c9-9972-6fed9593a05b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf8c74b-111c-4e96-ba7a-97ef3cd20283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7759d65b-f271-416b-8a75-413bda3667e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b690df4c-9a14-43c5-85ff-b4faad1061fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89338d07-63c2-4f02-89d9-29f0a0c2e8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09def2e-ab18-45a6-b017-2024d7d8d20a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049ff3cd-1c68-4671-a10c-268fba212f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7bc37c-ec34-4363-883f-5d68141b9749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b74e34d-596b-4a47-8f13-63d6ff14f92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d24b5d-73fe-40cc-b0e8-1374735dd944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed4dc84-f317-4a96-8ed5-8a48cfac8fbf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e90560-6d1f-4ac0-b88b-1644bf12cddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc82725-ef6a-4ee8-80a3-1166ef29edb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9326f21a-f120-4006-b6bf-4032edf59b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a09e9b7-4e2c-4308-aa39-4ac0574db549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc18775-74bc-4907-976c-b30c0c8473a5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101e441e-064a-4980-ba66-8df72397cc79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810a82fe-420c-4e65-bac0-d7081f1b7afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f22cbc-72bd-45dc-a60b-a4617a19265b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1066b943-2fb5-4308-9496-685d9ef23259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2ab107-8ba1-47a5-b7d0-21de4ebafe3d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01baacc-1926-4ae9-b1f0-971fd1f469af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5896edb1-6d5f-48d0-9873-5bc2f84932a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b479c4f-f829-4e05-a8c0-67b5fa42477d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb25aee-be9a-4e1c-a02b-ae4553736a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87aab0a8-3b98-43ac-b79a-f21e55ff43d8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a9812b-a799-4a69-9a30-ace2bf711b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fe2bd0c-4486-488d-b80b-ec0e0572d136"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af96b5bd-3be7-4350-aaa6-30009c9b68c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0914cc9-59ae-401c-a25d-00fa881aac76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ec351b-1d87-444f-a7bb-2d0f505f5f6a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69482f87-54f1-4bdb-b4cb-a9d712bf220a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c6e1c7-55df-4014-a330-782877d0cd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90d8c0b-2a09-4ee9-a972-8e8f188674e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d24a099-e87f-44c2-8d3b-1c8103daf242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9547a37-fa6d-499e-92f3-c78619024d44",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca01e7c-3547-420a-be68-f13564be4fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63ca9980-8ef8-44b8-ab18-5f7b92d73cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b94ec8-ca69-4240-993f-a5698bbf28af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89b5503-b3fc-4630-8693-ca7b93ffdf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a69fd5-68f2-41ee-92c2-9f268cd2cf40",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8809d04f-e14e-4ee2-bf96-f7a3ff4cfd49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7857823a-8d21-4b73-a596-a56bb9088b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8176fd88-c610-4f1c-bd5d-fa528e345d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4459fed-f2d6-41a0-88d9-4e2aca575815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e1a01d-3892-4928-b107-d8a313ef420f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85c74b9-8aa2-4af4-8f59-8df7239281a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bdf296b-b61d-4a97-bd10-e249360f8b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf1f10d-0905-4b43-89a7-4b3fd8972cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a7d6ae-fab6-42c6-9a90-feb24e49ca50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23bd0b4-77eb-4126-ac67-83ab954052d5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0990270-2cf0-44e7-95b8-900d10694d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea7292c-77db-496d-9602-1450d20ba8d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae0c981-8791-4cfb-898f-660c6a6142ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b6b3fe-afeb-44d5-bb1e-be4b9812e86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274cf389-918d-4e7e-9cf7-68052c054c3d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd375ffb-3f1b-4be5-be9a-c93bb1874593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a986bd-d1ee-4e67-bb27-186b46b0d0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19572874-ab6b-4498-9c92-052776ea518e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea61047-ac59-4c24-8dd1-54fbf1cada2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2181d87-662f-47e0-8a5b-6dbe7792ee72",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c524da0a-5118-45be-84b9-b1897758bc99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5f0c579-441e-4ec0-82f4-b9e9bec984be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06dcf8a-4b7d-4678-b7e2-9fd22e7f6958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730d1a3c-cdc6-49df-a6a1-5979849bc9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f5036d-e411-4941-937e-dd69833af9e8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a679f4de-7842-4d71-aea5-b5cf22e9db33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e113e5-db76-4ad9-89dd-e3ef09a5930c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3e39ac-6469-4821-a97c-ec2b3af9e667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0a4517-8d14-4e5e-b80d-53738e73bea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776a5484-5558-4d2e-bc60-a9f6ca32b7fa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788584a2-83ef-4324-8376-8272e2a7f7ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2003f7-fb9d-4fd3-951e-be0002cec5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a493f76b-2350-4036-9d38-be5aefcacda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f89242-3d8c-4cd7-ac29-5596ad110f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b67800-defc-40f4-a28b-5b15967094ae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d9d02d-4140-46bf-983e-85d7d0ac5465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e761d14f-2dc9-4076-9f1b-13586cb44920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d67d0c1-1670-44c8-a020-ade55cdb75d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9cf6d6-d310-4719-92c3-14d34b1b2a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c132d50e-4617-4361-b24c-289390ccfea7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9155f67d-38ef-488e-b7fd-6f9bbfde6447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42acb499-7c88-485a-8d4c-084d204e0dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfb17d5-2a8a-4f93-aff7-1fd65e795ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a705659-9a43-4f2d-b4a8-adff64ef4e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b20ff09-30c8-447d-b762-84f84d61c09d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17b2cbc-3a72-443f-9e5b-dcf7b55db801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9466f052-f56b-48ba-b0f7-caf2700f8421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfc0bd0-0974-483c-95e1-34b5b05b7b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf9491d-c27d-480d-8bc9-442ecc03f9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d813cd61-6286-4b47-9db7-444ffdefcc83",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ea1a65-704a-4f05-9375-1b5b4c5f7fe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c85d2008-b579-47c2-9342-efb6852753c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ee8c4d-6882-4083-988d-5a7336d8e8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf9a9cd-ae66-4bc4-8d45-053c5b9977df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11326687-5b15-483c-8fbd-d99161301256",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0952255c-c2d3-4f54-bc7a-26971da2e08f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3d4a664-29e4-4d6e-a52b-2d899b48d6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57759d0b-e623-42eb-af96-0d4e645f8a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae43aa78-06c1-44b0-a420-c5496b857c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2e97a0-857c-4ace-a477-202d77481097",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d5252c-a49d-49e1-9829-ea2fc18a9def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0df7db1-cec1-4ddb-a9d2-f3fb2a3e9ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91984cdd-b9e3-4cc9-8697-d831f88cf206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64e9ab6-2306-4a00-b656-e2525b4af339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbe2bf3-a9de-40b7-a083-dcaf753a8238",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c39b26-b9c0-4448-8c6f-e8eb43f8d756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd94a849-3790-4b1c-badd-2725ccea79d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1249a6ed-90ad-472c-ac03-143ed4a0bdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f483b8a5-ae9b-443b-87bd-fc840e1f6151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc1fcb6-9cf3-4d3a-82c6-2671347d4e15",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be66f55e-52bb-4a71-8956-afba9b152605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b080d5-e0d7-45a5-8a0b-7ca271f5b1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fc45eb-b960-4cd4-9016-238ce2784ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ebd990-bb5a-4012-bc26-1a7571cb0053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaabce48-3438-47e7-8d60-4da2afdd7ce3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75812608-d7aa-4089-ba4f-e71c9063ef71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f7f7ae6-4833-4f8a-92cb-ea7a62707743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfb0f86-f527-403e-95a0-c2962bf967d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf67ccb-3be1-41fe-8be0-e1cbb3a0b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8668bf17-120c-482e-a74d-7c620ea8bc6e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d1d4e5-8cbb-4296-af00-c6bbd04a7826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bb76ec0-16f0-4313-a2df-512f216d4e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99679d56-e028-4e7d-892d-76812ca05a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ffea26-956e-4637-8d80-51c981e6818b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24b433b-9c72-42e7-8659-023ef38382b3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13d6687-5a19-4f2e-801e-d11367d5a6fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11bf195f-b767-4871-9c26-9542a55c7f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df707b25-73f9-4ee0-947b-4edd663e74fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42c4a54-3fb9-4c0d-afaa-038d1fd4c86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ead788-b6c5-449f-9708-8d6e15dff1f9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88dcf91-75a4-4ac0-b257-8cc4ec4a8fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef28b676-3761-4497-a355-e3014008d208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccef3130-c592-4074-9f62-d16aacab71f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab84af1-0211-4a32-8409-a3a62a333694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9befd8-f356-4fdd-bd1c-8f759da4b3eb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186afc17-6aa9-4a21-b38c-7f7d15253cc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cd1a38e-b919-4f28-9263-10ffcb56db7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9ead69-be7f-4813-bd43-36c6350f74b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88dfa853-1ac3-4516-bc70-5db670788b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b369c-737b-4a52-85d4-f12e749f535e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8674829-8242-48d7-87f3-471c08338881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42997a98-4ddc-4581-a340-540c514c942e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd2f9fe-0e97-4f2e-98fb-1b1778a4fe35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb525ad-ce15-47b7-9207-6935d3b1675d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3506be7-82d0-4881-bb8f-6d9440973fa8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7b7fdc-97b2-4c55-9829-51fcdbff4d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928a81fa-46c6-477f-b078-2573673027ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f82ff57-1ec4-4c16-93a1-e168a6c01a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c05f33-be51-45ff-994b-e573a6fec36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986222f5-2ff3-4b52-a599-87e4ed589321",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c4f83a-8cf9-417d-ac57-d69c79599c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0681bf-4562-4d3d-96eb-a86d70e87d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0552160e-35b7-4495-9543-611548de1b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e97061-aaf4-4c0d-bc2a-00ce6fe474c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3073070f-504a-4c2b-82da-457ddfaff697",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df0c165-4866-45b5-94a4-ca1da7e0fc6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed591115-41b4-4779-9195-50b15980fc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db01191-a276-4404-96cc-7e02e897a269",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63bc42e-ad69-4df5-8c2b-3aec00f57fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ee32f7-8354-4f05-b0a0-b4729476ad71",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1244f06d-b0dd-44d7-a615-1d371768b9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7c62279-12c9-49e6-9b0f-d9cf8e684f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afced5b0-97cb-4179-aa8b-3bfd1c2d892a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d638ccc-83cd-4982-8127-9155868d8c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1610b02-21c3-4b40-9634-24455e0e097b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a166f84c-15af-41dc-bc91-81190c968d1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cc1be7-bf7e-4db6-b454-d6a8c4905fc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d320e7-9588-4807-b52f-0c06e7ce49b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ed86d5-96b2-40bc-ac00-b5d3e12ba8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7594704a-fd47-45be-a7e1-6873ccc7a3be",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8178df28-d4b8-479a-9934-d9eefcfa890a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74438689-2af6-42bb-89ff-52af184f39df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f645b5e3-f63c-4ce7-8a1c-f47aaceab521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e68ed52-e6ce-400a-9769-456d54808961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d377092-3056-4560-9a1d-039ebd135623",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ffc8e3-73ff-44d9-ad65-02b94e5f29df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa27c4e0-9b2f-4afb-9f69-840eaabdae04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eececc1-90d4-47ab-8eea-8d13959e85b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d69fccf-5fc3-4470-bd1e-a046e57806cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c235f47-d1f9-4b68-a0bc-546f76a691dd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a88b26-3dfb-4094-9137-1dd69ae12706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f442ba0-76a9-4815-860b-0b7930b25e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baeaf31-c651-4fe8-bf6a-845cf8325c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6a4e36-ecd9-48ba-a87e-4ac39153320b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfacf42f-4d54-4cc7-824d-dd394501476d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d712be-7385-4dae-80f5-59b23d1e03b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e900e1-c832-46d2-8a7d-84e9c05c2006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0485fc-7bc6-4825-bfed-dd27fd80ca46",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1373572f-0fd0-4b01-b29c-6dbc8727cc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8617a3c6-0315-41c7-bccf-751c24629d20",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b20703-a5fb-4886-a723-a882d6039641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "663ac57b-4a40-4487-a189-e2dbee8ab4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9c2bcc-111f-43ac-b803-bdb9210e45bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43c44a8-fd4a-4f0b-90b9-8c1c2f3b4752"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "514063ca-7d0e-48b6-a005-04e069533766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8e8a208-dbfb-4f30-8e78-b833de2c845d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dea00961-5234-4e24-a406-48c5d8702fd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39141634-91d1-4b0d-9a23-ec0804829e88"
                    }
                  }
                ]
              },
              {
                "id": "6a88a18c-867f-46a6-ac95-2239ff397ec3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2490444b-093b-41a5-af36-624b77d71648",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922f82fd-f719-42a1-857f-d7bdd8d704ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c5f09ca6-7111-46ce-8d3f-b03eb79419c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00c215b-5e0d-4542-921c-0e28155fb51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19a89d25-cf6c-4c2e-924d-f3fa4780400f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "786de4a6-39bd-4abe-b1df-2ffea4edbb85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfba891d-8545-42af-ac29-c59a4607f534"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33ef355e-e06b-469a-a602-72a51f5a690c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85e3578f-739b-4316-bba1-b4619e83f9f7"
                    }
                  }
                ]
              },
              {
                "id": "853befce-27e0-42fb-a01f-df054155d2c5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e9b1c145-a0d8-4e55-942f-05ebc347d3cb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df23966-6120-4ba4-8749-683f539e1129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "29aa85a2-6650-4256-ac51-e543ebbd3695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1d3751-1307-49cf-afcf-8186f78a4ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f527d62d-f517-470b-9272-b86374d1a761"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef893903-4c02-49f8-b9a8-09d8b765a6fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c9c9756-0248-49b7-9921-b4ec978a62bd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97bf0ab2-27ae-4959-8666-47a712f17952",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cfc7c68d-f962-4e99-8506-187332897856"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "502b7ef8-cc33-46e1-a091-0380cceab4e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bede5709-e30a-4b86-8e99-633821d222e1"
                    }
                  }
                ]
              },
              {
                "id": "f218bece-c6c9-4d40-938f-00cd4cae9f02",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6047abe7-d27d-41e1-a02a-3854227abd9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cd807474-840a-4b95-b097-d4e89de99acf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5fb650e-a77e-44f1-aaec-329ce48e9abd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20234c07-dcd5-4855-b301-f16be7241b9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a072c8a5-5b98-4b9a-8077-c7179141ebc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f3abb5c3-c0e1-45b0-8709-ecfce75decde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "256eb6df-c8cf-4d1f-9f33-9d28101897fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f065de9-2646-4cf0-9d28-43b66ee304ef"
            }
          }
        ]
      },
      {
        "id": "b897937a-a943-41ba-a022-cff1970fcfe7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "15886f5c-43d4-4ef2-98b5-4eed2d4048a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "618835ae-6f41-446f-878f-388b61bfb66c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "546e807a-5ec3-42a4-8473-9c1219b4edff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d710fb6-a3e1-42b0-b636-49549329fa48",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a4580acf-ba13-4260-80b9-50f8d05eba6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8f983f-ff70-4292-9a6b-1dcdb4ef007e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c3c87b8-d2c4-4cc9-9004-09c66dab7ff8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee711aa0-90a4-4be0-bbfc-dc49561bf564",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4cad09d-212a-41c8-b9fd-fab7660a1eef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1563a54-48ee-4a2a-938c-06923f2535d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73287eb8-891a-4231-8051-7a8761da98ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "209fb6ec-2cfb-4581-af00-29445dc276be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "46c4887d-41f7-4467-ac6c-b3f01b40975a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29b5a08b-8f61-4eb7-9bd2-8adac7384965",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc1fa5ea-a5de-489e-8ea7-16732f850c16"
            }
          }
        ]
      },
      {
        "id": "5e252c0f-01d2-45eb-bb07-a5c27c8122ef",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0f4a210c-ee62-4ee5-ba84-3aa17836e4f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b18015b-ab16-45db-9c4c-915db823fc37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ea05274-16be-4164-ad9e-1117a2ce19e8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e632daf5-af69-41f1-8f2e-21608123c42c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c600f415-5af5-450b-b353-24d45e6d89d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f334383-e143-436c-96d5-d6968eee002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a3bdb7f-269a-4e73-894f-a58d526310e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a877b5b0-60e4-4ef9-a3c6-9192c2ef5b4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70da6f66-5ba0-4be1-9dad-dbe3493088a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a9833b9-8b29-466a-b81b-4b80619fc138",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57d7e276-9368-443d-b6a2-e43f9175876d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8b53f42-02cd-4cba-a823-811e2616de6f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f60bc3a6-508d-41c5-9b96-0f8dda2d9bf9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13bd19d2-7896-4d1f-a67a-ccc37dd22587",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcd57266-a99f-4601-95b5-a351685cc4fb"
            }
          }
        ]
      },
      {
        "id": "4a17adb7-79a2-4144-b845-d5bfb7dd89b1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4bd124ee-9487-41b4-adaf-1bc210461265",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20f85e9f-e88a-4623-8ee3-8893abb20866",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b1c5af7-36d2-497e-a363-662df2fb30f8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead57e61-f0cf-46aa-8e83-79f2427e6ba7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3f9ba0a-45bf-4724-a6a1-a83f561fe3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5922d09-74d0-4bd4-ab6a-460678e2ddbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba56fe5-d1cf-488f-96d9-2a6018e88f72"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "230adcec-635d-4514-b971-398e38ff385b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a6f4200-31db-4d6c-8819-b39facbfafe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f45b3c0-26af-4f58-bfa6-b9cde5c1536e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e79bbeed-6acb-4be2-9ef3-e7ea22d1f0bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c28188d-63af-4854-928c-a56c4bffe9f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1b89cd86-5314-4b42-94bd-8692d9dc9f77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e886a373-c61c-4472-ad60-b32073be4549",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a26f6c1-90f8-419d-b36d-d17afe58dfc7"
            }
          }
        ]
      },
      {
        "id": "67a3dce4-d329-4f62-b18d-88fa2cfce6fd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "591eed95-ee9c-479a-b08a-fec9524edbb4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5eae84c4-729f-43a3-97c0-26ef0f3fb5fa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ba238f16-ed9c-4cec-bcd7-5ac1fd30c831",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ff5a21a-2e23-42f6-a287-9ba499da3640",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "250f3e4a-e479-4381-aaea-2a4728ffb84a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 124.56690140845068,
      "responseMin": 10,
      "responseMax": 1905,
      "responseSd": 317.3481655851469,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695688422035,
      "completed": 1695688469462
    },
    "executions": [
      {
        "id": "e3573428-856d-4f3d-8746-c629f0e1b8f4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "65054365-0034-459a-82f5-b78e6c589558",
          "httpRequestId": "84e8ab00-5051-46a1-bd6a-4d2b7791f173"
        },
        "item": {
          "id": "e3573428-856d-4f3d-8746-c629f0e1b8f4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "95396a37-829d-4d4a-9267-3329571674a8",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "c743bc16-6685-4265-8546-971fdc5bd4ac",
        "cursor": {
          "ref": "0260a770-3f62-45a8-8f13-f818faba08f9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "91250d0f-e9c4-4c2e-97fe-f97eb5cb2ee3"
        },
        "item": {
          "id": "c743bc16-6685-4265-8546-971fdc5bd4ac",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ef936a5a-f937-464e-bcfb-3a95fbdd1712",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c274c61a-b69c-454e-a990-911904954fb7",
        "cursor": {
          "ref": "d2e95040-c665-408b-aa53-678f9d8d6572",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2f08f6e0-16c7-4f27-b796-e27d6486d3d8"
        },
        "item": {
          "id": "c274c61a-b69c-454e-a990-911904954fb7",
          "name": "did_json"
        },
        "response": {
          "id": "51ab228d-3a11-44d9-a667-579f7a67bd5d",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8541e1-16e9-414e-9ac6-3e7c10802068",
        "cursor": {
          "ref": "a92ac65b-d972-4514-8be4-115e9752a47f",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4ffd494-1cde-43c4-b461-a420d74bc4b2"
        },
        "item": {
          "id": "4b8541e1-16e9-414e-9ac6-3e7c10802068",
          "name": "did:invalid"
        },
        "response": {
          "id": "45f91d58-f9f4-4c6f-82f9-b46a773d595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8541e1-16e9-414e-9ac6-3e7c10802068",
        "cursor": {
          "ref": "a92ac65b-d972-4514-8be4-115e9752a47f",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b4ffd494-1cde-43c4-b461-a420d74bc4b2"
        },
        "item": {
          "id": "4b8541e1-16e9-414e-9ac6-3e7c10802068",
          "name": "did:invalid"
        },
        "response": {
          "id": "45f91d58-f9f4-4c6f-82f9-b46a773d595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b620f9-7c32-42df-9961-c2ea1192e8cf",
        "cursor": {
          "ref": "85ce0142-cb2a-44f3-b3b5-3bb1962f8721",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6f379ded-c210-4c40-b402-0e9862a5826b"
        },
        "item": {
          "id": "22b620f9-7c32-42df-9961-c2ea1192e8cf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0ef335a3-55f3-4748-b142-ee53073b91c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa46b56a-4380-4d3d-aaa1-fdadfc06acbe",
        "cursor": {
          "ref": "fa2527ee-4abf-4a73-9c23-6a5e921c27a7",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bd2f5126-4c08-4ea9-9a8d-1bab962b6f92"
        },
        "item": {
          "id": "aa46b56a-4380-4d3d-aaa1-fdadfc06acbe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89b7d93a-68fc-4da5-ad22-c671caf6fa15",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d78b04a-858d-4bbd-bcd0-18e10bda4614",
        "cursor": {
          "ref": "4e2d539f-d3b6-4480-a76b-aaf761944d78",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "40907e86-48b4-4b11-9e94-a8f26da729f4"
        },
        "item": {
          "id": "9d78b04a-858d-4bbd-bcd0-18e10bda4614",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc3f1954-f9b5-4ff0-b7d3-8849cb84f981",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7244ce5-2787-4ab1-b3f8-9b3bf682fd21",
        "cursor": {
          "ref": "c6fcafc5-7766-4088-a421-cb8086179048",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "249750e5-c12a-4cd1-a32b-a57e1028afdf"
        },
        "item": {
          "id": "e7244ce5-2787-4ab1-b3f8-9b3bf682fd21",
          "name": "identifiers"
        },
        "response": {
          "id": "f9632ac3-0d04-43ad-abbf-0c98c85cfe60",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c38384-f972-42cf-bf79-7cb1bb5c7a3f",
        "cursor": {
          "ref": "7b0720f0-fe54-437e-bae1-3ea0d76007ac",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eb0c5dbc-b117-4ea8-a28a-6cf6252c02ab"
        },
        "item": {
          "id": "53c38384-f972-42cf-bf79-7cb1bb5c7a3f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e22d7e29-491a-48d7-a43d-b3d79c6fc9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08975b1c-d2ed-4de5-b0be-4637dd16332e",
        "cursor": {
          "ref": "a97155ca-fa07-4953-9c29-2576acb7aeab",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "777cf11e-f828-4938-8d36-94cfe434a071"
        },
        "item": {
          "id": "08975b1c-d2ed-4de5-b0be-4637dd16332e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "563abf5c-c260-4371-a820-836935e49522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29847112-6613-4f80-93eb-44d83b417189",
        "cursor": {
          "ref": "855ca695-9a28-42eb-b96f-faaca9e5e9a5",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "10b1ccfd-4d27-4cd2-bc1a-9e58d08f58d2"
        },
        "item": {
          "id": "29847112-6613-4f80-93eb-44d83b417189",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dd55100c-edb5-4118-96c7-e2c52753299e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fa20fc-cc7b-423b-bc9b-1df43985362c",
        "cursor": {
          "ref": "2f9166b9-978c-4f59-ac97-6c23680756cb",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0c063903-505d-474f-9605-c7249d7d4e75"
        },
        "item": {
          "id": "22fa20fc-cc7b-423b-bc9b-1df43985362c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "99c91acb-22fd-4de6-ae39-9eb3a877c472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448289a8-6ee1-405c-8b00-eacc2816bd4a",
        "cursor": {
          "ref": "f7e875ef-fb89-4f7b-b951-f6a31ea43d0a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21e12514-cc28-40fb-9af4-ce6b57dd5ea8"
        },
        "item": {
          "id": "448289a8-6ee1-405c-8b00-eacc2816bd4a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e5dcdf62-1bd0-46e0-b988-23458c702890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8207eb07-c465-46cd-bbfc-cf8e6c43dd94",
        "cursor": {
          "ref": "9f3eb744-0b29-4ab3-939d-e4e86fbabbbd",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "52fd3f39-215c-4a31-95a1-a1b9b1d9c137"
        },
        "item": {
          "id": "8207eb07-c465-46cd-bbfc-cf8e6c43dd94",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "af43fe1b-6681-49a0-8d1f-e4335c6b7ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6271e5d-ed99-4b3b-84f0-0f7a0374067a",
        "cursor": {
          "ref": "a49cd4bd-b889-422b-a9ce-1e162dd07c0b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "678a8a9d-b925-461a-8051-305cdbec54db"
        },
        "item": {
          "id": "e6271e5d-ed99-4b3b-84f0-0f7a0374067a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7594611f-c721-4f32-9b0e-87b25cceb455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da7c9be-81da-4938-b20e-1cc7e1f53106",
        "cursor": {
          "ref": "0200b43b-c051-427b-ba91-03e578892d71",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2eadaf77-803a-494c-b6c0-7cc21fe673b1"
        },
        "item": {
          "id": "7da7c9be-81da-4938-b20e-1cc7e1f53106",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "433d3873-a1fc-4f10-942d-8598687291da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf998151-6c57-43df-9e3c-036e2a6fa98b",
        "cursor": {
          "ref": "3161388e-78e8-43a0-bfdb-de89d1246a85",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "252cf12a-3456-48d1-bc85-a3504a4a0a05"
        },
        "item": {
          "id": "cf998151-6c57-43df-9e3c-036e2a6fa98b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4e060878-03b5-43cb-8c79-ebb342ffb510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59c7aa6-3c40-4fe6-a71c-0963be4e5931",
        "cursor": {
          "ref": "8ddbe6a8-edb0-439c-b0d3-d9a189227879",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c851ad43-19d4-46db-a8fe-3184af7bd0ec"
        },
        "item": {
          "id": "e59c7aa6-3c40-4fe6-a71c-0963be4e5931",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "daa0acaf-376a-46e5-94eb-d5c40b413e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e4ebf1-4afb-4cfe-87b7-3ed19d2450ea",
        "cursor": {
          "ref": "2d9b0fbb-1e63-491a-8970-560b2bf3cf8c",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5216805c-ccf5-492e-bf78-583b33c86e21"
        },
        "item": {
          "id": "09e4ebf1-4afb-4cfe-87b7-3ed19d2450ea",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1215be36-8592-4e7e-9d72-90dbabed77f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c125ed9c-5091-4d5c-8967-fade5288857e",
        "cursor": {
          "ref": "083dc1fa-a1fa-487a-975c-a06f3a490bb8",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "21060a46-661a-4a91-9181-11d359d4b557"
        },
        "item": {
          "id": "c125ed9c-5091-4d5c-8967-fade5288857e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "28b45042-a2f8-41c6-abe2-880ea11af426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b76c6f-2c74-4ef0-93da-a895500fb159",
        "cursor": {
          "ref": "76da18e2-497a-4334-9483-b315d1742b42",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "05c8ec4b-03f2-495c-bcc6-58fe1a046ff7"
        },
        "item": {
          "id": "a9b76c6f-2c74-4ef0-93da-a895500fb159",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "03be2f8d-1a89-4274-91fc-b73381487d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06a3a31-7f0a-44da-be91-1c6280c42028",
        "cursor": {
          "ref": "ca73dcd6-1995-48b7-99d6-14bf12892521",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "124c0ffa-ea8b-4cc7-8e9a-004714aaac2c"
        },
        "item": {
          "id": "d06a3a31-7f0a-44da-be91-1c6280c42028",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "50b7b106-891f-411a-8e64-916c51c6199b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c95c57a-be0a-4a7b-bb4d-c60bc01cc9cd",
        "cursor": {
          "ref": "a22a2da0-a068-4c75-8b48-6fb1eb5e46e8",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b762bd9c-09d3-47c7-b377-41fa4851c2d6"
        },
        "item": {
          "id": "5c95c57a-be0a-4a7b-bb4d-c60bc01cc9cd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "87872aad-ac1b-4010-8f7c-97810f43ef5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a19b6a-7f24-42c2-979e-12c687eb13db",
        "cursor": {
          "ref": "e428c6c0-5375-4ce9-a1c8-0bf53a492119",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "35d412da-60e1-4399-a38b-9af5efb67259"
        },
        "item": {
          "id": "a6a19b6a-7f24-42c2-979e-12c687eb13db",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "68319004-e3df-4ef7-bc36-466b5dc6013c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ed4527-36e4-4d4f-80b9-43aa7648aa5b",
        "cursor": {
          "ref": "1ab0aa2f-b928-40d4-b10d-846d01168cf8",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2c460976-7a9b-4237-8cf0-4658659dd927"
        },
        "item": {
          "id": "50ed4527-36e4-4d4f-80b9-43aa7648aa5b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "39174318-d0aa-4a23-a5d0-429ba859c1c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d43d23a-831e-44e5-982d-50e7895c71d4",
        "cursor": {
          "ref": "c015d0fd-d744-4d16-a12c-07d7b53ce9a1",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba4bd12e-e0d7-4750-85b7-10623cf28e7d"
        },
        "item": {
          "id": "9d43d23a-831e-44e5-982d-50e7895c71d4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "80e5e839-7144-4000-8a6b-e88530d247c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23531c62-f238-4af9-8f48-24ef39a2aa82",
        "cursor": {
          "ref": "f65a50ef-0f75-42f3-a2bb-4385779dcf00",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a186b173-b568-4fe5-8804-a4d396340962"
        },
        "item": {
          "id": "23531c62-f238-4af9-8f48-24ef39a2aa82",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "49a71270-8e9d-4e93-8f89-5d84b2405310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34caf3eb-40fd-47a8-b967-d4f7a0652456",
        "cursor": {
          "ref": "82ce4b56-7423-4bb3-bce6-837c80cc2600",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6d0efddd-8c64-48fd-a53f-aa4d2119d3fb"
        },
        "item": {
          "id": "34caf3eb-40fd-47a8-b967-d4f7a0652456",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "79cd16df-6346-4e7b-ad5e-338ecbf8793e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d99a3ce-d1bc-4578-ab14-2eec5cfc8de7",
        "cursor": {
          "ref": "67a8ef30-e43d-4a33-8b92-90e9429b77df",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9461068c-c81a-471c-8cd2-27f58610ded4"
        },
        "item": {
          "id": "5d99a3ce-d1bc-4578-ab14-2eec5cfc8de7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c6be64cb-d014-45e5-bac5-2eeabcb99e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba6c957-8a43-4a38-9b7e-5d5dcfb31cec",
        "cursor": {
          "ref": "9c0c5558-4f4f-4f8c-a3b0-5bfdfef1f784",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5e62d940-7943-470f-bb65-62c26a9ea713"
        },
        "item": {
          "id": "5ba6c957-8a43-4a38-9b7e-5d5dcfb31cec",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "56615767-64f7-4103-a109-c0a092fd0618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff9caf8-4cef-4103-b17a-f60057485ae7",
        "cursor": {
          "ref": "bd2e0809-ae36-46ac-9e7a-4809d64695af",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2930282c-72c8-4d92-884d-bf0219029fbd"
        },
        "item": {
          "id": "cff9caf8-4cef-4103-b17a-f60057485ae7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "92237801-c0aa-4488-b33b-953ff7c04395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9237af-88a2-4058-9357-eec4c421f7e3",
        "cursor": {
          "ref": "526890a9-d0a4-4bf0-8997-57a1149b558a",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5b297163-5326-465f-8196-4f912de6786e"
        },
        "item": {
          "id": "2b9237af-88a2-4058-9357-eec4c421f7e3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1e848d1d-30b9-441a-b573-cbfe938ed823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033c5537-0898-4137-bcfb-96267d88ff44",
        "cursor": {
          "ref": "2cbfa52f-69d9-4de4-8b0c-ef7f4e4f2542",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "93d1c814-89de-4af9-a358-42eb913b48ea"
        },
        "item": {
          "id": "033c5537-0898-4137-bcfb-96267d88ff44",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "00ac4d84-8f33-4944-aacb-ed38ab7ff325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf4514c-6d4e-46dd-ace9-8a3aecc89c0e",
        "cursor": {
          "ref": "a1674e2d-47f7-4ef1-9fbd-44818861c941",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "be1272e5-e681-40ad-ba3f-14df0feda2c4"
        },
        "item": {
          "id": "cbf4514c-6d4e-46dd-ace9-8a3aecc89c0e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "470f0c58-ec01-42ce-8003-a3a5d18908fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391597ff-dbcf-4328-9c2d-654eae434ed9",
        "cursor": {
          "ref": "ca494799-f742-4a37-a4c8-e004b21e72c8",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "21de829a-9ca3-41eb-a1e3-e427cea9a8f1"
        },
        "item": {
          "id": "391597ff-dbcf-4328-9c2d-654eae434ed9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "00fd627e-c5ab-4720-ac61-a9605e0d85ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b472797-0ba1-447b-ab52-80bee4abe391",
        "cursor": {
          "ref": "1154dab6-ddb1-4964-888b-4057ff8b471d",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8fb20f1a-7f0a-49b7-9b25-f60f38a8186a"
        },
        "item": {
          "id": "2b472797-0ba1-447b-ab52-80bee4abe391",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "608ab753-68d2-44ae-8ad7-311de09fecf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3fbd4b-66c6-4d15-b595-f373ac79ad02",
        "cursor": {
          "ref": "cb12c306-8b6f-441b-9500-3bf4dcc69727",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f0bb550b-3188-424f-a765-96179c01f7ab"
        },
        "item": {
          "id": "2a3fbd4b-66c6-4d15-b595-f373ac79ad02",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ad0233f1-1a6e-4424-88a9-17fd803ededd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f555cdd6-5320-4a6f-8a21-7c981d9f201e",
        "cursor": {
          "ref": "2bd2f4cb-4a28-46c8-8d02-e33ef407d2d4",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a4c59953-0f8f-4b4d-8528-29da4bf5482c"
        },
        "item": {
          "id": "f555cdd6-5320-4a6f-8a21-7c981d9f201e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ba101f2e-69cb-429d-9346-c1a7985e9a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1087e01f-cb65-4f5a-a2c7-ea45384a24d1",
        "cursor": {
          "ref": "120d327e-e248-45a7-9a87-0cc642700e32",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0d6d2fcc-0366-473e-85af-10d5d000f08c"
        },
        "item": {
          "id": "1087e01f-cb65-4f5a-a2c7-ea45384a24d1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f52326bc-71a7-4a29-95ee-62b3bc5f85bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e303fc6f-4e81-46f0-ba3f-35f483a9e914",
        "cursor": {
          "ref": "bef36bad-d39a-4f8a-963e-2f3e11d5ecb7",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4203d040-b287-415d-857b-678edfe83c27"
        },
        "item": {
          "id": "e303fc6f-4e81-46f0-ba3f-35f483a9e914",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "159337e1-f7ba-4762-9333-6ecbf975b85d",
          "status": "Created",
          "code": 201,
          "responseTime": 1905,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "420ccc19-b39a-41a8-a7f6-cc90d3633f9a",
        "cursor": {
          "ref": "75ad7e46-d92f-4ac2-809a-661549bba7aa",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "53bcfddd-5687-4e18-b7cf-feae52ce3659"
        },
        "item": {
          "id": "420ccc19-b39a-41a8-a7f6-cc90d3633f9a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5ef18760-95f2-4c6f-bef5-55d586b71a25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "80f45e4c-e4ef-4280-9c5c-1821932b2125",
        "cursor": {
          "ref": "85076527-d987-4b66-88a2-2d3eccf237c5",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "89e10100-9ab0-4d84-b094-bcc44177f176"
        },
        "item": {
          "id": "80f45e4c-e4ef-4280-9c5c-1821932b2125",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7889fa54-4996-4b03-9dc5-2bf2fd1ee1fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6272b2f6-5c49-4158-b8cf-36beee69d3d3",
        "cursor": {
          "ref": "1760fff8-2088-44f0-ba6f-ae2872078b00",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0c9ef3d4-2f8c-4841-84e3-8b808c22b0c7"
        },
        "item": {
          "id": "6272b2f6-5c49-4158-b8cf-36beee69d3d3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a615c20f-4d84-45dc-9840-99f08531bcd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e2bc3c2e-78cd-442c-845c-3ee534e486fc",
        "cursor": {
          "ref": "95b4658e-ac28-4bc0-87c7-bf57e85b1204",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "529be5a9-c6fb-4c1b-93b1-c559f72fe1db"
        },
        "item": {
          "id": "e2bc3c2e-78cd-442c-845c-3ee534e486fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "689f4365-3af1-4a17-a514-e98fce8e89ee",
          "status": "Created",
          "code": 201,
          "responseTime": 1506,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ae040ef9-30f2-469f-bb9a-53cdf7d9622a",
        "cursor": {
          "ref": "7f69a332-78a7-4698-9f38-7173649ed045",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dd022044-4091-4933-b1b9-901388cca601"
        },
        "item": {
          "id": "ae040ef9-30f2-469f-bb9a-53cdf7d9622a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1e427c43-3de8-4ec3-99b2-b8ce6556582a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c887c104-0a59-440e-97fe-8b0a46f631f9",
        "cursor": {
          "ref": "a35c3647-e9eb-427c-9da8-13fb96bd8607",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dc243978-66ce-4077-b5a5-529f982c8a1f"
        },
        "item": {
          "id": "c887c104-0a59-440e-97fe-8b0a46f631f9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "75a1e942-58c2-4e1b-b06f-1739c1864f47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1032,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c8b5f48b-2c1f-4ca5-afc7-e4e613854747",
        "cursor": {
          "ref": "532ed24f-2dc5-4294-ab49-81437afb0c44",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a82581d2-274a-4c2d-94af-f98b59fa1ba2"
        },
        "item": {
          "id": "c8b5f48b-2c1f-4ca5-afc7-e4e613854747",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6964712d-2b86-4b44-b82f-9e5c47c6508b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 203,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0cf07fe2-e45d-406b-9282-4ac32c08b162",
        "cursor": {
          "ref": "bbf42bc9-3cbe-4b1a-b42d-7785051e520d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "19b4a8f0-3512-49c5-b05b-ef2d000cc88d"
        },
        "item": {
          "id": "0cf07fe2-e45d-406b-9282-4ac32c08b162",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ff7d04ff-afa2-4df6-bbd9-f578cbef7085",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bc1d0e8b-9d68-4054-9d6d-bd463d720cd4",
        "cursor": {
          "ref": "63922d9d-ec56-4423-a99f-956e2a35c353",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2ebec2c1-a96f-45cf-9e16-5f7cf0b19318"
        },
        "item": {
          "id": "bc1d0e8b-9d68-4054-9d6d-bd463d720cd4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8f172d0f-1c5a-4112-801f-064e12d1f4b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b21462ba-0c8c-4cb6-93d2-aece91c12229",
        "cursor": {
          "ref": "dc925121-9488-4de2-baed-b022f0a9ad32",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c03475ac-63f3-400d-bd9c-da07fc052682"
        },
        "item": {
          "id": "b21462ba-0c8c-4cb6-93d2-aece91c12229",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "610deb50-c3a3-4683-8484-48f22157c298",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d11ec616-5339-437e-8d3b-8f7e0f6e6594",
        "cursor": {
          "ref": "e8b06554-b1ad-4d51-ba6c-f1e6a8edd322",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "72c059ce-fc41-46de-a209-3677a331c239"
        },
        "item": {
          "id": "d11ec616-5339-437e-8d3b-8f7e0f6e6594",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e30d1306-ad99-4a70-97cb-b16b5ed77e6d",
          "status": "Created",
          "code": 201,
          "responseTime": 1416,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6e810e26-516d-4ad2-ac8e-83b97fecbee3",
        "cursor": {
          "ref": "08163f81-2c31-4dcc-b750-cf69e2da2d8e",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "54bfaaf9-ced4-4074-a4e4-0c3954d4bfc6"
        },
        "item": {
          "id": "6e810e26-516d-4ad2-ac8e-83b97fecbee3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0d88796b-2caf-42db-a414-5904b70ce6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386dafde-a30b-4729-bafa-0585548bfeb7",
        "cursor": {
          "ref": "3936fa52-53d6-4a8b-9f9b-5fefff52b2d0",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "093e0442-ba55-4c7a-bc02-7fa501e35877"
        },
        "item": {
          "id": "386dafde-a30b-4729-bafa-0585548bfeb7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ca6ce29f-da2e-4576-9ccc-e0eea1fd686a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3973e2-5c16-472f-a017-961f7ff3ab91",
        "cursor": {
          "ref": "4bd96a7c-0333-43f4-868f-71f8f483ee25",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4fb0a0fc-546d-42f1-9b5f-a0dbf7bd6926"
        },
        "item": {
          "id": "dc3973e2-5c16-472f-a017-961f7ff3ab91",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a05b6568-6ee3-42d6-82d8-be909d5a6ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52112ed9-af0e-4571-921a-fefde09aec36",
        "cursor": {
          "ref": "1e9814e5-334c-400b-bc0e-5d6cce9eb91c",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b267499e-ad8a-4638-b1dd-1bd9478cf7c5"
        },
        "item": {
          "id": "52112ed9-af0e-4571-921a-fefde09aec36",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a884234e-0b14-451a-aa27-6057c5cdc974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233622e1-289d-4937-a2c2-b5da45d80919",
        "cursor": {
          "ref": "66d3a322-e149-485d-9c66-abc9c1856e82",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6f684a23-e980-4507-822a-cb3e557a4174"
        },
        "item": {
          "id": "233622e1-289d-4937-a2c2-b5da45d80919",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8bb83a9e-2e54-4b04-a9a8-762de4668720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f680e2-8f18-422a-aee4-d65bda69b6e6",
        "cursor": {
          "ref": "b13061d2-ab23-4b6e-934c-d270b7673553",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1520439a-aa5d-416d-99b9-1503e5010cf3"
        },
        "item": {
          "id": "62f680e2-8f18-422a-aee4-d65bda69b6e6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "612886cc-2517-4d6f-a64e-d647a1551477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebf832f-7eb5-4658-bff7-c7b7aa6cbeca",
        "cursor": {
          "ref": "65e32a26-c0de-4dd3-bd30-e9c3031993b6",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d58de3cc-267a-4989-8acb-9f174da07378"
        },
        "item": {
          "id": "6ebf832f-7eb5-4658-bff7-c7b7aa6cbeca",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6a7461c4-9c05-4938-a216-341ec3f6c0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b2ba2a-2773-4acc-a68f-67811eaa3359",
        "cursor": {
          "ref": "d354cc85-2e7d-4079-bc56-6cd61da53d84",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "98f3a70b-2593-45ab-82dc-0006e5045faa"
        },
        "item": {
          "id": "62b2ba2a-2773-4acc-a68f-67811eaa3359",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d6f57c51-224d-4b8d-9e11-66e0b35ce99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494c9c63-86d3-42ab-b311-6481cbc8a6cf",
        "cursor": {
          "ref": "b139ca6f-9909-4d91-9014-ddaaa72279df",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5943142f-3da6-4a30-91a8-7a6d2b67176a"
        },
        "item": {
          "id": "494c9c63-86d3-42ab-b311-6481cbc8a6cf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2c40b2d5-8799-48f4-b14e-85cfd239e8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3f17df-064d-4099-ae29-5be4a98c0cb8",
        "cursor": {
          "ref": "c7a2a307-9b07-4892-b51a-947a6640e92a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c9dbe483-b3aa-4694-ace6-efc079355c47"
        },
        "item": {
          "id": "6a3f17df-064d-4099-ae29-5be4a98c0cb8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7eb2ca49-f040-4406-97fd-aab1e51dc6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2a7fc1-93e9-475b-b164-2dfb482bc468",
        "cursor": {
          "ref": "4feaab2d-ea51-4de7-84f2-0f35238f9e3b",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dff845ed-8679-4a89-8cbf-5e844b3ac901"
        },
        "item": {
          "id": "5a2a7fc1-93e9-475b-b164-2dfb482bc468",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dfc20ca4-c188-497e-89ad-7d3742316506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a550a0d7-3236-4c0e-8c30-baa936527526",
        "cursor": {
          "ref": "3aa9372c-f60f-430c-88b8-713b90b63525",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6428c038-a765-4e40-958b-4fe11a51e3d4"
        },
        "item": {
          "id": "a550a0d7-3236-4c0e-8c30-baa936527526",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "76397d11-fa7d-45be-a066-d9cfdde5a10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bc0f76-4bf6-443c-b19c-601df63769fc",
        "cursor": {
          "ref": "28c9eb74-0e1f-49b7-a300-1487035bf178",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ba5f615d-c002-48c0-9e5a-0003880661f9"
        },
        "item": {
          "id": "94bc0f76-4bf6-443c-b19c-601df63769fc",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e4b0d996-ae5d-44d4-8328-c3b8311c6823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16990d7-65c9-48d9-8b54-c554f68243ab",
        "cursor": {
          "ref": "4ef35d11-4973-4bf8-b584-9390510232e7",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8cb3d435-7c65-47e1-899d-a3b21d8c2762"
        },
        "item": {
          "id": "c16990d7-65c9-48d9-8b54-c554f68243ab",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5fe76161-f818-4c25-9cda-76f560ed57d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1068,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0b722081-3003-4d4e-ad09-a5d2fc058e28",
        "cursor": {
          "ref": "01252adb-03b0-44c2-b960-cb4f5d0d2f3a",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ca59483e-c064-41e7-a7f4-7379a7977b42"
        },
        "item": {
          "id": "0b722081-3003-4d4e-ad09-a5d2fc058e28",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ed1de521-0327-400c-af4a-dbfb393ee678",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1185,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c814ae5d-4e18-48fa-abbc-d29035d5d8a1",
        "cursor": {
          "ref": "5c6ad7ec-3564-4d6b-94ab-9daaf3f67252",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c943c045-b1ed-4b86-800a-7c9c498dc3c8"
        },
        "item": {
          "id": "c814ae5d-4e18-48fa-abbc-d29035d5d8a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "15d4e788-06fe-495b-9c34-8bc0c1c83fd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6edbfc01-1cdb-49e2-9c46-6a6466eb2d4a",
        "cursor": {
          "ref": "ce0032cc-56eb-4753-be15-cf3f1447ec42",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "75ad355b-5e5b-4c1f-b754-120d2ef05ad3"
        },
        "item": {
          "id": "6edbfc01-1cdb-49e2-9c46-6a6466eb2d4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "521cd4ba-dbaa-4add-8f63-e3ebcb542452",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1147,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d7b82de9-8db0-419c-ab6c-6ca664e168dc",
        "cursor": {
          "ref": "3673be3f-1457-44dc-a2bb-fcbf4be94fbb",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "21787786-800d-4d83-bd21-7384d731166e"
        },
        "item": {
          "id": "d7b82de9-8db0-419c-ab6c-6ca664e168dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1cb86efa-b844-48fd-b5ab-651290deae77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "881048fc-8a87-4c63-ace6-3a813c0e3f94",
        "cursor": {
          "ref": "f83b1612-c272-4119-b25c-e35fbe4a8ce1",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "17432c25-6d2f-451b-89f0-0582a1ea2070"
        },
        "item": {
          "id": "881048fc-8a87-4c63-ace6-3a813c0e3f94",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d672d981-d7a1-492e-bbe9-9b3036cc943a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8d20dc-82cf-4252-bc46-08d899c0c498",
        "cursor": {
          "ref": "b7f1bdd1-b795-418f-a00c-4261a14ad9ef",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4710ef09-3879-4a21-973e-9709acd211db"
        },
        "item": {
          "id": "2c8d20dc-82cf-4252-bc46-08d899c0c498",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cc6e1579-fe43-41de-9964-84faca240933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa10a48b-6000-4637-b390-2f428f120056",
        "cursor": {
          "ref": "cfd5164d-2737-4a90-b143-fb05ef37e7a8",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "411be983-125e-4a7d-8f1e-7eaf3055b73e"
        },
        "item": {
          "id": "aa10a48b-6000-4637-b390-2f428f120056",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ea897b6d-c98c-4a1b-a50c-ef4d045d3518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ea206a-ad89-42aa-96e6-40de9c1424df",
        "cursor": {
          "ref": "1c2f522e-84a4-4a41-ba4b-5463c8295d91",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "92205d79-0934-4452-bcd7-eb74e0744e15"
        },
        "item": {
          "id": "46ea206a-ad89-42aa-96e6-40de9c1424df",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "10cf85a9-4fbe-4219-94d0-ce58e46f76e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b21215c-28ce-4b6d-982f-6d84af048cac",
        "cursor": {
          "ref": "66a4101e-6ca3-4cb6-916d-c7fe7622ecf8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5edd5315-933a-480e-9c5e-18b7a90880f2"
        },
        "item": {
          "id": "4b21215c-28ce-4b6d-982f-6d84af048cac",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "229c99c3-ddb2-4126-a4a3-d8853dde320c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11181c7-a351-4116-b4b7-6f82681fe070",
        "cursor": {
          "ref": "1cb3f6c5-0229-4196-9bd0-89f6d4e2502c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5d14064f-6953-425b-9ee4-ee9176ed7586"
        },
        "item": {
          "id": "b11181c7-a351-4116-b4b7-6f82681fe070",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "10c12ac4-80b1-4360-b7d3-3d0a8b606e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96eb121-392a-4cdb-9a2a-417e8c23c0a8",
        "cursor": {
          "ref": "426134bb-4efe-4971-9a8c-3cf92e115ff8",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5d51a1e3-39b6-4236-85a6-95bb75d1e050"
        },
        "item": {
          "id": "f96eb121-392a-4cdb-9a2a-417e8c23c0a8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0f6a723f-b52e-40b5-a1dc-60a9737b2933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01356615-8773-4963-a89f-f772b1e6332d",
        "cursor": {
          "ref": "166167c8-9ae6-4eca-ae51-cceb0bff90bb",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7d9c2fe3-5291-4c0a-b6f8-56a68086a9d4"
        },
        "item": {
          "id": "01356615-8773-4963-a89f-f772b1e6332d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3afef498-b592-45be-85c0-e00f94665995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36679ac-782e-40f7-a78a-ac2bd146d0c0",
        "cursor": {
          "ref": "04b770f7-418c-49e4-87cc-296e432b6558",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7e4dd790-4d18-4852-be0b-2ef5d202f90c"
        },
        "item": {
          "id": "c36679ac-782e-40f7-a78a-ac2bd146d0c0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "99e4f8a0-004c-4a26-895b-4c06ef3fa848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42f8e98-e9c4-418b-8593-d4791c85c491",
        "cursor": {
          "ref": "4474c886-1289-4ceb-8be4-3ef93160391f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e462e3b1-7e20-45f6-b9a5-74fe2048e204"
        },
        "item": {
          "id": "a42f8e98-e9c4-418b-8593-d4791c85c491",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "43a66e4d-18b6-45c9-9a1d-92f3baf70ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57d38f8-09c2-44ac-a67c-8ff8e2c8d28a",
        "cursor": {
          "ref": "fab3a010-cc23-4c45-8414-236de05dc4c2",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "093e3c90-1f08-4ec2-8900-2e60369d0f22"
        },
        "item": {
          "id": "e57d38f8-09c2-44ac-a67c-8ff8e2c8d28a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0e2ea275-1120-45fc-95a3-801638367bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69489aeb-6156-4ae6-84de-a2a413351d12",
        "cursor": {
          "ref": "929d3516-36ca-442d-ad92-6c0dce7c3828",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8036df0b-813d-4ea6-9930-8983ec9e6022"
        },
        "item": {
          "id": "69489aeb-6156-4ae6-84de-a2a413351d12",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "63e02b51-9bc5-443f-8c4e-9584766a277f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53faf03c-79ae-460d-85ac-efb20c1f764d",
        "cursor": {
          "ref": "8508a71f-be2c-47d2-ad40-3571733eb299",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "489d1289-5dba-43ef-9f4e-cb7415359b56"
        },
        "item": {
          "id": "53faf03c-79ae-460d-85ac-efb20c1f764d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "46ba4ea9-dc1b-4432-8ade-39c09b757d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2201c3-d057-4f74-a0f7-24af52c1ca53",
        "cursor": {
          "ref": "b3747bc0-d059-4e8c-bf95-b1480ac76b61",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ad8d615c-4cda-42c0-bb6d-3a8f12497eb2"
        },
        "item": {
          "id": "4a2201c3-d057-4f74-a0f7-24af52c1ca53",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "095ac459-fa60-4668-92e5-62d1dcdaa785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265be5ce-5890-4eb2-a6fc-b7714dfec120",
        "cursor": {
          "ref": "7aad526a-7b51-4fef-8d66-d626cbdd920a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b964d3ad-354d-4c64-b5e5-a66cebc29f7a"
        },
        "item": {
          "id": "265be5ce-5890-4eb2-a6fc-b7714dfec120",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f4274e85-a181-48f7-b0d6-c1908e6dbfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cb775b-5468-45e1-a8a0-2245c9f45c69",
        "cursor": {
          "ref": "793645c0-faa5-49c9-8317-81f07bc52891",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2655eda5-0ceb-421f-8063-a9cbb932beb9"
        },
        "item": {
          "id": "a1cb775b-5468-45e1-a8a0-2245c9f45c69",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "86dc51b7-bff8-44c8-9c46-6b7ee858759a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd519337-52b7-433f-88a5-6498f06d6c19",
        "cursor": {
          "ref": "94c6a6a8-9ec4-438b-b9d0-9bcd922dd048",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "64384df9-a791-4c9d-b238-808adde166df"
        },
        "item": {
          "id": "dd519337-52b7-433f-88a5-6498f06d6c19",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "338fcf9c-5ca2-4b83-b07a-21841799f80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d37589b-2b11-45c8-aaa4-20ef54853dc2",
        "cursor": {
          "ref": "61737bac-351b-4e1e-9113-0a7e9376256c",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "daf29fc8-0ead-48e4-9c39-09ae1031fcab"
        },
        "item": {
          "id": "9d37589b-2b11-45c8-aaa4-20ef54853dc2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0f175da8-2a66-4719-a741-8ab923870c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d7f4d0-e5a2-441b-97d8-a95025e4d60b",
        "cursor": {
          "ref": "8e9ea28e-f2bc-44cc-a38e-804bc96dbf0a",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8be2cf42-3eda-4e94-855a-7ed47b787dc4"
        },
        "item": {
          "id": "49d7f4d0-e5a2-441b-97d8-a95025e4d60b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2c20ad3b-1859-426c-b8e3-d5162486af7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccdc469-f868-4c6f-8d3c-3da3d500b982",
        "cursor": {
          "ref": "d5dcbe45-71bd-438e-af1a-37d9aff8da7e",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "701fd857-3f00-4c6f-9c32-fc9ca6852ad1"
        },
        "item": {
          "id": "5ccdc469-f868-4c6f-8d3c-3da3d500b982",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "42867bb3-5505-4741-92c5-a5207c8838cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd288cbd-af5b-43ca-9fdc-66c6bfa29ac1",
        "cursor": {
          "ref": "fc11b724-4545-4ac5-ab6f-8dc149a9f0f1",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ed651dce-ed52-4b06-b035-385ee88bcd68"
        },
        "item": {
          "id": "dd288cbd-af5b-43ca-9fdc-66c6bfa29ac1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d96ad7e7-129d-4028-8d6a-8e451540ecba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18139f9-757a-4718-b01f-40ffc051e6d3",
        "cursor": {
          "ref": "e6eb84e0-4f0f-4aaf-9e0b-cea6c25bfd8f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "31541110-3560-40b1-b80f-64ef7ed248dc"
        },
        "item": {
          "id": "a18139f9-757a-4718-b01f-40ffc051e6d3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "40f3d337-4bed-4b19-9fe8-d81e1e52d710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132cd1ab-7d9f-41a7-96b0-7877374fe015",
        "cursor": {
          "ref": "e0324a75-f8a8-4a4e-b72d-a9a49eb3eeaf",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0408eb19-08ad-44cf-9da5-aa3d4de3ab49"
        },
        "item": {
          "id": "132cd1ab-7d9f-41a7-96b0-7877374fe015",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0a8c2256-614e-47e9-bab1-969e315e97c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266e423a-b101-47be-87f5-4a99b2f996ba",
        "cursor": {
          "ref": "bae16572-7921-4233-8921-d882110a9b09",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0bf69281-0c5c-4fd9-939d-0222465213be"
        },
        "item": {
          "id": "266e423a-b101-47be-87f5-4a99b2f996ba",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "928ae9c5-5c72-4be6-9a39-5f89f4b8c682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96465fd1-a341-45db-b8c3-8e193159d9d4",
        "cursor": {
          "ref": "11f9d904-512d-4a8c-97d4-7c7eec1b722a",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ce8ad5b7-dc57-4808-aef6-c65e363a8cf6"
        },
        "item": {
          "id": "96465fd1-a341-45db-b8c3-8e193159d9d4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "426b73ee-61ce-4be2-b80a-f5fa90e8363e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6ec360-ce22-4b94-8071-34a790816c83",
        "cursor": {
          "ref": "edfdf772-dd0b-435c-ae62-423765cefd82",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9e0eaff0-6f54-4ab1-abcb-7d4f931c6d77"
        },
        "item": {
          "id": "cc6ec360-ce22-4b94-8071-34a790816c83",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "eedba0be-8b9d-4b9e-9762-04925cb083fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafe7282-16ce-4c4d-a173-06fb7b6317a3",
        "cursor": {
          "ref": "54377073-f33e-4300-9c38-97f916823826",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "145a4cfd-d5e9-4854-b0c1-d740a1d31ae4"
        },
        "item": {
          "id": "eafe7282-16ce-4c4d-a173-06fb7b6317a3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1fa93626-c6b8-4c30-bf85-cb6293b2e534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9d1498-6877-4fe2-8aa7-c0a49d2af248",
        "cursor": {
          "ref": "83284232-74cf-4ddc-9469-9bfdb1ac60b1",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f7d22e1f-3e5a-4f78-8082-f6262808bc7c"
        },
        "item": {
          "id": "2c9d1498-6877-4fe2-8aa7-c0a49d2af248",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "85dce5a0-38c6-489a-8e06-177f2f7c6363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec015d-3ada-4354-b7b8-4e977cd5f8b9",
        "cursor": {
          "ref": "f7927d61-2565-4cbc-acb9-28aaaea78302",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0c0fb68f-da45-4827-90c6-f6900e6f081e"
        },
        "item": {
          "id": "c4ec015d-3ada-4354-b7b8-4e977cd5f8b9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "037ee401-7752-4258-885b-5f66b1818cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1684b897-0193-46b4-bd06-2afe6f8be0b3",
        "cursor": {
          "ref": "f141a6fc-5320-4952-a612-70f808941109",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3b5aaaea-a681-43b5-b9cc-34e110fd4148"
        },
        "item": {
          "id": "1684b897-0193-46b4-bd06-2afe6f8be0b3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bda74cd9-ac3f-4015-9dce-f1b8770312f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2acecff-be00-45ea-adda-735008436af5",
        "cursor": {
          "ref": "865b56cb-23a6-491a-b614-af093eeafac8",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8e9353fa-43b0-4fa2-aac2-cb19479a71ac"
        },
        "item": {
          "id": "e2acecff-be00-45ea-adda-735008436af5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cff4dfb3-fed0-4e34-a060-34b3d67363c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b181b73-0034-4d18-a563-36a6a9b79186",
        "cursor": {
          "ref": "4ab35d26-38d3-4549-8701-a397a309c869",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e0182b73-64f8-495e-ade8-657a8a66fa49"
        },
        "item": {
          "id": "3b181b73-0034-4d18-a563-36a6a9b79186",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e147691e-2c7f-42fb-99eb-70cf124ee537",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1762272f-a1c1-42e7-9cdc-6ae4424c71f9",
        "cursor": {
          "ref": "83ca188b-6cbf-4e56-9fad-dba7d95d66eb",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5a372e1c-5111-41db-97e8-ed638d663f82"
        },
        "item": {
          "id": "1762272f-a1c1-42e7-9cdc-6ae4424c71f9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c5087d66-0c21-4459-af3f-88a5c69b4062",
          "status": "Created",
          "code": 201,
          "responseTime": 1512,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "98bff862-a467-471e-a0d3-9e60eb4d02d3",
        "cursor": {
          "ref": "35dada86-f049-47e7-95ac-ccbb5e55fd96",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c4b92aa8-f336-49dc-91eb-ff83656d078f"
        },
        "item": {
          "id": "98bff862-a467-471e-a0d3-9e60eb4d02d3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2882dbed-9ada-48ea-ae57-2b1bd870138d",
          "status": "Created",
          "code": 201,
          "responseTime": 1365,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7214165-ba5f-4bf5-a71c-579acab88015",
        "cursor": {
          "ref": "fbb02b7d-0edc-4114-9117-9afcaadafc97",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1e73fbbe-9975-4335-86b6-49f5cb2feb0f"
        },
        "item": {
          "id": "a7214165-ba5f-4bf5-a71c-579acab88015",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4d8c2e2b-5869-4ff4-84b7-85f7c9ef5264",
          "status": "Created",
          "code": 201,
          "responseTime": 1371,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "65457744-09d5-4ffe-aeda-50e27a3d2969",
        "cursor": {
          "ref": "2196e1e4-6981-45d3-931b-5f0bea6cc172",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cd545164-ff9a-47f6-8429-4f5e5b5e299a"
        },
        "item": {
          "id": "65457744-09d5-4ffe-aeda-50e27a3d2969",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6f909a26-f0a5-48e9-b4eb-088ae616dcdd",
          "status": "Created",
          "code": 201,
          "responseTime": 1413,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "362e76c6-3abd-4fb7-88fa-dd33ccd18541",
        "cursor": {
          "ref": "9c2c463e-f91e-4018-9d04-c8e698eb588a",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ba651b14-c23b-4303-9de5-4a1070f87e58"
        },
        "item": {
          "id": "362e76c6-3abd-4fb7-88fa-dd33ccd18541",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d8b96e9c-a6bc-4e50-a862-f684c44f066b",
          "status": "Created",
          "code": 201,
          "responseTime": 1359,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4530b8bf-25f0-45d2-914e-0dc179a414c0",
        "cursor": {
          "ref": "f43d5b3e-66b1-42e1-8eb9-5dca8eac59f2",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a44c7f6f-b9a7-4678-94c2-3ac31dc3b872"
        },
        "item": {
          "id": "4530b8bf-25f0-45d2-914e-0dc179a414c0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7563aa69-52ac-449a-8ccc-e8265532cead",
          "status": "Created",
          "code": 201,
          "responseTime": 1533,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec4a176-1e3b-42e3-8e2e-a23b7bffe175",
        "cursor": {
          "ref": "d4b13954-69a0-4c33-ba70-ea96fc1e211d",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3f1c46a4-ede8-4109-b5f5-1bfe0673b144"
        },
        "item": {
          "id": "6ec4a176-1e3b-42e3-8e2e-a23b7bffe175",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "059110e3-8154-465a-bea8-e08a3acd8183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddf7a36-e526-4303-a523-6efbd49e7948",
        "cursor": {
          "ref": "030ca50e-224a-440a-8ebe-ef2446e3b897",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ec534574-7b83-4e91-86f4-2bfb4af5b07a"
        },
        "item": {
          "id": "7ddf7a36-e526-4303-a523-6efbd49e7948",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ae79f2a3-f737-43e6-a2b5-89f9f70a7115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1124694-b4e0-42ef-a9e2-9dce2115c8c5",
        "cursor": {
          "ref": "831cfa03-094e-427e-8767-1b45f4d2e69d",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0c38d157-4cbf-424b-9b2d-4606e2658fa0"
        },
        "item": {
          "id": "e1124694-b4e0-42ef-a9e2-9dce2115c8c5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0bd84b07-c2f6-465c-98d2-143bbca8eae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba62852-d04e-4ffb-9348-aafa200ec90f",
        "cursor": {
          "ref": "69b3cf5f-a61a-430e-a5cd-23163c443949",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "768fd3f1-0fd7-4705-ae65-d3833c64162c"
        },
        "item": {
          "id": "9ba62852-d04e-4ffb-9348-aafa200ec90f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e2937b86-5874-41b4-b4f4-9a9d7240eeb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c46633c-cf35-4d7a-925d-721f39ba840e",
        "cursor": {
          "ref": "36557a64-661d-48b2-a2d8-3fff8fc00343",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a86501c8-6146-4b79-8c49-4a9113aec9e6"
        },
        "item": {
          "id": "4c46633c-cf35-4d7a-925d-721f39ba840e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c6b9b7a-9b93-44e4-97bb-ac7e1cbd09e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dfc885-82b5-4fa5-8d88-815de2a6a312",
        "cursor": {
          "ref": "526e74cb-8594-4293-a8ac-0cd26d33354a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7b80f037-d508-47a6-80c2-0d9ca9a76026"
        },
        "item": {
          "id": "39dfc885-82b5-4fa5-8d88-815de2a6a312",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bd363755-25d2-4e31-a368-ff42aa564ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1041eec-c587-45d6-9bf8-57f4553817ed",
        "cursor": {
          "ref": "ceb0510f-bc11-40cf-b058-4e2b84f5bbe6",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8ea168fa-0c75-4f8f-afb0-2da9e2df3896"
        },
        "item": {
          "id": "d1041eec-c587-45d6-9bf8-57f4553817ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db206081-4ab1-4aa8-a0a3-ddde8f80a8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c794c74e-3928-41fb-b026-baa7d3f3e163",
        "cursor": {
          "ref": "e6f65bc9-4f17-4f92-9b27-3720d686c824",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "80fc95f0-967b-40ad-9ce9-cc5dee8baa94"
        },
        "item": {
          "id": "c794c74e-3928-41fb-b026-baa7d3f3e163",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1ec877c2-550c-45df-a75d-6a26acc365f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fccb4a0-644e-437a-b6f1-99a1b105ee5d",
        "cursor": {
          "ref": "55284ba8-8146-4987-b603-d4e138f23ef4",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2f4d91c5-6075-4ca5-adef-5407d85b448e"
        },
        "item": {
          "id": "1fccb4a0-644e-437a-b6f1-99a1b105ee5d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "88691adf-f91f-4b01-93d4-723e0671f789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4a7767-96fb-4ba3-8b7b-b52541e52139",
        "cursor": {
          "ref": "07de5318-b483-4435-bdc2-49de16827e76",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f77b5039-5f25-48da-ba6e-7d6d0d16f534"
        },
        "item": {
          "id": "9a4a7767-96fb-4ba3-8b7b-b52541e52139",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "98d6e1b2-3504-4be1-a2bf-cda27b27f290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca7cc4c-e12e-44b6-b2ac-65a61385b57f",
        "cursor": {
          "ref": "61dbc23b-bd6a-48ad-88de-3bbbd54e934f",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "502cd0c0-0204-473b-ab4c-7fa7903d06d4"
        },
        "item": {
          "id": "2ca7cc4c-e12e-44b6-b2ac-65a61385b57f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b5fbd868-4104-4c18-8b3e-00956c33cfd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2c288b-29b7-4db0-aa5c-642d51e2dcd6",
        "cursor": {
          "ref": "85f6c064-a980-4e75-8da5-c800e15feeed",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a5c11184-2c63-4ea4-aa38-bc0f18a81094"
        },
        "item": {
          "id": "2d2c288b-29b7-4db0-aa5c-642d51e2dcd6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "35737306-f601-4945-9d76-9a7c591f84df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccbdbe4-3d66-4d74-a4dc-9c5e1b0be61d",
        "cursor": {
          "ref": "1c176327-8dfe-4733-a39c-790e86bd58d9",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "43416c95-4bf6-42bf-8b8d-4a13fa9633b0"
        },
        "item": {
          "id": "dccbdbe4-3d66-4d74-a4dc-9c5e1b0be61d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9c098cd9-373a-4fcb-a648-78a4fcd178ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f406e50-78f9-4327-b6a4-95e99e4270c7",
        "cursor": {
          "ref": "77d048e9-f2ab-49ff-b312-fe577477eb65",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "73f4b0f1-2b92-4af4-bfe7-1d496351938f"
        },
        "item": {
          "id": "5f406e50-78f9-4327-b6a4-95e99e4270c7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c94dc2c9-bc19-4e3e-bd69-2356d8f79e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9bd7ef-73c4-4633-818f-79361c6719d5",
        "cursor": {
          "ref": "9d41687a-f284-4099-bc2b-160f414390d6",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "97a40787-c75a-4ba0-88df-336848ae3006"
        },
        "item": {
          "id": "bd9bd7ef-73c4-4633-818f-79361c6719d5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc38c4b3-fe92-463b-bebd-bddf36c553dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce63513-779a-45ca-8d20-8b8c4a7cca8d",
        "cursor": {
          "ref": "ed9aef87-fed7-4378-8eb7-3ba5707f5bec",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5509833f-400d-4906-9c6a-1843a29c3626"
        },
        "item": {
          "id": "0ce63513-779a-45ca-8d20-8b8c4a7cca8d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "275415c8-2fd8-4eff-a3e1-9f899f0f3ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2e7b4b-42b6-4492-b6f3-4c530502cca3",
        "cursor": {
          "ref": "8f210c75-93a2-457d-ae6e-4895ba8fc713",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d603ac52-ec62-4fca-aeca-43a332bfd12f"
        },
        "item": {
          "id": "ee2e7b4b-42b6-4492-b6f3-4c530502cca3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2ccb6c5f-188d-49d3-b78f-49dc48519c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9b8ead-b207-4c73-a3b7-267867528626",
        "cursor": {
          "ref": "6cc72824-cc7d-4d6b-993a-8d49fd769892",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e3480da3-d2c7-45c6-94e8-194fa2c0fabf"
        },
        "item": {
          "id": "7a9b8ead-b207-4c73-a3b7-267867528626",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "51e8d763-bafb-4d55-8e69-70867107d571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28037f44-3a2a-4bd4-b4ee-d222aaaf5572",
        "cursor": {
          "ref": "e085b992-a40a-4791-ba5c-032ec64801dc",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "564c02f7-ed4d-45ab-bead-d3610645edfc"
        },
        "item": {
          "id": "28037f44-3a2a-4bd4-b4ee-d222aaaf5572",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e8e4be04-afc7-4cad-8b01-5131dd0265c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8be0150-1069-474c-a8f6-eeed5f4dac6b",
        "cursor": {
          "ref": "cbdd0aca-9da8-4a5a-b781-be83ed60dc0a",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "539189ce-5bfc-42ac-b501-e431be645fa5"
        },
        "item": {
          "id": "c8be0150-1069-474c-a8f6-eeed5f4dac6b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b502aced-92ce-4b2d-88f3-00a562a597a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58e984d8-e92e-4338-a517-5af0241895c5",
        "cursor": {
          "ref": "28c4ffc0-5c50-475e-ba88-4677ac6f0624",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7b30e137-c55e-4f26-b9b6-4d590def8e53"
        },
        "item": {
          "id": "58e984d8-e92e-4338-a517-5af0241895c5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c84a40ba-4149-453e-ab9a-8cc62b681218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8760f710-1805-42c3-a893-9519e9aacfd1",
        "cursor": {
          "ref": "919468aa-becc-42d9-a13d-79f7b1702d63",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ae49583e-830c-47e0-b021-b3650b6bad17"
        },
        "item": {
          "id": "8760f710-1805-42c3-a893-9519e9aacfd1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "789d13dd-ca4a-4338-8cc1-cd1fb96d045b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b679a71d-d9ac-44eb-b9c4-8226f5c65579",
        "cursor": {
          "ref": "792ae685-4b4e-4ab5-ac1e-76c49e8c9888",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "db7487e6-a6a4-4a3a-a4f4-12c8ce4a75f9"
        },
        "item": {
          "id": "b679a71d-d9ac-44eb-b9c4-8226f5c65579",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "57ea1161-26d8-4276-8e44-b41ae14b55df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66157d9d-84eb-48f0-9e52-484078b1fdef",
        "cursor": {
          "ref": "b5f80c44-97a9-4e15-8a29-4b0dda3b9fd2",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5a85991e-de25-41b4-b738-1954006fa3bb"
        },
        "item": {
          "id": "66157d9d-84eb-48f0-9e52-484078b1fdef",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "40053c51-bacd-4a79-be72-4dbf1616bb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1052638c-43bd-47fe-9f12-24c3d7b34020",
        "cursor": {
          "ref": "4e7f450b-177a-4947-899a-aa5b55d4a84a",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fe2fc174-9b74-46b3-8224-cff1871df7f7"
        },
        "item": {
          "id": "1052638c-43bd-47fe-9f12-24c3d7b34020",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "521fbb05-b965-46e1-b0b7-6af3c02b02e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e77453f-59c4-4a06-a7cf-3c233c023e38",
        "cursor": {
          "ref": "33f27655-7722-4b36-85b1-3a1eaa682023",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "db830944-a14c-492e-976f-f71614264c55"
        },
        "item": {
          "id": "0e77453f-59c4-4a06-a7cf-3c233c023e38",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2c0d0531-11df-4518-a82b-fbb07e0364b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6b8eb3-2411-427e-b53c-a0ac7926cfb1",
        "cursor": {
          "ref": "19627a07-b9a0-49f5-b26e-b215a7a4136e",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7a5ecae9-a59c-4248-98bc-5a327d8bdf15"
        },
        "item": {
          "id": "8d6b8eb3-2411-427e-b53c-a0ac7926cfb1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6900515a-7720-4fe2-b4ad-9fa129376f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59c491d-37cc-48e7-9301-7847b0673a66",
        "cursor": {
          "ref": "932d1f33-1e3c-4023-8013-1912a587498d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6523b283-be9f-4c94-8243-9f4571875bac"
        },
        "item": {
          "id": "a59c491d-37cc-48e7-9301-7847b0673a66",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4331ad31-79b0-4eed-a087-b4a6f1cb2249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649e0533-56fb-4e30-8255-34978d20dce0",
        "cursor": {
          "ref": "0b3f54ed-903b-4b39-a56f-2f3aef1db186",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "923e6d56-6c3e-4f3b-8453-e1cc44fec926"
        },
        "item": {
          "id": "649e0533-56fb-4e30-8255-34978d20dce0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "af378c69-3d3b-4516-9cad-432453e86466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbaa6d6-638e-4d50-872c-69361794cde7",
        "cursor": {
          "ref": "b75ad82e-72e3-481d-b907-dc195ac1200a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f6877b09-0091-4350-b0b1-237e0a2d4176"
        },
        "item": {
          "id": "abbaa6d6-638e-4d50-872c-69361794cde7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c9b2f853-2fb6-4c75-9dcd-d92b713c1646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf70679-3322-49ad-8fb2-fe431b8e9688",
        "cursor": {
          "ref": "99a57fa0-ec6c-4572-9ed8-88f6f13d15c3",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f06791aa-7d65-4ee9-ac54-61188b556661"
        },
        "item": {
          "id": "caf70679-3322-49ad-8fb2-fe431b8e9688",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7358ef0d-447d-4ee0-8ab4-4c0fa8f2d0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ea0571-df49-4e2d-ad90-e8d499ab7299",
        "cursor": {
          "ref": "4e011e4d-4910-47fa-8980-f248a6743248",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3cb90b9f-c450-4985-9378-4ee874d837c7"
        },
        "item": {
          "id": "c9ea0571-df49-4e2d-ad90-e8d499ab7299",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "195ab61e-d835-472c-b3c9-6c0bb1ce8689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8b1632-0ce3-4656-b563-3ec189638e0e",
        "cursor": {
          "ref": "75d0ed5f-948b-4596-bcb4-1166b1ce5937",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7ba8b40c-953a-42b5-bd41-5813fab0b342"
        },
        "item": {
          "id": "ee8b1632-0ce3-4656-b563-3ec189638e0e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bcccb3d7-9470-449f-a55e-59497a59cdab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32fbffa-447a-44ea-bc11-a0969c71eb5d",
        "cursor": {
          "ref": "3bc90951-d24c-4315-a7ab-91f1022cc544",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b35cf6f6-3f84-4e6d-87f5-46a1c0d78aec"
        },
        "item": {
          "id": "b32fbffa-447a-44ea-bc11-a0969c71eb5d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c145ae82-3ce4-48f1-a11c-a5091f247028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e10ac7-326f-49ab-8de8-780a5dab5d1c",
        "cursor": {
          "ref": "558ba48c-c578-4299-9ca4-03a127b0535b",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "050dbd2b-b88e-4c4b-b087-d91ef9575e9b"
        },
        "item": {
          "id": "78e10ac7-326f-49ab-8de8-780a5dab5d1c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4a4bd585-8825-431d-83b5-10e31da1a23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9949851c-7b8c-45bb-8e97-4d9253f4e0f8",
        "cursor": {
          "ref": "8de7e00a-39c3-4fef-a58f-a3903d271762",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9cca2095-b126-487f-8d44-8d6838e9715b"
        },
        "item": {
          "id": "9949851c-7b8c-45bb-8e97-4d9253f4e0f8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4057506e-ffdd-496d-9bfb-61f54e31a8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fca8d0-f463-420f-8804-d29bde191737",
        "cursor": {
          "ref": "51b34bdc-6519-4e02-acfb-d53e60524ea3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0e308247-9f07-4087-a050-602263005b55"
        },
        "item": {
          "id": "d6fca8d0-f463-420f-8804-d29bde191737",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "37d33474-a94c-4e78-bfae-5835fd22ece7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b95a41-f7da-481d-bc74-e9607dae3948",
        "cursor": {
          "ref": "a7a7533a-47db-4a28-908b-3d21777da339",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "28747f47-5635-4c64-8371-c099d664dc35"
        },
        "item": {
          "id": "c7b95a41-f7da-481d-bc74-e9607dae3948",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7795d9ca-7976-4bc8-8548-59e8a8e84f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e08c958-090f-4a06-a0da-02e0289631ac",
        "cursor": {
          "ref": "63bce435-4401-489c-9bc6-5a3741fa5d61",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ce4cf873-1a8c-4f25-acd6-b4320e00d8e7"
        },
        "item": {
          "id": "5e08c958-090f-4a06-a0da-02e0289631ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fcce695b-d2f5-4436-9dbd-f2cd0df87925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274fdd02-d2ec-49b7-88d7-ca1e60dabfab",
        "cursor": {
          "ref": "3faa3662-dcc6-4a50-acec-0848788af14a",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2ab1d691-108a-4415-bade-5049a1153fdc"
        },
        "item": {
          "id": "274fdd02-d2ec-49b7-88d7-ca1e60dabfab",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f818af92-3c54-4584-8d91-106f289d200b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962895f0-b829-4195-97ba-1e7b32dca073",
        "cursor": {
          "ref": "3296126f-1f73-4357-a8fe-50c5dfd817b1",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a3d03913-9b86-4bf9-bc25-de1a4fbe8f3e"
        },
        "item": {
          "id": "962895f0-b829-4195-97ba-1e7b32dca073",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ef6a84f0-96fb-4706-b330-f28d299f8101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc049ac-2cd5-4d41-bb6a-0ee188718dd1",
        "cursor": {
          "ref": "98f736d0-2652-4e46-9c53-ba3fecbea0e3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4acc4a35-c0de-481d-9211-fd2d6f4f711e"
        },
        "item": {
          "id": "0fc049ac-2cd5-4d41-bb6a-0ee188718dd1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "53bedaf8-5601-44de-ba57-c40e1f934614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e441e1c-9465-4e25-9d35-f6c60029a455",
        "cursor": {
          "ref": "cb75cb1b-d285-4f04-9746-54a225f3e3d1",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "747d3339-ff44-44a7-a223-de9a5adb71bb"
        },
        "item": {
          "id": "4e441e1c-9465-4e25-9d35-f6c60029a455",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d2fd3453-8cef-4092-b9a7-fa8890505ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b007dd82-d13a-44c4-be36-aaaf57882ebb",
        "cursor": {
          "ref": "9aa20ff7-19d6-4c26-b9ee-28ac1f2759c1",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d9003ae8-80df-436b-8a58-76b5d92f6cc1"
        },
        "item": {
          "id": "b007dd82-d13a-44c4-be36-aaaf57882ebb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a831b25a-2ef2-4f9d-bf7a-fb8c852e5aa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081dd2a9-2f1c-48b2-9214-1863c6fd8cc0",
        "cursor": {
          "ref": "32d33326-9983-4c82-90ed-e1ea2ef2f41a",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "87bbbc40-7c3a-42af-bcbc-4c983e45492a"
        },
        "item": {
          "id": "081dd2a9-2f1c-48b2-9214-1863c6fd8cc0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "16b8ffd3-5c13-409a-8add-9dd31cb4e334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdcc1bb-a732-4c39-88ab-49b0ed50e059",
        "cursor": {
          "ref": "9e3dd1fe-d78b-40cd-9186-283baf802e20",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "41f29176-887a-46d2-b2f0-38f15cb26bcc"
        },
        "item": {
          "id": "5bdcc1bb-a732-4c39-88ab-49b0ed50e059",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "237c67fa-599f-4bb0-84b6-4c6f162dbbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f899ace-08c2-4aa6-b77b-9da86532ce1b",
        "cursor": {
          "ref": "9a31d24e-1899-4eee-a3f1-0870434daf13",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cb954a3d-3d8a-49be-92ce-73d9e835d234"
        },
        "item": {
          "id": "9f899ace-08c2-4aa6-b77b-9da86532ce1b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "56d84739-d27b-4779-ba99-c5649a1de025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63402419-b913-4ffc-8b1c-23f2a420034f",
        "cursor": {
          "ref": "b8486550-afde-450d-b717-d154504d32b2",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e040bacc-a93a-405a-88a6-7828d824cd13"
        },
        "item": {
          "id": "63402419-b913-4ffc-8b1c-23f2a420034f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c5d281ca-93dd-4c96-a0f8-0dc6d5587496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aabd8c4-a4cb-43e2-9729-4bc0e7655de1",
        "cursor": {
          "ref": "d9e31cbc-980c-4073-9141-1a0bbcd51a42",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f6b2b895-937f-4c4d-a132-592a9221c5c5"
        },
        "item": {
          "id": "4aabd8c4-a4cb-43e2-9729-4bc0e7655de1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "309ca878-0684-4d1e-ad81-3b1b32d05cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f8a8ac-e06f-4d20-ad12-bf2b80a66c8c",
        "cursor": {
          "ref": "e2ca86ac-3862-4022-8871-d468a99b15fe",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6855bef4-bc28-469a-af41-20e495c36cf3"
        },
        "item": {
          "id": "c3f8a8ac-e06f-4d20-ad12-bf2b80a66c8c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db7b2722-2cea-43f0-b6d5-0913a0e683b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59762e4-4135-4ed7-be27-329698f7cd55",
        "cursor": {
          "ref": "6ffa42ec-9021-4593-aa14-24565f510649",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f9e769f0-2c68-445c-ad33-1fb887a6e79d"
        },
        "item": {
          "id": "a59762e4-4135-4ed7-be27-329698f7cd55",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2f643b8b-d908-457e-9c76-5a910f17c64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cb1f0c-8436-43c4-8e53-8dc2a0ba2fe1",
        "cursor": {
          "ref": "2df2b633-c627-4bbf-af63-517c6534d930",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f2272f73-c10e-4b61-a3f2-63bceb4128f0"
        },
        "item": {
          "id": "38cb1f0c-8436-43c4-8e53-8dc2a0ba2fe1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ab6f3ce2-c659-4279-b5aa-8265f7ad7fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490283e5-6566-497d-b8fb-9c80963a9664",
        "cursor": {
          "ref": "4f8a64e4-afb2-4e01-b42b-62eb883adf8b",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "acc128b8-5f34-4712-89f1-df403a402e02"
        },
        "item": {
          "id": "490283e5-6566-497d-b8fb-9c80963a9664",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ec890852-86d1-4850-a029-c75b257e111c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d6cf02-4151-4691-ab49-f5ac5cb1d1e6",
        "cursor": {
          "ref": "378cf5d9-e73d-4b87-9b4e-e2b10bf5ab66",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "115653fe-d9d9-432d-bdbc-41e098018d48"
        },
        "item": {
          "id": "a2d6cf02-4151-4691-ab49-f5ac5cb1d1e6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2dc66730-2462-4baf-953c-88fcf6532e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89835b8-c723-46e4-a394-cc3d43358dba",
        "cursor": {
          "ref": "3d3fcee8-50eb-4bbe-81a0-0cb582fa0019",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bd44b1bd-77ae-4c58-81ea-1d4c1d30a2e2"
        },
        "item": {
          "id": "e89835b8-c723-46e4-a394-cc3d43358dba",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3fc2b85e-ece4-49ec-8453-8edb9120d9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452d21e3-4b0e-4f33-92d4-4c32aedb127e",
        "cursor": {
          "ref": "31121838-a6d6-4ba8-b6ad-ddf8e580b8fe",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5f92806e-ce06-4261-8143-2f62d374fc08"
        },
        "item": {
          "id": "452d21e3-4b0e-4f33-92d4-4c32aedb127e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac1afe22-f200-47d8-9c92-eadbd0350031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc737d2-6304-499c-9e71-caacb74b5b5c",
        "cursor": {
          "ref": "6799823b-405d-44b4-aebc-d2ff3b3f21d8",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "83c0e7e4-a0dc-4092-a7fb-c91b10f0d916"
        },
        "item": {
          "id": "7cc737d2-6304-499c-9e71-caacb74b5b5c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a5fd2d79-2afe-4e44-845e-30e66f7fd48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d326108b-2bf7-4774-b100-75eb7f817a2a",
        "cursor": {
          "ref": "bc989cd1-d97b-4f4d-913c-213c389f599d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "99d4db79-2622-43f2-81c5-33e6153b4c9f"
        },
        "item": {
          "id": "d326108b-2bf7-4774-b100-75eb7f817a2a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ceb527a9-b561-4ea6-8d5d-db6dc58aa1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e67774a-af3f-4142-87b5-75a50f6fbacf",
        "cursor": {
          "ref": "6248b0cf-1207-4beb-87f4-efc4559220f5",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fbcbfbcd-8872-4e1b-88ba-615197e56168"
        },
        "item": {
          "id": "0e67774a-af3f-4142-87b5-75a50f6fbacf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "279fb582-5653-42e9-8c9d-bbf2304f103f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d884b797-764b-47e3-8d2a-71851f4a6c0b",
        "cursor": {
          "ref": "2ab2c85c-9681-492c-87e8-79c4879cfc66",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ce5537f8-179f-44fd-9ee7-5a994b193141"
        },
        "item": {
          "id": "d884b797-764b-47e3-8d2a-71851f4a6c0b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "73e7c57f-0e95-4c81-877d-04d99abfac02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f483ab-3ea2-4303-9c64-5a520996e65b",
        "cursor": {
          "ref": "90523814-4fed-47ed-8a26-a1023775e9aa",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "7617bc76-215a-4373-915f-60c718a35dd2"
        },
        "item": {
          "id": "34f483ab-3ea2-4303-9c64-5a520996e65b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "861eb5dc-8b95-4e52-80c6-bad281a24181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab16e36e-d388-4b62-bb63-f3bd117acd4b",
        "cursor": {
          "ref": "20ba4704-43cf-4870-8a81-bc7764ff25ec",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c07f8f53-0ba8-476d-87e6-098f0c73ad02"
        },
        "item": {
          "id": "ab16e36e-d388-4b62-bb63-f3bd117acd4b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1bee429c-3c48-41b4-a04c-60b7f0201901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de5eda8-83fe-47a7-acf3-6812fe5d071c",
        "cursor": {
          "ref": "a09b37ab-1983-4ce8-9974-f160a8c36d98",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f9d86893-b5dc-44f4-bb80-b52ee9bfb2e3"
        },
        "item": {
          "id": "3de5eda8-83fe-47a7-acf3-6812fe5d071c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "570500fe-ee1d-4d19-867f-6de1e63f47c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0276d86f-74ff-4d8b-87f6-29c861569331",
        "cursor": {
          "ref": "0818d40f-c9ee-40ca-8cfd-ffaa3fe0af16",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f0fa514d-6e7f-48eb-882d-521bb54013a7"
        },
        "item": {
          "id": "0276d86f-74ff-4d8b-87f6-29c861569331",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75925774-af82-4907-9972-03c667bd3af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3d7daf-02dc-4a66-bac0-7aefc309f4ce",
        "cursor": {
          "ref": "ed39bbc8-8eeb-42fd-bd72-6d64d08d8342",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "594dd643-a1a4-4f52-88e5-0e64c212c0ad"
        },
        "item": {
          "id": "1a3d7daf-02dc-4a66-bac0-7aefc309f4ce",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "06ff7202-3926-48fd-9ca5-5317a94cff2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db19a255-0838-4d77-9715-cf3ab23040a1",
        "cursor": {
          "ref": "7a9640a2-bd01-4cd2-8597-346b61776c3c",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "eb880154-6fe6-4c86-a825-2dc70e9e2f41"
        },
        "item": {
          "id": "db19a255-0838-4d77-9715-cf3ab23040a1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "af21ebe0-a9ee-458e-a17c-7cc0af80bd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54880d73-021c-404a-afb1-29d77a67a686",
        "cursor": {
          "ref": "61f9eb3e-9ca1-4de2-9b49-dd1c7074948d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0df1616e-9a6a-4f06-ac0a-5f180e48b42f"
        },
        "item": {
          "id": "54880d73-021c-404a-afb1-29d77a67a686",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e375293e-9977-4f56-aa28-e9a388b6c069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9301383-ebfc-406a-9b1b-9d09c3b5cfeb",
        "cursor": {
          "ref": "931b4345-58de-4df4-80b3-e5c8c5dbaa05",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "677e7e1b-1735-4cbb-aadd-cdaa9542bb14"
        },
        "item": {
          "id": "d9301383-ebfc-406a-9b1b-9d09c3b5cfeb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ab4aac4f-2ff0-4dc0-8201-7a99d07508fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853fd63f-0f5f-4443-ad60-2f2df8a1ff30",
        "cursor": {
          "ref": "9cccd668-a462-4239-85aa-8978438b3720",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "63ec7be2-b863-4ad7-ad92-95e94d066832"
        },
        "item": {
          "id": "853fd63f-0f5f-4443-ad60-2f2df8a1ff30",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "631c34fc-581a-4936-8b53-73882e0b3333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45978295-132a-4d27-ae08-4fd4b300d8fe",
        "cursor": {
          "ref": "b61364bb-6a0d-47ba-a6c1-f16f1f929fd5",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a8920a57-4554-4939-a6a7-34e8c521cf92"
        },
        "item": {
          "id": "45978295-132a-4d27-ae08-4fd4b300d8fe",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6101e3a6-36aa-4a0a-9b3f-16075d81909d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e3a8aa-651f-43c3-950b-d17a6227d4ed",
        "cursor": {
          "ref": "71d02415-4879-49b5-b0a4-410c6766152b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1026f9c9-5c90-4659-ad88-abd9be3981c3"
        },
        "item": {
          "id": "e2e3a8aa-651f-43c3-950b-d17a6227d4ed",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3649376d-7d33-4e39-84a9-18e533198d33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e69363e-cd60-41e3-a58f-fe17f40adef1",
        "cursor": {
          "ref": "2605c8f3-21f6-482a-a505-a77e016c0cc3",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ef4df3d6-1463-497f-b77c-9f34a69f97d8"
        },
        "item": {
          "id": "7e69363e-cd60-41e3-a58f-fe17f40adef1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "10cc114c-f5c2-4e0c-8886-ccae3d2ba59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4a1af92-fe80-4f05-9e26-7e7b4b2d08aa",
        "cursor": {
          "ref": "8ec908e8-7fe0-4367-8c89-3c19f68e78c9",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fbf924bb-2c63-4364-bd6b-d33c6ce872e3"
        },
        "item": {
          "id": "c4a1af92-fe80-4f05-9e26-7e7b4b2d08aa",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fa2811a2-f8e6-4c34-a73f-1a64e1e18a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8545a84e-2180-4c42-ab6e-a4c81f65ee73",
        "cursor": {
          "ref": "618cf91b-8038-4a1c-bab8-6b6d4bdd485e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3e5fb66c-e32f-458e-80ca-b5acc9029622"
        },
        "item": {
          "id": "8545a84e-2180-4c42-ab6e-a4c81f65ee73",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3c583777-0478-4372-adee-5ab18f2c4e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c5f1c0-eaca-4314-a49c-647e009774d6",
        "cursor": {
          "ref": "e930fd73-5ee8-4d3b-9a8f-471a0da181ea",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "685ee1cf-c74f-4032-88a2-cfa1d16fc234"
        },
        "item": {
          "id": "90c5f1c0-eaca-4314-a49c-647e009774d6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ef173b86-a052-4dfe-a047-df18a4b29770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbc0f68-cdff-40ae-ad05-5459db8fd9af",
        "cursor": {
          "ref": "662644df-7677-4359-887f-c9322c096d14",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "13200608-01e3-4c25-badb-2df8660f8835"
        },
        "item": {
          "id": "8cbc0f68-cdff-40ae-ad05-5459db8fd9af",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ea6b594b-66c9-47db-9384-74d396777026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba66aae-2b78-4f40-81fc-f53d472611a9",
        "cursor": {
          "ref": "ecc24ea6-61bb-4ee1-a6e9-81e38676d0a4",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "820a2593-6e93-4b68-9520-d12db9082a38"
        },
        "item": {
          "id": "6ba66aae-2b78-4f40-81fc-f53d472611a9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1de2fcac-ce45-4195-9ad0-13ab48b1f5c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4ec31ab2-1f5f-4580-9e2d-ee6ea7c5ba7a",
        "cursor": {
          "ref": "f613146b-aab9-4ee3-9634-5a2395a95db1",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0c27ea71-715f-446d-8d14-2c93acb592ad"
        },
        "item": {
          "id": "4ec31ab2-1f5f-4580-9e2d-ee6ea7c5ba7a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a8c91ec9-2c92-43c2-bd0b-bac0b6af82ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdd1076-d7fc-48bd-9ef4-7160e467a264",
        "cursor": {
          "ref": "b4e35b1d-b824-4742-ac49-6eafc374619c",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3835e4f7-0632-4026-85e5-008a021d4433"
        },
        "item": {
          "id": "fbdd1076-d7fc-48bd-9ef4-7160e467a264",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "474244f3-3430-4f73-8c89-e5b7243ba19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e90f15-797f-4259-95c0-e8a88617d249",
        "cursor": {
          "ref": "5f205a95-bc88-4ac0-a9bb-27661024cb00",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "54831da0-cc87-4493-afaa-6c126e858116"
        },
        "item": {
          "id": "f3e90f15-797f-4259-95c0-e8a88617d249",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2e7bc79a-f68c-41c4-90a2-5a1d85ceeff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21500b7d-3628-4e2d-8c26-053e6ed5a250",
        "cursor": {
          "ref": "85475e33-8073-417f-a68a-60eadfd08fcc",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "51999483-02e7-4dd4-abeb-020836b39f65"
        },
        "item": {
          "id": "21500b7d-3628-4e2d-8c26-053e6ed5a250",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c14a9a49-3028-4dfd-a092-c15a03e2bb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef21f077-9511-40f2-a415-1601e873a121",
        "cursor": {
          "ref": "1e9ddf92-d563-4af7-a1c6-b2ce7d2d4ff0",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0ab7142b-a11e-412e-9da0-a212be3f8928"
        },
        "item": {
          "id": "ef21f077-9511-40f2-a415-1601e873a121",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2978d810-84f8-4eda-a59e-932baf995add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f0c795-a5bf-4f32-b470-00168203e966",
        "cursor": {
          "ref": "85e09a81-37de-4cb2-94e9-c8fbaa912d52",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fb107f4e-c5f6-42fb-9262-87f9113a6cff"
        },
        "item": {
          "id": "91f0c795-a5bf-4f32-b470-00168203e966",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7d1c9b14-b169-4e5e-8a7b-0aea7edb3b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e506727b-5884-457c-a305-583d1cbd0436",
        "cursor": {
          "ref": "55cb52b8-15c5-4a5b-840d-00d9025f21cf",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8f05bf2c-2842-412e-b52c-15b355eedc90"
        },
        "item": {
          "id": "e506727b-5884-457c-a305-583d1cbd0436",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6bf576f0-fb7e-4aef-8b94-3dee4f9813dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31979e2d-8d20-4b7b-a919-a993d6e4f12f",
        "cursor": {
          "ref": "da176a6d-bba2-497c-b0b4-c2fd3ad07073",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8ad747b4-6fcb-4eec-b4c1-64e01b026366"
        },
        "item": {
          "id": "31979e2d-8d20-4b7b-a919-a993d6e4f12f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "847095eb-da7b-429d-9871-b6922ba64821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2351dc7c-97c6-46c1-bf4d-93b68e6baa1a",
        "cursor": {
          "ref": "21336f17-6750-4c47-bd6e-b1873d13ddd1",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2b9c7487-4df2-41ee-9dfe-a97f4d3d6f17"
        },
        "item": {
          "id": "2351dc7c-97c6-46c1-bf4d-93b68e6baa1a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "39d7b9bd-79da-4897-9267-e1d5e5a3928f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c716e3-b444-46f0-bac8-4309f507aa5e",
        "cursor": {
          "ref": "ac5eb89d-452f-4e21-a06f-7940d716be00",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "fcc735b0-2113-46d7-b56f-7e05ebf302d0"
        },
        "item": {
          "id": "85c716e3-b444-46f0-bac8-4309f507aa5e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7524752a-87f5-4a4e-8339-2a273dce7338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfca9c67-56a8-4ffc-89ef-65d4ea61b9e3",
        "cursor": {
          "ref": "e4bbbcfd-315f-4173-9b57-92b6fcb1ba6a",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e3784438-093b-444b-a49f-2d38ba6eea40"
        },
        "item": {
          "id": "bfca9c67-56a8-4ffc-89ef-65d4ea61b9e3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f90d2d91-6a35-40b0-a355-363c2eddb977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fee698c-a8bf-49e9-bd2f-82a4f73ad8f7",
        "cursor": {
          "ref": "610ad741-9e87-48bc-ad32-d31bdad093b9",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "af818a06-a3f7-4180-9c9f-cddd519bb0a6"
        },
        "item": {
          "id": "5fee698c-a8bf-49e9-bd2f-82a4f73ad8f7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4f396d46-5655-419c-82cd-a1a1bc325936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38340f46-e7d7-4b2b-b74d-09ed1e052011",
        "cursor": {
          "ref": "41255e0a-bccf-48b8-b47e-030cc128ffef",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2e734864-5b52-430e-af74-4ac25975a7f9"
        },
        "item": {
          "id": "38340f46-e7d7-4b2b-b74d-09ed1e052011",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c2815af6-dd18-4c7d-b7b5-2e0217754c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cf987c-2e8d-4a71-9e18-0c369d1d3b85",
        "cursor": {
          "ref": "d3521f11-25b5-4d15-96c1-a1bd74731ec2",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "267e8fa8-5485-494f-9296-f72769254be2"
        },
        "item": {
          "id": "88cf987c-2e8d-4a71-9e18-0c369d1d3b85",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ebd72dc3-a6f7-403e-9ed2-cf980e322a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6470a043-6da9-49a5-8db6-a336df738d20",
        "cursor": {
          "ref": "65b2bca7-146a-48f7-b045-8f2f3532da90",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8d744bcf-12e0-4f01-9654-efa9e78e7e61"
        },
        "item": {
          "id": "6470a043-6da9-49a5-8db6-a336df738d20",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6b42beb9-9980-4160-b60d-aa429677c81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433430cc-659f-4dd1-8de0-d5f53688f385",
        "cursor": {
          "ref": "4d516e5c-3604-412b-b7d9-e748895274d9",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8d4d7df6-df7f-4a61-9831-02cca1c41116"
        },
        "item": {
          "id": "433430cc-659f-4dd1-8de0-d5f53688f385",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3d31613c-79ad-49a1-bad1-0023206755ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c7b05b-3978-40b4-8e4b-f52a970e09d1",
        "cursor": {
          "ref": "d2df865a-1a1d-4d55-92f6-1b300a17c355",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7a63e053-8703-4717-a25d-837a18655b92"
        },
        "item": {
          "id": "07c7b05b-3978-40b4-8e4b-f52a970e09d1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f113b091-4b93-4b64-b541-617f35ee2364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5026a81-3401-4b97-8a14-0f80cd3ae4ee",
        "cursor": {
          "ref": "64f40d3c-ffd6-4bbd-97e5-05e96cbd2b29",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f8c3e211-7ded-4ede-9747-d6aa18708432"
        },
        "item": {
          "id": "a5026a81-3401-4b97-8a14-0f80cd3ae4ee",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "683ccb37-d2c1-4484-b487-71b0f10e6c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981fd776-9ad6-4992-ba56-07d7a31e889b",
        "cursor": {
          "ref": "55185b4a-90ba-44b6-a695-5b9aa3d05733",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e1d53fbf-a489-41b0-85db-c1fff7146b6f"
        },
        "item": {
          "id": "981fd776-9ad6-4992-ba56-07d7a31e889b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3d03b91f-03b3-4aae-a140-29bee59a2085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45690ea8-afd3-4f97-87a4-93de491ecc0e",
        "cursor": {
          "ref": "4bf2440a-6a26-4532-bdbb-88fb83b62a8a",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3b84b7e3-3b86-462b-b3f2-84fe6dfeb4a3"
        },
        "item": {
          "id": "45690ea8-afd3-4f97-87a4-93de491ecc0e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eed88333-1297-4ad8-bfaa-aaa4641f1221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27e858a-ec2a-4ca6-9b4e-200072b246b2",
        "cursor": {
          "ref": "75764163-d13c-49fe-8034-04627976692b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "58a961c2-44c1-49fe-af64-b70bf46a278c"
        },
        "item": {
          "id": "f27e858a-ec2a-4ca6-9b4e-200072b246b2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "28dd0749-0c97-42ec-95c2-f78a6abebdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8883f13f-28d9-4679-8097-4e0ab866c7d8",
        "cursor": {
          "ref": "2aa44d72-6ba0-4747-babc-6b735a35bf84",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "950b2722-b36f-4bd9-931f-899c0a06af1b"
        },
        "item": {
          "id": "8883f13f-28d9-4679-8097-4e0ab866c7d8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3509fec2-fea0-46c7-b24c-85eab4bc26b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75dcd245-20f4-42ba-8a8d-d955abddc163",
        "cursor": {
          "ref": "49c5652c-b2ab-4549-aee9-3b4e2e581615",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "43056d5d-226f-46cc-89dd-76c5a122d95a"
        },
        "item": {
          "id": "75dcd245-20f4-42ba-8a8d-d955abddc163",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9a5007b6-d2c0-48b9-b495-4e7536823f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266895ec-af30-424c-91f5-23de7b36d21b",
        "cursor": {
          "ref": "35ec787f-309e-4884-9b3d-fef82f5ae482",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "eb72d0c2-7149-4d5d-9f8c-3427b31f0b1e"
        },
        "item": {
          "id": "266895ec-af30-424c-91f5-23de7b36d21b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "382afd11-0f1f-4fdc-a51b-627a63096472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d621c227-d705-43cf-8c0c-c4325c13a92b",
        "cursor": {
          "ref": "056905eb-f3f0-4487-9040-67bdef7e3545",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "06da2d40-2502-4092-8ba4-da64bc5f3794"
        },
        "item": {
          "id": "d621c227-d705-43cf-8c0c-c4325c13a92b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0309dbb0-a874-4725-a7b7-a3a44ba7bed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84accb8c-3df3-4889-9629-38038ced47a3",
        "cursor": {
          "ref": "2f1fd813-1091-42ac-b2f9-8218d0abab8a",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4c199c9f-e532-4eec-8ec3-6e21eef38fe3"
        },
        "item": {
          "id": "84accb8c-3df3-4889-9629-38038ced47a3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4f2a8bf3-f4c4-4eb8-89a4-664c668d5ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f488741a-1f67-40b4-9a64-432792cfb30a",
        "cursor": {
          "ref": "496dc77e-22bb-4a3b-815f-ddc38b576d86",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "82482fa1-f781-44df-a497-d02c4db85810"
        },
        "item": {
          "id": "f488741a-1f67-40b4-9a64-432792cfb30a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "daec9a9e-6651-4077-9987-a7b059739378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40dd8810-6d1c-443f-985b-2e8205efb1e1",
        "cursor": {
          "ref": "3a81ec3b-73b6-4448-a614-4ba007736b58",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "33dbbe8a-5c6d-423c-9369-f5de46f9dfce"
        },
        "item": {
          "id": "40dd8810-6d1c-443f-985b-2e8205efb1e1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cf821708-c25f-4a3c-ad05-3745becb179b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f7604d-a615-47bb-bf2e-fcc438f2c2cc",
        "cursor": {
          "ref": "22c2a5b1-bffa-4872-a000-1669c534ff65",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dcdffbb0-c7c4-4a35-bef3-cf45fbb1d88a"
        },
        "item": {
          "id": "b8f7604d-a615-47bb-bf2e-fcc438f2c2cc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "35ee9325-6e12-4423-91a2-fcfe6911f96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f5eaef-a8b9-40ac-9462-b2d922e4345f",
        "cursor": {
          "ref": "9e0dba9e-694f-4c27-97df-bc6ae4aa7344",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "065a1169-4062-436e-8d1d-90aa750acae7"
        },
        "item": {
          "id": "e2f5eaef-a8b9-40ac-9462-b2d922e4345f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "68869a54-0f34-4bd2-844e-9c5ad68884e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "0b092a27-1dc2-43ff-8d92-77ddd75c7fd2",
        "cursor": {
          "ref": "785a801b-9b43-45e9-a28c-7132703e0191",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6d25e3a0-37d6-481e-8485-684e5af53d30"
        },
        "item": {
          "id": "0b092a27-1dc2-43ff-8d92-77ddd75c7fd2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6ce48b44-d2cc-4c9d-b04a-e8bd415b5a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "37b27966-d5df-40bc-8dd7-58aa9e297b37",
        "cursor": {
          "ref": "fb797066-2654-4f0c-951e-637375229653",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b909eb4c-895d-4b62-9617-705c7e250e03"
        },
        "item": {
          "id": "37b27966-d5df-40bc-8dd7-58aa9e297b37",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "33a3107c-0afb-4539-8358-04b9ecaaa2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5f54b665-1190-4d7f-b90a-759edb9900c3",
        "cursor": {
          "ref": "09fa341e-7380-4221-aca1-daa62799d0bf",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "74e75781-b625-4fc9-aceb-36af9ac2693e"
        },
        "item": {
          "id": "5f54b665-1190-4d7f-b90a-759edb9900c3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9e7df9d3-08a6-44fa-9406-7a924e3d3268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d5e326-c369-4103-9ee2-29f57a3e54e1",
        "cursor": {
          "ref": "6ea67546-d1de-4ff6-82fd-806a10a65329",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2d4d157f-9cc1-45d4-9db0-ae9d4047934b"
        },
        "item": {
          "id": "09d5e326-c369-4103-9ee2-29f57a3e54e1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "851a9696-f6e3-43fb-8e89-8a30077a2f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "41f25a20-24df-4535-ab37-18e7ec7fa068",
        "cursor": {
          "ref": "84274111-6f8a-4c4e-b099-11f60616d4d5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "af9a453a-27c7-4348-85aa-d817a52c38e7"
        },
        "item": {
          "id": "41f25a20-24df-4535-ab37-18e7ec7fa068",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "60fe0cde-2e1a-4a0c-acff-81ef98254867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1077,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e2523a4c-a808-4f77-9694-a80b1cace41c",
        "cursor": {
          "ref": "ae6fff34-9a68-4bfa-ae0c-f8541c7c6961",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dcf2bfb9-9452-428c-a1f8-259078a67d97"
        },
        "item": {
          "id": "e2523a4c-a808-4f77-9694-a80b1cace41c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8e63a1f0-6e35-41e5-ac57-35593d25fcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a35525ac-7df3-40c3-9cc2-516585edbe30",
        "cursor": {
          "ref": "a52c0db0-dd00-466c-b3de-79074fdc9f1d",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4d681aae-e3ca-44db-8b59-213db6bc7f94"
        },
        "item": {
          "id": "a35525ac-7df3-40c3-9cc2-516585edbe30",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "628f0f8e-2024-4c78-affd-f2ab6d4d0f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9eb356f3-2e3b-4733-9fbd-481d82b95aa7",
        "cursor": {
          "ref": "ca930d54-2e59-423e-92d2-4caaca5b373b",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "51fb08af-44a2-4102-ba26-a0e7229d2423"
        },
        "item": {
          "id": "9eb356f3-2e3b-4733-9fbd-481d82b95aa7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a2562c27-92ba-4ddd-a8b3-200efd80d6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "da566dc1-614d-4f7c-8404-2756319bb96e",
        "cursor": {
          "ref": "524162f1-68e3-42a5-9136-de57ca03d733",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "55d6e803-b9fb-42f1-9e9e-226ff24a4537"
        },
        "item": {
          "id": "da566dc1-614d-4f7c-8404-2756319bb96e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f99540b7-777d-441c-a671-d30991b5a2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "16554c2a-1faf-4626-aa5e-77c699a4af6b",
        "cursor": {
          "ref": "601c5722-47ca-4f6c-bf6c-ecc2c04ff68d",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac9af2e1-c9f0-48e3-a456-07a44c63be00"
        },
        "item": {
          "id": "16554c2a-1faf-4626-aa5e-77c699a4af6b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a02b3ff8-3608-478d-8d1e-932cdb7b9047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d210b2-f105-417d-9da1-0fbe63b913f4",
        "cursor": {
          "ref": "920306f8-5b6c-45cc-81a7-ded8aeb20730",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7c77cceb-bac4-497f-b17d-76e47c2b6821"
        },
        "item": {
          "id": "d8d210b2-f105-417d-9da1-0fbe63b913f4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "446741b6-958c-424d-842a-baed38bda5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aaea6e1-3bbb-4680-813c-e00d752668a7",
        "cursor": {
          "ref": "d17b428d-d1e7-479b-ab1b-7adefe5f90f9",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "97a13e7a-4382-4d62-ba12-24dcce0c4482"
        },
        "item": {
          "id": "9aaea6e1-3bbb-4680-813c-e00d752668a7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cdd07ffa-0565-4878-9a37-e287385563ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bad187b-3b2e-40ad-94ef-9aa913e60fca",
        "cursor": {
          "ref": "8bcfa937-5a4e-4c9c-b728-66dcbaf87de0",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4c432f10-0106-4b75-ac3f-4332ee0bc720"
        },
        "item": {
          "id": "4bad187b-3b2e-40ad-94ef-9aa913e60fca",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2c2cf46a-70e5-4545-98a0-2fee0671404d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b48002d-9910-42f6-a400-6f57cb8863a4",
        "cursor": {
          "ref": "57f278cf-921a-4a77-857d-50804a40250c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3c130e49-061e-4c01-bc4d-ae497c61f50f"
        },
        "item": {
          "id": "9b48002d-9910-42f6-a400-6f57cb8863a4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "983abf72-87c2-4252-b5f9-bf607e0bd937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af783e63-647c-48b4-82a9-311247e7e695",
        "cursor": {
          "ref": "24118b6f-8d9f-43e0-9898-7d06bbaa3d7f",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d1477853-30c0-4367-9ba2-3e1c06025bee"
        },
        "item": {
          "id": "af783e63-647c-48b4-82a9-311247e7e695",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1c2a0e7e-bb35-4666-84f8-f31b4072f706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3630e8a1-cb19-47fd-ba7a-afb5aade07b3",
        "cursor": {
          "ref": "f32415b0-6059-45d6-9ce3-e8d8fddee772",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a706ad9f-16f0-4ba6-becd-f93e6c8bd3f5"
        },
        "item": {
          "id": "3630e8a1-cb19-47fd-ba7a-afb5aade07b3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7bc27c1c-1e00-44e9-b860-b2c29de935d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227a527a-3057-4a5a-9a22-7783fc6b896c",
        "cursor": {
          "ref": "9971b1fa-4493-4491-ba45-3cc9333eb917",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d06070ed-c3eb-4d7e-8ee9-fb5955f0e477"
        },
        "item": {
          "id": "227a527a-3057-4a5a-9a22-7783fc6b896c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5f1f3191-2a69-4dde-ad20-6802ffe03978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70d3f81-7cc3-40e3-8bf2-f5ca026c97d6",
        "cursor": {
          "ref": "8773525a-a730-42bf-ab52-f7ac39cd5f65",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a110986b-3ca3-4fe3-8fb0-1b6242a3a91f"
        },
        "item": {
          "id": "d70d3f81-7cc3-40e3-8bf2-f5ca026c97d6",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "45fdb45f-0f50-476c-a351-e6d1b7f1785f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce2b94f-ae96-494c-8619-2abaebd80498",
        "cursor": {
          "ref": "94cbdef2-b4b3-41f8-b1ab-66af757af244",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "45e35c92-1092-42eb-bce7-c5908fc55971"
        },
        "item": {
          "id": "8ce2b94f-ae96-494c-8619-2abaebd80498",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b6a1818b-fc66-41cf-8382-1fe6182d7243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1d787a-3c74-4e20-b253-89d2b0f4e55a",
        "cursor": {
          "ref": "f414dff9-2205-4210-b4d4-90283571b225",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5bbb3de0-dbc2-4442-ad4c-664167ca3186"
        },
        "item": {
          "id": "9d1d787a-3c74-4e20-b253-89d2b0f4e55a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9a9e416b-defe-4bc4-99d7-035d41bb9a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd63c33d-2697-486a-8307-1474943fa270",
        "cursor": {
          "ref": "c50a79ce-61d1-423d-9425-54c5b579e753",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ef340296-638e-403a-b663-79e8acf00853"
        },
        "item": {
          "id": "cd63c33d-2697-486a-8307-1474943fa270",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0ee73a5f-a091-4239-b61f-026f25a4b4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62018fc8-c504-4ba6-aaca-e149bd6725f7",
        "cursor": {
          "ref": "394e37ca-33ee-4b75-9c1b-4f7915f01628",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f5ab3610-1b48-409d-869e-aa109677f71e"
        },
        "item": {
          "id": "62018fc8-c504-4ba6-aaca-e149bd6725f7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "deffa8d5-f620-4142-a31f-bbc0389b0488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41111965-07ae-40c9-9972-6fed9593a05b",
        "cursor": {
          "ref": "83cf4415-4bea-4e56-b0a8-9dadadbb46d1",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "21ca7f97-51a6-4bd5-a6c8-f2f03de8f2e7"
        },
        "item": {
          "id": "41111965-07ae-40c9-9972-6fed9593a05b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "167d5187-f080-4fc2-bfcd-95ca5ffd5c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1049,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e09def2e-ab18-45a6-b017-2024d7d8d20a",
        "cursor": {
          "ref": "af28b671-ff56-4b9a-8725-68a75a4cfd4b",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2b98a7b7-3a3a-4d04-b40e-c2982782f446"
        },
        "item": {
          "id": "e09def2e-ab18-45a6-b017-2024d7d8d20a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9729fdf3-c343-46d9-a6b9-99f2e8dc718d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1074,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0ed4dc84-f317-4a96-8ed5-8a48cfac8fbf",
        "cursor": {
          "ref": "5606c1da-9fd8-46b2-8746-fd9d78fbc0fb",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "60acff69-76a2-482a-9b1f-dbae23f2eeef"
        },
        "item": {
          "id": "0ed4dc84-f317-4a96-8ed5-8a48cfac8fbf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "246f3d1b-814e-49c1-8918-2f82c20e540a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ccc18775-74bc-4907-976c-b30c0c8473a5",
        "cursor": {
          "ref": "d161b6d2-5f40-4ab4-9526-116ac52b1369",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "71060bd3-66e1-4304-b931-74265a0cd38d"
        },
        "item": {
          "id": "ccc18775-74bc-4907-976c-b30c0c8473a5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3d5389c6-4c39-43f3-b35c-f431ece29d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1145,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0a2ab107-8ba1-47a5-b7d0-21de4ebafe3d",
        "cursor": {
          "ref": "29d27b99-13a5-4a34-98de-d2a215b21779",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d91cec9-ca32-4dbf-9eae-00a739c48b25"
        },
        "item": {
          "id": "0a2ab107-8ba1-47a5-b7d0-21de4ebafe3d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3cf04d8c-08d2-466c-a52e-12055fb1e117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "87aab0a8-3b98-43ac-b79a-f21e55ff43d8",
        "cursor": {
          "ref": "4da3fcbe-b59c-4e58-a430-6194c36495ef",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2f3e7198-a87a-4a9e-ad3e-4782215f803c"
        },
        "item": {
          "id": "87aab0a8-3b98-43ac-b79a-f21e55ff43d8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8cd5b304-3682-412a-bb29-12306e632fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ec351b-1d87-444f-a7bb-2d0f505f5f6a",
        "cursor": {
          "ref": "18ecf5fc-6907-46c9-9d12-9767bcb5f16e",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "59e219f2-af2a-456f-9b7b-c2edbc3e7f91"
        },
        "item": {
          "id": "00ec351b-1d87-444f-a7bb-2d0f505f5f6a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6d68077d-8ac3-47bd-9ea4-2fb7637dfed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9547a37-fa6d-499e-92f3-c78619024d44",
        "cursor": {
          "ref": "7192c3b5-ebfe-4d57-b9b5-a98c677addce",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "89951572-07a1-428f-a03e-cf5a490abcf1"
        },
        "item": {
          "id": "b9547a37-fa6d-499e-92f3-c78619024d44",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "283a85bc-7c58-4e58-ba34-6fbbaa2806e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a69fd5-68f2-41ee-92c2-9f268cd2cf40",
        "cursor": {
          "ref": "77b8382d-d7dd-474d-8427-3d3f4e070a79",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "48d74712-b91f-45fa-a92d-68f6a7f9d09a"
        },
        "item": {
          "id": "a9a69fd5-68f2-41ee-92c2-9f268cd2cf40",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1b9619b9-d936-460c-95a7-9e0f08bb3d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e1a01d-3892-4928-b107-d8a313ef420f",
        "cursor": {
          "ref": "989450e6-a6a9-4232-902a-ea719057242a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9991a310-9b70-44cc-b39c-4240b8188027"
        },
        "item": {
          "id": "e0e1a01d-3892-4928-b107-d8a313ef420f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f29f86be-0b93-45e0-8d42-e5f7b6108115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23bd0b4-77eb-4126-ac67-83ab954052d5",
        "cursor": {
          "ref": "c475267e-aaa0-4c35-a342-6dd5194af537",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aa42cd17-36c3-4394-b97f-97d9c4721e4e"
        },
        "item": {
          "id": "d23bd0b4-77eb-4126-ac67-83ab954052d5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dcae7c01-cd0c-4e90-a1f6-74025a72d1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274cf389-918d-4e7e-9cf7-68052c054c3d",
        "cursor": {
          "ref": "85ba66a5-166a-46bf-be19-0e973da4de95",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6868b6b9-281a-4352-9fea-26ebea9d06fe"
        },
        "item": {
          "id": "274cf389-918d-4e7e-9cf7-68052c054c3d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "051fce5b-61f2-4872-b462-308d93cbf4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2181d87-662f-47e0-8a5b-6dbe7792ee72",
        "cursor": {
          "ref": "0c0ae0c0-26d4-40df-9480-52d0617d4de1",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fc225c9e-c5b8-487b-a6e8-6bc905b65b06"
        },
        "item": {
          "id": "f2181d87-662f-47e0-8a5b-6dbe7792ee72",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6b4c8555-4482-4933-8084-60eb79569d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f5036d-e411-4941-937e-dd69833af9e8",
        "cursor": {
          "ref": "e476d9f4-a39a-4d83-aeca-a56ca8594f28",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ceee3f6f-93ae-4e6e-a064-2a1c19987a30"
        },
        "item": {
          "id": "b3f5036d-e411-4941-937e-dd69833af9e8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7ac8f994-805a-4ed4-9b58-59df490ea28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776a5484-5558-4d2e-bc60-a9f6ca32b7fa",
        "cursor": {
          "ref": "5e70b25e-c4f7-49b4-819f-8acd47a92ea6",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "31f63a9b-ec1b-4b06-9b09-3bbbbf8f0b17"
        },
        "item": {
          "id": "776a5484-5558-4d2e-bc60-a9f6ca32b7fa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c7794b29-2ed4-465b-a107-fcd867720fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b67800-defc-40f4-a28b-5b15967094ae",
        "cursor": {
          "ref": "7d21b10f-0b74-4c23-a221-ca87bf2684b3",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "05ee7d25-2874-4b1f-833f-1893ed982a80"
        },
        "item": {
          "id": "44b67800-defc-40f4-a28b-5b15967094ae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "65b0c7fd-45a1-424c-837f-41ed51abae67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c132d50e-4617-4361-b24c-289390ccfea7",
        "cursor": {
          "ref": "0c3fc58b-4436-4de1-8941-547404c1bcf6",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "808edf33-052d-434b-91a7-7bbf9e59a7e5"
        },
        "item": {
          "id": "c132d50e-4617-4361-b24c-289390ccfea7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "665f57b4-689f-4b1e-9162-38d22d8492cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b20ff09-30c8-447d-b762-84f84d61c09d",
        "cursor": {
          "ref": "91dcc979-9417-4b23-9ab8-4d7a84bb043a",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8d14758a-dc8c-4790-9fa6-5c075fa31be8"
        },
        "item": {
          "id": "0b20ff09-30c8-447d-b762-84f84d61c09d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "15888c07-1bf4-4627-a91c-ab5a81315cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d813cd61-6286-4b47-9db7-444ffdefcc83",
        "cursor": {
          "ref": "bafed573-523f-4d4f-b262-0f587afd606e",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "766ff7ef-a015-4ebe-b6d3-bd6faaf43e2e"
        },
        "item": {
          "id": "d813cd61-6286-4b47-9db7-444ffdefcc83",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c8efca7b-1f40-4f50-b8d3-83ef394b6391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11326687-5b15-483c-8fbd-d99161301256",
        "cursor": {
          "ref": "d547531f-036f-4cfc-a37c-0d8e56b39bd5",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "36a7bc41-ab2d-4c85-bc2f-fef5ba6d8cc2"
        },
        "item": {
          "id": "11326687-5b15-483c-8fbd-d99161301256",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ab0991df-c51d-40d9-a8a3-d5d85967111c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2e97a0-857c-4ace-a477-202d77481097",
        "cursor": {
          "ref": "f43b4c5e-6212-42f0-a8ec-acaff496bac8",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "685c5688-c227-4b46-bfa7-e47e2d9f6356"
        },
        "item": {
          "id": "4d2e97a0-857c-4ace-a477-202d77481097",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ac8beb06-aec8-4906-a623-a591f188cc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbe2bf3-a9de-40b7-a083-dcaf753a8238",
        "cursor": {
          "ref": "10be979f-1983-4448-9b2e-8127e5abd14a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "54790bcc-1891-467a-b339-ce77433396f6"
        },
        "item": {
          "id": "abbe2bf3-a9de-40b7-a083-dcaf753a8238",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "45b52edd-a9a7-4e89-a5fd-1da9eeef2a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc1fcb6-9cf3-4d3a-82c6-2671347d4e15",
        "cursor": {
          "ref": "0922e96f-2401-4b57-a1ad-2e02a03c1b07",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9b213598-af25-4f73-9c30-3bb45f71ea98"
        },
        "item": {
          "id": "7bc1fcb6-9cf3-4d3a-82c6-2671347d4e15",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b39e53d2-2b99-40a7-a131-c73724782398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaabce48-3438-47e7-8d60-4da2afdd7ce3",
        "cursor": {
          "ref": "f0cf6cc0-5b77-436d-b310-120a5d8bcd0f",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a703af68-d40c-4c02-9a50-170f69573e97"
        },
        "item": {
          "id": "aaabce48-3438-47e7-8d60-4da2afdd7ce3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "84a01f3a-498c-48c5-aa4a-6c8bfe75d36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8668bf17-120c-482e-a74d-7c620ea8bc6e",
        "cursor": {
          "ref": "0332db6b-3c31-4a98-ae57-d18fb96a3659",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "50997b35-f189-4502-b15e-8572791cd896"
        },
        "item": {
          "id": "8668bf17-120c-482e-a74d-7c620ea8bc6e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "981a1669-6629-4d3e-84e3-69ac3e614250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24b433b-9c72-42e7-8659-023ef38382b3",
        "cursor": {
          "ref": "9563c80e-6d14-4400-b164-3a7803d30115",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "cff169ac-60c7-4d12-ac1f-e12c559feb59"
        },
        "item": {
          "id": "b24b433b-9c72-42e7-8659-023ef38382b3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a4afad09-3cbb-448f-817b-4dcef37ff94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ead788-b6c5-449f-9708-8d6e15dff1f9",
        "cursor": {
          "ref": "fed314b1-2cfb-404e-a7a2-d906d0eddf4a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1195bc72-2ca7-4f2b-8491-be47b74bf24d"
        },
        "item": {
          "id": "92ead788-b6c5-449f-9708-8d6e15dff1f9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "65607bfe-f618-4720-82a5-3f162b6f83ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9befd8-f356-4fdd-bd1c-8f759da4b3eb",
        "cursor": {
          "ref": "d4ee3b8c-e362-4fe2-a793-71c3f3f74d22",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b955fb32-05fe-4fce-9554-96dac3cec77e"
        },
        "item": {
          "id": "fd9befd8-f356-4fdd-bd1c-8f759da4b3eb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "83b8e791-e6c9-4380-8d55-a53c8ba72a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636b369c-737b-4a52-85d4-f12e749f535e",
        "cursor": {
          "ref": "2ffa88d2-4e04-4294-b995-335dac2d4a6e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "eb02e21e-5376-4561-9153-be1358418a60"
        },
        "item": {
          "id": "636b369c-737b-4a52-85d4-f12e749f535e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "caa6acbd-d60d-4dea-b7ae-7de0f167c0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3506be7-82d0-4881-bb8f-6d9440973fa8",
        "cursor": {
          "ref": "134b9bfd-4873-4954-95f2-bfdffd332d18",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b406b5a9-7557-4867-a451-51ad13bcd10b"
        },
        "item": {
          "id": "e3506be7-82d0-4881-bb8f-6d9440973fa8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2776b3d7-37fd-4091-847c-8f233cfbafc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986222f5-2ff3-4b52-a599-87e4ed589321",
        "cursor": {
          "ref": "4360a73c-31c4-4b06-88aa-24e2591b1436",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "9b5c1cf9-a976-498c-8e3c-024ea33bdf2e"
        },
        "item": {
          "id": "986222f5-2ff3-4b52-a599-87e4ed589321",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c47593f3-e051-408d-98d6-6bac35db3320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3073070f-504a-4c2b-82da-457ddfaff697",
        "cursor": {
          "ref": "e67b82b2-eacd-43c0-b87e-8fbf972bc7ba",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "05403480-1ddb-4a3f-8dca-ec91771cd4bd"
        },
        "item": {
          "id": "3073070f-504a-4c2b-82da-457ddfaff697",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "73d49df5-a3b6-456d-873a-5aaa245c3d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ee32f7-8354-4f05-b0a0-b4729476ad71",
        "cursor": {
          "ref": "b01e2fe1-4dec-40e9-8351-711e63ec725f",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "79c70012-8b8a-4eca-bef7-6f554a54bfb5"
        },
        "item": {
          "id": "29ee32f7-8354-4f05-b0a0-b4729476ad71",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c7de10a1-96cc-4ab7-99dc-7a368856345c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1610b02-21c3-4b40-9634-24455e0e097b",
        "cursor": {
          "ref": "e4246ba3-cd09-4b01-982c-83e94b9dc3b6",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "5a54e38a-e52b-486b-ba22-f254ab82cfe7"
        },
        "item": {
          "id": "e1610b02-21c3-4b40-9634-24455e0e097b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0fab99e7-e673-4ab0-b53b-38322e9df7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7594704a-fd47-45be-a7e1-6873ccc7a3be",
        "cursor": {
          "ref": "9cb02275-bc27-4501-a045-b149f1aed1a5",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a1c692fd-87e2-4373-9c46-683b5e2ea88b"
        },
        "item": {
          "id": "7594704a-fd47-45be-a7e1-6873ccc7a3be",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "13a896c3-8455-4109-b391-4a017c788b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d377092-3056-4560-9a1d-039ebd135623",
        "cursor": {
          "ref": "b9233f73-0bd4-4a74-bb4d-d2bb86aebf5b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5081c6e9-1c72-44f8-ad47-d380be3da33e"
        },
        "item": {
          "id": "2d377092-3056-4560-9a1d-039ebd135623",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cbc12ead-aad0-422e-8ac5-308d2288c4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c235f47-d1f9-4b68-a0bc-546f76a691dd",
        "cursor": {
          "ref": "914e4354-d136-41c4-99ec-4ec39eb8d99b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "04836ccd-ea65-4f0b-aff8-f70474d63beb"
        },
        "item": {
          "id": "6c235f47-d1f9-4b68-a0bc-546f76a691dd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "23646369-216b-48cc-b048-8330d2cfd01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfacf42f-4d54-4cc7-824d-dd394501476d",
        "cursor": {
          "ref": "72597f3c-6df8-48d3-b9a4-e8ae3072b7dd",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "dfdb0888-1b96-4d76-b2fb-45a32aadd4a6"
        },
        "item": {
          "id": "dfacf42f-4d54-4cc7-824d-dd394501476d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a712458d-fc8d-4258-971c-cc419d8d8062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8617a3c6-0315-41c7-bccf-751c24629d20",
        "cursor": {
          "ref": "51405f22-b425-4d04-bfdd-cb6d127145d5",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "1632f125-b485-4e42-a445-eb4f30cef755"
        },
        "item": {
          "id": "8617a3c6-0315-41c7-bccf-751c24629d20",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d7d1b4d4-7d88-4792-a0cf-d70616713d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2490444b-093b-41a5-af36-624b77d71648",
        "cursor": {
          "ref": "d73b49ee-fa11-42f1-adb2-529193697e3a",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "95b03ef0-7289-4a01-abb4-6a094dff1516"
        },
        "item": {
          "id": "2490444b-093b-41a5-af36-624b77d71648",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1a0d7af1-cd2d-4184-85fa-ddcde6ddbf15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b1c145-a0d8-4e55-942f-05ebc347d3cb",
        "cursor": {
          "ref": "cc694f83-4643-4585-9a54-837e5a94d588",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6904b215-86d9-4082-9b32-61a3e33427e3"
        },
        "item": {
          "id": "e9b1c145-a0d8-4e55-942f-05ebc347d3cb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "802059dc-9711-4300-bb18-b19e4031f67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9c9756-0248-49b7-9921-b4ec978a62bd",
        "cursor": {
          "ref": "410a9378-6601-4ccd-9937-f4f07c70820e",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "711673e1-3820-4781-b7ce-1a32db620cab"
        },
        "item": {
          "id": "2c9c9756-0248-49b7-9921-b4ec978a62bd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "53f2da8b-cc6f-4ecc-9ba3-a1a7ac72bdea",
          "status": "OK",
          "code": 200,
          "responseTime": 1168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f218bece-c6c9-4d40-938f-00cd4cae9f02",
        "cursor": {
          "ref": "7851a765-1161-4b6d-a8d5-1c9b73a7cac7",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0a3ee53c-6dac-41b7-a0c4-750ba70d9a9e"
        },
        "item": {
          "id": "f218bece-c6c9-4d40-938f-00cd4cae9f02",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c547af85-0875-4983-b110-eb340ff6223b",
          "status": "OK",
          "code": 200,
          "responseTime": 1136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "546e807a-5ec3-42a4-8473-9c1219b4edff",
        "cursor": {
          "ref": "a375fd83-9271-4264-8d6a-8d0cefd34362",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a4ceff1d-81c6-4f0e-a411-69942d563e56"
        },
        "item": {
          "id": "546e807a-5ec3-42a4-8473-9c1219b4edff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "58ff412c-bc7b-4eba-b2ce-7dc8797c1943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546e807a-5ec3-42a4-8473-9c1219b4edff",
        "cursor": {
          "ref": "a375fd83-9271-4264-8d6a-8d0cefd34362",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a4ceff1d-81c6-4f0e-a411-69942d563e56"
        },
        "item": {
          "id": "546e807a-5ec3-42a4-8473-9c1219b4edff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "58ff412c-bc7b-4eba-b2ce-7dc8797c1943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea05274-16be-4164-ad9e-1117a2ce19e8",
        "cursor": {
          "ref": "85468520-1ed2-4dd2-b62c-67261930e62a",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8f97d583-acb8-4a60-b4b2-5663bee25def"
        },
        "item": {
          "id": "1ea05274-16be-4164-ad9e-1117a2ce19e8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "df10d5f6-3e3c-45a3-889c-c5c659fe7d1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1c5af7-36d2-497e-a363-662df2fb30f8",
        "cursor": {
          "ref": "d41e2f5b-433e-44b2-a911-0fe1243076dd",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a9e0a979-c584-4e2f-a5bc-69c0e35ff293"
        },
        "item": {
          "id": "7b1c5af7-36d2-497e-a363-662df2fb30f8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8aa8e337-75e4-4f3f-8661-05cec9a338dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}