{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45987b71-502d-4625-a799-7a8d83b6a002",
        "name": "Clear Cache",
        "item": [
          {
            "id": "05ac44d5-6588-402d-8bc4-5ce1060deb45",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f06d4c41-049d-450a-a19a-d843a4a7f912",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "36dfc8eb-1385-4cd4-90f4-646c3cfa270c"
                }
              }
            ]
          },
          {
            "id": "931eb6f2-e500-45af-8bb9-85233168e1e3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "785a991d-23ec-4b69-8313-e0b01a60d307",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4d33acf7-a51e-431d-b1b7-c64d70148880"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "020c9e0b-0f29-4643-a549-ff52b245b1f9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a56428e-5ced-4939-8359-f64259d4e423",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a5236df3-3896-435f-98f7-902b508cd854",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef966b86-392d-4453-aeea-27fc4cbf6863",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c846d49-4d12-4f78-9ee6-ea8daa6fecbf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "237f415d-6f50-4765-8f22-ae6bbb24c41a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88d90609-6620-44c9-ba3e-aa450eef33ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a60e3dfb-5685-4316-ba77-ba150626b158",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ed12261-ff6a-407f-a2f9-3f1e2a2cd373"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7be69b44-0b14-45c9-8815-5e250be20c38",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "78573a05-23d8-46fb-8714-af3799f90a8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d78f788b-e37a-4863-9ec1-554a79cc9c9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3cf1ef0-9d0f-4444-8165-f6dee5dd7284"
            }
          }
        ]
      },
      {
        "id": "8f0d6e7e-bfe9-466a-b0f5-b7f3eb9dc029",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8979a6e4-0921-4d8e-be82-0709772e6468",
            "name": "Negative Testing",
            "item": [
              {
                "id": "003992d3-2300-4ce2-9568-32e45f8ae779",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8bf67a79-fc65-490e-b8cf-6643cbb121e7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fa166c-b1e0-4e7c-b34c-4a1f0fa993c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1212cca-de68-49d7-9d71-8c216fe6e087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1d2031-7c11-42c3-8f15-d789fc8834ad",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac89ace9-a1df-45f3-836d-c8dcec797146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4f2c431-00d9-4cc5-87a4-745e624fd989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a11a496-1766-459a-9c79-00b634448691",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9c3f84-e8d4-4d3c-851d-5bcd5ac51152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac877599-833c-45a3-8fe4-f3144e158a31"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb6f9362-1fe6-4971-8aab-e819771b6089",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e55064cb-86f9-4011-9c21-fe83a2f10826",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89154af-9eea-4e8b-9ed3-885df50a3175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17b085b6-8c51-4796-a923-76eaf3e149d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e6544e-9d62-434a-a2d0-f2972d34784b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e0abb9-cbaf-42fa-8aae-c85ee02b7d7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac57e205-439c-488c-ad69-2ca33ad8c847",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aa8cfae4-d947-45ad-a928-892e52fbffe0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9b2d3cb-2776-43aa-8c0c-f569e2652eab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cfbcabc4-4eec-43f9-a4ef-3abd3c29f19d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dd89905-10ac-4844-b28f-29f7ceca5e9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4131a7b3-cd53-47a2-9caa-c0b9d385561a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aab2e2fc-6160-4e3a-882f-162c9700e6ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61b53fd3-99eb-449d-94d0-0ab76e8fe6f0"
            }
          }
        ]
      },
      {
        "id": "4b947512-a256-4da2-b0ee-ed8f6fae8955",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "66995aef-fa16-4f1e-9ad6-4ca019b5dbad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88ecdbea-ddd2-4ff5-8ea5-0d8ca902c4a0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a25a8fb3-47c1-4156-b579-f7c30f44e061",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636cd435-3e5b-41d7-aa7d-e1ee71463b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a026a6c-72ae-4ea1-8527-2a7c49447fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea2e33e-4081-4c62-b14a-ebeec6576647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc0474ca-3a21-472f-9f18-ab718b2f79b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd3dd25-8ecc-493f-b0fe-9e229e1a03a3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164ea594-49e6-4086-9b05-b49ea18abaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f145b2-37c7-49d3-bd4f-f3a0fa159888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea596d9-956f-49d1-93fd-c2fa0448ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecf4a04d-cc09-4292-bb21-86681702b877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f5f53b-f70e-4df0-9157-06fff0affdbc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6f343c-1da3-4f5d-ac5c-832d2a4b0ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2433c93d-2a5e-4fcf-967a-0c8130c5f729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ffbd83-99f9-4e1e-8aaa-390eeb5c755e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6d49b84-38c5-4cdd-b7bc-916a965b6cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e01896f-2678-4952-bcc2-ca975c429e45",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf66261-4ab5-448c-80a0-ef6708b6fb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0062d5-4e84-4344-baeb-4f6fba51d69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f27529-7f77-44ec-9f5c-6d6738fa26c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4189468d-3858-483f-83c3-aa6294a96728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8160fd35-fae2-4e46-83a2-12273dc2c1ec",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39afa821-ea70-421c-8e43-c4b39cb0441a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53ba143-ddca-45da-a250-93551c0b6e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94ddec4-1580-4c6f-bc5e-7b6104a83ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bd9031f-2341-48f4-a4bc-c3a1e65a2bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fb0a76-2073-4f07-81c9-e4345b31dec7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a698bc-2a35-4d86-a470-bd92f8e71ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8108499-f3c4-4331-a7d3-2e1c049e66d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1d0fad-7c05-4a8b-994d-a542036bb050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc44eac7-3c9a-43c6-9741-f55842e1381c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bf3b28-1fa6-484b-ac38-6b2665b629a9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca76685-34f8-4b5b-8cb8-099fcc8546f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83398f3f-f4ce-47f5-8b53-a4cea38bcd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43308645-8d0d-42ad-bf86-9950bcde59ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3999a134-5663-44ef-808c-76f9e84ab88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a796c3a1-3bb8-4025-9bd3-8da91fb35429",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d00434e-dede-497e-b0df-869905d74922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b692e6-4d68-48f1-bac7-5b30bfaab9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774694de-40b2-42c3-8110-942bc5ac08d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0243866d-5481-44de-92e1-cf9f8dc81d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92944ba-2843-4d43-aa73-d80de547f291",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ad945a-e1b8-4e85-b730-53c184d70d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9e01b1-6825-44f4-ada9-131646bd0740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67f03fa-5dc0-4740-a4dd-29f7900bd542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d323344-4aec-47b3-a4b6-0f663bd8e4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caece47-af2e-431d-b5e8-775797cad5d5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6d080e-0b49-4735-858a-a811574ed324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617ef7ab-ce10-4f18-9118-6dd6a4e0ddc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2497a38-95c9-4951-a99f-1c6fce347546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d9df17a-c673-4300-a96e-ff2f3c623b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b292bfe-e925-4fb9-8d44-04fd17047284",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafac64b-87f1-47d7-a9ba-3e5f22b81cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db5ee45-fa53-4bab-9998-3e4b27151711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ec90dd-a326-4301-97fb-37827cd25b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dcbfb05-e83b-4971-959d-2db14b939e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2f1384-7f61-475d-a110-dc55296ed394",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066ef125-0d04-46fc-9ef1-8313048164d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a6aee7-a94f-4f0d-a0e4-263c86ab55ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4869e4d-ea85-4473-a5e3-4380a4da3618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15a7cb56-eeed-470d-861b-1d24b1fd98f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d81f46-87af-4abc-b149-be8cd257fbf3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06d8e54-e351-4dff-9b62-9ea13ce1ef8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cb07bd-6cc4-4c57-a474-e51cee31226b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62320ac1-dcd3-4a3f-aa27-e29fefc3e96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1de164d9-a00f-4e5a-9708-8e11b72a6882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12c15c1-6b24-4008-a8bc-4f50878bf6db",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3d5fd0-2f37-4f06-a413-1e15bef565dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fb70fa-67d9-4e12-806b-80177363af6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcbac7b-4a9f-4827-813a-bcd6ebaa6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e675bed-a538-4fe5-b6bf-51a724457c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df27f6f-f47f-4d8e-82c3-49b24cacd5ff",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3ce266-d7bc-432b-9d4a-4da41edaaac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4930104c-5aba-4e6c-a2ef-13dfae257d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da401329-c8c5-4e45-a08d-13db1b23b1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d31b537-b25c-4c1e-9d12-123136c0735c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a21339-a00a-4474-adf1-c82d330c8f1e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea74129-3942-40dd-a60f-b1cb6693a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3602dcb-7892-4739-98ab-0b58f60b1646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb410139-5e2a-430b-802c-ac28cec4d810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54be8cf1-18b1-424a-abf2-61c16ff843ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b8e069-6671-407d-a50b-ece07ad66a34",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0ef727-c461-418a-a451-8977d7ec3288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cbb196-d2fd-4f07-98e2-7433938765b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07262a3-6ee3-482f-a4af-fd45a2ffdcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95efeec0-2e2a-4739-b821-54ea1ed44457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2a4825-a950-4a1d-81c4-72396e7153e1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c959f7b-9f89-4f90-829f-1ad9af8511d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b517cf8-5a3a-4346-baf8-4d8132267a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e190ba83-b93a-445c-b826-eb19d26a8799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd32dd8-eded-4269-a22b-3c78450ce773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44df593c-0ffa-40bf-84cd-6ed681096847",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecad26a-ab59-4d87-aa02-7e451712f2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdba8a5-1399-410a-8269-f264025db1f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe4f291-fc17-4c86-bdb4-f7336caafa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf8616c-7f07-48b9-b75e-515ed916a22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad7ac09-9bca-45be-86c5-cc25be28618f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81aa4032-7f2c-47da-be90-b736ab11a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582ffb3f-62c9-4fdd-8c9a-881a039672f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0cbb33-6caf-46c7-85c2-069f39c157e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "931525d8-d453-4907-b005-3e8e6cd8bca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363afa9c-631d-4954-9f11-148420dc8e3c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e9ff75-a6a5-4565-88dc-ae9ebb7928b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237c603b-cfbf-4803-b38e-31c1acc14fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57181a86-f754-421d-86fe-cd8bcaedf3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9c4e27-e8ad-421c-8f1c-039c56c169ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ec2e04-70a2-47b7-86a7-5d758d0c4923",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8269c5d-de70-40b3-b436-64902dd0b81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5137c3d3-c19a-4095-a95b-26871d19cc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88c55f4-89bd-41f0-9c08-6aaf9bba2448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff27d4ed-c5a1-4451-9ab1-6fa948d50bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10174e39-140b-4694-ba2d-0db57154d330",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dffeb2-02a4-4759-ba85-711b1c109087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb90750-cd64-48cf-b748-d9ec7a5afb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3b320f-05ac-48cd-930b-9459c9a645e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3aa4de3-5113-4a6a-a872-080dae13c90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcd7fe1-1ba7-4184-97a8-5e056cf9a131",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d51083b-040b-413d-b927-202da4f674e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17db2709-71a9-4f86-9ad6-3ed8ff168cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabb5579-f922-47ad-8b7b-c5279dd71af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "51cb234e-6d74-4211-8639-ebc0f0fa1084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bbba51-9cb5-4e79-9888-95700def00e9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb402a9-8521-41e1-883e-badc84338197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a72e06-515f-4e6a-9e2b-a47257d03573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33e22fd-b75a-4aab-9120-189e95702c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbe9308-6f73-4e86-a300-9e2ed55bca84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88cc14e-29b5-4f83-8dee-b21cb075d9f3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f44bab-cb6a-486b-84d5-820773492f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34fd1e8-7e8f-45df-8201-27b9f5e879df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc03d401-1356-44d6-b2de-c8d3146656da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26b43dbf-7e8b-47a0-b754-2c635cd43670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a2994-4c9c-4710-9c6f-1ca1be23654d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "683bc68d-3470-46c1-8599-a9e2719fbd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a362244e-48d6-4176-9af7-db080f3e498c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1b9e76-dafa-46e0-9e1d-f0157fb49b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc990b0-7568-4235-acd9-2a7d2a7f84a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006b44bb-679b-4c58-af9d-21a57f19ec7b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3620ba2b-4577-467c-bf1d-fbf5a81195aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512a26e9-299a-4ef6-86b1-30be3bd75161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c733ce-e183-45ac-a959-c661aaf4f5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39cd492-ceb9-427a-8ea9-131e394a86d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3b2cb0-cf84-40dd-9b4d-ca5b1c559f71",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da41bb7-501a-474a-851f-3c202c1c69d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb70287c-dbfe-476b-98a0-788ba033ad41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fe293b-a435-4312-beba-ecb67087932c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74a9b825-be4c-4b2b-a787-c66863f04f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b3e541-6bff-4ad4-b289-f5efcba833ed",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb76972-a291-4965-896c-fa798114bcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410d08c1-f555-426d-bb98-e459cba7df6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939195da-5d05-43c6-9c51-9e0a1089dec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dce8f13-02fd-4f97-bd9d-714661d75640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7758a310-c6fd-492e-a531-6a332de5f172",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c7c5e2-e467-448e-8f8c-ae2812db7aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffdb4a6-ec0d-4f15-9a51-65582e130b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58911eb2-117b-475b-bf9a-0cebde368b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94813bb9-07e7-45e9-b595-abebd45ee29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7159fe7a-fc40-46a5-afbb-fe165d28a4c8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240ed056-beb8-400f-b226-045803c33448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110e8cde-a600-47c3-a009-3eee27934a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94e21e5-c6a1-4992-8f0a-e2ea84846b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1725f13-b129-497f-8bf1-61e56615c138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63363dbd-5249-4e9b-83bd-de3e86f3ef8d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159edbc5-3595-4bf4-b093-f11a9b48a3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d29272-3a72-4f06-8726-e00e4ca8cb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37633a8e-ba42-4f1e-83c3-1aa62b0eb80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "694ca492-bdef-486b-9740-0121fa86fdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dcabe0-9527-4476-89bd-cb0cf73d8b5b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55efe508-9ba0-4892-b890-c39644c2b727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35955079-7d6f-423d-81d6-8229c1db8fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ca9bd5-3746-4ca1-b7e2-af9210e12142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "573d77b3-3c5d-4425-8584-9ad99d1f98ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205729b6-634c-4e2c-b41c-c8be1f260150",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7343884-c76a-4eb8-967d-51c96b63b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f506fe29-d253-4c8a-b69d-040f7a11266f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa13e9f4-a266-4d97-adad-551a5c31216c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4c78c8-f31d-4da8-8fe0-c470a395fa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9602f1-fc6f-45bf-8e19-c91909bf371a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6670a9-96c2-43d0-a8c0-4e9933026acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50fd4afd-c950-42fc-b982-ef4ea96e493d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a5d796-cf3f-4af7-9c85-b9f8542e4fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b829da32-faa6-4256-aeb0-b5910831deb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be0e2a9-1f58-4d75-828b-3e1cd2c84e5f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb86cdc-640e-499c-a967-4433dd20d298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b5514c-0484-49ce-b58a-1f5d06719148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c4f46c-9fd8-4093-bee0-495bf8cc6ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bac4a0b8-4006-4f57-93f3-70bc2a2b32a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a83000-9a20-497c-8365-df144d61ab1b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c321105e-0e04-4852-b83b-f2daf560c57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce97dfaf-99bf-4db6-b073-412ab677ef9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1759692a-1331-4d1a-8e59-e26137955234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa431101-edce-4cad-b7d5-98ae83640f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddc979b-420f-41dc-b13e-0754dbecd0cd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9103694a-c5e5-454f-a6a7-9cc2e6ebcc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7c31bd-1ccd-49fd-84c8-53c1f4b6020f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ba2f8c-dd3d-45fd-8451-5d9c05ddfaf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "181d90f9-0126-4fae-8607-1f55bc86bdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a143c28-beab-4d48-8fec-1e68f1daa31e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13adee62-5dd6-4220-bc78-5de579cbf02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3103944c-a7e5-4f66-965f-8c7b716ff2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdfa9a92-7e9d-48f8-a258-5a4389149b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96407038-4d95-4581-84da-f4db7f99f0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2252fd3c-899e-4454-a561-c05a625e3621",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dad8c5b-eb71-47f8-9780-c064ac4bb00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e0b9d8-3000-4923-8c6b-24c26c6d3808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3330aed9-ed13-4b36-ae5a-3211213c59fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf542b2-4b78-451a-af5e-dc52065849f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37c3d0d-f480-4e4b-8b95-1d96e99df6dd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd519a4f-3f41-45f9-b1f7-468272cf4d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c674107-88d0-44c4-a165-8a50b84e943c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf057e4-4095-43aa-9ab4-e61868827067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a47570eb-0b42-480c-81b2-5a5659bcb127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53c2bba-95ac-483c-a22a-c87f22ae504e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41cc8fb-40cc-4b3a-a32f-0fd918749951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd60ad5-62cd-4750-9da7-0a70d44faf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ba3f83-7918-44d3-8f01-41015adc2c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2454ce8-2cf5-4473-872a-c2670780ef11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810df966-c7d4-4039-b960-753af9d80293",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91a21b7-70c5-4095-924c-5354abb3d36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1366f3e4-cfc4-4afe-9117-619f881a3b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faca88a-1440-4e3e-9fad-a4c568d281dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d07917c4-0569-4dc3-893f-bb4278437c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b441496b-6c6b-4bf3-9b5c-d0b6c665bea6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ad3946-27fa-4d31-90dd-cbe9eb198045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438a8ab6-6494-4208-806a-99feda000153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d963b7b-34ad-4ab5-b617-1e4f992439ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b61be0c5-c32a-4142-9e27-af2d1bd7e9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7207c3-eb79-4fcf-9f9f-e943473c62db",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427ac3e-b777-4151-ae1b-6727c219089e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a59820e5-304f-4b10-869a-62dbf74bedb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef0d46a-3f3e-4bac-9e9d-cd192a5683d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "268f6598-c7f6-4443-ac91-c4f762921add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2930694-6a6b-409b-9569-cd4a151ef4a1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc70aa1-c923-4f20-9ddc-e0378eb30774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6cf060-e9eb-45e8-8762-10144c3c0b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca128dc-85b3-4a65-8a8f-d2db6fba9384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8ce932-72bd-46fb-8ccf-f8f13e26eb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7a0697-0af3-4d21-94ae-8481252769e3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc8202e-8c2f-4c91-a1ed-1568183f576f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645f1593-c876-4f29-9cad-0e5b2283fea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4a0067-87ca-4665-9fb5-0376eb6b8095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a4f13d-132d-4dd2-863a-7a367986037e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfc0def-e5cc-47db-a3b2-0d7b3ea76df3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e564835b-ba2b-4d34-ba0f-91c4dd554982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61955068-5f56-4d2f-ae44-77aea3e2abcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f376db5-ac85-4814-9f66-46cefba99827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11d57438-a5a0-49ff-9574-c6edd6726dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd85dcdf-6296-43da-a874-4333855a267a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbdff04-ac6b-4bb0-a5df-02da77237d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd34c52e-5e91-4d34-b165-b1c341c632ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62978b8b-6550-44bb-8dae-17084ce1e33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "159e6075-8093-4a99-8bdc-4a98f3506f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f059b990-4602-4b50-979e-0acc418bd4e7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44132c21-e088-46e1-b9a6-371008f4c6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e7b87e-1c04-4d36-9ece-7d135194d5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b87b6f-111d-451b-8273-17021a93f46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd95c243-ba38-4c1d-99dd-d3f3e647a82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c926876-f304-4ff4-8053-72207d503130",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c19730-c901-40a6-9404-b16e47f8d63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86aaf307-d9fe-49c5-b508-ff18e9604167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0a1a87-1c35-4a5f-bcd4-3e875d40b544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "805829ce-4b2d-4fb2-b93c-b3f8b7034a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4061faf0-ba8f-49ac-9ec2-4f972957372c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f991a67-f210-4cd3-a085-942e87450438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4599b7-ff3d-46bd-bb1f-edecaf0ddf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b335cfb-a953-4c09-ba78-dcca9a9cd7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32128ac3-2ff8-4651-8396-915663cb7976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802c60e2-bdcd-4bf4-91a1-76e311e883c0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cb517f-a75a-41bb-b52c-813d8a7f6c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a0eefd-f3d0-48cd-9caa-59a5d3c7e547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9610ac2-fb73-42bf-a62f-3d1c6f8b7f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cedea8d4-d7ab-41d0-9096-39df9cc3da81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02798400-8932-4941-bbdf-38562d4fe436",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43faca71-931a-4ce9-bb07-11c3a4768b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871a4a6c-d9c5-4d13-a42c-17a41ef8dc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940de9a3-c732-4963-bcc9-6ccdb6703693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad8861e-1c0a-4719-be5e-b5548967cbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a2cbc-5c0c-477e-8a24-222be117374d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75d01ff-3462-45ef-a397-2b6571a57153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301f9e84-bddc-4e97-a8ea-83accc843065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be70b4cb-d081-4344-a258-cb91475b893f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e97eb7a8-6d75-47db-927c-634e0f7fdd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b918f55-46c7-498a-ad98-35c73f5e7089",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2509286-48bd-4235-bc79-edd40a5b81b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8eb842-37e5-4d16-9b31-6e171624ceba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b26d42-c19e-4a72-9c48-936cef2caa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d20a5031-4760-45d5-b17e-20993f250394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17be9723-5054-4983-9135-5b0dc14dcb13",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49903615-c440-4837-9f77-bdc6c8fb269c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b5db82-dcf9-496a-bb9b-76d73ed2c1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c83283-2db6-4765-a6cc-59f4ddc55968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e292421f-593e-48cc-9a36-8a2a30bc76d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f55e4e7-abd4-4007-a21a-321c92c1003d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7c0502-bce7-48f2-a42f-3d1d029250ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f7f83a-2bcd-4c11-bb32-f3aba4c40c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d4eca1-5cce-4b06-87f8-0a5932b7517e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2673838c-9e2e-4944-8ddc-7f37f504773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfe39cd-2949-4ed9-b293-0922a3c179cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f650532-09c9-4b3e-86c2-d33331cc2cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39526226-6e82-4649-b3ca-f0cefd40d36d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22da8e7-c24c-4d1a-893f-ba9791e5f2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f36eaa45-77e0-417c-9c91-beb5b63cd267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a50121e-5968-435b-8f83-22b4911b38e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d62490-bfee-454d-8e77-fb6ab3d8b1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a52160-88c9-4f61-9caf-5a4e1a4a77c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1546bf4e-1260-41f9-99eb-5a17e9ec9594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5afae6e-bf1c-4fb4-9c65-88d8f3ee7b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8c9165-1b83-4053-8d38-1e89a4d2c701",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb58ff6-428c-4e4d-a378-aef017a36733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c9e9a66-3fa4-4339-9066-8d13116d5307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ae7d58-3b76-4469-a6d3-9429f2869f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "87fbcca8-46f7-47bd-a1a1-4494caf25ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103a4665-4446-431c-9c54-b4f43b67bdcd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af373872-0751-49f5-82e6-393956f79634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91d0673-f0c3-49ef-8fa8-fc4f0311728e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c99a82b-b344-4d2f-ab54-a5deca298e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4765afe2-10fc-42c0-963a-6fb78ac09625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abcaba4-7f7c-45d9-b44f-7a58fbee99e0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7a4ea5-42f4-47b7-978e-4d6135fa6d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d92a679-84a9-4eb4-ae6e-e95efe16044c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522f20a1-021b-40d0-b2f5-e21e12963faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2cf823a-4355-4aea-b526-ace4ebb34038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f183ba-83bc-4886-9d7a-63b78e38b247",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786eef28-2ae9-4490-b255-3caf25c14f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db463a79-729c-4f19-aea8-544f4e432edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702ee7b2-97a8-4219-b0f7-937eb67efcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d48cc0-867e-482b-9ceb-d6301d689302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cde3e28-4b81-448c-8c9a-d16833dfd76d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da3e0c-34c5-4463-96df-bb0a62bcb0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d38269a-78f1-4815-be6b-fcf33eef1745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33538f9a-8905-4a4f-8509-2939dbc2ad95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c329b29-1fbd-480f-bfcb-1dd3aa707a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e890c09f-2815-455b-baf5-da47850f9d43",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ce20b0-c42f-4f18-b926-669435e208c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce7e8b0-d072-4f89-a5e6-78072e02e081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989a0b98-7c7a-433a-beae-60a01de47137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04ad6424-26cf-40a1-b7d6-34a8af5ba90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd9b17f-b9ed-400a-b583-b362ffa3a1a9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1210aa50-fa24-49ba-ad75-31c87cfee5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce14e28c-4c87-48a7-a7ab-42c80f788f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e2104e-b6ba-4b87-92b2-bd1669457190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5870951b-9324-4380-a17f-f063a84e02a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402f4dac-6141-425e-bbf7-fb77e83c2ba3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f8edab-fd3d-46ca-8079-bebda4cf52a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afd1251-0fba-4acb-b2c6-d0615cba2636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc89032-2197-4644-a541-b0da47612f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aea87041-0f73-472e-bc64-98bec43f3e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393577c7-2d26-4c8a-ae0a-0ab8c2f583dc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df250f9c-790d-4e79-ad4d-9537774af808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf428109-932a-4bbb-905a-28bfe5bbbe43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5c2fa3-c169-4a42-a626-c55698eb75b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bd88a9-9a6b-457a-97c5-ff9589a132f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0db2a87-41b8-43c0-9739-a8967acaad0f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75b7e42-6db5-4230-9e47-0de5ca038d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f19347-d89c-42c8-a0ea-502800906290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d7731f-04fd-4a8a-b4a8-4e0fc4186d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d30dc7c-c7aa-4a8c-b892-a0871008053a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74459d18-7f83-4f4a-8a31-a753cafbded6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fab9ce-c87c-4259-acca-04c47aae659f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5e5d72-19aa-4f82-b944-5af70128b0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f9f5c6-81ea-46a5-9342-65848879df0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8a6a87-26b4-4d29-a074-b41daf8bdc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7418f671-e3d5-4e3a-9831-aa8318ddc2b4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a3eeb3-21fe-4112-80ea-46da3572edbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749ea0a1-377a-42de-a03b-ace0484d1f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ac5fb1-727a-46c5-a266-ff9da28aa23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b0302a-4069-4caa-9635-0a6c0f19b36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0cb2e2-b13c-4e2e-b1ad-0cb4eac8bbc3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b4e08b-38be-483f-9d34-80816c83eb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be411d8a-a1bf-48b4-a7cc-d970a967d4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37895b78-1a2f-49ad-bcae-bf54f565ba91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f3d4f1-0a20-4268-afd4-8cf5158c9531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559f5831-c068-4401-a970-1209d4163d11",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79350aec-5276-4889-8378-bbeccb752aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39ac8ba-d9e5-4842-ad85-0f17f5b12633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5013feb7-8145-4c57-93f7-0ce754fa075e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83359588-8ec7-414e-8c9a-d051072cc886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c7bf0f-5f73-4d91-8566-743d98d4205e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5accf39a-b24d-4bd9-a2de-d0e0aca97caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de0712e-4b0e-40b9-8585-e46d04643c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8518e0-a86f-42a9-aaeb-2a0d23fd15a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02f21f1-3cbf-43dd-bad3-7b96fde3ab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4968e7-ce89-4d0c-99f4-dd1503d7a811",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b238b995-c4c8-44b3-8d7e-f850bd911009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59657f5a-be0b-43da-aa5e-96eb8f04c986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07e2d08-0b33-4f77-8f14-48d7e3bf9b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b658236c-3704-4dbb-bf76-ee6a9d1f6672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cbc42f-aa70-476e-89dd-f4a10f311996",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022e3ee4-7dfa-47d0-b0f4-ec590ba82d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4cd1ae-8b39-4aac-a24e-97673f3895c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a38b28b-98d7-4b66-9dcf-bd7ec6c4b683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11de363e-1576-418b-a03c-aa8fe59d54a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e22f71-7bf8-4193-b14f-1094463a5dd1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4868f259-eee9-447b-82bd-670264d38d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99839eb-a9a5-4081-9f07-423f0e313196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea27392-55aa-43aa-a414-6f6fa25815ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f67da60-d7b6-4195-b0ee-2a4be60e4d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac90346-0418-47ae-bfee-2b5897dd2632",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1e35ae-f6c7-472a-b0fa-28d45fcdad85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dab272c-9f6b-4391-8850-ca2fd2763936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7bce14-0615-4e63-9a8f-859b1c9cdf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cceedf6-77c2-4568-a811-8fc1839f4061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f4ff36-5cd2-4297-9342-7e29f3b84b28",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85802676-6b4d-4e53-ae56-8878d82e0111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c867f5e0-2733-434e-aff0-40b3804e76eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606466a1-b87b-4ae9-b49c-6de364f25939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c835222b-8c77-4c71-87b3-fdfefe41c1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeb0b41-9816-47ca-9ef5-01ffb7823f78",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb91699-c071-4b95-a576-7499cad234bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e385b2f0-cac2-4ea2-8964-b65facc407f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b229ef2-f314-4746-afa6-70709cb47d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e327ba-3bd5-45aa-87da-cccd99af1fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe076311-6a60-4758-87c4-b68bf0049662",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15896c96-93aa-486e-924c-bec16a42a0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e03fd0-228e-4799-9ba1-9b89ee413503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c35821e-be6c-462d-9c3c-9ee170fb4a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5878106f-602e-4801-bba3-28271673c4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6115d527-e276-40b3-b7eb-b084c2d879c9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d0d048-60b5-4aed-bb8c-193e0c480363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5e2cba-6a6a-4462-a1ac-af3d99f2b3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f218c1-b93e-4883-af47-bc0f2c4e528d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3cde3b6-db2c-4976-bc4f-c4039aa3f6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fa8eea-e4f2-4f39-9692-d9d89864ca58",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab275f40-79b4-4e34-acec-9d14ad8e25c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51999483-0cbf-4fbe-8825-9f43717b2a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8f95d1-44b3-4911-8707-9cd8631261ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa696f3-11fb-496b-844b-32f1a376df83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32416511-b519-4c62-ade4-f26c87ee2b0c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cc6408-b507-456b-862d-c2d09a74fd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1cd792-6636-4504-9b5d-7c54a76060ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a06dc4-26f4-4801-955a-4af1bb155e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4422912a-db31-46b2-a9a4-61486a43ef1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46f0f1d-569a-4596-a409-d7eac667eb9e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca26452d-f8da-4e6b-a05c-815f738152fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d14a84-6885-45b9-8327-4ee53ff9b1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d51acb2-d580-4c0c-8688-e8e9bd85a8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1753830-e6a1-4991-beef-a61806fb29a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efa1cd2-b447-4bce-a86a-451d5a8cffa6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928edbcd-fdd1-4730-8a45-1a392e807b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed0ff25-66b0-4754-baa6-569e1be9ecb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3e4591-0dcf-4abb-849d-4dc9544ab90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "de1ac4af-aec9-4b48-9f19-405afe5006db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf07b354-6cb5-441e-b336-ad7410a38bf7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187290e1-1086-43c9-87fb-0a7653972e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84034f8a-660a-41af-b436-f058ebfc9231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0448ee-05fd-464b-92ac-2e17d54df2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5286ba-7692-4843-953c-39b8b284faef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d67a73-f712-4570-b76a-f310e2c729f5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9460b10a-a7de-42aa-9224-c9dc39ebc705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab88c99-cafd-4444-b934-82e68b277171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab19237e-99b5-4f83-bd85-a1dee0a32831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60f5176e-696b-45b0-83f8-cbc91246c5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b990f2-a394-47d0-8719-10c4c62b63ad",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b845706-0de4-47c7-94a2-84b3b454fcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42705beb-36d7-4f10-928c-6a91a36d904a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7cca864-583b-4076-ac3e-167923fc4f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f75630a-4bce-4d60-b9ed-296e6e81ec8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2274a99-f417-4794-8803-28fec6e6bf28",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352565ab-abc4-4b92-bf0a-189b83e42439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "407447ff-0c2b-458e-be9c-7db4938ac682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711fa2e2-9436-4ad7-b958-cd9bba8584f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d384c4-b94a-480a-938f-5aea8575f49c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e230fb04-b930-48b3-ba53-ab58d10e9af1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b5f0779-f112-4d86-8d53-f172e833ab6c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dc49c6-8e4e-44b8-ba25-49d3da9f4271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f380da0-e224-4096-907a-280d5756f538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db4bad4-3f85-4f92-a4af-0324889d2e79",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5da7b066-bf56-41cd-8b56-6207edba1537"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5831506-f0a9-4856-9da9-9edc396f5e8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f741597e-76c7-4d00-af9e-0e5e96a74297"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4bc0b32-d69b-45cc-b2ac-e88164f834b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71b09ec2-7eb2-4122-b0ca-ac067f952f64"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd47eae2-14cf-4ac1-b360-766243ea92ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9825a51-2a33-4bdc-8ddb-621d601f95b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bf23144b-88e9-410e-b010-9b8c032c1023",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2ff2c4a-cb28-4add-9005-6b4debdd6367"
                }
              }
            ]
          },
          {
            "id": "c329fcd6-07b0-4175-883a-8484e924f168",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a671a20-deff-4580-9f92-3e604e2a1d2f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "0619ff06-7f23-4b0a-a426-6997f57434ec",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632d4e8d-7cac-4439-8417-0d0daae8b5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1fe8825d-e4d0-4178-a6f5-b2f856d6b685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ba35ca-6deb-484f-ae48-fcfdbb6a65dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6814fa23-ea03-4f46-afcf-95fcdd64afae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e461ad92-4520-471b-aca0-ac0e4b23dc66",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9482cfe0-78d8-4b12-9bbb-7d6355b446a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17a3d268-75e8-4a35-80bb-561463292b20"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b56c4bcf-1128-4919-b96f-6e8d42ffd2cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b2df98ee-dcd4-4876-9cb5-7df2b3c60760"
                    }
                  }
                ]
              },
              {
                "id": "c0295e54-4438-495c-b076-83fdcfa704cc",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f114f36d-c285-4a03-9b14-9d7911617245",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8abe6bf5-247c-42dc-a3eb-4f8d0433c75a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92e4a034-c1df-403c-ba4f-4b35c1c0bccc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f828fb2a-3eb8-44b5-a0ed-06438a2b9218"
                    }
                  }
                ]
              },
              {
                "id": "31379a23-d092-4859-b3b2-d7d546c9adb7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28d5c2f4-0ecd-4251-8806-04bc589f476b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94bd68ce-4e28-4628-a098-c0c02edc16e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "813fdf04-9121-4bbf-b342-586ccdab769f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cf48f74-f255-4f7d-8845-7b730a6f7058"
                    }
                  }
                ]
              },
              {
                "id": "6c7c42ef-f8f4-422e-8934-4e0bb03458e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a12c1bce-c76d-4e36-855f-df95e7f4dd7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f81d1255-f201-4e2d-af3b-56eaa5ec0a65"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78727302-0510-4a9f-befe-2c42fef89255",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "db9d15e2-b93b-409d-ac67-218719e084dc"
                    }
                  }
                ]
              },
              {
                "id": "9e6f0228-8822-43b0-8b82-2d8f693e6b92",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27c1362-8a8b-4411-b656-238542f8c867",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cb20d45-f3d8-4d60-9eed-a38c5a70df40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31b4c1c0-34a9-401c-b198-97ba79b4bf92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "da323294-87e2-4459-947a-dcff885446d9"
                    }
                  }
                ]
              },
              {
                "id": "5c37b0ac-ce9e-4cdb-a65b-439afaeb6d00",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a7c5282-bffe-4605-8a95-5092fd5f0b08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38b82ad4-8bf3-491a-8389-3f6c3d5e55bb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ee49a41-79d1-4839-9c0f-13fa3551dcd7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7a7d3b78-ba10-4fb7-80bc-e6488795af64"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe564ed5-96a2-4680-943f-fac4d758086b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcd9335e-fd61-4491-b743-ab9885fa4542"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a6e69042-1b8b-4d47-ad89-bf13aac9b798",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e422baa0-2ed1-4f52-8ed5-e41505b488dc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "263cbeba-1e1b-4308-9a61-1b03d780f30c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "31743e64-9e5d-4afd-b997-00e3b9d88109"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e764f3cf-60c8-4c97-b664-3871bb5f6170",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb005f0d-fb77-46a0-8738-da40e91d0b66"
            }
          }
        ]
      },
      {
        "id": "5a01b60c-9bd3-4940-997e-ec2b1f6251ec",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d5b622e2-c390-4e3a-8458-0eb7588bc732",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67970f75-af3c-4522-985e-733a8b274ad9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60b351d0-4900-44dd-8840-ad82cc0be71c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8efda1-f02b-460a-bf40-5ff8bfc0e0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a6d568-4d67-4737-8c70-396e14c7506a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6620e3af-18a4-427c-95c6-27eb79deda6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5da68a9e-3d24-46b6-8103-f6f98b4a59df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bdbd1f-fc86-4b02-86d0-2a803801dd54",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c538c9-3e09-4da4-a262-a866a659b98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2ce7be9-611e-48e0-9f8c-2c0b8a70f1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613a0314-96c5-4fa9-b29f-124d2b8d565b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ecfda8-2728-4f2a-b281-c8a9c5965484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cba2121-5203-4c66-8eb9-d215cba7779f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f03a69c-9a9c-4602-80bf-905218aee63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fccf95a-fbd5-4fb3-a81f-358807f0723a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85caa359-f2c9-4581-bde6-84d6f73dfdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9b675d-1d3b-44c9-9e20-e5e25b686095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6e1185-bc7e-44d1-9536-b6d33eefd174",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db08fa95-11c0-4635-98de-f1a74d699dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cec0e06-9831-44bf-af0b-a735c1a054c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43f9798-f25e-4906-9fbf-4b9d05a1d5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1246bf4d-064c-4e04-9d6b-9c40457f1c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42441299-c41d-4348-8dea-1eaea23d4c2a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fafa03-19b4-40ce-a34d-9363012e3670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0816e4b5-42f8-408f-9a2e-b74027cc8100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450cf430-3f05-4221-8a73-5abf849322bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "acfdaea4-2dcb-4690-932d-b0e48d77ccac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6563bf-9a28-43ed-a330-4fefb0db7a3d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d619c38a-703a-40bf-a7b8-5bb1813748b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4f23a7-18bc-4926-aaab-c0861c5e87f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23e433d-6512-4a82-bca0-a407331456b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f94032d-e192-42ea-af72-11eb509015a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8be536d-f4da-4629-a6ec-c94bb1207ac5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f035efb-4ae7-45c9-89d5-b37bb8a05343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68443e6-cd5d-4212-a857-86df701ffc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e842120d-4bd2-4a99-9611-919a31bef415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcca375-f812-46f3-8310-4408b638b2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88194e26-a0e5-4180-ab24-774230cbf2cf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b4e927-bc8b-40ab-8051-d24bc2bd5959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030645c6-25b8-4f14-bb06-876c4b33e316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70cc5b7-6edf-4891-a7ce-50118e4f38dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0727082-d32e-42e9-9c6d-f182bea68104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be05082-5a1c-434c-b029-cb616d3378fb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe20e1df-78c0-48c0-b5b1-7d3fce793c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74a605c4-3591-482e-aa25-845035b7af89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb337c5d-098e-4ed2-9b3d-83dc5502169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3c8c6d-efe6-40dc-90cb-ed8d462147a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576d6212-6c2a-47ae-816d-44408339c87a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0085e1-977a-45b2-a516-a1d7a1f26b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f9a550-4028-4c82-9492-c9ad49f4064d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae236c1-505e-4ac2-8e5c-ce89587b3bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6de2d596-5011-4c5b-9b0b-091ede05c69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1fe9d0-2323-40c9-9554-af9d9d4af0e4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e95cb91-bd36-42b8-8afa-01536a719991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b6ed20-82c9-4d4a-8e05-e572c550e734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2a9665-383f-42ee-a478-109229fc3ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "914afb78-b47d-43cf-ada5-8edc14d8368c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bf1d08-4eca-4408-9c8d-b7a2ee8a82f7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf157cb-54e3-42bd-bf32-d53e5c64fbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c5a076-ae16-4565-a6b0-7fe86029e184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215d17e4-bc8f-4ee6-8678-49a7477294c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e95496d7-68f3-425d-b8ca-4da386666a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef464e0-460c-4929-bf21-3f802b478042",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021130e0-847f-4d97-966f-3d8e57c4e04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73a1ad5-6b26-4b99-bc8b-700fbd8b0b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11123755-787b-4f45-ab11-51fab695def3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3928eee8-1826-48e3-8dba-c0f7ec26a8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31e3037-74b3-4e4b-a105-63ef5da6fd73",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51333d5f-fe2e-4023-a0a2-aabf32d42fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3bbeffb-23e3-45bd-9ecc-d8f3729be1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45be2ab0-a137-4338-8477-01365626864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "18eedc0b-3f16-4f45-98c7-178de1d5390a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400fc652-9e6e-4067-b36b-d2edef2e71e9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17eb3223-ce9d-408a-bd58-cb588d626591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696ea790-29cb-4887-9632-abdb76492bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b560e5f-67e9-4a31-9811-1a1e0a5711b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dec4ee9c-e5c2-436a-b454-314da72b90df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aab9e02-9c87-4b45-a837-0568695f48f5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7756df-5641-4dee-9083-c147fa91f5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbcea22-73bf-41a5-999d-4404dd9bc185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6701c8b6-b265-476b-9eee-03ce0d4d6920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "653a87e6-f543-4d81-9258-cb9c5bc80b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23df624b-ba98-41dd-bda9-f24f18774897",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff9a3c9-2c1b-4b4a-bb9e-9d4c01f734b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d553607-df61-4a29-8b41-257f63f08856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb49a53f-6804-41f9-8736-542ab60ba0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e983093f-df0a-4158-bb9c-4df054136072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eac0499-0104-4232-b9fb-ce6d70760889",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc17403d-2d76-449a-81fa-f84c4da1f62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8f7054-038c-4559-b9da-4cfea3b09b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe1e7e6-7697-4d6b-ac28-6c8a6cd77dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c170a68-12a5-49e4-aa17-a3ec9a218ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06967d2-1550-47ae-8fa9-4b4361fc23d8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2937895-3511-4e5c-9401-f745dfdb231c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a2c277-72e2-4113-bf42-a8e08019639d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265d8a5a-31c1-4946-9be4-7b796671851d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "606f75d5-8538-459f-9df9-b96ad8a81180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059a191e-f1c8-4be7-a1a8-25d5b11987f5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa95b3c9-5418-4a91-bc6a-e8a30ffda5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3734d50f-3661-4ffe-b81b-4c5c5a4f3ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79287668-a6cf-4e9b-a068-35ed4b8e3847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "934a8a33-ad61-465b-bff6-0f1d6d712a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff7830e-6da0-4013-8378-03e3679c04d0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ce2928-ff53-484c-b283-d0d78722acb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f041a0d5-9e6b-4eeb-b911-7b3956711242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b868008b-a1b5-4fec-993c-15e84978f6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f76ea11-1f70-4894-b194-1b2b820b570c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f321ec5-9ff3-49f0-8875-e48d20a0470a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0983eec-3ed9-42b4-860e-6d669f381183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea23856-ab3d-4f6f-a39f-517d50260113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f231a289-3042-4367-99bb-e4ebcd8cde62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8da5db-4d1f-4b3a-ab68-4e7dcb5fbd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86349c0d-8735-4954-bf5c-8f7deb40da0d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69c4947-f4b9-4718-af6b-50d9535600ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae24adb-4fe4-44ff-86d0-6caa83c6f9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42424cea-b1f9-4494-b142-74edbfbdf14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "820ffef2-c703-498e-bd49-b8f921ff7f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b128caf-824d-4fa3-accd-0ad88a1bfaba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b6d783-ec50-465a-a790-aebfe2cb100a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89075d9d-396d-4007-a729-5493cac839ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b0c72a-da99-4121-ac4e-ceb6b5f27950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8264c896-eb44-4c5f-b6ea-9b29b8f5ae6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386bf280-eaa5-442a-b365-ffb03868837d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4543ee46-6834-486b-91ae-5e622082edee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000b2793-43f4-48cb-96fd-bbbbc44e43a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6209838-24db-4f63-920d-330c0d38603c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3db3b6a-7bff-431f-8bc4-c277910b3063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbd7c2a-c45f-45a6-b905-b172a3d1b283",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66c964f-fd8b-4bc8-a05f-b7ba6cf19710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6285613-f15c-4c23-a9bf-2cc0c65dba2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826a420b-dcc0-43b0-923e-64f64fc3e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe03dff1-7552-4935-b262-92fe4be0f26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0b61f2-d34e-4184-b44b-3e0b8861eead",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9714bfe5-134e-4ad3-9c5f-a45591896e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4c08cc-9169-4392-9570-13e239b026c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52d3f13-b553-4838-80f8-8f433625f2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8918e5-efd5-4098-af0e-fbd34a897d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f70fea-f0aa-4484-8864-32d06354082b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e080e8cd-b28c-4405-bd53-3bbe759951a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940d26ca-6d3e-4416-8554-3398a7bbdd38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e94ec80-1b72-45ae-992b-5be7315c7114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9c2c75-5b58-454d-89ec-04755719767c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feab8114-c724-4e99-b19c-573e2aacbdae",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598871ab-e6b5-4e92-a7d4-25d54abcb800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f480d1dd-4d4a-436c-b1a6-b388ae2a21e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba78622-b058-4e63-be44-6244f37d2acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56676f4-8cf5-4505-82f7-1113b626fa81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f2076c-d8d0-4754-8c9e-fc4049bb9f45",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9589c3df-11d7-45c2-9b1a-5d1d2dd1ed6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b177de-3263-423e-ba87-2db70ff0e03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32421ef5-439c-446a-abb3-8b2424d0747e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff9f2d4-bcdb-4776-9402-62fc9d22279f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce269bd9-1106-4b41-9c90-3f9d665043ff",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77066f4f-fbad-416c-a270-8f753e2e23fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d164ed-b4ff-4c68-9b13-4e8db19c5292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb54528-cc41-440d-ab37-b01ff51c30da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae653e8-b099-4bcb-9208-eb5beb19ab1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8147c79a-5e6e-41ce-8e79-255273c9e6cc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f5a0dc-abff-4ee4-ad0b-737a20cde925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b029efb-8557-4f23-aeb8-f7c829def15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fd469e-0c8e-4181-99e9-126a39881786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d97f2c33-3750-4700-85f4-72da6a479e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6ae658-36f3-4962-86ae-6bab4ea59d07",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db5d29d-4e6e-4ac0-ae0c-dcceb60b6760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de31fadf-f2d6-47a6-877d-5ebbad6383db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2ea958-2d2d-4d44-817c-bf74942c7a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a01e81f3-f0c4-4a88-a259-1e5ddd89d796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb370da6-cf3f-40fc-945c-44fac8dc09d6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b9e2b3-f713-442e-aae5-0b3948c5c8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a05f4a5-3648-491f-bae2-1073ed29121c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61e6159-88f5-4ada-91c1-4962b4dac497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4f5a81-1687-4ca0-9547-3963e480fdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5a3db5-4e95-437a-99e0-c3f8fc0f241b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822682a9-723c-4f4d-bad9-2db76131ab65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6f6c1c-5a5f-4edc-82d2-a89d5b9ee208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0728b98b-8bbc-4eed-b1ef-a6f9a5407d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69ec3fb0-894f-46f9-a55d-35b3c14c5f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9b4ca0-78a5-4bb6-8be4-6d1a23402edd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d4c6fe-a772-42c8-97f2-43362f81560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eabff0f0-3758-49d5-b3bd-3e65ac58d732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558fa195-0fdb-481b-8bbd-c14460ed77d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05b46b5e-3c34-449b-9d0b-95e65349c614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908704b8-9bb6-4f69-b633-61cc97f5ce74",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0a0b75-225d-40bd-8965-b7a4cfdcfd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43780af-817d-46b3-a890-58932adb9838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569b5cec-7b73-4a96-bbf5-9a2417de7d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "819b89ac-a9a4-43be-88b3-2bd704d95ae5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a90c7f34-c39f-4a29-9ff3-caafdd7748ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "377b4585-7df1-43ef-8fbe-85871b4fa234",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c86e10-6056-4e97-9db9-2d32826840bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c6f5e0-2afe-4ed4-a3d5-d13e9b9ce298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50536771-f67e-41a8-8dc1-4c8fbd9481c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1e89e45-ba0a-431d-8273-c5e2402e53a8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bef17d91-102a-4a80-a841-8a631640e18d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccf62adb-d68f-45d1-a431-7a7f1f89c460"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe64411-a703-4285-a1ee-154f54047077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ed3a3bb-d686-400c-bbe9-f86c4d26fe7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c04b115-c0f2-450f-bf92-797fe69df097",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec49a4c7-e678-4c72-9e24-a1f31d0c0f38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1534f935-d7fa-45da-a74d-8c1da8b709e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ad3ea2a-8318-4cc5-a07b-cf12f9cc4189"
            }
          }
        ]
      },
      {
        "id": "941b7ecf-bd42-4122-9e7c-46e44c27a5b9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a3a0fa0a-0189-4a4c-b80f-d48d2dd4802c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe96c47b-1417-4c7b-a9b3-04ebc8550e0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2de7d1af-28a4-42fd-ad11-a5d23449108f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224df387-5b30-4791-ae0f-74b5a8688c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b93e6e3-96c0-4889-bf9c-2a470e108323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6917cf8e-c95d-4e79-8127-7bd003c3e411",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b680b063-d46b-4482-a972-3d96e1542b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe9f697-d61e-47ea-964f-8b0d8c6b0af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08d6df4-64f7-4a21-93c5-a8b259e63607",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed96f341-8ece-43df-b391-afbe8b919b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842a0897-c0e7-45b2-a766-730f0ae18396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984f6707-94fe-4109-8497-64f5293e37d1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28362aa8-d1aa-4e46-823b-0c4dfc7e0f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bc2de8-a322-4864-b47c-16afd99ef24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a5deef-7f25-48f3-a29f-cc8ff69d3cc3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92671b99-471b-48b0-a724-91f0d6adb275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074be054-f73c-4faf-8773-a11433c69269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ad3261-793a-49de-a6df-41e4f508ce22",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db26754d-6fdc-44ee-b6d0-b63fd32319f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5098e5a2-a289-485b-bad1-040aa206afca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c891c1bb-6c52-4e03-9030-097f3e9a815e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ccb502-a0ab-44d8-9ed5-e6665c30c225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c13c06-2055-492a-aa3d-e41af003fe7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae05bba-877e-40fd-9a28-32ee621cb637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e84b859-69f7-478d-98b8-2cb94fce90f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fc2b39-2d2d-474b-aaee-43f2205ba5b8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fc93f7-2a76-4c0b-b76c-61161d05850d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b96ed60-63d0-49f5-8af0-186226db116f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669ab4b5-c6e0-423c-852b-be466b2dd897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d753d77d-3b4a-4e2c-a61b-5e711d3235a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b383ef-4de5-43aa-96bb-a8a31efb97da",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1354d793-20d3-4858-b234-71d8e2e52194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b407e1c4-9f38-4619-abf4-aac4bc211949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf73cc5-b97d-4a9a-8a96-048afe94369d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd2b1a9-ade6-4cd3-9c33-ae877a56cd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526c9125-0263-47dc-a095-3cdc4262fc5e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dedc6f-80d4-43cc-b9a1-a1306496d9e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "754d7f03-60bc-466c-ad45-8c9da3c36209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c1f7a-843f-4a19-a6c9-615c11e0f762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac712e67-c28d-4032-8e2d-441208802644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9841d9-4c60-4d01-a9f5-c8188b33d970",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed1cd19-113a-4f08-916e-9b9c35aaab79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f28c15f-6ff8-4035-aa68-22ba981908e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c953e3d1-57e9-407c-95f9-5a99a7d5f929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4920bb57-9712-49a3-9eb5-491bfbc126e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdeae42-ae0b-4382-82de-83327ed40978",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924b28c7-a458-48a1-9769-1a6653372077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b13bb1-d839-439d-9be7-64280b8b1851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ed1214-3dce-4daf-92d0-96946b0a25d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5c1dc7-d4a0-4078-8977-788b3863a7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e0873b-8623-4fe9-b768-3d00c53eaca5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b3a3aa-b633-4d1e-8394-4a0900843142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c1468a-d151-4b63-8204-fa9d3d75be36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2679fb-c9e1-4c15-b52c-a7b2a02719ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034ac1e3-8423-4372-913a-7ccfc1a977fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937a1feb-f5bd-4001-8b91-2e13afec2a01",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2815f6ab-a686-4334-9460-e54f732e44ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50c40066-2bcd-4e16-bf31-276aae643f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f75da1a-bacc-4498-928b-de3821ea392f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e4e3a8-23bb-4fac-90b7-bdae5fd126f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d984fc7e-d3a3-41f0-8341-8be6df2b845a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7af11b7-cbf6-45ea-b39c-ceab84bf8eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be6ce197-e12d-493a-9593-c38b1a058b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c7b8f8-f109-426b-aef3-1f6484bc80f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63ce118-a4e8-4efb-90fe-d3df5b0a8835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77598220-43b9-426d-b2d1-dcc05e78a0bf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49457ba7-9dc1-433b-9e55-7b3c3259c778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97d08404-667c-459a-bdcf-1255e3b6d7cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7c0355-8dd9-4904-bd01-880257e1caa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1569b0a1-833d-4510-b0f7-3f9692bbfb64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6784e9-9a94-45d5-9dbb-261b13543516",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efe85a6-5811-49e3-aeba-13afbb3907cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e396b54-ba53-44b9-a6b5-0a9a58bc9579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec739e08-7125-43ba-b086-f6263584bf13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff66ed8-29e3-4cf2-b7f8-7a93d7a483eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a874be42-f259-42d1-9d29-7961cca69b58",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eb32c6-11c6-4a2b-893f-629ea60f85e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05197675-7bae-4f56-8188-ed58294e6b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f0c4f8-0ad1-45ee-9ece-667bcdbf30cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc4cd2f0-ef87-44e7-8ba6-19fe079e6864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584a5800-f3a1-41e5-90fe-fd68e83441ba",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb105dd-170e-4624-afaa-1a0d143556f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c086cbe7-ee02-4e10-857e-65ae05fce7f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa539614-2827-448c-b47a-60053fdd56b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bced06d5-9f88-4c19-b30c-9d5cb337fa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e255e5-0829-4830-853d-92ea993fb70b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f64084-dc33-458c-be59-89a7b4e09a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70aa30e-b3cb-455c-9e56-94785168ea45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0d9020-479b-4b0d-a36b-afeacdf12efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27b75ab-a0e1-4e07-8139-3029a0866624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8d73d2-a702-4870-8bb5-526880fe02a7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae15026e-a1a3-422b-9f42-290c4c0411a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a447bcb4-cba1-4f82-8040-02c2e72c426a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790374b6-e986-462a-b60e-a0bce49cf769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69239130-cd7d-4a05-a187-ce74d4bb3ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9697f20f-7cb2-4688-a678-c0f781752803",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f3920e-654e-49b2-99c6-dbdda745e98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b805b05-7cc5-4a37-968d-bf1defe65e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbc331c-aeba-4c13-a66d-b0e41aa07e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfbb85a-2376-4c82-bb7c-9fa111cffd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1882b522-66fe-48d6-8e89-1d5c2b965cce",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6da394c-bdd6-4f31-b5ca-eeac67879a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfafae1-1236-4a51-8ba4-2f2179a6d5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a35331d-3cdd-454e-b45c-59eb6c86cdc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64955d75-8840-4eb2-a5b7-a159e1105741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4764b7-abb6-4ed3-b7cb-8b3b2f394a2a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee229dd-5db3-4da1-8cfe-b3fc1529c806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e69d5309-9a7f-40c7-b0a7-9ecbff773190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac3a90-4c1a-4445-9eaa-1b63d6bba7ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce28d340-fa6f-444d-af59-831bb06aef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2334cd-e222-498b-a01d-2f495ecdb773",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd418c50-cefe-4667-9982-71c9d2f507c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac489ffa-75c0-4a93-913f-671461e35db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6daae7-3377-483b-a0db-2ed832432a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9793aa4-3859-40ff-8020-2c6da3a65e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e88493-9e67-45cf-bd0b-11721861e622",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39a4638-cb17-4cf6-9763-5bae16f62ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae6636c-a723-41f5-9f4e-bddc3dc244df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc949d7a-2091-4c6b-b27b-be1ff7cde0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16594e77-d649-4078-a057-1ce11cc0c314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299ae5de-fbae-4cc8-bebe-ec7f8ebffef6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911704cc-8fd4-4061-95df-a021f1bdd4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df2c0bd-d820-45e9-a46e-48e6a469dc8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9c280e-68ff-440d-adaa-3c7ea3144f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da2b3bc-6ebf-400e-98b7-25379fea5265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6c2ac1-6245-45a4-a875-16fd675b4923",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ad4a3e-fe1e-4b76-a793-e82ad4f2bcdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fe93c8-5c67-4b4b-802b-6142187c7196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375f68e9-77b3-4d5a-a8d0-4f37d3ab1e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9f0ef4-c907-4800-ae60-2b8f0aff9a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9510ad-e06e-4203-8ba7-0ba87a83b21e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bce68d9-3959-4392-a7d0-3a39b1ac311c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "388d9655-e92a-47ba-86c3-b1dc6948ce00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb659811-9fa4-43a0-b25c-77e514dbc2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e589df-1098-4878-96f3-d4fba6cdae8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38639d2-9a29-427b-a38a-027db608e8f0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8176da62-3606-4b60-bfa2-b8ce13881b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570491f6-4ae4-4099-a0f1-dbf59be3058b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa09359c-3832-4599-81bd-97d82a013659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596dac50-f4a8-4477-9add-be0c4055d93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141c44b0-a8d2-40b6-8751-55216fa8c489",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb9d901-57ad-4d95-9801-a1dcf810c2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f721f1b5-8b0a-4b19-bfd7-5327f19ba00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8409dc21-b790-4433-bf9e-f857f2623ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03908969-4ae8-4e82-866d-d010a188b266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de37ffc9-bbfe-44c2-813a-1772abff49e9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c8c6da-23e5-4f2c-84e9-48ba37ec4e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d576e91-3e58-4071-82eb-fe725be52ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd9f809-d536-4503-a4c7-c9175dc76dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825c9410-445c-4b1e-8556-d1bc3ed88e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3668bc45-24b2-4d7a-9556-acb566085526",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4ca2cc-b524-4a45-9d98-f15e1764fd02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567c4298-855a-4d5f-acf0-7432f0b53871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfae230-8a5c-42a6-8f5f-7473259dc238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0283880-65c2-44bf-abe5-8cb3510ea0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09998c43-e11b-41fe-b6a2-5b938ef8293a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64eef051-c69f-41ee-936f-3a565dd7ced8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c0106f2-3be1-4699-ba63-af6e3bccedee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d64148f-3f7d-4bcd-bce3-bee14587b8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea1fd70-10a3-4da8-9881-88a27af5496e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b7c596-d012-42c2-a3de-747867410607",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c6e9f0-6848-4dd2-b02c-7a8fa85185a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72543a7e-b118-48be-8c5e-50bbc24eab8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a7b634-e598-48e3-92c8-12c538026e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc06103b-a047-4ef7-a248-848ea9528da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907bdbea-2817-455e-9d9a-eb8624a21f8a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1c64aa-a24d-4814-bbe9-19e95f01c5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b264664-a9c8-43d6-80f4-5ff830f28f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a15f4e-d9e7-404b-9e12-f675349ea170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397e07b6-fafe-4939-99ce-c3b976bf7d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2d36ce-5af7-470d-b2cc-cd74d61e56c1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7059b72-beec-47ca-b715-a949deaf024e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa22f6b-2aa8-44d2-aa5f-eb95a05f5196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "114bd10e-99e7-40b5-be72-ef7d9f6a90a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5140aa-9ead-4519-90bf-b900b2c4e5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6f7b3a-ad8e-4adb-9419-0d7fbb07dd1d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f9b544-3393-4fd1-955d-ac7ece57c0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c115f3-8982-456a-8020-6c4816f78936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1714aff3-8268-4636-9f5b-576d422c4d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4478935-7e63-4db1-835e-c8f1b12ed425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524c5b45-75ca-49c6-be36-90927af9b2b9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3171d07a-42b8-4ac0-a401-56e212279443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5894fa5c-4259-4c15-a662-7cb1414078ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b745eee3-547c-43ed-9c6e-d6697a2886e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f576cc4b-72fc-47c1-b0fe-149ecfef5073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5285b52a-20a4-4300-817d-9e57fca92d34",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941a4cf1-59cc-42ff-aed7-58bf75bea7ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcb7abe-c93a-48f1-b27f-48004ea53131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6332236-3ce1-49ba-a745-47f9d338f8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de67a040-77dc-4b54-9f2c-91e72733b752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dadcf5-a08c-480d-bdec-7afcb25b52ff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d73b7a-2fe4-4fde-a0ab-a34f1bfec0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47073a79-0c6f-45ee-a083-4e76c3b2691b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac81077a-b2f2-41b7-a488-064ca9fbdf83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e736c63a-7592-4d90-ab60-2efc3b3f38d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d39b4bd-c0dd-47ba-92c1-26993043df85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81401320-2c67-4383-a557-49271cbc25b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea2091a-5445-493c-ad70-6f5720ab277c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2c6d98-5a93-495d-89c5-2a95959e09cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c147e2-ac70-46d0-8773-07c9db5cd67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ecefaa-054e-4012-a8c8-caf956bdf1be",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77619b49-2b8b-466f-a5a6-a2970539bd54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23179587-d16d-4025-a8f2-c65d19a82c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3254c2-d225-4a7a-9615-fe84e28a1728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db52987-6a20-4c9e-a8a8-7a4b8e45e677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebabfaf-a1a8-463f-8e92-b2c74987cb84",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e495e3-d17e-4625-99b4-e8aadd76bf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7009dab9-7adc-4a79-ae57-f1f1cecd8f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d39f6dc-b3c1-45bb-b57d-40371389d1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0612fcf7-5e93-4941-a79f-35e9c009e87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a35988-6089-413d-a81d-d71efed293b2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8dedc7-6ad6-4672-8809-2002cd3f73af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f64fa7-2c06-4b8a-8d95-199b84c78146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b27a08-c8cd-4641-8238-f98a03809018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfcc2f48-9916-414e-af7b-99e481dc532f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02132a67-fa66-49c9-819d-56f37e1c65b4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febaaad6-36a3-4a59-9752-312a0a0cb9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8977adc8-bb01-4757-aaa5-1acf4305a0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dee2a3d-b4eb-44ce-96a7-88ff5a3158fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed74caa8-9563-4b2b-a206-9795c48268a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fccd6b-7558-4223-857c-f5e3d0279d89",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629f2510-4eee-48ac-9e1d-b0883fda9394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e77d74-0091-45d3-8e4b-b3ea0edbabda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a13e1c-4915-41fe-b66a-9d4fc6724f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17526c04-016d-4896-9624-ba09b8bd6dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1f6837-f4ab-4693-86c0-6c7bb1a1af73",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e13cde5-e1af-4200-813f-83af184defab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f69f938-c5da-4e63-a1f2-e50996344042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621991f7-83df-468f-9425-6e67ce901e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866b69e7-4842-4f19-9b68-9d41254e6bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75664efe-c142-48f9-b79d-af0238995060",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432aa2fa-9b2e-42c0-b811-cbd167591333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859c09ab-51ac-4011-90ad-345e1353a279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3294c229-3648-43ce-929f-ee37812a3415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252755f8-f604-4ed5-a84a-b63a4f2dd41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2d1995-524e-400c-8a10-0102ad991a66",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76584fde-4b5e-4be3-9b0c-8d0d9e38f89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d24f77-b241-44ad-9a8d-db065c2549a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7706ef-dedb-428d-933f-5d116938c6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc32464-9971-4308-a5c0-419b2839781b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e267dc-1bec-45f2-bef2-c61f948004fd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85db2397-ee72-4c07-a502-279a648cb799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b5015c-2f0b-4858-873f-adf23fbb641b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec230bd-4175-415c-99b3-7003bf3c0c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a67b771-427b-420a-97f3-1007a07fcebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe82ea6-d1bf-413a-8391-4abe0d86711f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ce1253-0223-43b9-886b-e79ebe9c79fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ce9e63-5d39-4b8c-b020-1d8517b296d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c949bcb-09d8-408e-b2f5-e9c2b0f89d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae032980-694e-43af-b759-d204ef254eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed64064f-1620-41ee-a32c-2340ea6f24aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df020bd4-7e20-4469-8487-af56003bc04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c13b7a-9fa0-410e-a43b-34013afc83be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e5791b-e348-4047-bff2-72417cbb8817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2beba9-ae81-4fd0-9d12-43daaee4ffc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46c3304-5a7d-4def-b854-da92843ef39f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76951aa2-8093-485d-ab40-30b3ca119f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc07791d-6d56-44d1-a9f5-956e8248cae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f41eb74-bc22-4682-82fa-592d9e3c69e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd0e484-b8a4-4168-8259-df44ee7ddd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6612c630-d034-470f-b7f3-6bd48e3cce2b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdd4ce7-e182-4dd6-a84d-9080d9d8a6d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21534395-f77b-401b-886f-36dd34fbecd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde721a9-b61b-4ae5-9b9f-9d21af35852c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004c7872-cea8-41d4-a31f-79997251ffc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09e0ce7-4926-46d7-8e8a-9dd8c3ae28b7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d143df-be3b-4ec7-a40e-831a8bcbca2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafb64bc-d5d5-4701-965e-06574d1d78e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e8b415-dbae-4f22-93bf-5fde9db23fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7732d3-609f-447c-9480-766dfc91a869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a35797-5fe6-4a3d-9619-165b550ef505",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50456785-f97c-411e-b781-9fbb43f6cbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7885fbbd-79bd-44aa-bfa6-cd317d00af82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b688ed-47d1-40ee-9bc3-dc6f95258145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e3fa43-27ee-4c31-95be-37725ad848e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d61bf82-ee05-4987-af5f-1b47d2851a8e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5ae97-e015-40c6-90db-d17924030575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc00111b-cb41-4013-8cc9-8c451a77a250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bb4685-d8f1-480f-b9cc-f7f524fb3219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4aab89-b5f6-43f8-8819-7b46e7b520a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b812aa5-e5ea-4dfe-9aae-e935b2823592",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a3cecc-1cac-438e-9ff3-ddfad4b443b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d038468-bd0a-45d9-9cf4-5f7a56c5e3b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a95e3af-6bc7-4661-add6-c99765614afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24da0f1b-64e5-4cd3-930c-758193269a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c33ae4-f30c-478f-af04-10ce644e37a5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045471c1-e19a-48ed-b535-0e0d62609e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2c9cd2-0b98-4b57-9042-1d8af6bb9a7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa10dbc-93a0-41e7-9008-ce8fe595fadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637a9b05-5037-4277-92b3-cbbab7cb2b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64c8a52-4a84-44ff-8dbd-e920367f77f6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441177ae-09b7-4719-be2f-ac1bdc27bc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacafb2e-eb71-4355-98e8-832a2d05d776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266cddf3-c9ab-40f9-b0ce-8aec57d1f441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34977a3-eca9-4d99-9cff-87787188172c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e861dd5c-930e-4d0e-a72a-0804c94c65ac",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e8574-9a38-46d3-9afc-27d0f16ac396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c132fc05-6588-486b-947c-0ec62379d8eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22d2d34-c6fe-46ad-8626-782bb8ddcd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a1f879-625c-402f-a2c5-47ac24604d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab83e4aa-8015-4050-abb8-a6801f5cc208",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8803d9-0227-41e2-aa1a-0599f9799e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20eae111-a323-43d4-bca6-51ddc0a43983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79529a62-8db4-416f-ae5d-0a71a58de03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58db25ff-70f9-49eb-a635-97b29ee9dfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518eb48b-6a9b-4090-b179-7f3ed7f8babf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede2b85b-a04c-492f-b96c-3735704ecf08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e71b84-76d7-4be6-ab40-8ed33fb0fab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c2ce5c-b5f0-4fd9-b587-68f30e9c7352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08f208c-756d-4edb-a8f8-d9d39a6ad6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f57e0ca-e1ac-480c-a704-61fb5141105a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b760e9c-b940-4ec1-9331-cd9eb8df9226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f44d92-d2fb-4c6f-8700-8de0afab643f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a7f9f2-7877-4208-807f-595093b7e21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a952760-8f68-49c0-afc7-f42a533f96c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67244fa-2c43-42cb-bd92-baafd03884aa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d680bda4-bd93-407d-8c57-53a9db8468d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0d610a-5b3a-4144-a95c-afbef3473494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5650cd-fde5-4b75-b3b0-16d4a542bbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e7f6a7-7b69-4347-bb07-681a4e82ea30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1c7f05-b02e-4edd-a0c3-03f910ebc319",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6fe207-b4b0-4273-85b1-40b10f7e69bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e489b469-8255-4f78-ac30-b96b1bd25c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc60a127-9014-4d10-8936-770d9abd5bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267ab88e-ce8d-4318-910b-c65e98b604d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699ad781-9a0b-43ea-bb34-fe9a47db15e6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c0fa3f-750b-4438-8142-75938fc98ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "594ab92e-35e4-4829-94ff-b2d67b2ba595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ccfdee-450b-41ff-b5e8-e0376334da82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6a3675-b8ec-4636-9fe6-d178683c536c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c3e3eb-0967-441d-8cef-b651c987bfde",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e83a8d5-79df-4660-9909-a5b1b4b06979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e4969f-5850-4556-b0d5-1353e5fd4d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72df324d-921a-41ff-a30e-3d1df37a1776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558ea154-2b53-4344-93ac-b7d5b75f2188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7e3072-0de1-4285-9467-39c09f1e7a7a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771f5723-f825-4bd6-99d6-10495c9cc937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ccc8a1-9360-4e0e-b144-3aa7e96757e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417c4841-f693-4a51-9f10-80fd594a8573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9403ff5-4f18-4936-abb7-92690ad63495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7967a8-ae79-496d-b863-bf977f1bc742",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07a706b-0d34-409e-b0ef-3fc3a45f2d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "865054dd-030a-49d2-8c5c-d2836a3e4466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0a6dda-7192-448d-b8bb-ca8123c08afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5dae969-6557-4bee-ae58-f39a68f799fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb06bd9-56f2-4f88-8766-4864ca6e356c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29538107-f4f9-4f01-a3eb-2a1949a62b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30bcac9d-55f4-484e-8088-e9e3990b7470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee6d450-607e-4bed-b7eb-b85e9e248b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "009b980c-0236-431c-af02-640458e0f799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bf146b-9722-4608-b09b-665f8e935108",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3619b47-f436-4974-a3b3-152ccfbd635c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa0b551-fa7f-4649-964f-579b20fa012f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea73f6b9-2137-4256-92c4-55e4de146435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9838c30a-f856-49b7-a810-0b8d86c7f13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed96d94-834e-4070-976e-6619ad3150f4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349e459-1924-4a54-8791-761c96a88282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1494bc4-cf33-45d1-8c77-2336ffaff618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeffdce1-b8cc-448f-8023-ff70526a94d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e294070-99fa-4bcf-8731-38954a23de1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d68d5c-d3a4-461c-a8d6-8509c7db3c1d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14424e2f-5347-4b4f-a604-bd96248d10a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1810837-03ae-49ac-9617-1ba39c2479a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c860ed-c020-4bd6-a19c-3e9facf4bdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ec4fd8-5b04-4a88-9300-3359a0a27329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af567ea5-dd8d-4202-aa16-6e3bacac36d6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041d26f2-7a18-42cf-bf84-69e3c9d0962f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6a55ab6-4384-44f8-b519-6e98251d5d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd8b0e3-35fb-4aad-8afd-4bc9c37f720e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6afeb148-7542-422c-b94d-3a6ec0ad0d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7acea4f-487c-41c6-a8ab-9b8f39a32503",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b348708-aa5f-4aac-9eb3-0dfd1ff55a77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b941d590-e22d-4e50-b0b3-3c3ad8cc6571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e089a2b-562b-49d5-abf5-5532c35e2bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab732cf-3dc7-40dc-8fab-b0979e325cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa5b4c3-b5bb-441f-bcfd-38b70f88a978",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe2f99c-6197-49af-880d-604d8a53ed60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e950121f-19f2-46a6-9578-1f12d0d2aef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a0688c-fb04-4d35-b022-0e17bf360cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b10a9e-8acf-4c9d-8117-7b94f4aecf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ae6c55-172f-44fe-99fe-842373e3a410",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b807767d-8a0e-474c-91ec-9b31a2e003ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd116504-7fb7-47db-9e71-cd94026c7be8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c33f0ed-5efe-4e31-8109-64ee76861c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2139cae9-2a56-4cfc-b7eb-82cbc29424c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699c483c-1b68-47f0-94e4-1e525fc689d8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5918835e-9f4e-4cc3-ae5e-6c5425f85d88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c430be4-e21f-423d-9c1f-aa903610268c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b470082-df2a-4b02-ba1c-8115b2dd8970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ae2822-1787-436e-a0e6-665a51b3c03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb53318-3e5b-4fe4-bced-8404c3cbcb9b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3e0e87-78ca-42a7-82df-027b011f9282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342ac4d4-8747-4246-adc2-b54a92fbbc56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d193557-375b-4c75-9743-c9e73ed67364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248f6630-af26-4246-b4ae-8c1de9bd2e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c7e0d6-fc70-4db0-96e5-fde073bd509b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c785dc1-287c-4bff-bea3-0aba761720e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99fbfbb4-f3fd-4033-b005-9529ab5d1ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0388f67a-00ae-4566-bfc8-b0c84a320647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61fbdd3b-5d52-42c5-8648-ef8bfac123b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f58a3a4-5536-4a4b-a867-608d1b1e099c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20007c0f-c5fc-4593-8623-fb8ce908bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785b75f3-2cdd-4858-9545-85bd0e0df817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd375a3b-01fb-460f-aeab-656af0a5c2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dcbf52f-b603-488f-882b-5a6f54df0cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e859d42-c812-4e37-ad27-244e56ae72f4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b81449-eb25-4e30-8736-7cc9fd4682d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fceb2f5-530b-451f-864d-7144ab7df417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58eab3b7-aa03-4343-9ef6-e943729fe311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682e5888-0810-44db-a4cb-790cdd66e1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abac87ce-514b-4a96-868c-6f086ad3f43d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23ac78c-3a2a-4087-97f6-77173d98f567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aa142d1-2741-494d-9f97-b5bc266a3766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd98ba4-7479-4e12-90a8-cc9a9ae61ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc446e7-8ed8-4556-bf21-b1809a8aeb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2e3f5f-fb87-4b6d-be10-8d10ae2b782e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cffd916-e0d6-4ebf-9e88-6efd26d5cb0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "929ae540-25d0-4ba3-8028-7d913d54cd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb0250b-7fed-44ba-b0b4-27f600a36796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65d21dd-e9f7-45a2-a479-8dcf848923e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20714aba-11d0-475f-8e8e-d4b2ee1b0289",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32665c14-0b0c-44d9-a58d-88cf53b66a77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbae5e5d-68cb-4034-aaf7-deac4c30e515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4dbf3d-aba6-4a1e-95fc-02a54176252d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc55fdd-16cf-44c2-9bf1-6b14adf8829d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02845a8-be16-4dbc-a0fa-d00220925bfc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fc43d3-813d-4a51-af3e-75b400f98051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "589cbe65-5277-4f5c-ab96-5853e5e629b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bef6489-fad2-4609-959e-f0529fab83f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196789ed-1fe1-4912-90da-94ff20dfcf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738a5b3e-7148-468d-a3e3-064de25fa9bc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7109a29-4e3d-4239-aaa5-a767e40a2e50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cde65186-2f45-4c67-a515-8cabe52d4bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d817b8-2655-47f1-9d23-a3ff1eb5053b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606dd6ec-6d86-471d-a780-e944046be148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7205cd6a-5b60-4eaf-83e2-ba3b1a96b399",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c575b935-4764-4de4-92d8-b5cbc7aaeb3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e27f454b-92c8-44f9-8bc6-cc4405bbbb13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676f3373-0a2a-4527-8480-388d6e4c52da",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b44d5ce6-30cd-40a0-88c5-5b7569a99b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0a2f4f-3faa-4383-8ad0-6285e1b9cb58",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d65573-62f1-4d1e-84f9-0e4190311afc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02f3a510-abb0-4fb0-86a8-be6399c04442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8b2a37-9063-4451-b9dd-dcf5836980ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1235f81a-35d0-4129-b11a-b6b0c25f5f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153375fb-c7df-4cbe-b42b-e56abc5d8b31",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276062f2-d86e-4a54-848f-44d6bbbf10ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da3d9905-fd79-4a65-874c-0dbe95c90477"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30735ec-f447-4e6a-bc88-52fdcbfaae99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d6aba3-aff6-48a6-abed-e7a856c4b5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6391222-3370-4541-b764-bf9113fb1a16",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc430f5-c969-42c1-bcd3-37e7bb84c969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae3cb9f-a576-4daf-8b1e-7a56f68dbccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff51a820-7aa1-4468-b8fc-5a47517990d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744393af-f1c8-43c6-b4c6-254957cc7ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5cd9ee-6fab-4fc4-a2f9-1d19a2e23f05",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b5c60-3c74-42cd-a3d4-18cc3955bbb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a47d0e-79e8-425c-b8fe-193d5cd0c1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eed7d70-b03b-4553-abfc-19d38f26b348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ebe025-9e8d-40af-98bd-898f2c722fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b43f78-6d5f-4587-958a-7ef8477b7171",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3bfb7c-a459-4515-8216-fd65c2d2412b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a7fd0c-b925-48d7-8dca-70d10c2a934b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9d9388-0ad8-4c7c-ac9d-3ea533494ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6306775c-0957-4f4d-affc-f417fe173736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6428a27f-b6cf-4979-bfbc-a73b3d19de39",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d266814-b207-44f9-9349-f3306b271d6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bc55e57-ddfe-44fc-993c-ef54dc1b28d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7065dc-a753-4d66-99e2-19931fd0e10a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac11060-7c40-4fb1-a92f-2aed38c9c663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95517372-9a14-4f82-8df2-5e08d62ee520",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781f7f53-c21a-49a5-af0a-57fae9fd7773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4110186-b768-4085-9042-391bfa98dbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "809e6eca-be1d-4304-a242-def54735b1ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74337fd8-ff2b-4e0f-b3b6-43b1524cbbc0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fc782d3-2e00-437a-8f0a-5d052635a240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b8f5fe0-e754-4f1c-855a-39972dac6dfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0148f4b-58cb-4d8f-b34f-40e172db717a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7276ac72-82d2-4e1a-9695-508334e223fe"
                    }
                  }
                ]
              },
              {
                "id": "50ce79d8-4708-4408-b704-dbe6ebbd4812",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e86f3775-4100-4273-9e0a-85d5ebe2f169",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2200581d-a57b-4706-b7a0-3d545e4a5051",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "74b1a454-1267-4708-b0a6-7877832a2657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408ff439-fc8d-442f-8ae9-624c257b9a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3629a1c-6451-4ea4-8417-0f0919345b00"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1778093-5748-4e52-9055-c9e4c0baae8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "563287f0-c9e4-4ad5-9fee-32ea6b97f483"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d4f80c-14b3-4a3a-8b25-5bce39357711",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "028d7ade-1d43-43ab-96e0-0600efd91a57"
                    }
                  }
                ]
              },
              {
                "id": "f43751b2-cec1-4934-9eb3-90230c725f3f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c7515c24-251f-48ff-8884-f781a9c77485",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efe79cc-6df3-4778-8fde-9671628921b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "18b7151e-60b9-420e-a732-25499f7d6f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c67cbe-de92-42b9-afba-94001a748365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a8ab2a-c7a8-41a2-be7c-6ff86493d85d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef75940e-99c9-4018-8d7e-7715e64a12ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50383980-f34c-4486-8210-402e1c4ca3f8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10c76601-3bd9-4dbd-84f2-f85e6a44cc66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d9e54e7-dbbf-4eca-8bea-30595b9691f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2433e40e-5589-416f-bd27-96d9517628c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "701d1e52-6538-46bc-809c-5463c9c77cd7"
                    }
                  }
                ]
              },
              {
                "id": "51059b35-0471-4796-9b26-6d0b689c5206",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7dc354c-2be4-4ac8-97af-9d398de571af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e5f7e319-6533-4532-969c-1174187ced89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62cd6e5f-7340-45d0-9ed1-5f48ef8f478f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb4032aa-08b6-4882-8d2d-d7e7a6a2d7bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3870d6dd-b913-4fa9-b4a6-cbf38dc044fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "616b8f7d-8d0c-4424-9179-f999692ab5d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c3f47dd-d45b-4b4e-8bad-2db6c7097cd7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37fb3f68-025f-4a9f-bd05-ff06a3ff2fc9"
            }
          }
        ]
      },
      {
        "id": "0861cb38-4597-490d-98e3-90585619c647",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "930d0597-5552-4d36-9810-5fc99aa13c61",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc42bacb-5b61-4c22-a042-c5cd2fac5924",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b3e35f7-501e-4065-a18b-1b954e7c1fe3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a449fdb6-a4f8-4a64-953c-fe777f7e121f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e49978cd-f99e-4622-900d-1097c335e593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06edad5a-585a-4813-89f2-321585cc0efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b25773b8-91cf-4d17-80b1-129b87c4036d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df717407-d129-4259-9cde-77fe2b4c2e02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47b90285-7d33-4f09-9a01-331bb2ee041d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8560028-c156-4bda-b49f-b38d69efa6ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "766ae022-a60f-4e7d-9643-f44cbdda3760"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28b91805-7922-46d8-80d7-6e6b2bbbd1e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bf2b3633-43c1-4ef4-b75c-c4d86e1bc12c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a89946b1-70b3-4e18-ab00-4aa7b4dd32c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15165196-cd2f-4271-a021-d37a7f1e719c"
            }
          }
        ]
      },
      {
        "id": "7ae913f2-3306-49e0-80b1-eb65d964b001",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bafe6624-df39-4b27-aae5-3453ca84c26f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c11f6065-0e71-46ba-ba9a-e2378b60c602",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e574e6dc-1a2e-41c6-b5ab-1a05aa7b4cc7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d540ce8-ccbb-48d9-b02f-1043ebf7eafb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36437236-efbf-40d0-898a-31f51b0965fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78423234-42d5-4739-9436-28287a52d372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da834028-abd7-4e2b-8724-6d82b26f1a46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6e6756b-7f45-4cdd-9ede-2c7808d2dff7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65e1d23a-113d-469a-998f-9fc992836fda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f55480ce-9684-49c2-84b3-012288ab9f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12219385-21c5-4052-a02f-370931fefbe8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35be470c-e4fd-4019-b050-3c0c88e8e8ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "06d5ae05-3a85-47f7-bf29-f3007cbbb1c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f564a431-085b-4a8f-94d3-f4b0073dbc16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7781d607-da0a-4675-89d7-b781be633acc"
            }
          }
        ]
      },
      {
        "id": "691122be-dd1e-4d35-b15f-08e3e37edb6f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6221d35e-9b3d-416f-beb1-41ccb5a0e13e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "780f0abe-2df3-4646-88a7-7acbdc630913",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec79f96a-684c-4dd0-b688-6cfe58824d55",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363d451-23fb-4edd-9411-ecbf5cb21af8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cdacf0b-557f-46d9-8390-06535918aa07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a65bfa-d4bd-4a68-8a93-a2fdd9d51f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "642eb9c4-5dfc-4a56-8b61-a1ded165ce0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d97217a-5096-4759-a4c2-383ebc430ec7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c104dbcc-4ffc-47ab-ae21-ae8490b14ed5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df327fa4-8835-421f-9138-80b642394f80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76009e15-8ab5-4488-b008-fbdae584e1e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "894e3f3f-837a-445f-b78a-cbdf5845c060",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2607e504-14f7-4d3c-a89c-af81e6520a3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cbaddc8-93af-41c0-a76a-e017f8367190",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca8037fe-b061-4444-970d-5ddf640efff5"
            }
          }
        ]
      },
      {
        "id": "d9c490e7-f3d3-423a-9bd6-1090477d8122",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "464960f1-c184-4026-ae0b-1d751ad0a196",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d07b8ec-6a0d-4dbe-9c5c-5b28d196f4e4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5df34db6-67eb-4653-a068-8385d40ee1f9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e627d084-edfc-4f01-a0a7-d829693f065e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61d9cf45-3671-49ab-88aa-c66b807baae6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.57936507936508,
      "responseMin": 21,
      "responseMax": 250,
      "responseSd": 21.45551069724083,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718325474430,
      "completed": 1718325497022
    },
    "executions": [
      {
        "id": "05ac44d5-6588-402d-8bc4-5ce1060deb45",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d516d529-ebc6-4af7-911e-d761c61d3d81",
          "httpRequestId": "ff0b3b8f-8c60-45e1-918f-9ec4731e7a95"
        },
        "item": {
          "id": "05ac44d5-6588-402d-8bc4-5ce1060deb45",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "72c50943-111b-4074-a2ec-2e24e9596040",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "931eb6f2-e500-45af-8bb9-85233168e1e3",
        "cursor": {
          "ref": "6bc1fefb-24b6-4cd7-882a-7c6926b60154",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "578ce62e-08ad-4674-bc3d-5e3faf52a08f"
        },
        "item": {
          "id": "931eb6f2-e500-45af-8bb9-85233168e1e3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3f41e39b-0c0c-4f6b-bab2-248e8a060a43",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "a5236df3-3896-435f-98f7-902b508cd854",
        "cursor": {
          "ref": "c8f9987a-9860-43c1-98eb-fead85325ccd",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8b7d4008-94e7-4f5a-ae20-57489925cc9e"
        },
        "item": {
          "id": "a5236df3-3896-435f-98f7-902b508cd854",
          "name": "did_json"
        },
        "response": {
          "id": "4a458352-7fc5-4a7d-9624-376a7339e503",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf67a79-fc65-490e-b8cf-6643cbb121e7",
        "cursor": {
          "ref": "c51fc2f4-8989-4f9d-9bca-7912df15721d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cad73971-9bd4-4f7f-879c-f61a39ce0c14"
        },
        "item": {
          "id": "8bf67a79-fc65-490e-b8cf-6643cbb121e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "aca2d950-c2bb-4aae-bff9-21c6c4ef0387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf67a79-fc65-490e-b8cf-6643cbb121e7",
        "cursor": {
          "ref": "c51fc2f4-8989-4f9d-9bca-7912df15721d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cad73971-9bd4-4f7f-879c-f61a39ce0c14"
        },
        "item": {
          "id": "8bf67a79-fc65-490e-b8cf-6643cbb121e7",
          "name": "did:invalid"
        },
        "response": {
          "id": "aca2d950-c2bb-4aae-bff9-21c6c4ef0387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1d2031-7c11-42c3-8f15-d789fc8834ad",
        "cursor": {
          "ref": "1f31f49b-71a7-4654-b4aa-1391b0be4113",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5ff5dfd8-5d30-4e1e-9781-894688d89b67"
        },
        "item": {
          "id": "1d1d2031-7c11-42c3-8f15-d789fc8834ad",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4fb67b5f-09d1-447f-9619-0c41fb614f7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 168,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a11a496-1766-459a-9c79-00b634448691",
        "cursor": {
          "ref": "e2d4b877-8a63-4f37-b3dd-90a45f8b5530",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8c2bc099-cfe3-4422-aa46-e2014f3df1b0"
        },
        "item": {
          "id": "9a11a496-1766-459a-9c79-00b634448691",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d4126c7e-72dd-4dab-a887-57bf491cb764",
          "status": "Not Found",
          "code": 404,
          "responseTime": 56,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55064cb-86f9-4011-9c21-fe83a2f10826",
        "cursor": {
          "ref": "96e6809a-aaf5-4f1f-bc02-8e00fac9a73d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8fe4e0a6-0b11-4d4a-91bc-34729726b763"
        },
        "item": {
          "id": "e55064cb-86f9-4011-9c21-fe83a2f10826",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0b1e168f-af38-4222-a39d-8de40e616f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8cfae4-d947-45ad-a928-892e52fbffe0",
        "cursor": {
          "ref": "63520301-99d2-4c72-a7cb-045474582027",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1167692e-0ec6-4caa-bf64-c35c91de3be8"
        },
        "item": {
          "id": "aa8cfae4-d947-45ad-a928-892e52fbffe0",
          "name": "identifiers"
        },
        "response": {
          "id": "c92c2799-a26c-4d52-9dee-005250881440",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25a8fb3-47c1-4156-b579-f7c30f44e061",
        "cursor": {
          "ref": "09ea6d77-8c76-4c22-926e-8994fed94132",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9c243dab-2523-41e6-884d-27123759365e"
        },
        "item": {
          "id": "a25a8fb3-47c1-4156-b579-f7c30f44e061",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3fbd1d38-c86a-4538-8d5f-f737225b41c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd3dd25-8ecc-493f-b0fe-9e229e1a03a3",
        "cursor": {
          "ref": "8811d7a1-87f3-420b-ba4b-9c55113b7d39",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4dd2499d-66f2-494f-a2b4-d0052c04b87c"
        },
        "item": {
          "id": "2dd3dd25-8ecc-493f-b0fe-9e229e1a03a3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8d9ea920-9129-4fca-b281-2908f09a71f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f5f53b-f70e-4df0-9157-06fff0affdbc",
        "cursor": {
          "ref": "e08b7d60-5b1c-4817-99dd-2850066767ea",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0d74424-74a8-4975-8130-bc33b2cb7121"
        },
        "item": {
          "id": "f0f5f53b-f70e-4df0-9157-06fff0affdbc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "410b5f5b-cf0d-4c33-b6a6-d5f99019d1ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e01896f-2678-4952-bcc2-ca975c429e45",
        "cursor": {
          "ref": "52a432be-7e38-49eb-88da-f2e9619f8692",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e211c4be-36dd-4d47-a64e-e210916be908"
        },
        "item": {
          "id": "5e01896f-2678-4952-bcc2-ca975c429e45",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1889bbb4-bdab-4f34-ac82-1ac2d48263cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8160fd35-fae2-4e46-83a2-12273dc2c1ec",
        "cursor": {
          "ref": "f212d6d1-7925-4399-bac5-59c58278b917",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "978e4803-cf85-4142-ad87-0502667394b1"
        },
        "item": {
          "id": "8160fd35-fae2-4e46-83a2-12273dc2c1ec",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d455683e-76f4-425f-afe4-1e57c0d3e741",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fb0a76-2073-4f07-81c9-e4345b31dec7",
        "cursor": {
          "ref": "aefe2e3e-fe25-47c9-ae2d-80e4b90e59ad",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b5ca0d3f-7eba-42ec-8506-d1b659058574"
        },
        "item": {
          "id": "28fb0a76-2073-4f07-81c9-e4345b31dec7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e7eb11b6-6497-4568-b534-9df36e054ee8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bf3b28-1fa6-484b-ac38-6b2665b629a9",
        "cursor": {
          "ref": "af2b5326-7413-4a46-a7f3-78320663a5c1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0a64ae59-dbfc-4505-8d4b-70f94a957cb4"
        },
        "item": {
          "id": "00bf3b28-1fa6-484b-ac38-6b2665b629a9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e03f6e24-e3c1-4c8a-8101-8e96fae6f90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a796c3a1-3bb8-4025-9bd3-8da91fb35429",
        "cursor": {
          "ref": "cf11acd3-65a6-4080-8f32-1497b73a6f10",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9147cd92-8c14-4ce8-a1f5-d2627ac63a05"
        },
        "item": {
          "id": "a796c3a1-3bb8-4025-9bd3-8da91fb35429",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "47a15675-c1cc-4b5c-b4be-d2581fcd4e97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92944ba-2843-4d43-aa73-d80de547f291",
        "cursor": {
          "ref": "28390362-5a67-45d9-abb4-e28966f59bcc",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bc248230-ea35-4435-a373-8da889a2512f"
        },
        "item": {
          "id": "f92944ba-2843-4d43-aa73-d80de547f291",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "223e6e43-2406-4b3b-ad17-28e463500036",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caece47-af2e-431d-b5e8-775797cad5d5",
        "cursor": {
          "ref": "140ea6bd-ba53-49ea-8a83-03a171643cf5",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6da9bad5-27e4-4584-8d27-c16a555d79f8"
        },
        "item": {
          "id": "5caece47-af2e-431d-b5e8-775797cad5d5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7523ba58-8a41-4976-bcf5-064286314b4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b292bfe-e925-4fb9-8d44-04fd17047284",
        "cursor": {
          "ref": "69dd7e37-9088-42b3-825b-b0c250fb1849",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "dcf545a4-db5f-4118-8e25-907ff6e4c817"
        },
        "item": {
          "id": "6b292bfe-e925-4fb9-8d44-04fd17047284",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "90a4d846-ee4f-4cb3-bce5-274fa81a8862",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2f1384-7f61-475d-a110-dc55296ed394",
        "cursor": {
          "ref": "7001f889-aafa-45ae-9c24-9ce33103d3b9",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3481da77-0613-45db-ae76-9f3fadc9fbb2"
        },
        "item": {
          "id": "0e2f1384-7f61-475d-a110-dc55296ed394",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "77bbfe07-58be-4553-bb4d-4d7fe0e7af93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d81f46-87af-4abc-b149-be8cd257fbf3",
        "cursor": {
          "ref": "c5202e58-c6d5-45dd-88bc-9dd53681d683",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7d82a0f5-b454-41ed-a8ae-4444081f259d"
        },
        "item": {
          "id": "11d81f46-87af-4abc-b149-be8cd257fbf3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d465e66b-6b51-4b1e-95d8-f645917cc128",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12c15c1-6b24-4008-a8bc-4f50878bf6db",
        "cursor": {
          "ref": "aa21f67c-28af-4c13-9e26-0f99ed32df81",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e5c089d6-67e8-4307-8bea-8f674391c2b3"
        },
        "item": {
          "id": "d12c15c1-6b24-4008-a8bc-4f50878bf6db",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6cd43d35-737f-4a85-b3af-3301e1a35167",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df27f6f-f47f-4d8e-82c3-49b24cacd5ff",
        "cursor": {
          "ref": "ba2bdefd-3e84-4c52-8326-c4bcb64bc274",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "804dba94-562e-4f5f-bc3e-c4cf66e6e5a9"
        },
        "item": {
          "id": "8df27f6f-f47f-4d8e-82c3-49b24cacd5ff",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "37c4c97f-d7b4-4b37-a03c-38a92687edbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a21339-a00a-4474-adf1-c82d330c8f1e",
        "cursor": {
          "ref": "50a77857-8549-4a31-9fc8-43a6ac66653e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ea8aed0d-0350-44cc-9a02-a7614a591390"
        },
        "item": {
          "id": "29a21339-a00a-4474-adf1-c82d330c8f1e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b4409cdd-d1a6-43f4-b69c-1d3db8a66d41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b8e069-6671-407d-a50b-ece07ad66a34",
        "cursor": {
          "ref": "2f05d12b-6e5d-45a6-816e-15c9871c2524",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "89360500-88a0-4f9d-b34b-17810e1d1656"
        },
        "item": {
          "id": "f8b8e069-6671-407d-a50b-ece07ad66a34",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "69e05ddd-463b-4794-8d7f-eca932eb1ca0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2a4825-a950-4a1d-81c4-72396e7153e1",
        "cursor": {
          "ref": "b0f4e5b7-6901-418e-878a-371f38e7a48c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3ed50c83-716c-41e3-8395-52c30696349c"
        },
        "item": {
          "id": "3a2a4825-a950-4a1d-81c4-72396e7153e1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "282c1648-5515-4c8c-9c08-821b25e91b61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44df593c-0ffa-40bf-84cd-6ed681096847",
        "cursor": {
          "ref": "0f31865a-0e26-4d77-9d24-7af3f33db78b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "339a95b0-8a1b-45b0-af70-9114e3950bd2"
        },
        "item": {
          "id": "44df593c-0ffa-40bf-84cd-6ed681096847",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c671378d-ba29-4b55-8ce4-1a125f9763c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad7ac09-9bca-45be-86c5-cc25be28618f",
        "cursor": {
          "ref": "e53a5f37-059d-4435-b327-6440be452201",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "35c56ebe-1bab-4c68-86ab-01da0827f7b8"
        },
        "item": {
          "id": "2ad7ac09-9bca-45be-86c5-cc25be28618f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "63249f0d-64d4-4fa1-8fd6-886a448b35d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363afa9c-631d-4954-9f11-148420dc8e3c",
        "cursor": {
          "ref": "47522d4e-cca7-4d98-9cca-890f1754cca6",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a01eaf15-ec87-4382-8259-7f55f036d303"
        },
        "item": {
          "id": "363afa9c-631d-4954-9f11-148420dc8e3c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4761d392-47e4-4942-8f00-32a44d641d3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ec2e04-70a2-47b7-86a7-5d758d0c4923",
        "cursor": {
          "ref": "a832f000-1a49-4133-bb17-296e28852476",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5234c9b-d320-47dd-a2c9-99e453feb08b"
        },
        "item": {
          "id": "a9ec2e04-70a2-47b7-86a7-5d758d0c4923",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e838c9cb-fb3e-42b8-80b7-de819376a418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10174e39-140b-4694-ba2d-0db57154d330",
        "cursor": {
          "ref": "4e4846dd-9de1-4fb6-aa15-f91bc6f09850",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7c4736e0-1795-4be8-b6f8-f0013ab3cb43"
        },
        "item": {
          "id": "10174e39-140b-4694-ba2d-0db57154d330",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3bd8f5ad-b3b8-4279-a338-9f216be2b339",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcd7fe1-1ba7-4184-97a8-5e056cf9a131",
        "cursor": {
          "ref": "bb9e28cc-5f0b-4341-a882-e1291d03abf0",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a735b717-2146-46ad-a786-bc9979a1e97e"
        },
        "item": {
          "id": "abcd7fe1-1ba7-4184-97a8-5e056cf9a131",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1891b8d8-898b-42cc-af5f-71b2a887f8d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bbba51-9cb5-4e79-9888-95700def00e9",
        "cursor": {
          "ref": "eb06fd31-e15e-4ec3-891a-8f6da291d1fe",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "769a2570-687e-44e6-a5aa-e85d41e6624a"
        },
        "item": {
          "id": "99bbba51-9cb5-4e79-9888-95700def00e9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f27f4380-2758-4742-90a9-ee039a33fcbe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88cc14e-29b5-4f83-8dee-b21cb075d9f3",
        "cursor": {
          "ref": "0b58e359-12f3-429a-8b02-be6b57f45bea",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "27101f1b-5582-4691-89b7-5898b52dd0a3"
        },
        "item": {
          "id": "e88cc14e-29b5-4f83-8dee-b21cb075d9f3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e747caaa-da2f-4b4e-9698-4d09f41af81f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a2994-4c9c-4710-9c6f-1ca1be23654d",
        "cursor": {
          "ref": "5a78fdf6-ce0a-4e43-8466-29c0458b51ee",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ccf776da-8109-4017-a018-1d8393e38274"
        },
        "item": {
          "id": "365a2994-4c9c-4710-9c6f-1ca1be23654d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "222f3b7e-aab2-43c1-934d-4138dab443d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006b44bb-679b-4c58-af9d-21a57f19ec7b",
        "cursor": {
          "ref": "157900e8-91e5-46c6-b6d3-197beb6dae1a",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "49d246dc-b53d-4b22-baec-68b4ad4a6bd7"
        },
        "item": {
          "id": "006b44bb-679b-4c58-af9d-21a57f19ec7b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c99ce88b-434d-42b4-9b9d-059eca208fa8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3b2cb0-cf84-40dd-9b4d-ca5b1c559f71",
        "cursor": {
          "ref": "37551ef6-8b4c-4696-b924-f828193f1c5c",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d4a2d840-9ec6-467d-b85d-e3376727d1d2"
        },
        "item": {
          "id": "9c3b2cb0-cf84-40dd-9b4d-ca5b1c559f71",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "54d80a38-1d23-4e3d-ac24-ed69be61273e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b3e541-6bff-4ad4-b289-f5efcba833ed",
        "cursor": {
          "ref": "da3504f9-ce19-47cb-971c-f53892d4abad",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "58f39c60-15e3-4e8b-9c33-d5343284ef7e"
        },
        "item": {
          "id": "d2b3e541-6bff-4ad4-b289-f5efcba833ed",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "08b8d1b1-9bfb-4a97-bb3b-10d926cd433d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7758a310-c6fd-492e-a531-6a332de5f172",
        "cursor": {
          "ref": "f532aa76-cb15-4d15-ad1e-45be94038052",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3156cb8f-b757-4bcf-b3e5-1def078adbec"
        },
        "item": {
          "id": "7758a310-c6fd-492e-a531-6a332de5f172",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9a7f40ee-b7bc-4f27-ac8b-6df3856bd0cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7159fe7a-fc40-46a5-afbb-fe165d28a4c8",
        "cursor": {
          "ref": "5e8a865a-ebb8-4c9e-be00-f065eaaeffe8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f58b095c-8557-42d7-8fb5-0db4ac484e14"
        },
        "item": {
          "id": "7159fe7a-fc40-46a5-afbb-fe165d28a4c8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8dbd302b-361a-4770-bcdb-ba4b9a9854d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63363dbd-5249-4e9b-83bd-de3e86f3ef8d",
        "cursor": {
          "ref": "8fa429ef-fcac-4a9a-a13c-ec3a3c8a742b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "103f921f-c340-4fcb-bde1-e1ee6c5a5f14"
        },
        "item": {
          "id": "63363dbd-5249-4e9b-83bd-de3e86f3ef8d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dc988126-c745-43ae-8477-a77ccc941a63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dcabe0-9527-4476-89bd-cb0cf73d8b5b",
        "cursor": {
          "ref": "02e05e34-99df-44a1-a482-909400318910",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "897ead22-02d9-4ae6-a635-a93a052a1762"
        },
        "item": {
          "id": "d9dcabe0-9527-4476-89bd-cb0cf73d8b5b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8478b6b2-7ad5-4ba0-b1d3-e2ddfaac3b4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "205729b6-634c-4e2c-b41c-c8be1f260150",
        "cursor": {
          "ref": "c8544b52-97ef-4e25-a2ce-ec3f5dee13a1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5050c460-e946-4502-9563-78fd67223290"
        },
        "item": {
          "id": "205729b6-634c-4e2c-b41c-c8be1f260150",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "799ed7aa-b9e2-45d7-be4a-65beaf07f3c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9602f1-fc6f-45bf-8e19-c91909bf371a",
        "cursor": {
          "ref": "227b0bf4-9812-4a91-b333-e7d7c8858374",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a03df2df-1cb4-4acd-9334-ebc590484176"
        },
        "item": {
          "id": "bd9602f1-fc6f-45bf-8e19-c91909bf371a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0f7771a0-c4fa-433c-b1da-b13572de3ebe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be0e2a9-1f58-4d75-828b-3e1cd2c84e5f",
        "cursor": {
          "ref": "a29feeaf-aa99-4ef9-93ec-1e08f9792ca3",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7eb60119-a4e3-4b6e-b7e7-b181c6d1e97a"
        },
        "item": {
          "id": "0be0e2a9-1f58-4d75-828b-3e1cd2c84e5f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "242420a2-a115-400d-b4d6-dbca78d9c889",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a83000-9a20-497c-8365-df144d61ab1b",
        "cursor": {
          "ref": "1a07b763-270a-4a10-b366-c7f312620e0b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "af8567f3-ea75-45cb-82cc-5a03214b282c"
        },
        "item": {
          "id": "24a83000-9a20-497c-8365-df144d61ab1b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0524f9b1-14ec-4a64-ab32-8bb73e51da67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc979b-420f-41dc-b13e-0754dbecd0cd",
        "cursor": {
          "ref": "08ea3e9a-c5e4-4ecc-9b0e-b76fdcba66e3",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f711e3c9-440c-49b3-9b43-c472a2e08416"
        },
        "item": {
          "id": "1ddc979b-420f-41dc-b13e-0754dbecd0cd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "464fc2e3-aac2-4c90-9cbd-0fcc89b07483",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a143c28-beab-4d48-8fec-1e68f1daa31e",
        "cursor": {
          "ref": "faec7534-65b4-4222-a7b6-d04e30b3841d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "63026419-1e5c-448b-839a-1a1e917fef38"
        },
        "item": {
          "id": "9a143c28-beab-4d48-8fec-1e68f1daa31e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "db6efb8d-c093-4be4-bdf9-8b850577cfb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2252fd3c-899e-4454-a561-c05a625e3621",
        "cursor": {
          "ref": "c319f8af-f7e9-4827-a889-c38597518d8f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "daa9b3d9-cb8b-41ec-abba-cb84601d1f1a"
        },
        "item": {
          "id": "2252fd3c-899e-4454-a561-c05a625e3621",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a6ce357e-c55c-41f5-9900-d165e4f156b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37c3d0d-f480-4e4b-8b95-1d96e99df6dd",
        "cursor": {
          "ref": "25f8a761-24c1-4472-9af2-5ea27a699df8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b9c554d3-6461-457e-bbc2-6ea0911c32b8"
        },
        "item": {
          "id": "a37c3d0d-f480-4e4b-8b95-1d96e99df6dd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4a8824ed-2767-48df-b81c-ae7e46b11ac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53c2bba-95ac-483c-a22a-c87f22ae504e",
        "cursor": {
          "ref": "976fe577-4e12-419c-b251-83bf3faf0af5",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "310e0c44-c099-4c27-abf4-a8ec59f1c583"
        },
        "item": {
          "id": "a53c2bba-95ac-483c-a22a-c87f22ae504e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e5c0ad97-d59c-4109-916e-5161bb1dc5dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810df966-c7d4-4039-b960-753af9d80293",
        "cursor": {
          "ref": "2cc08c25-dfbb-461a-a8ca-99ba2a0c9fd6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ca2239e0-87e2-452d-903b-1e079ffc7871"
        },
        "item": {
          "id": "810df966-c7d4-4039-b960-753af9d80293",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06d674fe-02b0-42d4-aeb5-a7c01173166e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b441496b-6c6b-4bf3-9b5c-d0b6c665bea6",
        "cursor": {
          "ref": "8257f587-e066-4328-bd44-9a76baeee377",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "32b81092-1936-4fac-ab0a-6c4f6c19a696"
        },
        "item": {
          "id": "b441496b-6c6b-4bf3-9b5c-d0b6c665bea6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5858d199-3560-48fa-b778-90202b6f8da3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7207c3-eb79-4fcf-9f9f-e943473c62db",
        "cursor": {
          "ref": "908d3ef1-304c-4662-9bc6-89eac8e2cdb0",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "34b3f01a-6083-4f31-8ad0-c9b2ee11e2aa"
        },
        "item": {
          "id": "fb7207c3-eb79-4fcf-9f9f-e943473c62db",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ede811ab-23d5-4087-af40-eabe0486a1c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2930694-6a6b-409b-9569-cd4a151ef4a1",
        "cursor": {
          "ref": "e83a756c-4796-4da2-b26f-a28307d1fb07",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0ab99af7-293e-4339-8413-3a0222570df7"
        },
        "item": {
          "id": "a2930694-6a6b-409b-9569-cd4a151ef4a1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db3d1573-6a49-4e8a-a5c9-7b2f40b772b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7a0697-0af3-4d21-94ae-8481252769e3",
        "cursor": {
          "ref": "7f76ae33-37f2-49ec-a265-03d865642471",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "95774e3c-da23-4e49-a3c6-bf4a6fa9382c"
        },
        "item": {
          "id": "bc7a0697-0af3-4d21-94ae-8481252769e3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1a11b1f7-1231-4642-857b-c575249904c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfc0def-e5cc-47db-a3b2-0d7b3ea76df3",
        "cursor": {
          "ref": "84009c86-5a11-43f5-844d-f5bae4f399be",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "68007c53-16a8-4fde-b78a-cdf1546d2843"
        },
        "item": {
          "id": "bbfc0def-e5cc-47db-a3b2-0d7b3ea76df3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c35c6d50-e722-4262-98ef-067b8d01c139",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd85dcdf-6296-43da-a874-4333855a267a",
        "cursor": {
          "ref": "69ee0a98-0302-4151-9977-dd9a3677e4bd",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "38639394-464a-450c-90fd-3f66a0d953cd"
        },
        "item": {
          "id": "fd85dcdf-6296-43da-a874-4333855a267a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "493e40c0-9361-4a64-9b95-9dff099be1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f059b990-4602-4b50-979e-0acc418bd4e7",
        "cursor": {
          "ref": "217a72d0-996c-46e5-ab3d-8ee2ed70ae1d",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "24fe2a48-b93b-48a9-9e9f-93e0f1ca0da5"
        },
        "item": {
          "id": "f059b990-4602-4b50-979e-0acc418bd4e7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4510485d-28f5-4b2b-a2ec-d0d72ef87c34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c926876-f304-4ff4-8053-72207d503130",
        "cursor": {
          "ref": "408c617a-ad12-4ddf-82a2-5c1cdfcf5720",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3342213e-fbc8-4ab8-a9bc-6af690a5b11c"
        },
        "item": {
          "id": "9c926876-f304-4ff4-8053-72207d503130",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "35420c90-1921-4ad7-9a09-473717e1f3eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4061faf0-ba8f-49ac-9ec2-4f972957372c",
        "cursor": {
          "ref": "cab6c4b8-edc1-4e40-944d-55ca9ecf60e5",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e7d33fcd-f328-445f-a36e-347235ed8999"
        },
        "item": {
          "id": "4061faf0-ba8f-49ac-9ec2-4f972957372c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8ffa0537-354a-44b5-b386-6beb987f3ab6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802c60e2-bdcd-4bf4-91a1-76e311e883c0",
        "cursor": {
          "ref": "798c469d-5c36-4449-a68c-ce33e34cdd25",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4a24f6fb-e894-4869-b10b-a745fc5daf59"
        },
        "item": {
          "id": "802c60e2-bdcd-4bf4-91a1-76e311e883c0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "153eb571-ef7d-4123-bd6c-4106915b846e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02798400-8932-4941-bbdf-38562d4fe436",
        "cursor": {
          "ref": "2266382c-ebb7-454a-97d3-a4167cf6b052",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "eb6a04db-1795-4835-8e5f-d580386bf929"
        },
        "item": {
          "id": "02798400-8932-4941-bbdf-38562d4fe436",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ac8a94e1-9016-4432-9723-44b698a76dca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1a2cbc-5c0c-477e-8a24-222be117374d",
        "cursor": {
          "ref": "70d431cf-6188-499e-9670-f122bb763653",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "43f08b23-398b-408b-8d6a-97e02c735842"
        },
        "item": {
          "id": "8e1a2cbc-5c0c-477e-8a24-222be117374d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "56ebe1ed-7842-41a1-bd70-28e0a74c735c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b918f55-46c7-498a-ad98-35c73f5e7089",
        "cursor": {
          "ref": "d4abde72-cead-473b-ad08-d09ac59da6f0",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6d636ec5-941f-4252-af5f-07ab3e9fb67c"
        },
        "item": {
          "id": "5b918f55-46c7-498a-ad98-35c73f5e7089",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4ce134d7-c984-4881-b7e7-c4460357c800",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17be9723-5054-4983-9135-5b0dc14dcb13",
        "cursor": {
          "ref": "496bee38-9761-43c9-8490-61c018e9cad6",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ebe4fd1c-f91e-4435-b949-e6b430bc7daa"
        },
        "item": {
          "id": "17be9723-5054-4983-9135-5b0dc14dcb13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "274c7023-0eb2-412e-a50a-dc5f06ded40a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f55e4e7-abd4-4007-a21a-321c92c1003d",
        "cursor": {
          "ref": "5ce8be9b-f231-413a-a5a4-0b12ced8e615",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e74990d2-4607-4a22-bfbb-6e33b801096e"
        },
        "item": {
          "id": "3f55e4e7-abd4-4007-a21a-321c92c1003d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e1848d68-5b1b-4f05-b9c6-d1034e89816f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfe39cd-2949-4ed9-b293-0922a3c179cd",
        "cursor": {
          "ref": "df746bd4-7436-412c-99e3-9bc48b37d028",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "62d4066d-81eb-42e7-b809-7efc16042735"
        },
        "item": {
          "id": "dcfe39cd-2949-4ed9-b293-0922a3c179cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8bc9a2d9-dcfb-427a-868b-73728e259b51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a50121e-5968-435b-8f83-22b4911b38e9",
        "cursor": {
          "ref": "4ce10289-2670-460f-856b-1dba5f8008dc",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1decb36d-7f0d-4321-ac4a-5ae0d943c106"
        },
        "item": {
          "id": "9a50121e-5968-435b-8f83-22b4911b38e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd7dd650-3cf6-4608-9bb3-160766fb7983",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8c9165-1b83-4053-8d38-1e89a4d2c701",
        "cursor": {
          "ref": "12a913b2-d7bf-492f-b0e7-13e459eeea96",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a589110c-36b8-4c87-8e34-8486844a1832"
        },
        "item": {
          "id": "7b8c9165-1b83-4053-8d38-1e89a4d2c701",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ac101df0-f286-4d76-900c-08dbb7d0f36d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103a4665-4446-431c-9c54-b4f43b67bdcd",
        "cursor": {
          "ref": "2b0ea960-14a2-497b-8bde-31250df7f1d1",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6748fc47-f896-433f-be80-ce0c54797049"
        },
        "item": {
          "id": "103a4665-4446-431c-9c54-b4f43b67bdcd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3d9d187f-ba08-4f25-995c-ee8e9b1659d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abcaba4-7f7c-45d9-b44f-7a58fbee99e0",
        "cursor": {
          "ref": "8b19a5be-da4a-40e0-8c5b-121fcd14bae4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "af0fd626-7d9c-45de-83ed-963d65351b19"
        },
        "item": {
          "id": "3abcaba4-7f7c-45d9-b44f-7a58fbee99e0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "87795203-3edf-4726-b6a3-18fbd7fb4cfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f183ba-83bc-4886-9d7a-63b78e38b247",
        "cursor": {
          "ref": "76f54691-78b3-4ecb-a160-d5bd4c4a006c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "858cd11c-f37c-4cb8-8775-e782be975d16"
        },
        "item": {
          "id": "b9f183ba-83bc-4886-9d7a-63b78e38b247",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a1c513d7-83da-4105-b22c-ed16e5912059",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cde3e28-4b81-448c-8c9a-d16833dfd76d",
        "cursor": {
          "ref": "5de8b27a-643c-4820-933a-fd47244161be",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "aa29ae5e-5d8d-4451-b841-805b6f82da05"
        },
        "item": {
          "id": "0cde3e28-4b81-448c-8c9a-d16833dfd76d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1f3f635f-2486-48cb-9f2b-b981f8f51055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e890c09f-2815-455b-baf5-da47850f9d43",
        "cursor": {
          "ref": "f9db7827-8ee3-4a3b-8042-6cd0e10b7b1b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ace7cdd0-20a0-4b2e-bea5-f8ca25d7ae53"
        },
        "item": {
          "id": "e890c09f-2815-455b-baf5-da47850f9d43",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8ebada99-7efc-439c-b4a8-ce168313f47a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd9b17f-b9ed-400a-b583-b362ffa3a1a9",
        "cursor": {
          "ref": "97099145-f42f-4ebd-807f-72c1b38189ff",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "053e1269-a174-4c15-a1c7-1ac03738922c"
        },
        "item": {
          "id": "2bd9b17f-b9ed-400a-b583-b362ffa3a1a9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9e3ec29a-47e6-46a3-ba20-347d30f6d4ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402f4dac-6141-425e-bbf7-fb77e83c2ba3",
        "cursor": {
          "ref": "c8bbfc62-8169-46e9-8a08-fb9c8d308b51",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0eb7d377-d323-4a4e-bd35-8aac01413b9b"
        },
        "item": {
          "id": "402f4dac-6141-425e-bbf7-fb77e83c2ba3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b1aec7a9-d2d0-454f-a78a-968250fffd44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393577c7-2d26-4c8a-ae0a-0ab8c2f583dc",
        "cursor": {
          "ref": "93bfb0eb-bb2e-4382-9a98-31e4bf0e02ad",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0c571e32-beea-4300-9f82-752ee0925081"
        },
        "item": {
          "id": "393577c7-2d26-4c8a-ae0a-0ab8c2f583dc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a82a2a19-3e81-4168-811c-92664b6f013c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0db2a87-41b8-43c0-9739-a8967acaad0f",
        "cursor": {
          "ref": "447cdc6e-634b-4f22-9e69-9f03e9b4f698",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f8bde3e2-5dbe-4330-81d9-445cc0a8758f"
        },
        "item": {
          "id": "b0db2a87-41b8-43c0-9739-a8967acaad0f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eec8da42-99a2-47e1-bee8-d56ee9498e02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74459d18-7f83-4f4a-8a31-a753cafbded6",
        "cursor": {
          "ref": "3359af14-f65d-4046-859e-7c812f67a785",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b82959ac-6a1c-4a8b-8fb4-5ec6e78caf7f"
        },
        "item": {
          "id": "74459d18-7f83-4f4a-8a31-a753cafbded6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e11227c0-0217-45fb-b120-8a1b761b9e80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7418f671-e3d5-4e3a-9831-aa8318ddc2b4",
        "cursor": {
          "ref": "a9c9e475-a7d9-4d54-ab23-099fbc78c57c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f7f33bef-a568-4932-a1ff-1b5c1ce5c898"
        },
        "item": {
          "id": "7418f671-e3d5-4e3a-9831-aa8318ddc2b4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "93bde6f7-3c58-473c-a901-1f22dcbdb1bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0cb2e2-b13c-4e2e-b1ad-0cb4eac8bbc3",
        "cursor": {
          "ref": "5a5cc01d-5e5e-4b23-bf79-a2e43751c9fa",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ce95a0ed-83de-48a2-a223-a118f8d67499"
        },
        "item": {
          "id": "dc0cb2e2-b13c-4e2e-b1ad-0cb4eac8bbc3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e0b87b43-50e7-48a9-845a-b05442eb8715",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559f5831-c068-4401-a970-1209d4163d11",
        "cursor": {
          "ref": "d77712cc-9a65-4e6e-8e29-d42a23be84fb",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0916b40a-e155-4c4e-a626-6a22554c75ad"
        },
        "item": {
          "id": "559f5831-c068-4401-a970-1209d4163d11",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5a1b48d1-1f27-42a6-ab44-3bb6cf69e7e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c7bf0f-5f73-4d91-8566-743d98d4205e",
        "cursor": {
          "ref": "58e07c33-fb91-4b12-aa97-0140975bca65",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2240ac78-3caf-4cfe-becb-642791041119"
        },
        "item": {
          "id": "21c7bf0f-5f73-4d91-8566-743d98d4205e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "56440975-4539-493e-9e92-9fd05135d662",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4968e7-ce89-4d0c-99f4-dd1503d7a811",
        "cursor": {
          "ref": "78bc507c-c695-45df-90b2-9a05baa6d484",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "22e50e50-0c9c-49e5-92c8-1cae9d4cec04"
        },
        "item": {
          "id": "6f4968e7-ce89-4d0c-99f4-dd1503d7a811",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e594b36c-d091-4e65-9f9c-c45aa7bc5fd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cbc42f-aa70-476e-89dd-f4a10f311996",
        "cursor": {
          "ref": "0ad5ebf4-cf53-47ce-9fb4-806f9045e585",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3204c9c5-fb54-4c16-9e28-f4cc2d6766e3"
        },
        "item": {
          "id": "c2cbc42f-aa70-476e-89dd-f4a10f311996",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cad94788-1fbf-4e91-b916-74909bb85b12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e22f71-7bf8-4193-b14f-1094463a5dd1",
        "cursor": {
          "ref": "85d42046-7147-48ee-9974-ec545457cd56",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "18ed2227-b907-4d5a-b833-6fe7c62d8f07"
        },
        "item": {
          "id": "c3e22f71-7bf8-4193-b14f-1094463a5dd1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b6f14fed-2305-4c04-b9b3-97f102ea17f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac90346-0418-47ae-bfee-2b5897dd2632",
        "cursor": {
          "ref": "b788298d-ca90-4b11-ac26-951aed64329f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5b1c0786-06ad-417c-a76c-3107075d7782"
        },
        "item": {
          "id": "2ac90346-0418-47ae-bfee-2b5897dd2632",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fed0cee1-f36d-4cff-a5be-ecfd1f74376c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f4ff36-5cd2-4297-9342-7e29f3b84b28",
        "cursor": {
          "ref": "df92f1b3-3bcc-4e5c-b608-78bd2cc03f41",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a3a69ace-3788-4a2d-9e51-9f50af089c68"
        },
        "item": {
          "id": "59f4ff36-5cd2-4297-9342-7e29f3b84b28",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "276d0afe-f819-4514-a260-2a08cea519ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeb0b41-9816-47ca-9ef5-01ffb7823f78",
        "cursor": {
          "ref": "5fa9c2fc-48a9-49f5-a251-52216f29d3b3",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a9f3ff58-0c9f-4479-86fa-b8ad44efc54b"
        },
        "item": {
          "id": "baeb0b41-9816-47ca-9ef5-01ffb7823f78",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92583d77-6e89-4f4a-a5ba-f7643eff90b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe076311-6a60-4758-87c4-b68bf0049662",
        "cursor": {
          "ref": "f7f9a702-59f6-43b7-ac3f-0b32090ffb8e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f79106df-99d5-4136-9da3-b5fced81e935"
        },
        "item": {
          "id": "fe076311-6a60-4758-87c4-b68bf0049662",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1a296319-a03d-40fa-ac59-83267a928a8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6115d527-e276-40b3-b7eb-b084c2d879c9",
        "cursor": {
          "ref": "9a1e5dad-a51c-4e2e-951c-6ad35c1e80be",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a4b6ff56-70ce-47b3-86fd-53be6d6f7639"
        },
        "item": {
          "id": "6115d527-e276-40b3-b7eb-b084c2d879c9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b20a1538-3c50-4f82-b639-4570d6dc0853",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fa8eea-e4f2-4f39-9692-d9d89864ca58",
        "cursor": {
          "ref": "217ac215-8dd5-4c0c-bd15-143f232fdc48",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c9a730ff-beec-478f-a0a0-27602285d4c8"
        },
        "item": {
          "id": "22fa8eea-e4f2-4f39-9692-d9d89864ca58",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a79376dc-45cc-4979-a4f3-e1af94be10a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32416511-b519-4c62-ade4-f26c87ee2b0c",
        "cursor": {
          "ref": "ce188fcd-dee3-4d6a-addb-933ee5c3f81f",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "55dce3f2-17af-4153-80f2-deecb5eb2e69"
        },
        "item": {
          "id": "32416511-b519-4c62-ade4-f26c87ee2b0c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2611b424-4a81-46e6-9349-792ca2ceccfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46f0f1d-569a-4596-a409-d7eac667eb9e",
        "cursor": {
          "ref": "3f28be51-ff2f-472f-a6be-4f518e1c817d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "29a9e0d6-8d37-4bc7-b264-e03e9f9f1a0a"
        },
        "item": {
          "id": "e46f0f1d-569a-4596-a409-d7eac667eb9e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0fee7833-4c05-4f2f-8250-351cdcea5e25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efa1cd2-b447-4bce-a86a-451d5a8cffa6",
        "cursor": {
          "ref": "b52e42ab-9a57-4a4b-b9bc-89eae4d3ed4c",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a0480995-6fba-488f-b5a0-61fb43a4649b"
        },
        "item": {
          "id": "2efa1cd2-b447-4bce-a86a-451d5a8cffa6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7d6450c4-2e17-402b-a4d7-3fd08463101c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf07b354-6cb5-441e-b336-ad7410a38bf7",
        "cursor": {
          "ref": "8abe0ec6-5896-49c1-880b-f5ca98e0399e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3d97383d-d973-40b7-b776-7c5d9b9aff9a"
        },
        "item": {
          "id": "bf07b354-6cb5-441e-b336-ad7410a38bf7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "76e439b4-5333-4f60-b9ab-d8105e2c48c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d67a73-f712-4570-b76a-f310e2c729f5",
        "cursor": {
          "ref": "0717b950-de5a-4e4f-b684-ee73e1951f22",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e75f92a3-fbbe-4540-9ff5-cd6471c37a7f"
        },
        "item": {
          "id": "33d67a73-f712-4570-b76a-f310e2c729f5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dcf1f1de-f1eb-439a-a77e-d341f2e61e72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b990f2-a394-47d0-8719-10c4c62b63ad",
        "cursor": {
          "ref": "4e9fd059-16df-4f33-92e3-6fa62f6acd7a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "76ae394b-a5fb-4a50-9fc3-24936a78a4a3"
        },
        "item": {
          "id": "21b990f2-a394-47d0-8719-10c4c62b63ad",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "35c029ab-9838-4f24-8fe1-3cbd8493478b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2274a99-f417-4794-8803-28fec6e6bf28",
        "cursor": {
          "ref": "7a7c44e0-8e71-41aa-a10c-5391fdabc8b9",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "65be681a-7241-4592-bf3a-b4bbe106c84c"
        },
        "item": {
          "id": "d2274a99-f417-4794-8803-28fec6e6bf28",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4611a638-4925-49f4-94a3-16451edb3fb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5f0779-f112-4d86-8d53-f172e833ab6c",
        "cursor": {
          "ref": "efc5ce87-2a5a-4611-a68e-e7da5e80d416",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7f522d1b-b960-4597-88ae-4de0e94840d9"
        },
        "item": {
          "id": "6b5f0779-f112-4d86-8d53-f172e833ab6c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "59b6da39-21e5-463b-820b-a1dc694e055e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0619ff06-7f23-4b0a-a426-6997f57434ec",
        "cursor": {
          "ref": "23219ee7-a857-4733-86f0-5472b4f61330",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "165ea3e5-ea94-4489-824b-fd8174d0a2ae"
        },
        "item": {
          "id": "0619ff06-7f23-4b0a-a426-6997f57434ec",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "90bffb1d-e6ad-45b9-a4d9-65d141ae5e62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e461ad92-4520-471b-aca0-ac0e4b23dc66",
        "cursor": {
          "ref": "1d82ee70-f41e-4448-9bc5-ab8ebcfd74dd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d9213e86-ed55-4d8b-9291-74f85fe98a1a"
        },
        "item": {
          "id": "e461ad92-4520-471b-aca0-ac0e4b23dc66",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9f92d0a1-8bec-4365-bd71-40f863411a7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 183,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "c0295e54-4438-495c-b076-83fdcfa704cc",
        "cursor": {
          "ref": "eb2d0f14-c943-4863-8169-051f99c2441a",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9b089115-3112-4fe2-a92c-480891f478c3"
        },
        "item": {
          "id": "c0295e54-4438-495c-b076-83fdcfa704cc",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "aab00636-b292-4ae2-acb3-626bec1e9a6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "31379a23-d092-4859-b3b2-d7d546c9adb7",
        "cursor": {
          "ref": "37ccfcda-fae8-4a88-9654-38d986a5e665",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "30ab2f4e-4d1d-4830-870d-2ac268784953"
        },
        "item": {
          "id": "31379a23-d092-4859-b3b2-d7d546c9adb7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cd893346-116c-4cd8-a6f3-40d9adeeab7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "6c7c42ef-f8f4-422e-8934-4e0bb03458e3",
        "cursor": {
          "ref": "4eb34581-ec9c-4779-99bc-6bec29ecc041",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5ea00440-74b6-44c9-8afd-4d9c73ea43f8"
        },
        "item": {
          "id": "6c7c42ef-f8f4-422e-8934-4e0bb03458e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "660da4d6-d1e4-4883-af77-3519ef38720e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "9e6f0228-8822-43b0-8b82-2d8f693e6b92",
        "cursor": {
          "ref": "b93a1554-25b2-402d-809b-f27bef258060",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "66b4712c-6a27-4b4d-834d-7315b2a26344"
        },
        "item": {
          "id": "9e6f0228-8822-43b0-8b82-2d8f693e6b92",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "baba9e04-3e32-4073-bd94-00b393e0bd0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5c37b0ac-ce9e-4cdb-a65b-439afaeb6d00",
        "cursor": {
          "ref": "1035a75f-ea6b-4706-b3d5-d02bbaec25bd",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "761fb755-c4fd-4546-ac0b-2222de81f7e9"
        },
        "item": {
          "id": "5c37b0ac-ce9e-4cdb-a65b-439afaeb6d00",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fb1d544c-6bf0-44ff-a4a3-0c0cf36f487d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "60b351d0-4900-44dd-8840-ad82cc0be71c",
        "cursor": {
          "ref": "8e95ac26-f70c-4b11-8618-0907bc06e1b0",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8376ed85-5d20-4bac-bcd2-5c6ef4524fd1"
        },
        "item": {
          "id": "60b351d0-4900-44dd-8840-ad82cc0be71c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7763f032-94ca-4469-a6ed-a8c75f829707",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bdbd1f-fc86-4b02-86d0-2a803801dd54",
        "cursor": {
          "ref": "188cafc3-71fe-4d03-8490-66aa408f14f6",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "46b26af8-98e2-4e67-9345-e0494ec98083"
        },
        "item": {
          "id": "74bdbd1f-fc86-4b02-86d0-2a803801dd54",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "708b22d4-fb1d-4a9a-aefa-8282a122aa25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cba2121-5203-4c66-8eb9-d215cba7779f",
        "cursor": {
          "ref": "8c6c7dc2-9ba9-4a6a-b8a8-f054ead1f463",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a663a27c-06ea-4d46-8085-330b8e0d7259"
        },
        "item": {
          "id": "1cba2121-5203-4c66-8eb9-d215cba7779f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d4fd6285-5b44-44fd-bd2a-f238de6c0e10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6e1185-bc7e-44d1-9536-b6d33eefd174",
        "cursor": {
          "ref": "c75d57e2-f465-4f69-8d06-24d71cb4986b",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ec7e695f-413b-4c92-8535-0ef112742102"
        },
        "item": {
          "id": "0b6e1185-bc7e-44d1-9536-b6d33eefd174",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c998c531-36c9-46cc-b71a-8607e1fcd874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42441299-c41d-4348-8dea-1eaea23d4c2a",
        "cursor": {
          "ref": "4ece2820-dc08-47c9-b888-b76c2c2a4202",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3dea07e8-1135-427d-ade8-502d5848f8ff"
        },
        "item": {
          "id": "42441299-c41d-4348-8dea-1eaea23d4c2a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "654cb60e-dce2-4646-bb0b-e48db4205a72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6563bf-9a28-43ed-a330-4fefb0db7a3d",
        "cursor": {
          "ref": "47f02517-3404-45b5-b887-ea3b66704cce",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f2a2af36-dc93-48c7-b78a-0cedc79dc2b5"
        },
        "item": {
          "id": "4b6563bf-9a28-43ed-a330-4fefb0db7a3d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "50bb6db8-748c-4a28-9cc2-f07e719330f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8be536d-f4da-4629-a6ec-c94bb1207ac5",
        "cursor": {
          "ref": "e5642052-f573-454f-afef-82c79c46fdf0",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a24ac4d9-8c9d-464e-b817-bc8666487386"
        },
        "item": {
          "id": "f8be536d-f4da-4629-a6ec-c94bb1207ac5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3512e5e0-1cef-4b40-aac9-65dd00c146c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88194e26-a0e5-4180-ab24-774230cbf2cf",
        "cursor": {
          "ref": "b635e24b-aa19-42da-b9e0-ebffef49992b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e1a49ac7-33a2-43cc-a5ed-01ba84eb1a07"
        },
        "item": {
          "id": "88194e26-a0e5-4180-ab24-774230cbf2cf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9238b75d-77c7-4496-9dd7-97e4dedc7aa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be05082-5a1c-434c-b029-cb616d3378fb",
        "cursor": {
          "ref": "618d4523-ad63-4f5b-aaa6-a5411015fb22",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "26b7d208-9b30-48f5-860d-72b7d522ce20"
        },
        "item": {
          "id": "9be05082-5a1c-434c-b029-cb616d3378fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f8327efc-9b51-49c5-b5ee-b908556f3f7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576d6212-6c2a-47ae-816d-44408339c87a",
        "cursor": {
          "ref": "8e4925f3-c2a6-44ee-8fcc-0109ffe8c79d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "911401f3-7b9a-40e8-8796-ec07d07d98c1"
        },
        "item": {
          "id": "576d6212-6c2a-47ae-816d-44408339c87a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1b8a4ce4-7780-4e19-94db-eb9b1318b498",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1fe9d0-2323-40c9-9554-af9d9d4af0e4",
        "cursor": {
          "ref": "d3b94d0d-287e-4f83-b5c4-af849530cc0e",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ecdc49a5-c55b-4413-953b-7dae83094acf"
        },
        "item": {
          "id": "ef1fe9d0-2323-40c9-9554-af9d9d4af0e4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f605ce21-5ba6-462a-9baf-6aed00ef52ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bf1d08-4eca-4408-9c8d-b7a2ee8a82f7",
        "cursor": {
          "ref": "2ead578c-5823-41fe-b918-e43c1546e832",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ea3f365f-c363-4876-9af5-41a93b18bf02"
        },
        "item": {
          "id": "e2bf1d08-4eca-4408-9c8d-b7a2ee8a82f7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "debcc305-3cc7-4759-906d-0fbb5cdca533",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef464e0-460c-4929-bf21-3f802b478042",
        "cursor": {
          "ref": "d49f31f6-0147-4b95-b2f5-f6e50c38558f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "77000349-b91b-48ae-805f-ddbf8908e4fa"
        },
        "item": {
          "id": "aef464e0-460c-4929-bf21-3f802b478042",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f4e8897-fbd0-4c75-9390-8747d60260c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31e3037-74b3-4e4b-a105-63ef5da6fd73",
        "cursor": {
          "ref": "145ff9ba-0346-4328-913d-22384e47412c",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4f7a7757-55fa-4385-bfd0-103f3460465b"
        },
        "item": {
          "id": "b31e3037-74b3-4e4b-a105-63ef5da6fd73",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "721383ac-fa2f-4412-b7b7-bfa98bd9c30c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400fc652-9e6e-4067-b36b-d2edef2e71e9",
        "cursor": {
          "ref": "3fed6ac9-f041-46db-9e44-8e02274947b8",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d788f707-5310-4ea6-a3b2-5cac4d9cf3e4"
        },
        "item": {
          "id": "400fc652-9e6e-4067-b36b-d2edef2e71e9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3904cb84-b213-4d32-a2c5-1f55ca8f3c94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aab9e02-9c87-4b45-a837-0568695f48f5",
        "cursor": {
          "ref": "04d2050b-8ea0-4df4-9dae-77cc1d06b2b7",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5b242b7c-3636-4d8c-8139-8dc8bed7c167"
        },
        "item": {
          "id": "4aab9e02-9c87-4b45-a837-0568695f48f5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1908f80-669b-4452-ae1a-25898eb91c59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23df624b-ba98-41dd-bda9-f24f18774897",
        "cursor": {
          "ref": "04f7d6a3-b183-426a-8539-9655aa3246cb",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c1aeb607-8165-454a-abbb-f59d77e54342"
        },
        "item": {
          "id": "23df624b-ba98-41dd-bda9-f24f18774897",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b6f636fc-08b5-4ce3-83db-7c91aa993fdb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eac0499-0104-4232-b9fb-ce6d70760889",
        "cursor": {
          "ref": "86a62fb4-2127-407d-ad64-e97939b85f57",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "292b63c4-7be6-483b-aed1-d48e771758b7"
        },
        "item": {
          "id": "4eac0499-0104-4232-b9fb-ce6d70760889",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "42e0b44d-f876-4135-b169-617f1a749c26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06967d2-1550-47ae-8fa9-4b4361fc23d8",
        "cursor": {
          "ref": "f5c6284a-ea7a-4279-b90b-e2198c3a45b7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0c076926-c7f0-49da-9a28-df8fbc410fd1"
        },
        "item": {
          "id": "d06967d2-1550-47ae-8fa9-4b4361fc23d8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "01a14046-985e-43e6-bbe1-027fd43b82a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059a191e-f1c8-4be7-a1a8-25d5b11987f5",
        "cursor": {
          "ref": "412c9455-3766-45af-911e-5eb47e7bf79a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c4f334c9-a8f7-4dda-a977-4b2b118b5c8c"
        },
        "item": {
          "id": "059a191e-f1c8-4be7-a1a8-25d5b11987f5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f6795c82-27a5-465d-9497-5c7f98678d9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff7830e-6da0-4013-8378-03e3679c04d0",
        "cursor": {
          "ref": "f0999785-2077-4a0e-9216-4017305f6a92",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c13cc7da-267c-4315-9523-2acfd95d7f3e"
        },
        "item": {
          "id": "2ff7830e-6da0-4013-8378-03e3679c04d0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a04b2790-bc6e-4ea2-9019-8aad76670c70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f321ec5-9ff3-49f0-8875-e48d20a0470a",
        "cursor": {
          "ref": "685b705f-cafa-4a4e-9d7f-a65bcdcca063",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ed2d3585-fddc-43b6-95c9-dc3c73214649"
        },
        "item": {
          "id": "6f321ec5-9ff3-49f0-8875-e48d20a0470a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3e5d47a5-49b2-4424-862b-3f086c910389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86349c0d-8735-4954-bf5c-8f7deb40da0d",
        "cursor": {
          "ref": "afe565ae-58b4-4724-a1de-dc21d7c9430c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e59f06ae-1122-48cc-a320-dd4d4a9fdc87"
        },
        "item": {
          "id": "86349c0d-8735-4954-bf5c-8f7deb40da0d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e3ebc7d4-ee94-4301-91ea-a1adad0e578d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b128caf-824d-4fa3-accd-0ad88a1bfaba",
        "cursor": {
          "ref": "1971d123-1c50-422d-bd1c-59102fe5e77c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "db2d9e2b-5757-4a1c-92d8-7fe38c10a641"
        },
        "item": {
          "id": "2b128caf-824d-4fa3-accd-0ad88a1bfaba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b84e14cb-d96f-42ec-b5d7-97530f5f278e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386bf280-eaa5-442a-b365-ffb03868837d",
        "cursor": {
          "ref": "40d2799f-4751-4a28-b166-869b75dfa5e4",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d254afed-ab59-4f66-8a83-d6589b867253"
        },
        "item": {
          "id": "386bf280-eaa5-442a-b365-ffb03868837d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e0df6b63-3168-4297-9b8b-c1d63d3c332d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbd7c2a-c45f-45a6-b905-b172a3d1b283",
        "cursor": {
          "ref": "07b82331-a049-47a5-a01a-fb84b5fe370e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8eb3d66b-36b9-4acb-a508-c43cfea8b3ab"
        },
        "item": {
          "id": "1dbd7c2a-c45f-45a6-b905-b172a3d1b283",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a9598a82-990a-4ce0-88be-6132eac28c21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0b61f2-d34e-4184-b44b-3e0b8861eead",
        "cursor": {
          "ref": "6f73a5ac-6b3a-4840-9716-a06ab4f82a2a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "74b32b05-ab53-4f18-82ac-e4c6e1fae7b3"
        },
        "item": {
          "id": "ee0b61f2-d34e-4184-b44b-3e0b8861eead",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ad7a588e-dfc5-421b-bd43-9fdc2204c879",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f70fea-f0aa-4484-8864-32d06354082b",
        "cursor": {
          "ref": "b4f37419-e0ce-4f4c-8859-ab713c2a786a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d8f169d8-9502-4aee-9051-dd25ae77c4a7"
        },
        "item": {
          "id": "17f70fea-f0aa-4484-8864-32d06354082b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "13339615-50a3-4039-9670-b1e8ca79adc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feab8114-c724-4e99-b19c-573e2aacbdae",
        "cursor": {
          "ref": "03d23187-78dd-42fa-8d8a-7fa3bd71a53f",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d6f4f0ea-0a40-42bb-807a-b8ce2b784c00"
        },
        "item": {
          "id": "feab8114-c724-4e99-b19c-573e2aacbdae",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f6c1d329-1918-4c75-9055-1d206516e637",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f2076c-d8d0-4754-8c9e-fc4049bb9f45",
        "cursor": {
          "ref": "7d262850-9b65-4aa0-a615-fefb56d38b3c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d9c90804-75f8-4e9e-9bd7-95e82f4ec7ac"
        },
        "item": {
          "id": "13f2076c-d8d0-4754-8c9e-fc4049bb9f45",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "50c72f13-ca26-4d60-9dc9-215dd0e33459",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce269bd9-1106-4b41-9c90-3f9d665043ff",
        "cursor": {
          "ref": "95174689-f4f4-45c7-9e6c-496c09ae076b",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e2be1e22-1400-4d93-855b-013294181dc5"
        },
        "item": {
          "id": "ce269bd9-1106-4b41-9c90-3f9d665043ff",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6c98d43e-5e8e-4839-8458-0f6c9a7ad479",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8147c79a-5e6e-41ce-8e79-255273c9e6cc",
        "cursor": {
          "ref": "0852aefa-7916-44e9-a537-abb806b21ade",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3480bfa3-ab85-48cf-9574-94b9d1729307"
        },
        "item": {
          "id": "8147c79a-5e6e-41ce-8e79-255273c9e6cc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e70bf81b-4d83-47df-a6db-9a11abc62e87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6ae658-36f3-4962-86ae-6bab4ea59d07",
        "cursor": {
          "ref": "78e9dac0-1d57-4150-a951-e21ea1f633b5",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "82e77667-c3fe-4873-8704-352f0b9ea3ed"
        },
        "item": {
          "id": "ae6ae658-36f3-4962-86ae-6bab4ea59d07",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7796f913-2f77-4a0c-8ff2-0ff6abcc2e12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb370da6-cf3f-40fc-945c-44fac8dc09d6",
        "cursor": {
          "ref": "306d5bfd-b6ad-4649-9a8b-43b226ff2c02",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "50fb33f8-5ac3-43b0-842e-706df022287e"
        },
        "item": {
          "id": "eb370da6-cf3f-40fc-945c-44fac8dc09d6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c533a684-7970-4aec-869c-6ef76c870cc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5a3db5-4e95-437a-99e0-c3f8fc0f241b",
        "cursor": {
          "ref": "b13daf94-6c7d-4e03-844e-9573ef8e4e1a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3b241515-578a-43d6-b628-d7038b8780fd"
        },
        "item": {
          "id": "cc5a3db5-4e95-437a-99e0-c3f8fc0f241b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ad548b23-c125-442d-8ef2-d82dca99c2c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9b4ca0-78a5-4bb6-8be4-6d1a23402edd",
        "cursor": {
          "ref": "5f26c215-7b28-4631-bd9e-d7dc2954c911",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2c7e1227-58df-45c4-992b-1d3c7e55f31f"
        },
        "item": {
          "id": "5a9b4ca0-78a5-4bb6-8be4-6d1a23402edd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a9228bd3-3f20-4567-97db-e5584bd3a3be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908704b8-9bb6-4f69-b633-61cc97f5ce74",
        "cursor": {
          "ref": "81b5e942-27eb-45b5-bd76-32ffb89e0630",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2d83bbae-c621-4ff0-a700-a2591fe6c5d1"
        },
        "item": {
          "id": "908704b8-9bb6-4f69-b633-61cc97f5ce74",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a0edcca1-17fb-4fc2-ad76-7e3a97a600a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377b4585-7df1-43ef-8fbe-85871b4fa234",
        "cursor": {
          "ref": "b3a6673c-73e0-4ec0-812f-4000bcd926b2",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0cd820ca-bbce-4c59-b9d7-c19a5ff565e1"
        },
        "item": {
          "id": "377b4585-7df1-43ef-8fbe-85871b4fa234",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7de6570d-3d33-447a-93fd-cba18b448953",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de7d1af-28a4-42fd-ad11-a5d23449108f",
        "cursor": {
          "ref": "36d1d359-481e-43d2-8de4-26c2dda3fd09",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "352fa869-aa0b-4cff-a03e-2130768b8d4b"
        },
        "item": {
          "id": "2de7d1af-28a4-42fd-ad11-a5d23449108f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2a952d7b-e84b-466a-a901-b971e6fed6b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6917cf8e-c95d-4e79-8127-7bd003c3e411",
        "cursor": {
          "ref": "295dc8dd-b160-43a1-b429-a35898437764",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "740ad85a-334c-432b-a470-129964e6d236"
        },
        "item": {
          "id": "6917cf8e-c95d-4e79-8127-7bd003c3e411",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fa32f15c-0710-4d73-915b-b4f5f1390b55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08d6df4-64f7-4a21-93c5-a8b259e63607",
        "cursor": {
          "ref": "297a9183-648c-4acb-a36d-613415183372",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "13457924-a956-4845-ac9f-2f8ac1605cd0"
        },
        "item": {
          "id": "b08d6df4-64f7-4a21-93c5-a8b259e63607",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da157ced-c9a7-48e8-b6b1-d25bbd712e0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984f6707-94fe-4109-8497-64f5293e37d1",
        "cursor": {
          "ref": "08809f51-75a9-424e-b5a5-8c40e3248101",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8efdf7b8-bb27-49f1-b96e-5491cf7372ed"
        },
        "item": {
          "id": "984f6707-94fe-4109-8497-64f5293e37d1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7cb392e9-2200-49a2-9488-dfaa8c35e055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a5deef-7f25-48f3-a29f-cc8ff69d3cc3",
        "cursor": {
          "ref": "40a0e82a-d698-4ae5-97c0-fb721a7cebd4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "249974a4-5f6b-4035-af3e-7a760a9303b2"
        },
        "item": {
          "id": "d2a5deef-7f25-48f3-a29f-cc8ff69d3cc3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c288d3c4-9963-461e-bc89-801ee5de8438",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ad3261-793a-49de-a6df-41e4f508ce22",
        "cursor": {
          "ref": "26d93a3d-a38e-4666-8dd6-d1db4dbf2fcd",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ce68d8e8-7fc4-4f0d-ba0a-2bb59c5965f1"
        },
        "item": {
          "id": "59ad3261-793a-49de-a6df-41e4f508ce22",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0557d327-d478-4539-af60-74be0dd9c1a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c891c1bb-6c52-4e03-9030-097f3e9a815e",
        "cursor": {
          "ref": "6fa100b1-86eb-4a26-bcbc-816ea62e0088",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "55b036b7-78fd-4277-aabd-e36c439b32ab"
        },
        "item": {
          "id": "c891c1bb-6c52-4e03-9030-097f3e9a815e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b31bd27d-4216-4d5f-be7a-95bf53c9d5d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fc2b39-2d2d-474b-aaee-43f2205ba5b8",
        "cursor": {
          "ref": "82b85057-1cf6-4afb-bea2-5f8824f28805",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "24f3c1e8-7e97-4113-a732-b563b6f20b80"
        },
        "item": {
          "id": "95fc2b39-2d2d-474b-aaee-43f2205ba5b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ff2e3b7b-2368-4088-8551-b96011082d27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b383ef-4de5-43aa-96bb-a8a31efb97da",
        "cursor": {
          "ref": "1ca8c6a8-6d82-4b4c-ae64-a796e6110d9a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c71cbf9a-c35a-497a-8d49-d133d999d43d"
        },
        "item": {
          "id": "10b383ef-4de5-43aa-96bb-a8a31efb97da",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a8537c75-35fc-4630-b7af-2ff9ddbf257c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526c9125-0263-47dc-a095-3cdc4262fc5e",
        "cursor": {
          "ref": "3299a6f5-8d3d-415e-8693-6d8567a7e0ae",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5ddccfc3-6d4f-456f-bb5c-0bfb8f9a2add"
        },
        "item": {
          "id": "526c9125-0263-47dc-a095-3cdc4262fc5e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "db51c5d5-6371-43d7-bf99-e0008385cbf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9841d9-4c60-4d01-a9f5-c8188b33d970",
        "cursor": {
          "ref": "22604386-ad6e-441b-a124-6738d4daadcc",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "81e9563d-51fc-45c6-b7c6-9b48272de445"
        },
        "item": {
          "id": "2f9841d9-4c60-4d01-a9f5-c8188b33d970",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "47551bda-15b5-4338-bcc8-5538afbd49b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcdeae42-ae0b-4382-82de-83327ed40978",
        "cursor": {
          "ref": "30932e07-c604-419f-afed-e8eea1bf3c84",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5cea4706-a13d-4695-8200-2d71212caef6"
        },
        "item": {
          "id": "fcdeae42-ae0b-4382-82de-83327ed40978",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "22870fec-df3c-4353-9638-7cd8906da231",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e0873b-8623-4fe9-b768-3d00c53eaca5",
        "cursor": {
          "ref": "ab586578-4e65-4d2f-931a-d12cf8ad9ff6",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fd753d34-0883-4490-8103-72e39dfae063"
        },
        "item": {
          "id": "19e0873b-8623-4fe9-b768-3d00c53eaca5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0bb84a7a-7c5c-4456-b269-00ce627853cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937a1feb-f5bd-4001-8b91-2e13afec2a01",
        "cursor": {
          "ref": "4724e974-f1ab-45ef-b3f9-d213824b44c6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "696b1df9-b819-40fd-9c92-cfdaa97fa90a"
        },
        "item": {
          "id": "937a1feb-f5bd-4001-8b91-2e13afec2a01",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6dc170dc-cfc0-4c0e-8f04-8850003b3320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d984fc7e-d3a3-41f0-8341-8be6df2b845a",
        "cursor": {
          "ref": "3950c298-f6cc-4019-8f53-c7db96df4094",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5bd5f5f2-94bd-4999-ac29-3d23510a145f"
        },
        "item": {
          "id": "d984fc7e-d3a3-41f0-8341-8be6df2b845a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f3a17b30-cb00-4e21-9e79-57e4b7c5d03a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77598220-43b9-426d-b2d1-dcc05e78a0bf",
        "cursor": {
          "ref": "0e4555e7-ac36-4310-bb89-3eba808ef489",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "85643529-0965-45de-b50c-bb7f054a3340"
        },
        "item": {
          "id": "77598220-43b9-426d-b2d1-dcc05e78a0bf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8a59c702-8d52-43d2-bc9d-1ae6139ed39e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6784e9-9a94-45d5-9dbb-261b13543516",
        "cursor": {
          "ref": "128af3c2-dcb8-4f47-857e-bdfb08994848",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e76e8a98-e142-4303-b530-5868463dff26"
        },
        "item": {
          "id": "df6784e9-9a94-45d5-9dbb-261b13543516",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "48027052-98ac-49cf-8986-a53ae7761b18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a874be42-f259-42d1-9d29-7961cca69b58",
        "cursor": {
          "ref": "d9c6fa72-f2d2-4e42-b673-a122170f86bb",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bdeb2866-280a-41ea-b34b-d736ae3079d0"
        },
        "item": {
          "id": "a874be42-f259-42d1-9d29-7961cca69b58",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "06c83945-0e1b-4dcc-a5e4-79af6c2d7034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584a5800-f3a1-41e5-90fe-fd68e83441ba",
        "cursor": {
          "ref": "c5230d09-ea98-4cf0-b727-1583ca8d5cfd",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9b0bd25c-0ad4-4b11-912c-748b352725b8"
        },
        "item": {
          "id": "584a5800-f3a1-41e5-90fe-fd68e83441ba",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f96a19f6-b974-4e02-b06a-125b849cd575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e255e5-0829-4830-853d-92ea993fb70b",
        "cursor": {
          "ref": "f5ac0a97-dc07-49eb-bad6-aa98f9a3692b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "03562ed8-a93d-4f50-a02d-f1f4454c5410"
        },
        "item": {
          "id": "95e255e5-0829-4830-853d-92ea993fb70b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "309fb2b2-da79-44b0-875a-38a8e282761d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8d73d2-a702-4870-8bb5-526880fe02a7",
        "cursor": {
          "ref": "08c42240-781e-40b3-a902-1f5ac7015cff",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e526a6be-ace6-4e0e-9eb4-15b2af4ba225"
        },
        "item": {
          "id": "de8d73d2-a702-4870-8bb5-526880fe02a7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1dcb45da-43b5-4c33-8941-de9d2841efa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9697f20f-7cb2-4688-a678-c0f781752803",
        "cursor": {
          "ref": "a98306cb-e90a-4415-ab7c-520a3a32e043",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f3f69acc-7763-4946-b58a-a7114338e547"
        },
        "item": {
          "id": "9697f20f-7cb2-4688-a678-c0f781752803",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ae895284-5c4b-42b1-ad11-7bfe0d078620",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1882b522-66fe-48d6-8e89-1d5c2b965cce",
        "cursor": {
          "ref": "b3c37187-c5e0-48dc-89a6-af1b1c845643",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "520a038f-6448-4df1-830d-a9dbf95f0256"
        },
        "item": {
          "id": "1882b522-66fe-48d6-8e89-1d5c2b965cce",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ba67e73c-257d-44ab-a751-81badea45e2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4764b7-abb6-4ed3-b7cb-8b3b2f394a2a",
        "cursor": {
          "ref": "e8a80bd7-95af-47ca-a08c-96c5db9e39c1",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7191aad8-b437-4308-a16f-80b347aaa5ec"
        },
        "item": {
          "id": "ca4764b7-abb6-4ed3-b7cb-8b3b2f394a2a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c3cf2e6e-3840-4b3f-a744-1ad3fd1be288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2334cd-e222-498b-a01d-2f495ecdb773",
        "cursor": {
          "ref": "72608649-e06a-4439-97f2-1c91dd47d98b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0b8f5387-e98e-4eb9-98cc-73c782b4a2a1"
        },
        "item": {
          "id": "aa2334cd-e222-498b-a01d-2f495ecdb773",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "af2acd6e-7af1-4ad1-a0b4-f15f195a372b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e88493-9e67-45cf-bd0b-11721861e622",
        "cursor": {
          "ref": "137c2339-c7a4-4560-a0a2-9f7f750ca234",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5cd9a2ce-6648-4e71-bb6e-d43c6c8118f7"
        },
        "item": {
          "id": "59e88493-9e67-45cf-bd0b-11721861e622",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "45c5e25b-6878-47ec-9fb3-5b10a717f39c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299ae5de-fbae-4cc8-bebe-ec7f8ebffef6",
        "cursor": {
          "ref": "21c49fc6-03ad-4f76-ad26-90c1f56a21e9",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "768b6c8c-a5f8-4ac6-b959-214a4ead90bf"
        },
        "item": {
          "id": "299ae5de-fbae-4cc8-bebe-ec7f8ebffef6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a94bca23-75bd-4f61-8424-f79729a0e7d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6c2ac1-6245-45a4-a875-16fd675b4923",
        "cursor": {
          "ref": "75a8ddd2-ef0b-40d9-996d-05a54066f223",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3505e988-1ad1-4645-a5be-05b25e73650f"
        },
        "item": {
          "id": "de6c2ac1-6245-45a4-a875-16fd675b4923",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f00c02ee-c346-453a-8a10-0932b0d95d26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9510ad-e06e-4203-8ba7-0ba87a83b21e",
        "cursor": {
          "ref": "ba1de3fa-10bc-4a74-aa7a-2a8bbbe0b70c",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "54d09fb6-e20c-4a7a-82ee-a54e5b7113c6"
        },
        "item": {
          "id": "1d9510ad-e06e-4203-8ba7-0ba87a83b21e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b41e479d-1425-4ac8-824c-ca082a8089ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38639d2-9a29-427b-a38a-027db608e8f0",
        "cursor": {
          "ref": "93f9b6b3-da97-455c-8104-7d1d041ce145",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f9c891d7-33ca-4fbc-b972-314ca9a8b80c"
        },
        "item": {
          "id": "b38639d2-9a29-427b-a38a-027db608e8f0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0abdaa42-9c5c-4074-a515-341353911fa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141c44b0-a8d2-40b6-8751-55216fa8c489",
        "cursor": {
          "ref": "435e6351-73ed-45c1-93d8-169af0a813a1",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1ad3b657-d6ba-435e-84ce-e94b8cadbf3c"
        },
        "item": {
          "id": "141c44b0-a8d2-40b6-8751-55216fa8c489",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9df089b6-0170-444d-ad62-de8e7c247100",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de37ffc9-bbfe-44c2-813a-1772abff49e9",
        "cursor": {
          "ref": "623e4271-bab2-4a1c-8259-1a3643210c60",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c5468ca7-bb88-48ce-9f3d-c76c04b28fc8"
        },
        "item": {
          "id": "de37ffc9-bbfe-44c2-813a-1772abff49e9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cc20e438-8f06-48a3-bd40-c1a9bd6e214e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3668bc45-24b2-4d7a-9556-acb566085526",
        "cursor": {
          "ref": "b9a34e32-e27d-463e-8c05-aba901991c7b",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e75703ff-6343-4353-b1f1-b54d4cec718b"
        },
        "item": {
          "id": "3668bc45-24b2-4d7a-9556-acb566085526",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "05e4055d-f11f-4dfa-918c-b63fc9cf70fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09998c43-e11b-41fe-b6a2-5b938ef8293a",
        "cursor": {
          "ref": "69ca09f2-4921-48fb-8565-c4f631651deb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3b9b7136-debf-42e3-a7c1-fdd9b8b8f27f"
        },
        "item": {
          "id": "09998c43-e11b-41fe-b6a2-5b938ef8293a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "69c9532f-1d1d-4eb1-bdd8-048d75d6a7dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b7c596-d012-42c2-a3de-747867410607",
        "cursor": {
          "ref": "fe600360-a6ed-4e58-9874-c589d0e99d7e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d6847608-54a2-4f6f-add2-67633f574cf1"
        },
        "item": {
          "id": "16b7c596-d012-42c2-a3de-747867410607",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8fd957e8-12cf-474d-9a50-d7f2c80c94bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907bdbea-2817-455e-9d9a-eb8624a21f8a",
        "cursor": {
          "ref": "b291c4ee-e61d-4dc0-b33d-c0a9db389649",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bfefde6c-fec8-4e83-a8a6-3be09f1d790f"
        },
        "item": {
          "id": "907bdbea-2817-455e-9d9a-eb8624a21f8a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1b8b1676-8c7c-4272-a65f-da2723282d02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2d36ce-5af7-470d-b2cc-cd74d61e56c1",
        "cursor": {
          "ref": "b2c38600-da80-4c65-827c-2e7294ffc2f6",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1460ddce-c818-4c3b-a451-256c7bd0af07"
        },
        "item": {
          "id": "4d2d36ce-5af7-470d-b2cc-cd74d61e56c1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f81e4ee1-da07-4909-8a2a-095e90743cad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6f7b3a-ad8e-4adb-9419-0d7fbb07dd1d",
        "cursor": {
          "ref": "5528f3f5-f09d-4583-a637-5704dab4b030",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ec975782-3358-4677-a595-5c2ae2da99a2"
        },
        "item": {
          "id": "ac6f7b3a-ad8e-4adb-9419-0d7fbb07dd1d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9f1c26ca-c879-4945-979e-75db75a0524c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524c5b45-75ca-49c6-be36-90927af9b2b9",
        "cursor": {
          "ref": "149715dc-9572-42d8-8d5d-eb912d70393b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7ddbb3df-748f-4d87-8db9-27ad46069b11"
        },
        "item": {
          "id": "524c5b45-75ca-49c6-be36-90927af9b2b9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d890fe2c-8349-4cab-bf87-5eedfbca094c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5285b52a-20a4-4300-817d-9e57fca92d34",
        "cursor": {
          "ref": "c78342a4-89c8-49ca-9f8b-4d6c42e985c1",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "86e48ee9-1749-4c1a-92b9-9ec888cb280a"
        },
        "item": {
          "id": "5285b52a-20a4-4300-817d-9e57fca92d34",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "852f6d27-53b1-4fd0-9322-4f08fac880dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dadcf5-a08c-480d-bdec-7afcb25b52ff",
        "cursor": {
          "ref": "b334241d-84b4-4cef-9772-0731c612bf67",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "eda7cd0c-49c6-4041-959f-c6257f76ab12"
        },
        "item": {
          "id": "76dadcf5-a08c-480d-bdec-7afcb25b52ff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "be37bc6f-8f89-45c9-ae9f-aad0ac4c89f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d39b4bd-c0dd-47ba-92c1-26993043df85",
        "cursor": {
          "ref": "5ff7cb8c-0b3f-43b3-935f-e160d85d7b42",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5937d7bc-b74f-49bd-9774-3034cce4da85"
        },
        "item": {
          "id": "4d39b4bd-c0dd-47ba-92c1-26993043df85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4a2c42ef-8c5c-480f-b205-3968e161cf45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ecefaa-054e-4012-a8c8-caf956bdf1be",
        "cursor": {
          "ref": "6e4aad4f-e174-4e06-88c9-1a547dcad93b",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7302f0d5-c859-46af-ac98-c2e7cb53bb33"
        },
        "item": {
          "id": "15ecefaa-054e-4012-a8c8-caf956bdf1be",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e87edf66-dc84-4a54-93e9-cd925294d8a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebabfaf-a1a8-463f-8e92-b2c74987cb84",
        "cursor": {
          "ref": "74cfaba4-623a-43b3-95cb-0c2ebc1db296",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7b3650bc-df07-49b9-92b9-e42a8641a677"
        },
        "item": {
          "id": "9ebabfaf-a1a8-463f-8e92-b2c74987cb84",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "999aac5c-9734-41be-ac5e-af527b2ddeed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15a35988-6089-413d-a81d-d71efed293b2",
        "cursor": {
          "ref": "fe674ea5-3ee1-4c26-9f4e-8688a2426200",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7c4a7d1a-a90f-4f35-9733-d6806b328c99"
        },
        "item": {
          "id": "15a35988-6089-413d-a81d-d71efed293b2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "13f1336a-5a52-4993-a51c-3fa79e0d1c4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02132a67-fa66-49c9-819d-56f37e1c65b4",
        "cursor": {
          "ref": "ee57db21-d6b7-42e8-b280-cab37bea1cfd",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3a8a4b2b-27d2-4467-a2a5-493eb74aebe2"
        },
        "item": {
          "id": "02132a67-fa66-49c9-819d-56f37e1c65b4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a34ba886-e2fb-4c21-a52c-9d3acb2e73e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fccd6b-7558-4223-857c-f5e3d0279d89",
        "cursor": {
          "ref": "56ec1052-7e9c-46a9-a517-7367ff7ada07",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ec671412-6fa3-48f7-8bd1-9ccc5e61ce14"
        },
        "item": {
          "id": "68fccd6b-7558-4223-857c-f5e3d0279d89",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "76c0ee69-ec96-4418-ba97-55162d56ecfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1f6837-f4ab-4693-86c0-6c7bb1a1af73",
        "cursor": {
          "ref": "0e0cf1a6-caf0-4581-9dd9-5d14b4552b31",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7c7b21b3-eb4d-4ce2-b539-b1b5e5bd052c"
        },
        "item": {
          "id": "fa1f6837-f4ab-4693-86c0-6c7bb1a1af73",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "99fadb8e-3262-4d8a-a05f-f92260568810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75664efe-c142-48f9-b79d-af0238995060",
        "cursor": {
          "ref": "1ab66ef6-7d3a-41f9-bc7b-022cd61bc895",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5a7b7134-9edc-4441-ad66-b050e038fe26"
        },
        "item": {
          "id": "75664efe-c142-48f9-b79d-af0238995060",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c5b69ff1-01ae-4efa-9ec4-b2a9fd08ef61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2d1995-524e-400c-8a10-0102ad991a66",
        "cursor": {
          "ref": "5654ff99-c024-40bf-ac38-19d0d25c0912",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3ef0658b-e4ba-4c7f-8f7f-5a82e9ceb8ea"
        },
        "item": {
          "id": "3f2d1995-524e-400c-8a10-0102ad991a66",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5e3e6bcc-d5f8-449e-8444-9fd07f3668b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e267dc-1bec-45f2-bef2-c61f948004fd",
        "cursor": {
          "ref": "1bc50bb0-9477-4116-9970-d716ef5e7a5a",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3c684498-0b98-4d9f-9e00-05d3a3b75197"
        },
        "item": {
          "id": "13e267dc-1bec-45f2-bef2-c61f948004fd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e041bfb0-d458-4f60-bb56-90066aeec415",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe82ea6-d1bf-413a-8391-4abe0d86711f",
        "cursor": {
          "ref": "905bccd5-c062-4ec5-9704-158f9661738b",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1c57f5c6-d1f5-434d-a34f-871d6683d592"
        },
        "item": {
          "id": "4fe82ea6-d1bf-413a-8391-4abe0d86711f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "38c251d2-8d07-4e5c-a0a1-7ddb1494606f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed64064f-1620-41ee-a32c-2340ea6f24aa",
        "cursor": {
          "ref": "57a8b4c4-25c3-4739-917a-aa4d4f2cf8e9",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "08ce07a4-bcd0-4fbb-b0c8-24d4abc85445"
        },
        "item": {
          "id": "ed64064f-1620-41ee-a32c-2340ea6f24aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "622ac7a6-4b2e-49d7-ad50-2e4861e44be9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46c3304-5a7d-4def-b854-da92843ef39f",
        "cursor": {
          "ref": "ba87d190-0bb6-4938-9b79-e541fb56a335",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "288b201c-f1cd-4cd1-b30d-3b6b3ad2a6b4"
        },
        "item": {
          "id": "f46c3304-5a7d-4def-b854-da92843ef39f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83771b2f-9f64-4194-b320-cd26f54b4f39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6612c630-d034-470f-b7f3-6bd48e3cce2b",
        "cursor": {
          "ref": "7282ca10-c1e5-41ca-87c1-fcd199040612",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "014db3eb-1cd9-4f59-bc17-1c0310af0637"
        },
        "item": {
          "id": "6612c630-d034-470f-b7f3-6bd48e3cce2b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ce52b41-2fe2-4871-8179-e8b258600e94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09e0ce7-4926-46d7-8e8a-9dd8c3ae28b7",
        "cursor": {
          "ref": "4921c9ae-e131-4a88-a81b-1cb557c33518",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "08bc4330-5731-45b5-8b86-254090a20219"
        },
        "item": {
          "id": "b09e0ce7-4926-46d7-8e8a-9dd8c3ae28b7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "79f42cb8-be89-4da4-8f9e-83a14a9bd58b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a35797-5fe6-4a3d-9619-165b550ef505",
        "cursor": {
          "ref": "5f85bd82-9e3c-4aa9-92c0-3d7419429134",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6b4d7522-ab14-4cbe-bd65-02eec9cc0844"
        },
        "item": {
          "id": "82a35797-5fe6-4a3d-9619-165b550ef505",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b1f35e1c-8a0c-4a5d-98b2-5ffe9a74a565",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 197,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d61bf82-ee05-4987-af5f-1b47d2851a8e",
        "cursor": {
          "ref": "3ae72690-f7de-4cff-b92b-de2df0897e44",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed78c188-d007-426a-bd28-be5048053ab0"
        },
        "item": {
          "id": "2d61bf82-ee05-4987-af5f-1b47d2851a8e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a435fd3d-050c-4e76-899e-792faf883dae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b812aa5-e5ea-4dfe-9aae-e935b2823592",
        "cursor": {
          "ref": "2939942a-a0d3-4a2c-bc73-5c07c309335e",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bcd57551-9a2c-4311-ae06-fbce4bc5bdad"
        },
        "item": {
          "id": "4b812aa5-e5ea-4dfe-9aae-e935b2823592",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a6b8f32d-adbb-4cc4-bcf1-c6f00c3dbe43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c33ae4-f30c-478f-af04-10ce644e37a5",
        "cursor": {
          "ref": "9a9771bb-9918-460a-80ca-b3c246bc37c6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b0d3b25-7208-4490-b1c8-2f2727c6881f"
        },
        "item": {
          "id": "a5c33ae4-f30c-478f-af04-10ce644e37a5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5fd9c2b-b25f-464b-9948-6a4eb9254e7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64c8a52-4a84-44ff-8dbd-e920367f77f6",
        "cursor": {
          "ref": "9b15f926-b335-4469-a8f6-4c0f2cf639b5",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c97ddf85-562b-4629-93de-292bb2d86856"
        },
        "item": {
          "id": "e64c8a52-4a84-44ff-8dbd-e920367f77f6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "67536525-57ca-47b4-840e-7ac7ac0286ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e861dd5c-930e-4d0e-a72a-0804c94c65ac",
        "cursor": {
          "ref": "abe70015-ec4f-48e1-8467-b32b7ceddcb3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "040a6e4f-3fba-4f02-b2bb-c52d6b950af7"
        },
        "item": {
          "id": "e861dd5c-930e-4d0e-a72a-0804c94c65ac",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cbb29333-e37a-421f-8a72-69ba689d4736",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab83e4aa-8015-4050-abb8-a6801f5cc208",
        "cursor": {
          "ref": "8c873cc0-3b6f-4353-b609-540870f2e678",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ac5d7b46-24b1-45de-8af7-82ec128e75ba"
        },
        "item": {
          "id": "ab83e4aa-8015-4050-abb8-a6801f5cc208",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0c82060f-06ce-42cf-9eca-ee5b99d7a69c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518eb48b-6a9b-4090-b179-7f3ed7f8babf",
        "cursor": {
          "ref": "87d77d10-e8ed-4ade-b967-938d1d5278ac",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aba1a461-b113-4b2d-b7e6-8e302558189f"
        },
        "item": {
          "id": "518eb48b-6a9b-4090-b179-7f3ed7f8babf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "77e3024a-a09a-476b-ac72-7654e9220938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f57e0ca-e1ac-480c-a704-61fb5141105a",
        "cursor": {
          "ref": "fc66d65c-66fd-4219-af83-92a7b231bdca",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "36579fbf-4fd5-4700-94a3-b9ddb358f6bd"
        },
        "item": {
          "id": "2f57e0ca-e1ac-480c-a704-61fb5141105a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bab037c4-2308-4e75-b04b-43782bd328d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67244fa-2c43-42cb-bd92-baafd03884aa",
        "cursor": {
          "ref": "f91a6187-41e7-4f3f-bc40-747d9ab81885",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c7c6dda6-a201-4ba1-aefa-a04360209268"
        },
        "item": {
          "id": "d67244fa-2c43-42cb-bd92-baafd03884aa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7f730efa-bb04-4732-bdab-270e7a874d12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1c7f05-b02e-4edd-a0c3-03f910ebc319",
        "cursor": {
          "ref": "83a1223c-3c4a-4ac6-b0fe-e9f56bd3df5d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "195ef4f7-2619-40fb-96fa-ed76f4d2c87b"
        },
        "item": {
          "id": "1d1c7f05-b02e-4edd-a0c3-03f910ebc319",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ae2c808f-e628-4c8a-bf86-932115d9ac2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699ad781-9a0b-43ea-bb34-fe9a47db15e6",
        "cursor": {
          "ref": "6ba33a8d-3b09-4286-aae8-250948fbccd2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ad7a0867-3dc7-4e6e-acc4-bd824db52dea"
        },
        "item": {
          "id": "699ad781-9a0b-43ea-bb34-fe9a47db15e6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fd58b768-737a-4d5f-b6a1-481624839ff1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c3e3eb-0967-441d-8cef-b651c987bfde",
        "cursor": {
          "ref": "539914c2-b87d-4e56-837c-b2886e0a03ac",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8a05135b-635e-4652-ad3a-8c1d73bca455"
        },
        "item": {
          "id": "74c3e3eb-0967-441d-8cef-b651c987bfde",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "068edbf9-08cc-4eb0-ac07-324315720cd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7e3072-0de1-4285-9467-39c09f1e7a7a",
        "cursor": {
          "ref": "22a0ce00-dab3-4b3b-96d7-6216729691f4",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "eff18d3c-b6c0-4a23-b998-ce1f018511ef"
        },
        "item": {
          "id": "7b7e3072-0de1-4285-9467-39c09f1e7a7a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c001204a-42da-4e88-9641-91c92b8ddf6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7967a8-ae79-496d-b863-bf977f1bc742",
        "cursor": {
          "ref": "d4de116b-e881-45ef-abf9-20f7743e74a3",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "45838af4-f72a-4cc2-8230-3a21106d22fe"
        },
        "item": {
          "id": "3f7967a8-ae79-496d-b863-bf977f1bc742",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d202c948-514d-47b3-85b9-0182441ad9e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb06bd9-56f2-4f88-8766-4864ca6e356c",
        "cursor": {
          "ref": "02672f37-1859-4f74-853d-388f5495e55b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9c3f2e91-2401-483a-9b04-370d77bc7272"
        },
        "item": {
          "id": "7eb06bd9-56f2-4f88-8766-4864ca6e356c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "37607e24-d3d6-40c8-ba74-640214f83552",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bf146b-9722-4608-b09b-665f8e935108",
        "cursor": {
          "ref": "b6a60412-64a9-499e-ab0e-f84e3c3b334b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8635237a-d53e-43da-8950-5840e2ba5f26"
        },
        "item": {
          "id": "d4bf146b-9722-4608-b09b-665f8e935108",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a3c410f6-b3d0-49bd-86d0-b93989d31ccf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed96d94-834e-4070-976e-6619ad3150f4",
        "cursor": {
          "ref": "b1406001-157f-4a8a-a1ce-b826d005c61d",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "145f9f25-a87b-4c94-8196-f66d1a9be750"
        },
        "item": {
          "id": "4ed96d94-834e-4070-976e-6619ad3150f4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "634f7fd4-6361-4030-9830-370c7e168075",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d68d5c-d3a4-461c-a8d6-8509c7db3c1d",
        "cursor": {
          "ref": "9ff8c1d6-1a9a-4da0-90ac-a09a227ded04",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6560b44d-2bca-43a3-b5d8-7e6dc2605baf"
        },
        "item": {
          "id": "a2d68d5c-d3a4-461c-a8d6-8509c7db3c1d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "63017462-c5af-4cdd-acfa-163ab52b4d0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af567ea5-dd8d-4202-aa16-6e3bacac36d6",
        "cursor": {
          "ref": "4f295e88-1d4f-4901-a9b1-723814cbdedc",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5ce16beb-5402-44a4-addd-8c7e2dd9b71d"
        },
        "item": {
          "id": "af567ea5-dd8d-4202-aa16-6e3bacac36d6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "529f8db8-30c8-41e4-bee7-2078c442c9a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7acea4f-487c-41c6-a8ab-9b8f39a32503",
        "cursor": {
          "ref": "3da58b4f-5d7e-4751-92db-ab5511a07688",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "24ea0546-2d72-4b54-9150-375f57ed759b"
        },
        "item": {
          "id": "d7acea4f-487c-41c6-a8ab-9b8f39a32503",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "818aed7d-7983-449b-b964-04737393ef10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa5b4c3-b5bb-441f-bcfd-38b70f88a978",
        "cursor": {
          "ref": "eae1d26e-66a0-45be-a165-e5608a01e251",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f6fdbf34-ba71-4db0-bf49-d3ba0fb67408"
        },
        "item": {
          "id": "afa5b4c3-b5bb-441f-bcfd-38b70f88a978",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1d6b9fd5-363f-4c87-95a7-fdb15f9ec1e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ae6c55-172f-44fe-99fe-842373e3a410",
        "cursor": {
          "ref": "4f49af14-bc4f-406c-9d95-9e2e6800e222",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7a54e424-569b-4a86-b7dc-914c64838956"
        },
        "item": {
          "id": "c9ae6c55-172f-44fe-99fe-842373e3a410",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7c509fc-f381-42d2-b1f7-6b812a44cc65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699c483c-1b68-47f0-94e4-1e525fc689d8",
        "cursor": {
          "ref": "2cade848-f5d7-49c2-8262-597ef994ebc2",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "df32c6af-82b5-4e1e-aefb-ca9b74351db7"
        },
        "item": {
          "id": "699c483c-1b68-47f0-94e4-1e525fc689d8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2490d584-e692-4fac-900b-450f89fc3735",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb53318-3e5b-4fe4-bced-8404c3cbcb9b",
        "cursor": {
          "ref": "645fefed-8b30-4722-906b-e45edf7530be",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "baffe955-91a3-449d-ab60-7178e56149f4"
        },
        "item": {
          "id": "afb53318-3e5b-4fe4-bced-8404c3cbcb9b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "736a8aff-cb5c-4267-8ac8-bf5f1c33d16a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c7e0d6-fc70-4db0-96e5-fde073bd509b",
        "cursor": {
          "ref": "19ac90f9-7e69-4d5e-92a6-7154aaefad4c",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6cba5c91-d3db-478e-8e93-2b22b20ef56b"
        },
        "item": {
          "id": "c7c7e0d6-fc70-4db0-96e5-fde073bd509b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "01a52bfb-ed5e-44ec-a222-bd4afad6583f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f58a3a4-5536-4a4b-a867-608d1b1e099c",
        "cursor": {
          "ref": "093d0523-0dc2-4b9c-ace4-6a4d5594903a",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "823c5501-f964-4898-b15b-0c0698184172"
        },
        "item": {
          "id": "2f58a3a4-5536-4a4b-a867-608d1b1e099c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1e8a7cad-a5e1-4478-9519-9aadc5164938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e859d42-c812-4e37-ad27-244e56ae72f4",
        "cursor": {
          "ref": "2bcd310b-40a3-4138-a860-e0f493767f76",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "95ee18ea-fc3b-43be-b94f-731d84ad4e8f"
        },
        "item": {
          "id": "2e859d42-c812-4e37-ad27-244e56ae72f4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "27ef3edf-af09-442e-8aa6-4dc41fb7be5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abac87ce-514b-4a96-868c-6f086ad3f43d",
        "cursor": {
          "ref": "0b5df382-d0a3-49cc-85aa-ce1b1fe3dfde",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2c3ba2c7-1b48-4b93-91b6-89ff7b746aef"
        },
        "item": {
          "id": "abac87ce-514b-4a96-868c-6f086ad3f43d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d1d0bb12-893b-45d9-ab2c-ff613b01864f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2e3f5f-fb87-4b6d-be10-8d10ae2b782e",
        "cursor": {
          "ref": "8c0d11c6-5584-4bfa-b65c-9a1d9bbb9a59",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "57bbdcf6-4274-4704-8e63-4774d305e50b"
        },
        "item": {
          "id": "6d2e3f5f-fb87-4b6d-be10-8d10ae2b782e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8097738c-4dec-4822-b364-1bf9cf1902d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20714aba-11d0-475f-8e8e-d4b2ee1b0289",
        "cursor": {
          "ref": "9dcd67b2-e87a-41ff-9b9d-33fbf577a25f",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "df7e8a1b-d77d-4150-adc0-7ef05a0d0d23"
        },
        "item": {
          "id": "20714aba-11d0-475f-8e8e-d4b2ee1b0289",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "58cc4fc8-18c9-416e-ba35-f75a6d9e853b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02845a8-be16-4dbc-a0fa-d00220925bfc",
        "cursor": {
          "ref": "032f7b29-3837-49e5-b423-130cb53c4fa2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f6c26872-2458-427a-b8c8-6364253e8370"
        },
        "item": {
          "id": "d02845a8-be16-4dbc-a0fa-d00220925bfc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d4ab8e8b-f04d-4b33-96e5-dcd7913bf627",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738a5b3e-7148-468d-a3e3-064de25fa9bc",
        "cursor": {
          "ref": "4b723d98-5bb8-43d3-a555-ffc2e7c460f2",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "47ee1567-de34-4ed0-80a2-d24f87dcfc30"
        },
        "item": {
          "id": "738a5b3e-7148-468d-a3e3-064de25fa9bc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "26dcbc12-08fc-4439-aaa9-de67b6dfb3e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7205cd6a-5b60-4eaf-83e2-ba3b1a96b399",
        "cursor": {
          "ref": "f594b105-23a0-4f11-b31c-f34eb8938989",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3eaf5861-625d-4a18-9255-c44c30763862"
        },
        "item": {
          "id": "7205cd6a-5b60-4eaf-83e2-ba3b1a96b399",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0cc3c993-767e-4389-b23c-c6d3df190059",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0a2f4f-3faa-4383-8ad0-6285e1b9cb58",
        "cursor": {
          "ref": "5815d54b-4831-4b2c-8c18-e8db81791314",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6889b160-bb6c-49d3-83d9-ad4b9ac74abd"
        },
        "item": {
          "id": "8b0a2f4f-3faa-4383-8ad0-6285e1b9cb58",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aebc9c0d-bfee-4e48-85a8-c931ee51f1de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153375fb-c7df-4cbe-b42b-e56abc5d8b31",
        "cursor": {
          "ref": "ab613475-6b05-43ae-b1bc-ed1398ffa844",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "14142e64-3860-4a32-b053-1413037a637f"
        },
        "item": {
          "id": "153375fb-c7df-4cbe-b42b-e56abc5d8b31",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7d01f806-00e8-4b55-a3cb-3d87734e68a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6391222-3370-4541-b764-bf9113fb1a16",
        "cursor": {
          "ref": "242532ec-2ced-4cf9-af41-c2f8c87f77e5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a425616f-85ba-4880-9ff0-5a26d020cad9"
        },
        "item": {
          "id": "d6391222-3370-4541-b764-bf9113fb1a16",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c4663ae9-f8e8-443f-a1d7-1c3726d86d85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5cd9ee-6fab-4fc4-a2f9-1d19a2e23f05",
        "cursor": {
          "ref": "591ff54a-7867-465b-a41d-6ddc67f4fb78",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4031ef0b-83cd-44cd-8714-594e2b395c81"
        },
        "item": {
          "id": "ac5cd9ee-6fab-4fc4-a2f9-1d19a2e23f05",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6224dfec-4cf6-4de6-90fd-9b100b64defe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b43f78-6d5f-4587-958a-7ef8477b7171",
        "cursor": {
          "ref": "ba5530ae-475f-4adb-a6d1-e9301eedc6e8",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "989b1e31-106b-4290-ba01-dd7c6775b7ae"
        },
        "item": {
          "id": "71b43f78-6d5f-4587-958a-7ef8477b7171",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3feb9f7f-e5d5-4e95-a02b-ebf2051f7f9f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6428a27f-b6cf-4979-bfbc-a73b3d19de39",
        "cursor": {
          "ref": "34f4bee8-6b9a-47a1-a1a9-7326d7702b99",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f771f33d-3d9c-43ee-a945-092f5c42faad"
        },
        "item": {
          "id": "6428a27f-b6cf-4979-bfbc-a73b3d19de39",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6d277b2a-039a-412a-a4ee-d8e35e478371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95517372-9a14-4f82-8df2-5e08d62ee520",
        "cursor": {
          "ref": "9459f95a-3ff4-45a0-85cf-78fb4405391b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2e06bad6-599c-4fee-9384-df7c8897d9ef"
        },
        "item": {
          "id": "95517372-9a14-4f82-8df2-5e08d62ee520",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c343a2a8-3386-4e78-8456-043d528373e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86f3775-4100-4273-9e0a-85d5ebe2f169",
        "cursor": {
          "ref": "0c3ee360-9424-4537-a065-932cc346ae4c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9a18646a-0781-4985-aa4d-6d932c17ac64"
        },
        "item": {
          "id": "e86f3775-4100-4273-9e0a-85d5ebe2f169",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "93d20591-6367-4830-bf63-48fadf92b82b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7515c24-251f-48ff-8884-f781a9c77485",
        "cursor": {
          "ref": "f820b342-7340-4523-94f6-9084adfb9386",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "204a5c66-5e00-41bf-92e1-6fa64519978c"
        },
        "item": {
          "id": "c7515c24-251f-48ff-8884-f781a9c77485",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4b478d98-15e2-41a4-b4ae-413ff4853805",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "50383980-f34c-4486-8210-402e1c4ca3f8",
        "cursor": {
          "ref": "f356bf1a-fc6c-4b21-9a1c-4f2781b86dd6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "13df542d-10cc-47ce-93ca-41bde409b98c"
        },
        "item": {
          "id": "50383980-f34c-4486-8210-402e1c4ca3f8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8341d0fa-d04f-44af-a1e4-0ff67032bcd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "51059b35-0471-4796-9b26-6d0b689c5206",
        "cursor": {
          "ref": "7d45a08f-d838-442b-b2bb-937d05468e23",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "614f0507-3df8-4fb8-a2d3-8f1976b80e34"
        },
        "item": {
          "id": "51059b35-0471-4796-9b26-6d0b689c5206",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9a744916-be24-45c3-b795-237d4e5dfc01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "6b3e35f7-501e-4065-a18b-1b954e7c1fe3",
        "cursor": {
          "ref": "98984477-192e-4cc5-9aec-9e55443cbfe8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b64e5bb3-f236-42b4-b574-b6148791655f"
        },
        "item": {
          "id": "6b3e35f7-501e-4065-a18b-1b954e7c1fe3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b588774e-9cd3-4a48-8f8e-0358a23421ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3e35f7-501e-4065-a18b-1b954e7c1fe3",
        "cursor": {
          "ref": "98984477-192e-4cc5-9aec-9e55443cbfe8",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b64e5bb3-f236-42b4-b574-b6148791655f"
        },
        "item": {
          "id": "6b3e35f7-501e-4065-a18b-1b954e7c1fe3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b588774e-9cd3-4a48-8f8e-0358a23421ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e574e6dc-1a2e-41c6-b5ab-1a05aa7b4cc7",
        "cursor": {
          "ref": "3f715296-61ae-408f-be6f-f83818445923",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "651de920-a150-43a3-8120-49f705221981"
        },
        "item": {
          "id": "e574e6dc-1a2e-41c6-b5ab-1a05aa7b4cc7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c120c359-8839-4eed-9779-811f7fbce990",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec79f96a-684c-4dd0-b688-6cfe58824d55",
        "cursor": {
          "ref": "4dce8547-d913-499f-9900-c6180ff0b671",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b901d222-21b1-4b11-835f-9fd4dab4592b"
        },
        "item": {
          "id": "ec79f96a-684c-4dd0-b688-6cfe58824d55",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7a2ced73-5cfa-4c0c-a15b-3d2cc7ecc311",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}