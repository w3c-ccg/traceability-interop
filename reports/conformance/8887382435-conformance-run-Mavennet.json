{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6aeacbb4-6e0a-4e08-b6fb-a9e7acd63648",
        "name": "Clear Cache",
        "item": [
          {
            "id": "af1b1f35-d4c9-434f-bd68-cbf1edcb4797",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da45ebe6-47fa-4576-a468-fbf8f1472d95",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "26534276-becc-4362-941d-32193bd87cc5"
                }
              }
            ]
          },
          {
            "id": "6fef00d5-aae0-4604-82cc-c44c30b1ed67",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "726def6a-e161-4adf-8e85-a5cdbdb37de2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "37318214-2a65-42fb-b9f8-cdd2a1b8914c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad25ef11-ccdb-488d-8d56-87280f8b6a04",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8110c439-c5a5-4cca-b88c-530f2f71ca1f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d728e1ed-5e35-47b2-bfab-ea0afa1a750e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b1c9140-873f-44a5-a326-0868ac133458",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c092597-243f-4f1f-a1e5-91ccb9ef87bf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bedd5665-4267-40d4-9305-0570ddeca47b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "86b4a1cc-bfec-4abd-b254-4710993cb48e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad9442fc-cde2-4f98-a2bd-bbc9da1cc2c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16306663-3719-40bb-acb7-e3a6f4dda423"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9cfcec8-12b6-4e5d-928b-0ea53df827e0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "512f8efc-e542-4e51-90f5-c8ec0dc64474"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffecb4f7-95c9-4b79-a6ac-0036e7ddb540",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3d8667f-2d1d-4529-9b3f-ca4fe3d3c26d"
            }
          }
        ]
      },
      {
        "id": "69e5cad9-8d39-4c5e-b323-2757014f1128",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "84fb0fbf-b0b2-43e5-a04e-af64423efe18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f2e4bb1-bd61-4714-a664-0221dc9e2cd3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5f75d967-8165-4ef1-bff0-486a2ab7e1e4",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59384690-fd53-45ab-ab1d-d25f210874d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a73482d9-0e70-45f9-b891-917518e307da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54dbe45-7bd3-4c3a-894b-c6497ec7647d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8652d42-6fd3-438e-9d1f-ac2efc8c5aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e0c15f2-ad57-4400-97a0-5f513e3c646c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7cad11e-f6e8-4b7b-ba22-21b3d6c03f70",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c58e6a2-9fa7-4aca-9607-a549defe02ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbb56522-de2c-412e-9ba8-965635400ac1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "955f0416-660d-4b28-8390-b5b19ef28e13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fab8ea8-8fdc-40f1-b543-4608de7513e4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b96e98-b871-4a9e-96f6-c60265a20377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aafc5324-aba3-4529-a279-4800125d79bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7675140c-3456-409c-9ca6-584e9b0000e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac16e59-874d-4ef1-9561-954b7f8fc539"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f3b56b53-aea9-4cf3-a586-efa271afa5ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54cc6edc-a66f-480f-8f31-46f8e3a0f2e7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "067015f7-32f0-4d13-9b80-31b3fc870f9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77b34808-a7f1-4e90-a112-3f3c549a7c66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0b36099-892c-4cc7-b2e3-084f169063a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e90c2c76-f3ad-44c0-84e3-a8c357f04a9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a0399bc-2dee-4024-94a3-892e7009d1c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a29aa2f-537d-4d26-8d27-b13a3491db94"
            }
          }
        ]
      },
      {
        "id": "d1177add-7dab-4860-9e90-431c873e144c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6461870e-2777-44fb-8f58-637c54f3fdd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98d878b1-f9c8-40af-93af-41e7bce50369",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "28801b5e-d26b-4c3e-9b46-b76bea432228",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad32d92e-fdff-4eaf-85f6-e2dff9206549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f88e86-ed57-4a3c-8c32-8125686a6979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a271e6c-be1a-42de-8df5-0cee679ee1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2605474-ed10-4bdb-add6-3d57ecda6564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1060e572-23e3-46f5-b72b-0a4156fc69d6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ed00c3-c177-4c3f-91a4-ba4cfc0353c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c5db3b-16c3-447f-b4df-0f7c318b005b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eb0e8d-3a34-47e4-b56f-44cce808104c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecb78113-3aaa-415a-b1e2-9f71fea72026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad63ed79-f639-45cf-9156-1dd82ec4cb52",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2bc490-abdd-4ad1-8f79-f60bbf31593f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6029b1e1-40fe-471c-a84b-dda4cfb10dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82988085-a899-4b84-9a03-264d8e7df3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2465788-31fb-4c07-a040-52095656b351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d3227b-b1f7-4b21-9e56-6a4979190249",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa340ed0-213b-4f9d-88cb-4a71ae0af2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010b8120-802e-4400-a858-04feec6c743e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af65c98-2e8d-444e-a231-89878aaf3d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abc2f55a-ce54-49be-a505-af6bbb3f4cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1282d2-ca6f-4c93-ace2-6e83883cb450",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d96f304-a813-4502-8fc8-efa2dce04e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bd860f-f807-4be4-a2e4-9c1edcdd9abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e72add9-7435-4720-8129-9143b2037974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ae0be5c-ca25-4087-986a-ebdf65c3077a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb725b9-a0d7-4478-8b2d-34b412fcb925",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eaf7569-2128-48a4-97e9-ece4be445cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd03b65-e789-460b-b470-874dc0158dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee784c6f-093c-4795-8636-a090fbf63c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14bd4a31-6e51-40f3-b5e7-c09e62409fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22eeeb07-2ee8-4d47-99b7-7b83c219e362",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15647e6-e948-4b26-a2e7-af15c10a5962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2438e3-61b2-4331-8bfe-015bfa859a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dc1479-6055-4100-8340-f7df43d6fdb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c1c6086-c5eb-424a-bc9d-feb3f4d17988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3782912a-bcde-4cc2-ad7b-56e75a90df92",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766eff3c-ea7d-4f9a-8dfb-b3a52d4389d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4273fa0-b87a-4ce3-abf1-7fea03027909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00f2268-4c90-4979-9779-492a7be69023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c2e16f1-cae9-47c3-9e70-d37e0c59bee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b7f424-063b-4095-a5c5-b73429497651",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44501bb0-d8ba-43ab-ba13-764e2739fd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd32a4d-2d26-4898-a4be-391129b07bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b72554-05f1-4545-9dc3-875de0ccd1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e3bc8d3-1a41-43ff-b219-bd1c6003c4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e158df13-2198-4850-a9b4-d13d4d1e3202",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63ee6f7-99ec-4262-aabb-1150e6e4b2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff8fcc0-37ec-4168-8dc3-8e9eaf8a5520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef43506c-9f1a-4977-b5ee-ada35bd85e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4383f7ae-5794-4985-b03d-00387b9e2a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2f8b60-3b36-4676-812f-1190829b4e89",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33151435-a3a4-4986-bd39-7c86b14d6e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39a8779-57fa-4845-93dc-4fb2ce6586f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a248e0f8-23a9-404a-bb5b-cc89f8a4846e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4482658e-5a21-4ab0-b611-d582b59f1df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03025a19-218b-4187-b966-7af34301b9f9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb598bf-dd9e-4fb0-b41c-f0f85c9ed14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5470eb-397a-4157-924d-358981aaa03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac9c96c-4db2-4903-a126-ee85678d771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1e0cc91-9417-4336-90f7-928301cb2aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc42f4f-1426-4568-a22d-23ac579e51cd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8cf70f-7992-4508-b16e-2b686dfcf543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2907e8-53c3-4baf-8c99-ee69885df3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70405d3-4f3f-4735-8709-c69534ba47c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c800850c-6c07-4b01-be20-e27a89691558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035664f4-4322-4ba9-a714-f7ba7bdb91a9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93866b3-1a26-4ac3-ae1c-b5f0d3182047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d3d098-680d-42e1-bebb-dafaa9c86a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e881734-acc0-4946-9f76-264b4f1e0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80f56097-2d3a-4374-b9ae-0848653f0fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2655271d-6649-4059-a390-f0146fd5caa9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bec8294-13a5-42b4-8360-5b5d307807e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acea2d2e-5292-46a8-826f-8543145efcf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57ef7cf-0bf8-4745-ad07-8259a28ff7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ab0d794-288d-4c55-a79c-d16537540070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418e4fbf-d46d-4a97-ad25-1bcb66cb4daa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e245e21-c004-4710-905e-c6ae80ad404b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9227cb6-8a07-4564-86f4-59763b4bcca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67945c4-86a3-4b11-a693-626def6ecb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "285592c2-52a2-4115-bfe9-62ac40e1441c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d87098-30ef-4ef5-bf18-65b779207b52",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5023824b-ff7a-4dc6-8b00-ed01fb1f4bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e6f66a-2d2c-44d4-81d1-f8143878e892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604f8c8a-e599-40ae-837a-e87ebcc34fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "699eccb3-a1fd-4a44-a419-9330be26df1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8577c38-3834-4894-b9d2-f2bd4ce73049",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c66f61-e10a-4ff3-9595-eca1ae326aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf7097b-fdc6-4d5e-80b7-420f6b8e243c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef340ca-f4b0-4bf1-a2cc-598fc1a9268a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea60f116-3352-4e72-8d95-1dc9bd9f1a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af83710-04cb-44e5-b9b3-8386c8158fb0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb31401e-127c-482b-b5f0-57637f2dc22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa93e1b2-5bfd-44ef-a3bf-bb2d20291d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abfbffa-d268-4fa2-8d15-963f31610509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0d3b50-e1fc-4b07-8e4d-09de0a131a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92bcc34-1e5b-467e-a9fe-96774ab8ae98",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc021351-bd81-4fec-95ec-aad354498a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d837aa1-9cd1-4115-a48f-6e3814170a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe52e1e-2253-4fad-baa9-6451014b30ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80ad8299-60fb-470a-a0fd-a9e139d6c5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a73788-5522-4f23-9cdc-bd4422e61943",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38641034-affc-4f16-a5b8-4462f4bfd625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e341a6fa-e73a-4b32-a7c0-72ec8396c6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828026dc-dc40-4380-8261-6ccfb57e7337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9af98b-0bbe-4989-a580-777e53561006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da2c502-fbd1-48d8-9993-544a6fcdb29f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52557071-21b9-4194-9b89-7c04767fcdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e74f43-4b1e-4c96-962f-9bbe8e5bbd49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0dd15e-caed-4038-8b4a-301d3952bde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4241d065-943e-4b89-a4f2-afa116dbde9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e731647-5349-4279-b179-3aedc92bbcd6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d422d6-3a0f-46c5-8b94-95987c93f0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3367c0f5-3a49-4814-a719-8e0bca6bf25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcb6d16-f6da-468b-9cb7-b1390607b7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2c55df-f58c-46c2-9594-e3348d268ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa09d70-c56c-4b6f-b07d-65ea507a5292",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2544d9-442f-45a7-b7aa-3c9d52b65d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4213ae73-8612-4686-83b7-65fc11d3ae19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1299e9-77b8-496d-9537-37da09735e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b04b1d-8b14-410a-a51c-cb202d28d1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d62e09e-4b2e-4729-8409-0f029747b5e0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28367ae7-7a64-482c-a530-3019b74d1542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac3febf-7b07-4a8e-8a4c-56c35e96af9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60730500-3ea5-49f0-9ed5-4777da44a9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cdad84b-6696-42d6-8cb3-9947ec41f461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9523e88-fa12-419a-b251-5fca38bfe692",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53e05eb-2c92-4ff4-8c3d-d4bbb515b089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644008dc-59d2-4cd5-bc2e-a5a06366c73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c35713-b945-4632-a345-de474283bc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f833224f-7aa7-4f4d-b599-30a15dbfe42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce1b10a-ca52-48f9-8145-ee3b97115a20",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd891c58-f2c6-4b8c-948c-cca43b12cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bd1562-d0e8-4090-bc80-388b704b3d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42de1695-5267-4945-a518-8dbccfd79ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eae5783-4350-45c3-a0b3-2407e96d21cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9d1db8-59aa-46bc-b96b-86bb4b0b7dbb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c56b37-5150-480d-a818-f104cc0b2c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8493e3-cad3-456e-8341-1ceeae5fe758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c13569-da8a-4bf9-a406-12ddb41071d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1267de84-d88d-4524-8407-69339e709cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b612fc-bfa3-4e2c-931c-f2d069e3df3f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932e48e3-33c5-42b4-bd4a-af72ac7b2019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4b03e2-787d-4498-a51d-dbe12016680a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2301d1a-e77f-40de-830f-534f9e49bd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99120938-71d6-4819-9a21-5202dc0b9eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1e5a32-56e7-48e2-9708-af6aa745de62",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208651ac-53ee-4d52-857c-e51dfacccc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4df7356-b2f9-4386-ac11-10fcd8587a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac3230a-cfd6-4efe-8bd4-29604fea6cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "555a023e-559b-4f21-a8e8-fe1e7e31b7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7cc920-6f72-4017-8d33-f5177fdaa31f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac335ddb-fb00-475c-8c14-8b4387271575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf238ce-6785-4b56-ad0f-5eab5f29bb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6da4a65-7004-455d-b847-dc188ac4044c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef785e4-c3c8-42fb-a384-c193d7948cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d519d85a-8efb-4f91-840c-6747ba276418",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a53282-72f6-40f3-922a-bc62eb12d3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603d1d46-ea87-4e3c-8a5c-9c59f1a4c95c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a793dc8-1ac4-468a-8978-87b71f538e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b732f035-8549-4600-a06e-79b8a0702d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51fb5ca-df37-440f-81c7-39a6f8a78404",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4415575-1273-4188-94ee-a81168effbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06bf385d-3891-44f3-897e-16efc8cdf0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938a8243-ff91-42d5-9097-aaff028bc16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93aa4565-a52b-4542-a0ab-b3ddebc27cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd7ae70-6aea-41f3-be7a-1e2a1e21309f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f58454-ad4e-4397-8a76-6aaef95f9fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7dfe522-81dd-420c-8a11-b8829ee31da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ace3b8-1d7f-44fe-99df-9c6cf00d5ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea444d6a-8f8b-4472-a003-6018421801bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993defbc-81c7-429c-aced-ad6e9bd4f839",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "488c99d4-4e8c-4a58-9193-55a462288f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67d59e4-c21c-479d-a656-349df4bd3ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f753394-7f72-4d0d-aa90-c43ca3a5efdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cab020ac-659d-45a1-b980-28d7c921572a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b290e783-ede3-4793-a5d3-8392b4e3b2d3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9f89d1-bdbf-48f1-8823-5b88cdbd521e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64529f22-88b3-460c-8545-af03dc79e08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9288f757-315c-4655-ae49-1384c8125918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a02869ef-d798-4a1c-b4b1-63766d17a6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8835249b-41fd-4e2f-929c-5715a8fe3f08",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d225043-c35e-47f3-a6fa-907074dfcc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee84ea7e-ac7e-4a72-8bfd-99d62c04460f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef73495-4766-499f-996b-c40c385a15b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0305e7d2-9470-404e-b208-53198bed3feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fd0e9c-043e-42c9-b49c-99099c623c46",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdbacf6-d94f-42f7-a699-95189ca54762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964a1390-3362-4691-bc99-724dc027934e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236c1adc-42ed-4c85-9a42-c95c2ccbe3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "00670723-a3d5-4e8c-b898-a24682748294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0a3b57-f8bb-49c1-b5f3-582271ad1867",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba4a63a-da21-488e-a394-77828c2b5ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33786cf5-290e-447b-af2a-7a2aa78b0d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1dba61-1966-43ff-9f33-7d8e1bfb6c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4423d9a9-d459-43b3-aeb9-4e5f39339fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84768628-79de-4759-b533-5281266f1eb2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eff46b9-3a8e-49cd-beaf-139acfed4519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189f4580-604f-4841-ba76-e117f3b724e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4027f727-9846-4957-a249-e590da68c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11638051-da78-4bf1-8ecd-a57ac8766d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628bb313-37df-4cf4-9470-dcdbf5d39775",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e9fbd04-fcaf-4eb8-9b68-e75e319fdde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5fe9b0-72ab-4d07-a063-f30f1e2c9639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d1451f-bee8-42d8-b7c5-c66d327b709b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fea65b-1655-4e50-90bc-d032475acf3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb72971f-b9ce-4dd4-93ca-10c60f3eb3fc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74318b26-6e8c-4c1c-928e-5c3562492d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5adc07-1c1d-47e6-9a27-85632694116a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d29405b-9061-46a2-837f-c0d31919fdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "751fd800-ecc3-4aba-8271-c850fed32bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e329a9f-aa79-4423-a766-03b2f8075198",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d183ce95-a62c-4ba9-a170-2cc4703724d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d8d8ca-9cdd-4982-8cd9-73b039fdc1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fca6434-7fe8-4898-9a7b-fef0c4bd0274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5c57b5-c76a-41e9-969b-9c70c47801b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c37a19b-ac66-4ab3-8545-a24484b9e4c9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbef89f-4f25-4113-9273-d35e80d35d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc0eb83-f004-498c-a452-17b95970fab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd033f5-cbb6-4838-819a-14ffe9c47dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5559ca1d-c3ba-4842-bdd9-21596cd7cb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75de2c92-8982-43a3-afab-1c25d15f2b82",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a80b869c-07b5-48cc-88e2-dc6b5147f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a21f072-d9ed-444f-a5ef-4e176cebb107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700f81a5-e406-4d88-8a15-65dc7cf51344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7584276-f163-4f96-8cd6-cb0360eae5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cea3df-8871-4e63-8261-143619829f55",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4564b6-d24c-40b6-b539-5d922854b96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01360164-06bd-4690-b90e-8cf63944ff74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73463b5-8cec-49dc-9272-5aafc3163c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4152d76-834e-426d-a1f0-78ef68c1e593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf14c71a-f60f-4382-82eb-29add90914bc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6031846c-674c-4032-a954-d0c334e0f519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a9d145-c23a-41cd-a1c1-f1d68a955839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb657597-d149-4c2f-b4c2-d849562406d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9766ac19-f7fe-4718-951e-012ed440e1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ad1b83-7677-4330-b3ac-63842b5ba331",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66f1513-033b-4126-a6e3-f2a10b046f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec8c6f1-6de4-4917-9039-a7525b4f48bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e74297-ad46-4fa8-a52c-9f3f55d10831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8016f12e-276b-4b8c-9f0f-e293d1a1b61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673ec76f-2e8a-4512-8c9b-3c20aa391320",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d142e5e-d412-4a65-aed1-34ee74e2b34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5e0ddc-5762-4e62-a6e5-4e8401e73c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d86276b-c4b0-44a4-8547-2b465a25abb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57e9664a-fcc1-456a-a2bb-d4a5a8178903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ad0789-9534-432f-85cb-5703b00033d3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "284c9239-526b-48d7-8bba-470bac04c91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9c2361-b953-4076-b571-c8884d1d8833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48efd1c0-5c03-4662-b19d-faa5d20d8d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6304a5-ca7e-4269-a718-cb050b09b7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b954a95-14b0-456a-8f47-d20b5772ea5f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f606b8-14bc-4c6d-91c3-ae38859a9081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364168ef-003a-41ef-8369-b836b3d9b688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039b687a-f34d-4b79-9cbf-b0cfa98ac515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "70bcff47-d55d-4b36-be65-f32a683bb777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855623dc-3592-420d-9a97-6aa57cc6eb86",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ff9cfa-2783-47f9-93b5-9daeb1454489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0135dc-1006-4dca-913c-e0e8e45b6d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb9ab9d-3b27-4c9e-9303-4a14b08ca081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db0f9a22-da9b-4ebc-bd8f-34542c0eeb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9ddcb4-f2e4-46aa-88c1-6698a6fb2999",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5159514-ea71-4adc-88ff-0974bc652a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7e1baa-6f19-4d66-8a0a-4a0956adcd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d3d930-6ae4-4146-942a-274bf4fd79a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f88df30-3ac4-442a-8576-e1a4b9cd2e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4836f0-456e-4271-9667-f3e078cb9b43",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67d2bb5-a055-49d5-a2ca-4a51aafd180f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940d9c23-4f15-4028-8865-9d441a51a5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2292864d-7b7d-4d31-8598-c2356f5ffca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "409b9f44-8cea-4ea4-bef4-cc53e87e0449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718902b6-04e3-429d-b363-ab22f600e4e2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5ef7bf-45be-439e-86d9-b8acf4b8e64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b7fe1aa-8a99-4a6c-b9f3-816641dba9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa2b13d-a842-4506-bb1e-e2035ba17663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c533cdd5-7779-4ca0-a61c-4e36915afae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb33fb8-76f9-445f-b356-c59676287812",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44750369-6ab0-41c0-8bcc-d7bafa660ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb6dcf3-6469-40e5-aee4-a2c8a430cc6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecad58b-b136-4345-a94c-522372a96325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1b83ff-67fb-4ea4-9c9b-30fcefac77c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638d4500-1b53-4dbd-b2ee-069ee9d85a94",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd22d1fc-f616-4e87-b89e-635827b51f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f43ef13-b2ec-4f5e-9c45-1bd17c90513c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6adf733-1480-446d-8649-40c98cf06a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eda3dce-cc09-47e2-892d-b4a11dcb2a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ecc6f3-8ad1-497e-a6b2-17083f98eedb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24afd1ea-a91a-4c30-ac60-7f934cd8d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6351194-a9d8-4e48-934e-738b1a5ed4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2685a6-d4ad-4e8d-b7ad-2178d37396b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86444177-499e-410a-bb0a-c85fab67ba6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67275b0d-8e4d-4474-9ba6-2098ee6dfade",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "001e8b55-b3ce-4bad-bf5e-a6c6604b0b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed40e5d0-4e2a-4a5d-b8f5-edfa5d995380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8471acb2-e999-46b0-9aa6-1af52ee78c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1c826b-a0db-45f2-9e50-a5fa3b601029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274ec1b1-e22a-40a6-9641-cc0780641bc5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9a28e0-bfbe-4972-8df4-9b99944f1742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc93723-e91f-435e-a949-f1309af46f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f666ee-2970-4581-b499-dad26142f04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca932b8-6e96-4ff6-a436-04587c4ee95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346fc218-232a-4719-9db2-8c2ac20fd83c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e153f71-a59a-4198-afe3-d2fea2f241ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4daf36-c360-4f42-bc2a-6fb577a4b856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba7670d-517a-439a-8ff3-9ad8448e64dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c106d70d-b5c8-48ca-bd81-8005c7ed4377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5250a846-2df9-4314-bd38-7550b7fbf211",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f040539-4865-4b77-9e18-854fa123d398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d010d8-fd3c-4a09-9eeb-48664fde4109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5036191-569b-47d5-9550-266b4c993ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "22c7f79e-1789-4a8b-baad-3b4679fb7948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb52ff0-d1c4-4b9e-8d74-cb737c019f56",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a975e2-9851-4781-bea4-64be7cc0504a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c279e9-04fc-42f5-9f9e-4597135916e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2749ca63-48c8-47f9-804e-264f09bdee60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba351183-052d-4c4d-b46e-0f6680c71068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8441f81-264c-495a-9082-5552ae7aef57",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73686e89-05a6-47c2-8c6f-eabce761cc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bb637d-a836-430f-852a-15fef31edc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5bea22-7bd5-4eed-b283-d24034a0ef13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc2d04d-0446-4323-9da2-5f552012e497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23def5fe-edd0-43f5-8607-083b0e8de668",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38284037-d863-492f-a493-35bf4232cdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb9bcae-0739-4ad4-aff2-c5d45ecb8a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e3bc24-0419-4611-8d92-3a5b54eaf3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "544178c3-83a8-4420-b1f7-8d74c0eb6db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078e2bfd-5dde-457e-b272-2a61f1830737",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748e84e0-a4a6-4f1d-8813-19ea5922cb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9759204-34e4-4212-82d3-4c1e44fe6112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a112e42-3309-4fbb-be0b-2d18f25fbf3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beeb0a59-520d-43c0-810c-8ddc568a1676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bde9239-eecf-43de-ac1d-9bfbd6b7af1d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b6763-3bef-43bb-aee9-a98869a6e526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f074cac-d9e3-478b-85ca-c5c88df0964f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89536969-dfd4-46ce-9709-92320475efbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10ab6eb4-ef2e-4a8a-98d5-64e4ca618c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b69d8b-d23f-49a7-8ff0-fd536a8912e4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae58b43d-d207-4ee8-92a0-2046c6186809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538a2ceb-2229-4f68-a4de-61eaa1c909fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14992e04-4434-4c46-bc96-a546572c8167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d027392-0f53-494f-a439-f2e7b2861412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f501bb-eb88-449b-883c-fc33549b04f1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be90c8cf-3d85-42ab-8346-def0f2161d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2de407e-aee3-485a-be10-16c43393300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b931c1e0-3b0a-4587-8cdf-0d2771194bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0df02b81-439a-49c2-adcc-9b90adf7d37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ffdff3-9fab-4c57-96db-12bcf09430b5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586eaa13-04a6-4636-97e1-4195ef8203b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9714f753-4306-4869-944f-0e3e1ab6f2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29967651-2ae8-4dc1-8bff-94307ddc110b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36525b5c-b180-4fd0-ab0d-ce680dda6903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c810f1-11bf-4d62-a876-24f0b560cc94",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da36ca53-23a1-472c-a00c-9696b37495f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e02ca5df-fa85-49c5-8d30-772414ba6710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfbf5b8-4cd6-4a4a-b292-984f4323e318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d44c91-1a8b-4e81-a2c2-3b86b220421a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c2bbce-8efe-4905-b90b-b1601660c0f5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55bba1d-665e-4f14-bcb9-1c7ba55a7105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1525ea0-73f9-44d3-b6df-e566b5b906c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bab637-88b4-437c-bc06-2490a38c9701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab496e6-b7d1-467a-a425-45ed2a37a104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde2a45f-4539-4b48-a206-6e55489204a6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b0925b-2ce0-49da-95d6-3cca12e43986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21191261-c4b3-44eb-be8b-1635e352472a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cae8577-7d6b-4adb-ac73-d25e4383b4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82dc1d6a-a2b1-485a-8e6f-b7c8682bf2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e4a4fb-8960-4093-84a1-4fdf5282da0d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c541be23-5757-451e-bbad-e3fbe35d1406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bd6eb8-2072-4e86-b11b-4a9eb5976ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5897cd31-958c-47eb-aa07-47a66c3dd7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39518864-24b9-43f8-922d-50f764e4ed88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495f74e4-f290-46ea-883e-8baaff3b0906",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3ad08d-9019-4706-bfa0-61003c095cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e226e6b-2e6d-43d3-8976-9b1bef5eab76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cb5e14-f888-4865-81bb-dc802ea1523a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8635196e-f4cd-4370-97cc-f9840490d1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3231aa97-559a-4a64-a09b-05dbcbed2694",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53272b66-e779-4dfa-9968-375fe272dd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15111292-5d8b-41c0-a864-a9675156aa3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce27a0fb-fc46-43de-83cf-60ee15a99a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4f777b-a1a6-468c-9b6c-aa32c514c261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ae426c-e546-4fc1-930d-f236a03e0ec5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e38aa2-13dc-4e31-93ee-005f6292d622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ef9a9d-9ff3-4636-95a1-3142b4be2096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a62b43c-e470-4c22-b3bb-f6a574100b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e660469e-c912-40dd-ac90-c9e63ea7b871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edc5624-0a50-4ce1-8fac-ecca4a383155",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a8277d-ce55-45a5-ae61-427e97dc8c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cde051c-c6a0-44fa-9812-28083597f1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3a0a89-0cbe-4945-b31b-d9ce6d413228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ad703f-493a-479d-87d9-a6b74c810cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b485b85-7042-4c4e-9c56-8f126dcfc460",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a02227-bcd3-4331-9bf6-ff7d15e74952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d733febd-9d7e-475d-91c5-6bd89fdbab9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87332ee3-13fe-4b56-9ba4-8404422112b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7ad16d-d2df-4aa9-83e9-37aa80ac349f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52c264e-923e-42df-a947-7c5c76d577a0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d8c2be-5938-4d7f-8d7b-6538253ad9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e205f43f-486f-4c11-932d-6e6be7719d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e54d88-b1b4-495a-aab8-e36d7da7f4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8be55eab-85a8-4e77-8530-67d4dfb3a07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec52894-37c7-47be-b323-b545974849c4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe984da-5265-4312-8fc7-da3e3a4f38b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6951164-722d-4560-890a-2f565d08801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb0e458-07eb-4a37-8407-ad6089d51416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d196740-dfe1-4707-b029-8b6a22b535c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ab5f02-ca6b-4392-9c14-99492b4b3560",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fa5518-d955-4cf7-ac05-a96403fccf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c4d721-5b24-4c0b-b15c-e76927ec80b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c992282-b7a7-4c21-84cb-39913a694a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50b75133-67bb-4acb-8a0b-b1d19dd60d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ea10e6-f711-4ec1-af55-e47338e0c53f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fdfa7c-9e10-4d56-b5ec-82b96b2ac678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff88250d-8301-46b4-8263-8e6e32cecb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d65bc44-5717-43d2-a626-5ca015dc8eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a94e5fde-7b62-4b65-82c4-52b90bf7ecd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673fe093-e55e-479f-906a-f19355cc6263",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3416452-1243-43e6-bfc8-d225f5cd334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed662ab-cbc9-4e37-a6ec-82cc2b5eae8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca8c39f-2e36-4b43-b7f4-b581850d305d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b455e7f-0d65-4dca-bab2-55fbfb1c8cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c318574d-8249-4758-a929-0a2221de548c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01843b1d-3640-41a2-81a2-a97bc9df7889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693ae03c-a566-492f-a270-8f32c8d3ea63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290270f0-9f5c-4ff1-bc14-c9835b14865e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fc37d2-ca37-4a89-9179-c193a1b47998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214013ac-a7e6-4a2b-9089-02460090d820",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e665108f-657a-45a4-b026-9eb1f2b250ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e3c8bd-2549-4090-9208-746411ff72d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e75f63-c12c-42ec-ba00-65bcc04ab640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b75c656-7546-44f7-a2b8-49984846cc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214aa0dc-dfd5-4536-a572-693b0dfafbea",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82985471-cb07-4539-bc23-2267395f0bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd7ccb8-7f68-4e6b-b901-39ded56cf4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89504668-a159-41d5-8096-84c836813f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d39c19dd-1e06-4dc3-9864-dcb90b74fa38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fafef5a6-b2ce-4c11-9d16-eb0d14612472",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a21d5-e45d-4ce3-bff5-5f8b995846ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1566891a-71e1-4b5b-82f2-417653213bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76dbd82-baad-4a80-81a1-6b7fa94069ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "295139ef-d591-4e72-bfc0-30e2bbfea0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1158ddfe-40c2-49ca-bae7-5ac63b84a789",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18044ead-4f38-47c5-9ac0-de46a15f0b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05f591d-0a35-447e-a66a-8b27e55f1fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b94368b-9223-4129-a645-dd027e5b15f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e643cdc-daa6-4fd3-8c45-f55720b0596b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171b36cf-e3fc-4a20-8211-b599ed4b455b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5953f334-8ab4-4e36-9d4f-ea4f6eecbff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1b2205-4781-4d7f-8c34-79c8aff17cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e41381-8a98-4844-aab2-6d101ab71fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc1540f-9443-4380-977d-a7220d0ac199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbe0ab5-f3ba-41c0-937b-3538352a7ac5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f94c33-377b-4ac0-acb4-cb7a275cd7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b549c63-becf-4feb-97a0-3b7ee7b7c984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e4ffff-9516-4fef-b8b0-44c01d2f75d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa542652-bf96-441d-bd27-536762cfdbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bbd0ca-f27f-4ce3-9ed7-fa64cc842f3e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5002803f-3983-4112-86c6-8ff3b5d11ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f30ec624-fe28-4498-988b-98c50da631a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c2f2fd-618e-4a96-b356-b2b22be4a8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d080a13-36ef-41ba-bd87-d20a0d7bae57"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e20925c-d0a5-43f0-9bcc-d6ff701d1f70",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "effcc77f-14bd-471c-91cc-dcd923359669",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f149875-ab8e-47ed-9d0a-3c35134469d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5827efc6-3470-4458-a920-ba54c8a02e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfa4471-a4f4-4f12-abf3-ae0608a2daeb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a11d6e55-7bdd-41d4-86fc-c6eca4af18a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "221846a1-5a34-4e43-831c-a79188caaaa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a99cb923-485d-4fa7-a483-cc37c03a3c7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "972deec3-8ede-407e-bb7a-1e3987418926",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc8e4892-822e-4b33-8849-7dc1abb10232"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b5869635-a75b-4fa0-9a04-6191cc6f138f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e70dc816-4143-43b0-891c-9248ba216525"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba5ea772-286c-46b4-b676-1baeeb29108c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22f20bd9-2842-4c7d-8cd9-682202f109e8"
                }
              }
            ]
          },
          {
            "id": "5f90959f-8b75-4382-b86f-6d49fa5cf3f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "36add425-4388-48df-82dc-25e58b2d002a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "58b5d14f-d724-4ca7-aee2-9aa934b0c86a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7488f6cb-b729-459f-a735-c4b6999ff9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c107c818-8d46-48cd-903c-cc15df774644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c66e136-3d2d-49b9-b049-ed84ffd4c639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a376aa-f487-4b7e-885a-013682d647d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a63d59f-2ccd-4164-b3eb-87263c68a159",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25265e99-23dd-4e56-a57b-d685cde24f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc9161c5-32d0-4b0a-930c-e5dfd344a68e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f810b31c-f592-476e-a41b-1dc778e1d3a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ab807d9-2d13-443e-bccc-1c603b78f69e"
                    }
                  }
                ]
              },
              {
                "id": "7a32f99e-7495-4d8c-9daa-c7dcbe27a3af",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccaf6411-5934-4b03-b6eb-01e059d7e1f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "028bb3df-e013-4af9-ae5b-c1431afb4291"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee45b4d4-2e74-41d2-9201-3699051a9e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "317d604e-d651-46b2-9621-45298c76c5ab"
                    }
                  }
                ]
              },
              {
                "id": "f20c30c4-692b-4b92-9e58-b286e18ac974",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2285365-2c0b-44d6-87a0-8d22da017755",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb798749-62b7-434f-b5d3-12d8404af837"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7722197c-d9b9-4810-abaa-a0723b43584c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbd31542-c2d7-4879-85af-d26585eb3619"
                    }
                  }
                ]
              },
              {
                "id": "74786d56-c297-4b02-bb8c-8c95f623adae",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40d89450-5dcc-4973-9ca2-6a0afb819c0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fae5742-3bb6-4078-bc3b-56137242c832"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99aeaa99-f26f-4de8-b2a0-79d8d3c52626",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bbbcaed1-3ca2-4524-bdc7-d28af7309ab3"
                    }
                  }
                ]
              },
              {
                "id": "81571893-48f5-4562-becd-5f429cd51839",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "839702b8-85d1-44c5-afff-3a5d9429c57c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d09f51f-ec77-4dff-9342-223810a7c5d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f79fea1-0a34-423f-b497-0023fce41e09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bf5779f1-0e42-46f0-9be7-b28b42c1acf0"
                    }
                  }
                ]
              },
              {
                "id": "58f87083-5f16-4434-8212-f1a257c7e4c7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b8299bf-228b-4311-81f8-a0052a246a5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e95bcdd-0a20-44a5-9bf5-84667cd0104b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e20b09-ad33-430a-919b-bd48ebfb4cc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de212baa-9aa3-4933-a4b2-54e212471d6b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e315cee-cac0-4509-b7ea-dc918ca04f0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9f2ec40-4cd8-4007-af87-108b15f754df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "45b97bd2-950d-415e-8b88-db45f3225091",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffc81030-ab5a-4939-bdbc-35d46e1b969c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a55430a-0f5b-49be-b1f6-24fd39cc583e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2cc73b74-6e72-4fe5-b75e-9d0624ea3886"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8ad3d8d-558b-4e81-9767-cc135a73a4a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e182738-d935-4b9f-a1de-ab9243dd5aab"
            }
          }
        ]
      },
      {
        "id": "6370d5ea-7465-4929-b77c-ca38bf90f21a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4d2a0def-1c21-471b-8dff-18c58a39b6fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c8bc065-55ff-49ce-8cb2-4e96c81d2fa2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14c69de9-f481-427b-8d95-37a15f4a8b29",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfde4a55-7501-4ac0-abb3-9d6607c02917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d2c09d-b3fd-4d2a-81ed-429cf0afabb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d967d03-c6f2-4a65-9291-40ee18a29de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb5809c-e727-491c-ac41-69f40059f7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f30fe1-6096-4f8b-8a21-d4807f946439",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a09288b-fcde-437f-840f-4e8fc00d4160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a11091-067a-4691-aa19-126de2fb86d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aaa15c4-cbaa-4bcc-a0de-01176cbc7b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4fe480-58e9-4d53-8482-3a3470dd1c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d024c1cd-7e7e-4216-acf7-9d7fe681c978",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ec59b1-7559-43bd-bb78-f7f6f75cde6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab1a5c5-6c4c-451b-b9dd-00b0e0be06e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb32a85-86b9-4100-8797-64e250745a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d36f60e-dbea-4a03-8cc3-06342a603d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69049570-1504-424e-af18-46f1a5d3f1fc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d76f53-b5ee-4ac5-9043-4e88b0b89c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d051be-a013-42e8-be62-7e5b45feae4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfce2da-8727-48ad-8d41-f4de75f08b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2065f5c1-955b-4fec-a045-5988b476dac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5624d7b6-a557-4ef8-8fec-36f2fd715e5f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca01c242-7fa6-4457-bb3f-15bf584fae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b9bda1-7b84-4df9-bfbb-9a0c663cf3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ff0890-6812-4e1e-a381-4edd22fb009f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73a64633-eb7a-4ea8-ab45-b91c536b77e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1991e4c9-43a9-4993-8413-56a1b1ada4ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b41d199-884c-47e1-992b-83f0d02d5ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a5848f-e147-4b0a-ba98-00e77636f7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0fc288-d417-433c-b046-d38d44de82d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3170697c-56d7-4ff8-a686-2275a511f5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ed908-bc0b-4811-b6ac-bb6cec3176b3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14801973-3a4a-400c-8b63-dbab201929e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495c9087-e2a1-4eb3-a81c-905c99adc2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744c93e5-84da-4973-bbce-c0ac6f0d481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1d51ec-b2f3-4f86-9e6c-f1e39c127274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b801faaa-3d30-4140-ba35-72de15ca09fe",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68406f55-024f-42d3-89f6-f41e14643476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a66de0c-1021-444e-b5c1-3543666f3adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331192a2-96b1-4912-b7a7-baa5b7b67fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef02809-8ca4-49e2-b327-593348daf7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b39e0b3-3945-4647-a44c-4d9d8822b23d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73da85f-057b-4374-8fe9-c0b59ad61ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335ce012-1092-492d-87ee-847193a5efc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22027a78-7590-45e3-9e2b-ad5951612169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a698cd-2a27-4966-858a-ef5bc13efe2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760526d3-0e43-4be6-b973-0da553a75855",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb041e6-8aac-4f17-9570-3f4ecabecb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e2a64d-5a63-4fc5-9580-458d634c32ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1daa2671-6e51-459f-98f9-643b3f476ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea0f89c-6b0b-4c29-a369-10e840ce740c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e5e577-291b-4dba-b5a7-a66951187618",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a10e444-9a69-4ba2-a55a-6ccd46e3b95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a36b05-b7a5-4651-a521-ad3609c1bff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9bde57-c615-4063-85b9-2b78a34ab9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a03a8a54-792e-4e26-adf9-7eeeb061e2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7e4b48-1ed5-4c40-8577-acc83e5fe56b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cf52ee-2c25-4ac5-a69f-d74f79346633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8449156c-e480-4527-b5a7-aaf9bae4e461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad0e72f-bf31-4fea-9717-9ca7cfb85643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27ddb2b2-4a7f-4226-bc28-249979ee922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8120e09-6ec8-49bc-a5ca-c7813599239d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba77c06-37a7-4b1c-8982-79f5e0c9c923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f19ac0-61df-4e7c-a3c5-b6755be64d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a87b67-c6c1-4dd6-ae87-c8adfaf5681c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0dfd83c-c4b2-49f8-bf32-82bee3bdddaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbdc71a5-04bd-4e61-9633-3a6ba5ab5d53",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edec2661-efd8-45c9-971e-7b36289536b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932c3e61-2101-4676-baf3-4f6b682bd7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f38dd2-bfcb-481a-a0aa-aafa808d1d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb253c44-797d-44eb-bb7a-4cba4181f2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc029c8-8077-4e10-b9c1-eff2627c0ba4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa00fca-759e-4f08-9849-f43bc9d68c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53feabe4-b15f-479b-9706-a79e2100e4e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fef9a87-e705-4bfe-8ff1-875c9b989bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f94d60-fcd1-4a2b-8aa1-3ce0acdc4671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf9dd6f-9801-465d-a303-1ff50d8a3e8b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4094c7f1-7d18-43c6-8d7a-c37a09f4a9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75898e5b-d1eb-4b4e-9c7a-5e28b97d77f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a87f6b-dad3-42d2-a7ad-567559b7bb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b72e517e-afbc-4d57-9d79-55e4f4304708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1221288-2170-4dee-b022-c7c68252e78e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c5cc6f-d213-41ea-813a-e2514a28a082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a30d8c-dbc5-4c07-8793-3dfdc30ca475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6055221d-7111-4a7a-ba04-d8ac95b6a15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8334713a-a771-4c4d-aa2e-d21bc3ae6539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1892963-dad2-4e76-881b-b81791b113b1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5100cca-8b21-4e11-b23e-7022acbd9f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7601366-b558-439c-8121-253a4a7d0c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d508e1-3660-4466-a0d4-c400feb3bbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68b0bc4-15d3-472b-a4be-1e7cbd88802e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e8c263-3c1a-4e9e-96bd-46f9a1582acf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d3523d-9aa8-4f12-9ba4-38233e917688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed564e9-e13e-4bff-8de5-370249bb6094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29dd259-a239-439c-ab0f-1d7756c99827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c5133b-a6f3-42ca-b3f0-8f5c84dafcaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e4126b-485d-427c-9c2d-a49cd8aa0c1d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c58b431-c11d-4ebc-9d63-59aef2d62238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad425367-32c8-463b-9ba8-4f1a4549e75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c16357d-5633-4d20-a5b7-54f59d7b79c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd691b2-9b8a-46aa-86ae-4fc6d0097f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99aa80f1-6bff-47b8-8174-a07042d53ab7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e69cb23-5254-4127-b2b6-d82fd30475f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60665312-8bc3-4499-b2f5-22071b051c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65b229c-2495-434a-9533-fc6ba4f95f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "491d0430-2532-43ea-988e-1ca8b7248096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9be1e7b-ac12-406e-a846-9ba2bb54f78a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a15de4-a1ff-4ad2-8958-1846ec11fc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e650134-be6f-4fa3-8193-612d4a41e312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f19e0f9d-f5d7-4065-979b-3df236f102c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd705120-7ede-4d0e-97e6-583b9f901789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451f8d7b-2120-4489-9e12-60b80d37dcff",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c934a20-65cd-4519-9781-3da0831ca940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce18af1-158a-4efc-8201-350760f9f6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d4fb71-eeaa-4d13-bef6-a8aeb2da65b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2cea8c-cf35-46cb-841d-c9e293effcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc5bbe5-19f7-4b03-b9cf-3171f3aae959",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9944a845-6960-4ed4-ae56-f2c0611a86c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79139a6-02eb-4036-a5f2-3f1895410739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c85336-3b60-486e-b7cf-a2229efb4254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "600ac53c-8327-4b93-b002-1d626d5ac929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18faf7c1-88e9-4920-b58f-0407dac87d34",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2443f1c6-d7fc-4f26-8aad-3425f2e29e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca666af9-b732-4985-8a9b-8c96ff81a092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc866b7b-4000-4e12-9776-3f2823df8434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd505311-66e8-4aa7-891d-4215f77521aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe9bfb5-46ba-4dcd-9f9c-8e52a2d3c8c5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2525d70-ff52-4b8b-8944-4ab97be38985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007aaacf-b158-4b93-9ec5-787e3ea970b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab654ee9-c8c7-44f4-99c9-9be505b2190e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f8b9f3-9bfe-4cd8-84fe-f758b09cf959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f963f33-aaf2-48ae-90e2-7fcf20e1ccd4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79daad89-ffe0-42c9-92eb-a2bc767b8c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9040fa3-2a85-425c-bf74-9c9aae3f0097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e98826-939a-4e8e-a9dd-1b01961b7bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a77ee25-2ee1-43db-a360-be65f77a396e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f51edd-9de5-4de6-8044-44ca4bad1910",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718404fa-0e43-43af-90f3-851b45746e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2386532-5ebd-43cc-baf1-43ae1f78a3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc8419a-5462-44d3-8cdf-fa977fe25efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be39784c-40ef-496e-8f0f-c0e95632325b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b40df9-75e0-4818-b9fd-4af981e8f8d5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdc6532-b4bd-430c-a2ed-445034ecad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab3672f-a09e-47f0-b22b-3dd97664746b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e1fffe-0c55-49cf-9d6a-5716f27e898d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0bd058-0f6e-4215-b6f3-77b39343ef0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33087804-1be1-4201-955f-855331f2011f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738d2081-0cbb-4a2e-8100-2a2f41f1357c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b83eeda-d717-4553-99e4-7f3087188d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87475e00-4448-4169-9e5a-53d75862eb54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa91cfd-79ca-429f-9b1b-b7a4fe26ff47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bcb0af-2b7b-4543-88aa-e8df0d8de4bf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89cef4b-4c07-4308-9d31-1eb973d1e950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7ea191-2813-4da4-8e26-2843044d6445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e327496b-af9f-4724-a9c6-6db694a9ca49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "058d49e3-e546-4ffa-88f2-1f15e5002aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f212dc8-8b5e-4dd0-999e-87606a96441f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea2f1e5-6824-4d91-89f6-2e30b818da06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22491738-8809-4d01-a7f2-8a1c6b1b1874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a9bde-815f-49a9-ad67-d234bc770792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16ec1794-9378-42ee-b7be-27e05ac15c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73568b1b-c833-486b-8f88-7fa9dded80ec",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6d5277-66f4-4707-9803-ffab0c9942db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c77ff49f-432d-4ccf-96f9-dc07c9194430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a6c36d-b693-4079-89f5-c1961deb1979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "350e0800-a04d-4a45-99bc-7f386c00e4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c930174b-5b8c-47bf-b8c6-215209107bae",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3df62df-6e76-4409-90cd-dfeadb5551d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4473e2-d581-43a4-a132-7c4888e4da5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd9f4ae-be15-4075-a1d8-f19549c852ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99af65eb-fe18-4d31-b20c-125bd62a0f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91db49e-70f4-401e-a5c2-b1c41f4bc7f1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979f74fc-62d1-40c1-b948-8881d8019782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9744b9-7f0c-41e0-a247-9081f7a8b2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1301be2b-76b8-4e42-81c3-d934dbd2a9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38716c6e-b1f1-46e2-b4e8-cbb53d48b839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c557485c-147d-4fa0-8d4f-3abffbed4f15",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b08cc0-4884-47ce-8bc1-c5af764428e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea7d54a-8fc2-4c21-aa5e-145558e99e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7299abac-d1f9-4c79-af63-483957b6bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e740939-d98f-4a67-8665-d55e986296b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1aef92-6c58-4018-b94e-3e7e1bcb0483",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6449b467-6e4c-4f5d-91ae-4a0d0b71623a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44051650-d005-4a49-9f8e-5c5c1fbbf7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9116d5a8-a6ee-401f-aceb-08f52dc079a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49b9f056-b449-4643-8f0a-3e6c75dc0bef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6138bf1d-5197-4533-82f3-85a5be557b16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08e420f2-ff66-41cd-9d93-8ae929103917",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ac267b-b660-4781-8bd5-313b30de3bad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "53482f0a-006a-4101-8400-7949d671f8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce72d4c-71d8-4754-98af-c943a607cd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7ca3b9d-ef29-4ee0-be89-47be6c110def"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f86ad209-3b8a-43f2-b4eb-037800e365cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c56873d-3a9a-4057-a34e-a9bb59e2f6c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56e55096-1f91-4457-994b-01bc00ce3b2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04b65c45-093a-458c-ab3d-8a9d25685ecb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41894371-e979-4cf3-a514-89f03ad70b88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fd1a1283-0ed2-4512-9009-5b38dbcc352c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ae0a128-1c44-49b7-b505-ce80b4f3af13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19559a5e-acab-4149-aa99-ecc45603e92b"
            }
          }
        ]
      },
      {
        "id": "bc8777e0-24c9-43e8-aadb-222c46c0da3e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "523035ec-0e0a-45c2-8863-a695a0961dc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b5bcc56-375c-4dbc-b79d-122ce45c2a9e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c68c8b97-75bc-4200-8340-113b5e673fcb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efa5ff2-2506-408b-94ee-8ccb1a05ae53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "185a2ec9-6f89-4119-8ed2-815943c74f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b2cd7d-796b-49a0-af0b-9cc9317afa94",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb79e0a1-d1f5-4ec9-8aad-41c5219f1320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b737663-baa8-469a-a4c5-d9c516a31dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6ea8b4-42ac-46f8-8cc6-f07366e4f929",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48d2c83-0c4b-4179-bbfa-1a7fd7f17c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd06ac9-62a1-460e-ad07-09341441ae5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43d21fe-3178-4e78-8231-ffdbe4b8a289",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36de6168-c7b7-4738-9f28-db1b2fbe1286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e23668d-74fd-4259-8d79-0159243b393a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db429653-5b27-4228-b9f5-27aec989af8e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c767b0-36c1-47b5-b5f5-7a32b5a58eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c951f3e-f69b-4952-b688-694a8f450288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4e18e3-4765-4a04-9fd3-f77cfac61c30",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3a59c1-8e2b-4267-ac01-2954173c4e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796394c9-25af-428c-8c46-7228e653ac1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47965e67-d9a1-4174-a427-0cb1ce47b79a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc43330-53b9-45b4-8ef9-479dbe4f0aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca25c9c-7f8d-48e0-90cd-c7794853104a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecc8a07-454b-431a-b7c0-b0aa67d58cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bbd8c80-b8a9-4692-bfe0-31a2dece6b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe0f1a6-2134-4c35-ab01-8f59cde26275",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1207c4-fac6-4d2d-b3f7-c20784b434ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f0484c-6c5d-48ad-a309-ad0bd7bd3954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9733a535-f7a2-4bfa-b16d-f0e32fd8cd2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3621ec-f0df-4dbf-9d64-b073be7c7ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d564033-230c-43ea-bef1-e5bbdfe1f9b3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f0038c-e595-4c11-bafc-776bbad3c16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3642667f-ef14-416f-9f1c-be9101c5e7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25dec0b-0164-4b70-a231-f274a3e904ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2828cf49-19a4-4d6a-ac29-441868f3105b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622bdd41-0a62-4ad1-bf6b-6c5a3a0e0378",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8b9c63-a5b0-487f-bdb0-0095301b388b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3ad2b44-523d-47bb-9193-477529f13581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c9ab2f-f050-4629-839a-f81822172e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0075a997-2e96-47d1-b405-e5384fa19652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8929fea-b0f6-42d0-bfef-728659152e50",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a933b1-aec5-4da5-a932-bf9fd9e6ab3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5087c8-a05b-4012-a37e-cf77f059a7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65381ba0-bb4f-426e-945d-cc9d9fe3c529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9152db-4536-4d52-a7e1-d80b939773a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57052be6-180b-4e58-a16d-abde045b70f3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d1da70-d024-4d06-b175-f663992ccd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1e68cb-293f-4969-857d-46bdee04fd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7771fa1-9e2b-4a59-8346-8614253bb21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc7e283-90d2-4864-8925-9d6ee8305724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7cc10b-e5f6-49a8-9c97-5defeaac71b8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1361a1c4-36ab-4b2d-af55-efbdd9260ca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad88b36c-7ed2-49e5-9119-df840c50f411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f294c2-8d6d-402f-89d7-7743c4fec503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0dd4c2-2576-47a2-9940-a4d0044aae80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7001f197-cbaf-4f56-a388-6082cd400707",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf1b64b-36e0-4fbb-a145-ea934c180ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22b7a7f3-57bc-4e0f-81c7-b08fa7c121f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8063ebda-5356-4f2d-aa16-5ae33fc4d332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1789eb98-01d2-4d3f-b7c6-33709dd2b527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee7c032-b572-4420-8b49-2c31dca62c68",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd08de0-d62c-4a1c-89ca-e041776badaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d522c62e-1635-4ec7-a040-9428782028a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70fc4ff-41eb-4317-9cd6-265b3c4bd133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4310f2-11dc-49da-b37f-5ca2aa71eaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c56ddf-ada1-4f05-9729-6bc7ba7e57a2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bcc7f8-b88f-4aa0-a713-17a32d59d88b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d3d7c68-5550-44e3-94db-cc645756d1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32142e75-d61b-414a-8bec-8560485c288e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a62fef-0f94-4dda-a5c1-ce980f65ba76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8e3ec7-eb52-44b1-917f-2b2b588a2dc2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3bccb1-9cad-4662-b99c-c97a9fcbcbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e32efe-74c7-4e9d-8800-21d6df7eea09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e54ea5-0ae9-478f-95d2-dc8aea53ab20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce133e4-4218-4c1b-a5c5-f4edc4452ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a9f617-08eb-4cd9-afba-72f06529aef6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc89213-47fb-4f2b-8979-6eea21558304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c267ca99-b13e-4195-abea-9c572bbeb5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcf6b5c-bfab-4dd1-b765-e998dbd1f17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc45f27-c2f4-4540-a03f-291ab4c92383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb7fa48-9b2a-4ec8-bdfd-bfac681253df",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e83445-1cba-48fa-876c-9012352e6b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d73b5ac-5013-458a-946a-937e79229b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761d7df1-c0ce-4339-a054-4ddf1cd1c095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e450059-d1bb-460b-a0ba-4189805376a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0814b3-7faa-4cb3-8823-ab87cb3256a1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c9e7dd-6759-4e36-8ecd-dfbf9c6483e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8471178-312b-4705-9333-4514e434547e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6043482b-f1db-4ca0-b768-f0228c59d151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a0c25c-4033-48d6-94e3-4cbf55dd01a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20856c83-f050-46bf-becc-44231a89fa88",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7751d4e4-df8b-4019-babc-d93b05a6e123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0bfe98-e0c4-428a-8d70-97aec42e1a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfb2dd9-b6fe-4059-a2b1-23246fa083df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddea08c-3fdf-4f0a-8200-538419796556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02e4e26-dd02-4042-8f32-84792d40caac",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac339e1-4528-44cb-be29-2a3f6e8182a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2481fc87-1ebc-4724-a641-c6d4ce909f9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfed607a-3d70-4615-9449-fdbf58eaa637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225b1153-8e82-4a47-92b3-bb760fe639e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91fc498b-eb71-42fb-a2db-6295fc878913",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8020156-0101-4d3c-b64b-742859bccf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95609c1f-36fe-40b6-b201-5330c1ec23cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8351c723-1eca-4b42-b246-9a75a9e8fe2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c7bcaf-49d4-4024-a079-684495733d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b5c998-205a-49b4-8ec2-0048a27f2f7c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f522741-3b80-4dc9-b83b-bd23b73b74f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "875bf956-50cf-43e4-b4cb-bd1bbe900749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76825fc4-32a0-420b-9abe-81297cc439da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964c15c0-d562-4021-a533-45768c29b0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2822e3e-ad06-403c-b3ce-09151f6b97ce",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22ddb51-127a-41ad-a335-b0df766b7d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0808e07d-b97a-4e4e-8c4a-bf4b0e9d2423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd250b8-fda3-4ee6-a947-9aaec8ddb3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e3a9df-7783-4bf1-a017-bee59eebc813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406c88eb-74aa-4cc3-8120-1705e30d5da8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04521bd7-d37a-4e21-81b1-9e0873df6d5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a133b933-3ff1-4441-81f1-3296f94b55c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716694a9-de79-44b7-bdf7-2870be77d786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febf30d5-3a44-4c2c-92a4-c11b77689cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d150e9a-fa1a-4741-8644-27f2a3372f60",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c60940-8335-4fe1-a8f9-bd48136770f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6acab6e2-ee7a-4939-86f7-93909acc8e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d3d5b8-df6b-49ac-94af-8910f37ba79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33aa4b67-bd90-48e1-a068-55426b088fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b6505c-ffac-480f-87d8-d3450847c5d4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbd1f6d-260e-4dc3-88c2-826e5597ed68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d7a4f2-226a-45cf-a75a-7194ab3159a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c1b3e1-4477-4fae-9c46-6f9e7a992043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265c29cd-064f-4362-b8ba-7ee1af51449d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3ddc0e-3b38-4ce2-8d9e-80add555e11d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e4d2c6-3263-4d84-843a-05a92f623109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70fd77ac-a3f9-46be-8342-dec540e540de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c66daad-98ae-4ad3-846c-59c669cb5bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbb4ff2-3acb-4dc2-8e9a-d1fea39a8e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98db376-c442-4e08-b881-b3c5101c4d55",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf76f47-4403-490b-83d0-6d20cf311a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cf274b5-43fa-463d-9b2c-b9a54187a89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceb1c1c-ea18-44cd-ac72-30ece91ebd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3934ac9-e612-4577-a65f-20a3f56a1d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593cfd34-ca69-4515-bae9-71844b030023",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c75995-3275-4913-9546-b6cdbf5cefb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c89ce94a-6ffe-4dfb-9a30-a83be7ea240c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c826ca76-417b-475e-95e0-af9fd3280cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90774ee1-06fe-4ef4-a7d3-7de362c609b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab0fbf1-f50c-4c96-89f1-489f37a5be4e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bef2e4-64e4-46b7-9cae-ad9f789464bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57f9f19-f7f4-4529-b186-b80af2de2ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a0e403-b1a5-4983-b857-cc47d61c01df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc86b74-05bc-48fd-b892-0117389eab83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed45b503-e284-456d-8cde-9848160877ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ae99b9-efa5-4b00-9c60-9b44789f1927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3688d6-c5e3-492b-bc15-97f1a60c94a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26383f7-ba8c-4705-87ab-c7446500df75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91807e31-2565-41f6-8e1d-4d81aa747b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7380b7f4-fb24-45c0-a830-f9de090c2e61",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119fee21-0b28-45f8-ae2c-133e567ba2cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f9d35b-c7f9-4c14-9326-4c8a78901b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b2d534-c632-42e7-85ec-703361cf993d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90adc13b-619e-4708-ae2f-1a6ac7122e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0758de26-5aba-4099-8bb8-4e476d69110f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a83948-d3df-4319-b965-775f8df371c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d37f84-a7e8-4366-926c-34cbeb358670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2092d3c3-b399-480a-8204-0c09412a0421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b07934-1f48-4f8c-b269-92aec3493ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541625fb-4aa8-4b1a-ab51-2d981cf6aced",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c935e311-1b66-4c02-ba2a-e4a527817b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf0ebce-4c25-48d9-b226-5edef1617222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a2d4d6-7b3c-4d7e-ba24-40e43b8aba77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403fc257-6e39-42c6-b1ef-0a8e35ac014e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d0427a-44a1-4985-8b28-548036c25e90",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb318438-a4db-4655-87c6-8cf140f829d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23265870-4f25-40d3-86b2-7db37f820afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15108c50-514a-41ae-a797-94030a8c7c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae34113-d4a8-46a5-85c0-2ae2e590630d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aacc065-bd0e-4676-a9c6-93ad6e54920f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f971fbc2-e67c-4633-8c2e-815711581ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252342b5-b290-482e-9e2d-0e5456ce10a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e3cc4-91f1-4146-81a5-1a3419e7cb91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843a3ce1-235e-47f7-af1b-8d18d5111555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b08440f-6cbd-4c18-a663-cd87eeab1eb8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69416d1-0cf0-44fb-9318-9bf5664335cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea63f0f1-c34f-4bcc-8fcb-93fb71ba52eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4aa1ae-abc1-436b-b6f2-8a2b4d412ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1c88db-d30c-4791-901a-cf00a23420ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864c8649-8817-4b60-8098-9e0807159eef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698922b3-4e1c-412c-820c-c4664be513e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de460327-de45-4d26-b948-5904de3b07d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "851055ee-bf14-45e4-bfd8-4ddef83a847f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d326f9aa-9b9f-49b9-a755-3beb2254d355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da0739a-c3c4-48b4-9b0c-a7661dabb260",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0ff07c-1dde-4404-abc2-dc3ac8aa3847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689e37f3-ebb3-47e5-a751-84dce4a82958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b85b0a8-87c2-4a9b-801b-b4f7d324a73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662c6119-69b0-4781-b2d4-2e839ead8010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5b65fa-3970-4136-9ac9-59c2a66dc91e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888cb246-e310-4f8e-9144-f057a54fa9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef70d78-70e4-4119-a4a0-0d4305e94125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867bef37-e791-4275-8740-e9995869296d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbba5590-f50b-4ed3-82fc-06d80dd5d97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881deb1b-3b9b-4e36-91d9-7e8cdc569dd3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82660c7d-8fe2-4f88-94a8-df652aa438ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1e604b-e2c9-4b25-bb44-c22fe4b38449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaf2d87-7f0d-4f48-91fa-c3421159243b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f58a3c-f7f0-458b-b406-70235c59d2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83036714-0fba-4584-bb00-d66916332bbb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e16b78-ade0-4b13-a9a6-208953c7f7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5adb4ba6-3952-46b3-81eb-a11fafb451c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c3a403-3dd7-4152-823b-e532805de605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd74d55-9b9b-463a-918e-806cbfe2cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03761b69-2098-48ce-941a-0bc21b9f114e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89977d75-345a-40d6-baab-cce85bb4a9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9394c432-cb14-40fc-80cd-812227a8daa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92abc9fb-e868-4916-87b2-49366585260d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011208b3-d893-48a3-ad7f-661c3fdc6335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03224ae-b02e-4e79-8a6d-5e9e68fb8148",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae1547b-e37f-414c-bd27-dd0df3735096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a2a517-187a-4ab6-a4ce-58a10f9afe28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de43a02-73ca-4276-994d-82a6937d7f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a9caa6-db3b-4663-a1aa-ad59e5d4220a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6287e6e7-a6f4-4954-83c6-2b85c33de6ac",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954aaa15-3b1c-4efa-aff8-7a5e18c2a5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53eac9d-8860-4f2e-8161-6f16fd09a52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000ce70b-585a-4480-9771-e90e28495765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699c90dc-7589-4b44-a684-a5acbb3340dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0379d06d-ce9e-4c37-8403-15195ad243ff",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716152ef-60c3-48f2-83f6-63335a4b42c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cebcb83-2895-482d-8098-9d82929aceed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9892f3d-f4d0-4fe7-8978-33495e2b3382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e24341-be16-42ad-b0be-ce8562e1249d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe34b232-ea98-4c7b-a6e1-f2e69956cb2d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa66949-786f-4a18-a2fb-e523f2cc0028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6a17d3-bed0-4918-a0ed-3aec1c9f4cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a646d99a-00f3-486c-95b3-c85bceb6bdee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0042eb-9c82-498a-b3d1-8f6d0df450b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd99a27-7588-4c3d-9e75-7b851f5d94a3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159607ec-594f-4f5e-a19c-4504530b322e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41d456f-a267-4b1e-9a01-6d3260c53c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abfb525-8df5-49cf-8d21-7b398ed68e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1b48e2-ae3d-4fd3-b862-c42dd763604d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217843a6-8910-4275-961d-e8affce467a4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190cee8c-8141-4dcf-ab1e-dece7b0fe542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfb00f2-2e4b-4971-bf4d-771aec3f3e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d4e74e-0119-48d2-b161-fce0cd89d466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efdd8ee-e4fb-4c03-87a4-f87abd9c6c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026086d3-4794-4889-889b-cadb8d7ba4ee",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcfac378-11bd-4347-90d2-311590cff838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72472bba-df1f-4ef5-af42-7fa19329c77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093e2f57-0742-4e70-85f5-68fb62184c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebee6ac6-bb92-42d9-bda1-fb3424f06b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "390e1c57-3514-46eb-b4ee-d45082a5cd2c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fd9509-b0f8-40b4-ae1c-ab923b4cf4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc13e52-881c-4059-a686-3607b93f79cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df466dd6-8d83-4b25-82e5-cee92fe4ae9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5672de8-7554-4538-84f0-770e1d2dd574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eee8a2-b6b1-4526-9501-8b4dd2cae599",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb58618-2bcb-4dbf-a5ce-282aea6a67ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33458125-0c2a-429a-9675-416d18153d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf4f8f7-87da-4454-85b3-65ecdfadfd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c81b83-d440-4752-a316-ce0c1915cf17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9d0488-3267-4f86-a10c-375649d91ae9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b27745-d3b9-48ff-b1dd-4f551a7dc180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f185ec50-557a-4f70-a479-9860862397bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bbbc11-f222-482e-860e-dbe29f0bb600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfad342-abc5-4134-a89f-cc09872e9049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae46df2-dde9-46df-ae6f-fa5ea1c1763f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907ca4ad-07d6-4340-b493-2acbd2577808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371ab05e-cba7-4c6e-8b51-b831f74ee7fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c191997-bb0d-4cb4-94ec-ab55b96878ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9acdf9c-e4b2-44af-90fc-992c9a602e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544eba5d-4601-4885-8e6c-de1880c0b25b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00def0dd-3125-4c71-a07d-0c783ec1ef18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ab874a-69cd-4e44-8b41-43a07325db73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f6cdea-16aa-46c0-8cdb-040bca0486db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fef80f-2e2d-4eb4-a976-70eee2251373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40368850-f416-4a88-825d-9ff66d36575e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d14ef8a-2590-4ebe-a810-cc2889a1e8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53277906-890c-4a4b-be7c-ae22ab8082c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545bb2bf-5d02-443d-9dcc-2eac02e9dcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9436b8d1-93ae-432c-a8e7-6982cc96a0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e45bf70-88cd-400c-b5c5-183ea250699f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caab2c94-4030-41b8-a87e-d7e4ad6076c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98da8ec4-a9fe-456e-a45c-c41acc7d9cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f990b1-0405-4652-8bb1-efc3cb7e41f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28acacf9-a1f5-475e-8cd8-9da6be6ced76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a045f46-d45e-4d48-ab12-063339a9c636",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c82c35-e7d9-4bd2-b646-7bb6b2102618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2d0823-777f-4e88-9252-411de32db807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf38470-3144-49b1-a941-59f5defa6500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81632042-1245-4874-89cb-c975a7e1d1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3bd683-5842-4745-9228-6f6f8de69d88",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f931f57f-8bed-49db-bceb-71d38af93971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409956b0-0d9b-43cd-9ea2-e58b7fccf2fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3862f7c-4d04-4c65-9b57-f562e7cf8c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843fc0f0-a525-4fc4-bb31-27fd669bbcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed745dc9-66d1-4f32-b011-7f5260a74954",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31172293-87ec-4e04-8f47-28f6d00b11d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1c73d8-77e3-451e-8ff4-6edec4476cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be90408-5629-46d7-a3d9-4e657b37b293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f30eaf-bd48-449c-8ce6-eae1ed6de47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8203da68-0daf-455c-80c8-e08040487064",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316665ab-3507-412a-8c3f-7798bd37d86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1122d9de-dcc4-4cc3-9505-c4e2fefd182e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243c0e01-e355-4ae5-8a5e-caf9bfd55b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054dc967-637f-4968-ad63-8d16aceca55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cd4626-f1bc-42d5-a813-8b1f953a7d66",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9b68d5-3de9-473f-bcd0-b2961e38b691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41c957ad-8d00-4081-909c-2dea36139a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d599bfde-538f-4f63-946e-af6fcecff35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f85967-7cd2-436d-b3b2-b9c6526e2c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee58a89-d78a-4454-9d0f-0360d7506f01",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d7dddc-9109-4c62-9957-7a900ca81401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95eca778-4251-424f-907a-46c5de338293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554144f2-65d9-47f6-b0b9-68a0062ed192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725e0a3e-02a9-4231-a645-a8ee8d5a37c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a9c16f-a724-4066-9077-13ca2707a601",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d18772a-000a-4b94-8acb-6541e1980e11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9ac6bf-6fe1-4bb1-8dd6-ef6569d4398c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5640ec-f521-4609-99c5-020cc66f1d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52ccca4-f1fc-447a-b2c0-63ba8a4bb900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b3f242-3a13-489c-a02f-7451af5dc584",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ee2bed-7d0c-4e63-b4b5-99385009f615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afaa41fa-89c3-4e0d-9944-721c0794cc84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffbbda5-9137-4201-8a7d-d993b1b8d497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704aff68-c0b0-442f-a1cc-380f3f7e70b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4b68ab-2b3a-487b-b534-0200a90b0eb4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213483db-4ea5-4b5d-a304-4abaccc7abdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e127311d-016c-4a2c-9bb8-5fb08cfd007f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce25185-33e0-4361-b803-2085d11834a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfe6f78-8a04-40a3-9304-8eced567289b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f842a8-bc02-4c3f-8109-2b07825b0c7b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d20846a-6061-4034-802b-083ba91c924d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2420627d-7619-4154-be3a-b0f7d8d84ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d0ad90-f4ee-46e0-a0f7-fbab092acf22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fc8eb0-ed1e-4099-9208-7ad67a28239c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848a60ed-fdca-4f70-9b8e-87159bbd0eed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26508f60-4e2e-4453-86e0-d68c4b554272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca845fa-7cf4-4958-8a64-ecfdba1ead8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bfe50f-2ee7-4b4d-807b-b7a848c7444a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6646f4d-c905-443c-93c2-998a6990031c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c39c23e-a79a-461a-877b-d520f960e7f1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a643a10-f599-4b76-85cc-76095fd2b480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa88e34-20b6-4729-92e1-53540bd0f02d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ded44-e5de-443c-9e19-6be8dc340c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b2784f-9334-4f43-9a86-12bca5623c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c7b2de-92ff-49c0-9069-9aa7ed9111d2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229c0f68-a8e1-49e0-92bc-94dc58af063b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f1f84a-bc8f-47e7-a3e3-e08b7123cfd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69f01c3e-cdf9-4a1b-a588-5aa0eb314709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7e9354-4a78-46c6-a5ed-bf24f5ca70f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa742da-16a4-4eb3-89c5-8512cb447fcf",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fce226-4910-4e8d-aa6e-cffd35516fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0fb2bb2-5e70-4bc4-8a9d-b722313d79a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee0730b-eb91-4938-bc73-e6f3b0595db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1a20c2-3449-4ab2-8619-0ebbb579691f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb74b48-3070-4b58-bd14-fe2727784b37",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162485f3-e188-4387-aa5d-0855833ff415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2959226-1fa9-44f9-8907-cd1d4552b33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a94031-e9c2-4b4e-9505-e03211f1234d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded53e20-1813-41c4-b07d-93e48279b204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de24d9d2-1e8a-47be-8305-42cd5398a09c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b241238-1e1c-49a8-aa02-8a4a92297fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53583c4-8f84-41b2-afd8-d288083ce51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f2c3a9-b2e5-4cc3-a96d-5812f66dd18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f10e4e-1d4f-48c4-a4ac-2202af1e9005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620c259b-9f02-4977-aaf0-aef2b49be66d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d01e7a4-157b-43f1-931d-3578028278f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda410be-ba6e-454f-8e0b-23583d93cebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1509621-53d8-4e36-a3fa-82ea78225fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b00aa6a-b00d-408f-8a4b-b531141230e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1944a7e1-171a-4546-b955-55ff5341d860",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313b6e71-56a1-40e8-a79a-001c2cb5918e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0287638-72b2-49fe-b2bf-62e22e89a7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bedea63-0ca2-438b-922f-699f34ab6a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979fbd05-1603-48d7-bbee-b47b17d3b5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344c618b-a74b-4ec5-a29f-53e3e5ecd76c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cfa6a4-b6b7-453d-be2d-064dbe461aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f60f1be-9416-4475-9c77-a059cb040a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3eaf1ee-a6e7-4ba2-b565-dfdd849d1c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f61f9d5-cb22-4f0b-b67a-ac70bfe8fd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ad7cf8-235c-4c10-892b-b403811644aa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc2d7f5-0971-4a4d-a73a-792da900ff37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1102eadb-70aa-4e0b-9014-ea7abd19d529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "103a0ead-b368-46f5-9c43-cea9726642e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9535d8-4f5a-4565-b84d-42d404af4769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a53627-9cb7-4d09-aa35-da02cc6b79f9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcfa297-f3de-4068-bd0a-85b7d4b94e22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dca3600-0faa-44ee-91e7-73edc1f725fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd46e53-965a-4f58-a164-f465b26cb37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9337d1c-4d32-41dd-8fd2-d8919ab248ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8f5a8f-4372-4df5-badb-db9382dd2369",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4a280f-383d-4bbe-a2c6-52fade6f8e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a2229e-d65e-421d-8fa6-5355b1ad3b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e18263-a5b6-40a6-bdf7-d62ed50acd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31f42f6-8d7e-4586-95ee-cbbe9fa053ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c261163-783a-4f39-be3e-a483417ac0a3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff49f69a-c918-449a-8ae7-8e5d2f038a45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a9bb4c-1d64-40ff-9b81-64524eb856fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3697a19e-b9ad-45ea-8e0e-95440dd656ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0636895e-94db-4fc9-a9f6-99895178a827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ea2445-1fa8-47a2-aec4-13c06092c1e5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04867294-0a1f-450d-8865-75254d0e720c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d961a9-fd36-4538-a5e7-22efd2a44292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87177be-4eb9-420f-be87-a5f53f17742a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ff84c7-b2e3-42b4-a16b-02e24f8b61a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135434df-5f6f-42c1-a0a7-2408cf90389d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fef233-bba1-45a9-8682-120af34a0c02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa97bf74-b690-4cc7-914d-876f57ee08ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13905c1-0ea1-4f35-833f-0814bf2a0ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe7f760-3c40-4e0e-bbc6-dfbd3fca4727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1dfa38-0291-4ab1-9f41-89e5deca5ac9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8489963e-bd45-45e4-bebf-2431c3184bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b5d7d53-0fc0-46de-8e88-0f219580c6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b982dba9-ab36-4baf-854c-fcae538a421a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629507d0-e1ae-4649-81db-39a0bc927cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e326de-ff0c-4219-9943-89ebf870fd80",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a747985-a204-415e-b8fd-16ec94a56608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6495b12-7df1-4634-b5e3-99d8fc9acbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac635c9b-4997-4ec8-a454-0a3ab5f83e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad72ff7-4f8d-42b1-a5b6-dac73592b63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3d2921-f416-49c0-9a4e-654687808bd6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10fe36a-c37f-4dde-844f-fb14f01611ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc17ac72-badd-4ae9-8e0b-b365004e0c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edde5f15-fb0b-4f54-870e-b2697abb5d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ceed6f-6bbe-4707-badc-c7fb45b2322f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bd3d09-c1f6-4b69-ae78-824adeaff90d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be87ce27-05ab-4105-bc3e-2fa6a3c5b08b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f31d045-43f6-4496-bf10-b31369e01779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f6e641-f8e0-4580-9f9d-17694e1b5544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c95c35-e46f-44ed-9605-16c136eb0758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e29054-ec5d-44cf-b92f-7ab9dc9180c8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4315699-4ced-4b8e-b7a8-8ce89c65012c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d3e1fb-78ac-467d-aec7-11b34656ef62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9bdab2-6dc1-4f83-9186-f2871ad203dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2668a6e9-cb76-48b5-a323-f1d729f1a438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0667493c-add6-4ece-9b33-3b8f10acf155",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4d52ef-fcc1-4605-bfa9-7ef43ddf7836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a4edb3-2274-48b1-b9e0-aeed30653868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2538919-aefb-4f3a-bf65-2c9dfdf6abee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7381f8ae-3c64-4aae-9d9e-a31edd84fd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45a509e-34c8-4c8e-b47f-67f03dd30676",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910c2a29-ec32-477c-b454-23e6f3e8c013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8769f5b4-73ad-4130-908a-80773b605cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b9beec-f1a9-495a-8b89-cb271d70fb06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960c36c0-757b-4333-8415-8db40fd09d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3602e0-e8da-483d-bdf4-1c276380b6df",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51aaade9-3203-4080-8265-f8966c6be2ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0cb48d-de10-4a57-a0cd-792b9a98e654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acd79fa-baf8-4c12-8947-80e49129c888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46db88e7-2959-4a60-8f3f-3be248bbe4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17388f19-f080-4acc-8197-057057b6498f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa68dbc-86bc-48a1-92f6-a023918ff57b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56261492-1691-4ead-bbb7-18e49db35c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa4fdc0-3d9e-4d15-9bcc-20f30ce799ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dccbab6-cd9b-4f4e-8c21-24e72423066f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae55991f-5fed-4152-bbbe-d68d42cd7b9b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba17b493-2e45-49f4-a0da-c37b0276d38e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ec4b9c-8037-453d-873b-5da2fe6ccea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea42118-5e74-4eeb-9605-23d03c4931f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a456ecb-83dc-4504-820d-ae85e681b8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7ea820-3096-450c-9881-37182d91901d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8423f76-e96b-417d-ba05-f1f06a374787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c28e5fd-95c8-441d-9d0d-8de1717931bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc0044d-7945-436b-b763-b3666aa3f29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19299360-0286-47cb-bb55-9956b1ff02e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec73de7-e854-4c7e-aabe-ecd968ee1b8f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c88a0b9-0d2e-4b71-9122-0263dae8f4a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80a6f646-2f0c-49ba-a433-4f6779e07016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1692d9-561e-43fc-9f80-bd7b1b7734e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd3a258-e6e5-4cb7-bbd1-ffd93cf64e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d3092a-3829-411f-add3-26446ed8358a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2224fb43-9eea-4c5c-98eb-eb6a3f599d32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb01ddf-1407-4819-b891-9e494c255b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee465a6a-388b-416b-a365-a5fe1dadfb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b236e8fc-677d-41d3-95ae-e06cb08f69dd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d635d4c4-e8ac-4f99-9cdf-25d86e7e4567",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af7056a7-cb73-41dd-9299-c2f9e3830212"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d85d65-dc81-45c5-9e8c-a118281a4c18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e021576-f233-4f02-bd97-b1785d7e0e12"
                    }
                  }
                ]
              },
              {
                "id": "3926c093-ce7a-4016-9261-bbf7e412b593",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fc078e1-8ef9-4867-b670-1d599262ac1e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5dd2af3-fd6c-4f09-807d-b39a38717232",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f4b430a4-8f1e-4b58-879e-363301a3acaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762db8a6-07ab-4055-8a85-bf304bac0254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "175251f2-f5d2-4f5b-8e37-399a078bb39e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9697a98e-0270-4f80-83f8-4f6b19823532",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df1d45a2-85bd-4f15-ae80-cb511a2073d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fab08c6f-e9db-4359-8ae1-02acdb35c2a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "134fec7c-b209-4e5f-bef4-2b50809cd631"
                    }
                  }
                ]
              },
              {
                "id": "b2284bcb-506a-4f0e-a507-6d0f1b833f38",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e34bdcce-c905-4b7b-a8d0-e8c7b8ed299a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de29ef9-85c2-4706-b5fa-c9e8ec5d8999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3fbb7248-7bfd-4a79-94fd-2f6306e7c49d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e62c58-97ed-45e4-a701-165b4ee21d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92989b11-a30c-4f72-838c-f720a3852907"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50954ce6-193a-4f8e-965f-d8515a7365d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "44fe84c4-2f08-48da-a2e2-da4889b30112",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6735a88-67b5-4736-8d33-ecf8a96ce4b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a44169b-5164-4e8a-842b-5eebef4a4c3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e7459c0-bc09-411c-9899-7ec1dc069215",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "144adeb5-91ad-468c-a019-2faed2e455b5"
                    }
                  }
                ]
              },
              {
                "id": "f60abf88-1b5a-4ce6-b44d-14f8a048f89a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31d5f5ba-a5a6-42e6-a5bf-3bac67a07a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ea89b2b3-2593-4dcf-a77b-6095ef9c755d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faedb8eb-b26b-4132-a228-09396e3cbb35",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ee39a0b-4abe-4240-98ed-dfebbd69280a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be4351be-a0a9-4a3a-8b9f-3b39cf4736d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "34820b82-ab7e-4b3e-8342-dae3be546821"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24dd37e8-5c44-4654-a528-f8ddf4dc99b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d186044-94cd-495e-bd06-212b4ade3eea"
            }
          }
        ]
      },
      {
        "id": "22ce635c-2921-4d42-83e8-f6c96798e534",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f02bd6d6-04e0-4ecf-a4dc-781acd77b5ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d230ae3-945d-43f5-8f38-5890d7dfc688",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dac20899-fdf0-4cf9-b7e7-d6d07402f742",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a6dce5-033c-41e6-9e72-97b3d1d5a042",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e292015c-13c0-4b67-830a-fff4e630eb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "839d594f-767c-4c12-8641-4dd198dfbb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a0df2f2-409a-4308-a7a6-fddaa1eac369"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0295926a-f732-4a02-9e14-06da70cfaeab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "931b66a1-13fe-4cce-887e-701fafb06db5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3df544c-cfb7-4e73-aef5-cc1a854cc7fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20dd8be8-5d15-49d0-a6fd-1d05d660b69c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "187cc8df-01ea-42fb-837b-13ad73009bee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4792b7ff-ff6a-4ffe-996e-5eb013c05438"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9338e400-f6a3-42bf-a3ec-9ff7124f74e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30331859-be04-4ff8-8849-d70f715f1372"
            }
          }
        ]
      },
      {
        "id": "b063ca5a-0bf2-45c3-baa1-e0e8d0abad80",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f3ca3889-58bc-4bc2-9a9f-33d7f3f8314a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98024c12-074f-41af-b900-58508f4d2b34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f9fd169-036f-4c32-8d39-8f6f02809655",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f173ff-3486-4dd3-9f33-41785af108be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3238ea0-aa24-420b-a99c-da30c807cba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb77d2c-aae7-41c4-b21a-131dfa4aa392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "723c08ad-f985-4287-b665-19a1845fc9b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b85404e-9d1f-4247-96ee-3b394f4e1191",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f7d1ec9-fc31-4e28-8e1a-57bffcd6bdc9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd104202-d07f-41fb-8f13-3b5eda8d2312",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad2f38c7-ed6a-47f6-b93d-7bc0f7137f5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c25fc609-9412-4fe1-b210-e74759c0185a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e9534ea4-a7eb-4753-a1fa-42ddc0d21ae9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d765073-96b4-4d7c-9b01-f5d2537a61c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc4cb414-8f78-439f-93df-269ff0bc3808"
            }
          }
        ]
      },
      {
        "id": "96cb1060-6076-4c4b-902c-eac852a59e6f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "be26f91b-7915-4173-b2c2-d411c68bbd11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02f22a70-53d7-4f65-8310-37fc37a8004e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ccf80ce-e678-4945-aa58-d0a07984ad00",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21070602-3c48-44ff-be46-db7b05912cc0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbc89186-97af-44ad-b0e0-8c8edbc04f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b593c9a3-1500-42c8-af13-4b08d9da5a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a2dd0d5-c44c-4046-9621-736052c47162"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96087e57-06d4-4a9f-8bf5-beff093db38f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f7c70b9-74c0-4dd6-941e-858a0f4391c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43e63dfb-a123-4b79-b8ef-1dbcaabd26d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c337981b-fa52-4e24-a9aa-576e5c2491db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c07ebe97-b8df-42b8-952a-aca56c2c23ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d4ac5f8-5ed1-4124-acf9-52b0c1a67946"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a57bd6a3-16cd-488e-b247-81cb5b7c24c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "608044c9-ef1d-417c-9528-5147b09a12dc"
            }
          }
        ]
      },
      {
        "id": "f47852ed-a26f-42c0-bf44-296d52a76670",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71bb878c-39f4-4140-94d8-196e40b7ca35",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26eebaf5-7b2d-47d6-bced-9ec3d98fb8e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "499b1f81-de8a-4e4d-a3ea-ad00945a2f18",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a2c0fd4-7131-4d4b-b87a-5e13f2153afa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65c37925-1d47-4d0f-8ce6-e914d44d8fc4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.15476190476191,
      "responseMin": 10,
      "responseMax": 861,
      "responseSd": 86.9962361046263,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714437282228,
      "completed": 1714437305263
    },
    "executions": [
      {
        "id": "af1b1f35-d4c9-434f-bd68-cbf1edcb4797",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d9b3a8b8-022d-433c-823d-72b3477fedd1",
          "httpRequestId": "a9606fee-9f89-47fb-87a9-da622d973829"
        },
        "item": {
          "id": "af1b1f35-d4c9-434f-bd68-cbf1edcb4797",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e0eb4e03-ea6d-4bb9-9a6c-0f7033deee49",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 0
        }
      },
      {
        "id": "6fef00d5-aae0-4604-82cc-c44c30b1ed67",
        "cursor": {
          "ref": "acb0eb67-4cf2-46f8-a162-a570e3c7b075",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5284436e-c28b-4a2e-a6c2-88c8f5f27cd1"
        },
        "item": {
          "id": "6fef00d5-aae0-4604-82cc-c44c30b1ed67",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b40861b9-ce38-4d20-a9b6-c8ea41143058",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "d728e1ed-5e35-47b2-bfab-ea0afa1a750e",
        "cursor": {
          "ref": "4fa5d5c4-48a8-4ba9-9d88-2fb451682c86",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "53f2e3c2-803a-4daa-9e3f-3abc6ae18150"
        },
        "item": {
          "id": "d728e1ed-5e35-47b2-bfab-ea0afa1a750e",
          "name": "did_json"
        },
        "response": {
          "id": "4de6f66a-ff14-4944-820c-6cbaed5079f2",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f75d967-8165-4ef1-bff0-486a2ab7e1e4",
        "cursor": {
          "ref": "0ddf72b7-ed74-4c65-aa73-0cad9fff648d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e5f606f5-03e8-49c4-b893-2e64a772e8a4"
        },
        "item": {
          "id": "5f75d967-8165-4ef1-bff0-486a2ab7e1e4",
          "name": "did:invalid"
        },
        "response": {
          "id": "3a4c7105-6822-45dc-aa0e-d673dbbe8a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f75d967-8165-4ef1-bff0-486a2ab7e1e4",
        "cursor": {
          "ref": "0ddf72b7-ed74-4c65-aa73-0cad9fff648d",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e5f606f5-03e8-49c4-b893-2e64a772e8a4"
        },
        "item": {
          "id": "5f75d967-8165-4ef1-bff0-486a2ab7e1e4",
          "name": "did:invalid"
        },
        "response": {
          "id": "3a4c7105-6822-45dc-aa0e-d673dbbe8a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54dbe45-7bd3-4c3a-894b-c6497ec7647d",
        "cursor": {
          "ref": "c388e139-38f7-454e-beb0-b5ff555999e5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1a82afee-db44-4363-90a5-c08cbf1475f1"
        },
        "item": {
          "id": "a54dbe45-7bd3-4c3a-894b-c6497ec7647d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6127fcbe-20ce-487b-9005-db1af38a3806",
          "status": "Not Found",
          "code": 404,
          "responseTime": 298,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7cad11e-f6e8-4b7b-ba22-21b3d6c03f70",
        "cursor": {
          "ref": "ee5ec5ad-9406-46b2-bf68-15d9d3409d82",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "008c6e56-1c24-4d46-8127-915901e793c0"
        },
        "item": {
          "id": "a7cad11e-f6e8-4b7b-ba22-21b3d6c03f70",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4e930ae2-a721-4c82-9bb4-3d1c63f13e65",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fab8ea8-8fdc-40f1-b543-4608de7513e4",
        "cursor": {
          "ref": "c2507cd6-8342-43df-8543-1d737ae51173",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba38ca57-4604-4532-ac77-2f8eb754c722"
        },
        "item": {
          "id": "8fab8ea8-8fdc-40f1-b543-4608de7513e4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6109bc28-e413-4d64-872c-02a42eb08ba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54cc6edc-a66f-480f-8f31-46f8e3a0f2e7",
        "cursor": {
          "ref": "53768d27-4c6b-4389-b439-f79062bc8854",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c633bf10-7962-460a-83a6-6450657504a7"
        },
        "item": {
          "id": "54cc6edc-a66f-480f-8f31-46f8e3a0f2e7",
          "name": "identifiers"
        },
        "response": {
          "id": "b396f977-db95-42b2-a303-3aac44b4be87",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28801b5e-d26b-4c3e-9b46-b76bea432228",
        "cursor": {
          "ref": "58410664-d467-4568-bd90-c59e5f0ba5b8",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a72657c2-e484-4155-8ed9-81aa7df98da0"
        },
        "item": {
          "id": "28801b5e-d26b-4c3e-9b46-b76bea432228",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee664027-8770-42f1-ab10-065ed38d88da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1060e572-23e3-46f5-b72b-0a4156fc69d6",
        "cursor": {
          "ref": "3face863-1d60-4218-875b-8d44b435eaa9",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b82ac1e1-7608-4c0f-bd7b-0c85dda841dc"
        },
        "item": {
          "id": "1060e572-23e3-46f5-b72b-0a4156fc69d6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "45d68683-ba89-419b-981a-2436f6aef7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad63ed79-f639-45cf-9156-1dd82ec4cb52",
        "cursor": {
          "ref": "a37b081e-0153-4ec7-8e92-c604ffef4b7f",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "059b4759-fd31-402c-a0a0-6b8604a86206"
        },
        "item": {
          "id": "ad63ed79-f639-45cf-9156-1dd82ec4cb52",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "14491893-af15-4a6b-9cf3-0463f3c5909b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d3227b-b1f7-4b21-9e56-6a4979190249",
        "cursor": {
          "ref": "a31c3c67-4ea1-4517-9faa-7a420fd17645",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "485c07d6-92ae-4179-b2be-78ca3145b74c"
        },
        "item": {
          "id": "66d3227b-b1f7-4b21-9e56-6a4979190249",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bc22c9fc-8451-4362-862d-fcb4eaec82ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1282d2-ca6f-4c93-ace2-6e83883cb450",
        "cursor": {
          "ref": "0772f987-9404-4fc1-82b4-5d1180eb01f9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae8197a3-e028-4f82-8cc3-aa83c5a3353c"
        },
        "item": {
          "id": "ea1282d2-ca6f-4c93-ace2-6e83883cb450",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0c1b657a-0937-47bb-806e-e09788a6e78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb725b9-a0d7-4478-8b2d-34b412fcb925",
        "cursor": {
          "ref": "407252ea-9032-43b3-b91d-87f29828f0f0",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cee2692b-8444-430d-b905-3bd5cd9f57c9"
        },
        "item": {
          "id": "4eb725b9-a0d7-4478-8b2d-34b412fcb925",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1f070ca2-73eb-4092-af8f-e808c3f38443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22eeeb07-2ee8-4d47-99b7-7b83c219e362",
        "cursor": {
          "ref": "53a166f8-ae96-4e3e-b4c6-5f10f215fb4f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b92c6f75-e098-4523-9d68-769f48df4916"
        },
        "item": {
          "id": "22eeeb07-2ee8-4d47-99b7-7b83c219e362",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee2b8a80-59ea-4b97-b701-2a85cfb1aeaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3782912a-bcde-4cc2-ad7b-56e75a90df92",
        "cursor": {
          "ref": "488a8736-4eab-4a41-9923-325d53fe3568",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55a85e0a-8d8f-4d26-9c57-03b3d75a0fc6"
        },
        "item": {
          "id": "3782912a-bcde-4cc2-ad7b-56e75a90df92",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c94dcbfd-19be-47f4-8880-bc3efda8f6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b7f424-063b-4095-a5c5-b73429497651",
        "cursor": {
          "ref": "4247eac7-f748-400a-a753-e4127cadabc7",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "56766b5f-0490-4efe-a870-1ee0b44327de"
        },
        "item": {
          "id": "46b7f424-063b-4095-a5c5-b73429497651",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6706aae7-f9c4-4fc3-913e-5b58bac4026f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e158df13-2198-4850-a9b4-d13d4d1e3202",
        "cursor": {
          "ref": "055ef45d-c162-4736-8439-9e4a7a5c3406",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bf2648d1-4e25-43f7-ab50-69be9155c78a"
        },
        "item": {
          "id": "e158df13-2198-4850-a9b4-d13d4d1e3202",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "648d3a25-ef9b-4027-9a55-dc00ed1b8b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2f8b60-3b36-4676-812f-1190829b4e89",
        "cursor": {
          "ref": "c36aca7b-0c88-4319-9862-2f5eb7e501a4",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d54b2378-129f-4de8-bbab-7e58634bf035"
        },
        "item": {
          "id": "ef2f8b60-3b36-4676-812f-1190829b4e89",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "278b50d5-fb5c-4af4-b60f-8ea48cdd8e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03025a19-218b-4187-b966-7af34301b9f9",
        "cursor": {
          "ref": "a257eccb-f405-4c5b-b53d-6b37c3ea4344",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5501c3f9-e289-48e8-8feb-af3c966d384f"
        },
        "item": {
          "id": "03025a19-218b-4187-b966-7af34301b9f9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "94d1ded6-dd4b-463a-a372-210e152f3074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc42f4f-1426-4568-a22d-23ac579e51cd",
        "cursor": {
          "ref": "80773c20-6322-4883-991c-f8d66bcea18d",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c4297f53-7d2d-4918-8391-f83ae8a8f599"
        },
        "item": {
          "id": "9cc42f4f-1426-4568-a22d-23ac579e51cd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ccf58af0-48c9-4c5a-b407-b8999cbe2da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035664f4-4322-4ba9-a714-f7ba7bdb91a9",
        "cursor": {
          "ref": "9b599716-2d3b-4c86-97f7-19c7c2dd40af",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5b73c5fe-c8e8-45a8-9bd2-6a5603bd7c77"
        },
        "item": {
          "id": "035664f4-4322-4ba9-a714-f7ba7bdb91a9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0dafd274-d1ab-42b7-9e35-ebb9a9b1f441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2655271d-6649-4059-a390-f0146fd5caa9",
        "cursor": {
          "ref": "8e228f51-01ac-4933-86c6-28b0ee684413",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "229273c3-9002-477e-b321-9043ca8f2e8a"
        },
        "item": {
          "id": "2655271d-6649-4059-a390-f0146fd5caa9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f4e2a8c1-bf5c-4d20-af07-43972afdeddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418e4fbf-d46d-4a97-ad25-1bcb66cb4daa",
        "cursor": {
          "ref": "d150d185-3d3b-42dd-ab7d-260bd551557a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d6e6f29a-f329-497b-abce-26c31feed97c"
        },
        "item": {
          "id": "418e4fbf-d46d-4a97-ad25-1bcb66cb4daa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9525132b-7016-4d5d-b378-132b378cadb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d87098-30ef-4ef5-bf18-65b779207b52",
        "cursor": {
          "ref": "4582bb54-6610-4e54-b73e-9122ba27acea",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "09196bb5-045e-47cd-8bea-061676900801"
        },
        "item": {
          "id": "21d87098-30ef-4ef5-bf18-65b779207b52",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dde52452-f840-4139-8aba-8255504ae4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8577c38-3834-4894-b9d2-f2bd4ce73049",
        "cursor": {
          "ref": "c9ac526b-1c7c-4e54-8ad8-14450e5b1756",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "aa83972d-50eb-4de5-be88-444c92814de2"
        },
        "item": {
          "id": "a8577c38-3834-4894-b9d2-f2bd4ce73049",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5d2923f9-fef2-4a10-b04e-a8eaf55ed404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af83710-04cb-44e5-b9b3-8386c8158fb0",
        "cursor": {
          "ref": "079fd355-0e76-4fcc-a62c-120f5f175c1c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d4dc73d-e3b2-4aba-be60-423a3da36975"
        },
        "item": {
          "id": "3af83710-04cb-44e5-b9b3-8386c8158fb0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "55ae9111-ab42-4577-99f9-073a2aa763c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92bcc34-1e5b-467e-a9fe-96774ab8ae98",
        "cursor": {
          "ref": "511012fc-a45c-4532-8e50-53012e825c6d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2e7b53ac-8fde-4583-b5cd-2b36d5b86a80"
        },
        "item": {
          "id": "a92bcc34-1e5b-467e-a9fe-96774ab8ae98",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dbd76c2a-2f65-4752-a374-7f26ec597616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a73788-5522-4f23-9cdc-bd4422e61943",
        "cursor": {
          "ref": "7be1ffaf-0ea3-406f-a516-3404000a1eba",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4a6f4e2-645a-4028-ad70-43757d7eae4c"
        },
        "item": {
          "id": "21a73788-5522-4f23-9cdc-bd4422e61943",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e76dd8b9-5e3c-4c23-9ff5-abcfb5f91316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da2c502-fbd1-48d8-9993-544a6fcdb29f",
        "cursor": {
          "ref": "704c1e60-ae2c-49a9-b11c-9d32d52353f5",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "24779e27-08ec-4d25-a87b-cccf77a6a839"
        },
        "item": {
          "id": "5da2c502-fbd1-48d8-9993-544a6fcdb29f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fd19a787-993e-4af4-94d7-a2fc7d3ddb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e731647-5349-4279-b179-3aedc92bbcd6",
        "cursor": {
          "ref": "0549ae94-de96-46d4-9258-b1ee4bf3e1a3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "24570bfc-54e4-43d4-8417-b7bfee5fc725"
        },
        "item": {
          "id": "9e731647-5349-4279-b179-3aedc92bbcd6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3f1469e-faf7-4152-b4aa-fe85d9b94590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa09d70-c56c-4b6f-b07d-65ea507a5292",
        "cursor": {
          "ref": "bdc8c593-2321-4982-a56c-e80aa7660fc2",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c8e880aa-ec7e-4a93-9854-71eb2464aad1"
        },
        "item": {
          "id": "0fa09d70-c56c-4b6f-b07d-65ea507a5292",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3a271bb4-aa6f-4e28-829e-531a5598540d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d62e09e-4b2e-4729-8409-0f029747b5e0",
        "cursor": {
          "ref": "435a9563-5512-4abb-bcb1-6743e6c6424c",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18d49ede-4721-428b-ba6f-762c754c5f11"
        },
        "item": {
          "id": "8d62e09e-4b2e-4729-8409-0f029747b5e0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "35d727b0-66bc-4959-98c4-44eacc1a7d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9523e88-fa12-419a-b251-5fca38bfe692",
        "cursor": {
          "ref": "c9b144df-b6df-4911-b6fd-766ce80562a3",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9e962234-c85d-4765-a96e-64a496e3827a"
        },
        "item": {
          "id": "c9523e88-fa12-419a-b251-5fca38bfe692",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "93a6829b-34d0-43f4-8236-9dd09773b14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce1b10a-ca52-48f9-8145-ee3b97115a20",
        "cursor": {
          "ref": "23be97e5-c1ab-43e9-9bf7-6e2649f1de78",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a5c226a-467e-44c3-9403-2ece31da4c47"
        },
        "item": {
          "id": "8ce1b10a-ca52-48f9-8145-ee3b97115a20",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cf9ff149-da65-4d3f-bd67-ed4fb21cb0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9d1db8-59aa-46bc-b96b-86bb4b0b7dbb",
        "cursor": {
          "ref": "0224a8e1-19de-497f-be2f-ae19fdef99ad",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "888b448b-8737-4f00-b333-2df010bb78f8"
        },
        "item": {
          "id": "8e9d1db8-59aa-46bc-b96b-86bb4b0b7dbb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "58058aad-0e87-4a5d-9b96-cfeb247e67e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b612fc-bfa3-4e2c-931c-f2d069e3df3f",
        "cursor": {
          "ref": "4926f40b-0f9c-4a58-9742-88dbd199d798",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "96143368-2268-4eae-bae4-dd37d050f7ec"
        },
        "item": {
          "id": "b2b612fc-bfa3-4e2c-931c-f2d069e3df3f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8d1af626-6ef4-4257-bfdd-19f077b5cdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1e5a32-56e7-48e2-9708-af6aa745de62",
        "cursor": {
          "ref": "17eb986b-a1c0-4bd6-a6ba-454042df8990",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "76530c32-84a1-4148-9e4f-f3eb07aea2f5"
        },
        "item": {
          "id": "bd1e5a32-56e7-48e2-9708-af6aa745de62",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7ce3e0c6-b773-4ac3-9fd1-fabb58910695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7cc920-6f72-4017-8d33-f5177fdaa31f",
        "cursor": {
          "ref": "19975e25-19e1-44c6-930f-696fec37dea3",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f9fc9ae8-67e4-4d7d-8077-c6f87a8fd02f"
        },
        "item": {
          "id": "9d7cc920-6f72-4017-8d33-f5177fdaa31f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "10782693-532e-4ba3-ad9e-d1d52c2289c5",
          "status": "Created",
          "code": 201,
          "responseTime": 861,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d519d85a-8efb-4f91-840c-6747ba276418",
        "cursor": {
          "ref": "96ed5a1c-46f7-4d05-8380-f692b7bb811e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0c4a373b-619d-4eb5-a50c-ab98651c3eea"
        },
        "item": {
          "id": "d519d85a-8efb-4f91-840c-6747ba276418",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "950c0529-1b4a-413d-a957-ccc6acae5fd8",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f51fb5ca-df37-440f-81c7-39a6f8a78404",
        "cursor": {
          "ref": "5bae9979-a494-49c5-b82e-6fe1fb942290",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8c6390e7-4cef-4b19-bc53-04a7b46c9298"
        },
        "item": {
          "id": "f51fb5ca-df37-440f-81c7-39a6f8a78404",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "59edc2de-a60d-4067-b5ca-76152b78e3c2",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0bd7ae70-6aea-41f3-be7a-1e2a1e21309f",
        "cursor": {
          "ref": "c9bfed84-f609-4cb7-940e-1e8454ec1a01",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "88aa264f-1fb1-4bae-98e5-a8ff6817c18a"
        },
        "item": {
          "id": "0bd7ae70-6aea-41f3-be7a-1e2a1e21309f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e62e927e-02c7-4cb5-a425-cfa7eba321df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993defbc-81c7-429c-aced-ad6e9bd4f839",
        "cursor": {
          "ref": "5c10a74d-f410-4264-b4a9-c0ffd56cd75c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "281bbcc1-00be-4ee0-8e45-22768aeab6be"
        },
        "item": {
          "id": "993defbc-81c7-429c-aced-ad6e9bd4f839",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f34cd6c0-e3a2-48d3-a573-797557303c19",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b290e783-ede3-4793-a5d3-8392b4e3b2d3",
        "cursor": {
          "ref": "126b01bd-1105-427b-b0d5-bc434f139e31",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "062fe37b-7d23-466b-9f82-85c87fade981"
        },
        "item": {
          "id": "b290e783-ede3-4793-a5d3-8392b4e3b2d3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e9906539-f3f3-43e2-87ab-a63d2e483165",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8835249b-41fd-4e2f-929c-5715a8fe3f08",
        "cursor": {
          "ref": "868fa70c-5a1a-4b3d-9ea6-d9112e6eedee",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e439baa6-71cd-4268-bac0-17d3c278fe73"
        },
        "item": {
          "id": "8835249b-41fd-4e2f-929c-5715a8fe3f08",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f8165c8c-850e-45b6-b8d1-5c06218c38d4",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "20fd0e9c-043e-42c9-b49c-99099c623c46",
        "cursor": {
          "ref": "c118f261-b885-40f3-815e-5da32fd55e58",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f4a91b44-7333-477e-adf5-82e9ed668064"
        },
        "item": {
          "id": "20fd0e9c-043e-42c9-b49c-99099c623c46",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "afbd740c-df98-41e9-bd95-83a4f8ca9cbf",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cc0a3b57-f8bb-49c1-b5f3-582271ad1867",
        "cursor": {
          "ref": "a8d3eece-3047-4736-9f9a-af003c569104",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f8639017-8ad7-400d-baed-edaef86cc00f"
        },
        "item": {
          "id": "cc0a3b57-f8bb-49c1-b5f3-582271ad1867",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fa47e2fc-b32f-41a6-a7e9-f03527bd7919",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "84768628-79de-4759-b533-5281266f1eb2",
        "cursor": {
          "ref": "5f5fc045-aa94-4352-a446-c40681a7d46c",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6f032a4a-a1ea-4c38-a565-74aad93120f5"
        },
        "item": {
          "id": "84768628-79de-4759-b533-5281266f1eb2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bd9e3afa-3449-437c-9ae4-bb2411a9ede3",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "628bb313-37df-4cf4-9470-dcdbf5d39775",
        "cursor": {
          "ref": "18b55532-1c02-4dee-9ee1-ecc1e3923c17",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "44d35221-abe0-4739-b06b-00dceaaac98e"
        },
        "item": {
          "id": "628bb313-37df-4cf4-9470-dcdbf5d39775",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0064a4d3-56fb-4c38-a9c8-72f2dad4452f",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cb72971f-b9ce-4dd4-93ca-10c60f3eb3fc",
        "cursor": {
          "ref": "77cbed44-81f7-4196-afbb-42c6fd197434",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4f1e6b7c-cc03-4c6d-8699-d23115c61483"
        },
        "item": {
          "id": "cb72971f-b9ce-4dd4-93ca-10c60f3eb3fc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "86c26039-025e-42c3-ad4a-ca4aefbc970e",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7e329a9f-aa79-4423-a766-03b2f8075198",
        "cursor": {
          "ref": "9f66de8b-2739-41f2-9dcd-223682088ab1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9f8c72ef-41ef-4b5d-872c-7aea3cb52b6b"
        },
        "item": {
          "id": "7e329a9f-aa79-4423-a766-03b2f8075198",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fe72a89a-a648-403b-9ad9-000bab38ad16",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1c37a19b-ac66-4ab3-8545-a24484b9e4c9",
        "cursor": {
          "ref": "0f4bcf8f-20d8-4fb4-a1c9-1f70117be976",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6da81d40-0226-4784-8c9c-29b5ec1770d9"
        },
        "item": {
          "id": "1c37a19b-ac66-4ab3-8545-a24484b9e4c9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "10f918de-8ea4-40c8-9caa-555e2bb79c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75de2c92-8982-43a3-afab-1c25d15f2b82",
        "cursor": {
          "ref": "9039e512-89f8-4cc8-9d3c-90854e8a6387",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5be2d835-98ac-4836-a45c-9a938c967f0f"
        },
        "item": {
          "id": "75de2c92-8982-43a3-afab-1c25d15f2b82",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a6a22c5f-363f-453b-998c-1790aaca45e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cea3df-8871-4e63-8261-143619829f55",
        "cursor": {
          "ref": "40b3dfa8-d575-40c8-978b-2cc4b04737ba",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2fe996d9-0a21-40a3-8205-9b664d178e2a"
        },
        "item": {
          "id": "59cea3df-8871-4e63-8261-143619829f55",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "66895b9c-b549-49ec-9483-aba7cc6855a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf14c71a-f60f-4382-82eb-29add90914bc",
        "cursor": {
          "ref": "3277c2ac-9613-4bb7-a957-00129ddd9ff1",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3e4af9e7-3af5-406d-bdcf-1f777225406c"
        },
        "item": {
          "id": "bf14c71a-f60f-4382-82eb-29add90914bc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "af527e1e-6f88-4af9-8a06-3fa26e6fe227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ad1b83-7677-4330-b3ac-63842b5ba331",
        "cursor": {
          "ref": "6d6c534a-296a-4d84-8cf8-879c26e6b9b7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ce4443b6-0911-442a-ab5f-2d048a4998c0"
        },
        "item": {
          "id": "b7ad1b83-7677-4330-b3ac-63842b5ba331",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d6852892-41a7-4c2e-9c46-e57b7aa2905c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673ec76f-2e8a-4512-8c9b-3c20aa391320",
        "cursor": {
          "ref": "dadba660-7b5b-4b04-a869-d700f19ade71",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d6faf062-1a15-4af3-8c7d-ebc1096040e3"
        },
        "item": {
          "id": "673ec76f-2e8a-4512-8c9b-3c20aa391320",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "10656cfd-aea4-43bd-8833-d3bcd348dc52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ad0789-9534-432f-85cb-5703b00033d3",
        "cursor": {
          "ref": "25862ae4-d091-4c90-80b2-3ba2edf70bab",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f039fde6-66f8-4ad1-9948-935eb1033e3b"
        },
        "item": {
          "id": "68ad0789-9534-432f-85cb-5703b00033d3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e701f691-6e35-44ac-8751-aa3e9f7af73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b954a95-14b0-456a-8f47-d20b5772ea5f",
        "cursor": {
          "ref": "7c767eab-ff4a-4378-a74f-f3d573a1b90b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3edfed7b-1488-4e07-a3fd-4a331e34c7cc"
        },
        "item": {
          "id": "5b954a95-14b0-456a-8f47-d20b5772ea5f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f4970ee1-24e4-4d9d-92ca-76b8de402820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855623dc-3592-420d-9a97-6aa57cc6eb86",
        "cursor": {
          "ref": "51490530-ba22-4d9c-9b31-976dedae26eb",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "deef1ede-da6a-40a0-b5ff-a01f849c9dcf"
        },
        "item": {
          "id": "855623dc-3592-420d-9a97-6aa57cc6eb86",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "665d0295-d8a8-4291-94af-8010dc296561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9ddcb4-f2e4-46aa-88c1-6698a6fb2999",
        "cursor": {
          "ref": "72e07c07-9b7b-43cf-a40d-a60cb39c200a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c950313f-1d61-4792-93ba-80d4c7a6a356"
        },
        "item": {
          "id": "ce9ddcb4-f2e4-46aa-88c1-6698a6fb2999",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dc731a11-6937-4c27-8c3a-06c112b6e004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4836f0-456e-4271-9667-f3e078cb9b43",
        "cursor": {
          "ref": "e53f222f-32bd-48f9-983a-4d0265ae0178",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1e053992-df2d-4208-91d9-dbdc27130661"
        },
        "item": {
          "id": "af4836f0-456e-4271-9667-f3e078cb9b43",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c57b94d6-9e78-4727-ab03-7489262aa496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718902b6-04e3-429d-b363-ab22f600e4e2",
        "cursor": {
          "ref": "6309e853-a7d9-40f8-bf67-e5a16a97c82c",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ac3587fe-bdfd-4298-8aa8-1dd1210fcbf0"
        },
        "item": {
          "id": "718902b6-04e3-429d-b363-ab22f600e4e2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44700468-8a00-4e23-a6f1-ea5796359700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb33fb8-76f9-445f-b356-c59676287812",
        "cursor": {
          "ref": "ef8ee135-65a9-4e23-b706-fc53d1042467",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b512b66b-e982-4609-a0b5-68b010497800"
        },
        "item": {
          "id": "3cb33fb8-76f9-445f-b356-c59676287812",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "877f474a-745e-45a0-ba8b-b47d0f46d51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638d4500-1b53-4dbd-b2ee-069ee9d85a94",
        "cursor": {
          "ref": "48867191-f36e-452e-995e-51ddc005f327",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "21ffc15c-06ae-42bc-8191-a815e77867ea"
        },
        "item": {
          "id": "638d4500-1b53-4dbd-b2ee-069ee9d85a94",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81b6a361-6281-4232-afe1-2390db214da8",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c6ecc6f3-8ad1-497e-a6b2-17083f98eedb",
        "cursor": {
          "ref": "6091c63f-d1a2-45bb-aa62-7dc7ffa2823a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "308a02e9-1737-45af-b0f9-88d44e07454b"
        },
        "item": {
          "id": "c6ecc6f3-8ad1-497e-a6b2-17083f98eedb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c31011ce-2f09-4c4e-83f9-b02a1154b8af",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "67275b0d-8e4d-4474-9ba6-2098ee6dfade",
        "cursor": {
          "ref": "04c561ce-235a-4741-90d9-64b7d2f150a0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c155d361-5fe3-4745-8be0-d54272f37afb"
        },
        "item": {
          "id": "67275b0d-8e4d-4474-9ba6-2098ee6dfade",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f956b3aa-ba7d-435a-b48b-3dee30573d6a",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "274ec1b1-e22a-40a6-9641-cc0780641bc5",
        "cursor": {
          "ref": "a13f4e38-e58a-41e3-8645-dac8649a0bd9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c719c844-1be7-477a-aeee-3e0ca071a4cf"
        },
        "item": {
          "id": "274ec1b1-e22a-40a6-9641-cc0780641bc5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "02feea0e-7bb9-4857-bc5b-3a717c840554",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "346fc218-232a-4719-9db2-8c2ac20fd83c",
        "cursor": {
          "ref": "2873af6a-75db-4d0f-bc0b-0bfee4f3f3f0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f5f4e76-0c85-4e30-ad51-1d3df8750eb2"
        },
        "item": {
          "id": "346fc218-232a-4719-9db2-8c2ac20fd83c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "18154ed1-9a85-42a4-a295-78acb01ae847",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5250a846-2df9-4314-bd38-7550b7fbf211",
        "cursor": {
          "ref": "99be9b62-a121-4213-9b3e-1f7040c22c93",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cf608c18-24ab-4f73-a52f-bbca6c3e653c"
        },
        "item": {
          "id": "5250a846-2df9-4314-bd38-7550b7fbf211",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "03645f78-0a4e-4c7e-9af6-48ea472c6dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb52ff0-d1c4-4b9e-8d74-cb737c019f56",
        "cursor": {
          "ref": "908fb98b-6208-462a-82ea-7486168fc6d0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eefd1db5-770e-41ba-a14c-71c1a3b83cd3"
        },
        "item": {
          "id": "8cb52ff0-d1c4-4b9e-8d74-cb737c019f56",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8a61593c-b9a0-4c0d-910b-59b3e592f7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8441f81-264c-495a-9082-5552ae7aef57",
        "cursor": {
          "ref": "98c38581-040a-4f90-b238-7912fb14e5bf",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d57d9f9f-9af8-4e54-9309-c4c79ef5cec5"
        },
        "item": {
          "id": "b8441f81-264c-495a-9082-5552ae7aef57",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b534987-160a-4e3c-9ebc-bd9692ad6296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23def5fe-edd0-43f5-8607-083b0e8de668",
        "cursor": {
          "ref": "fa759eab-b477-43de-82fb-ed88630587a2",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "da329ef2-73ec-4d1a-bfcc-07e5eedd93bb"
        },
        "item": {
          "id": "23def5fe-edd0-43f5-8607-083b0e8de668",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bc149f45-6169-44fd-9632-de5b7b790406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078e2bfd-5dde-457e-b272-2a61f1830737",
        "cursor": {
          "ref": "9cdeb3c0-5b3c-4c04-ab82-ead3d6e5f119",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f1b13d94-c196-47bd-95eb-964f84b357ce"
        },
        "item": {
          "id": "078e2bfd-5dde-457e-b272-2a61f1830737",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c98deb1c-4b79-40d1-a8d5-18f416e857c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bde9239-eecf-43de-ac1d-9bfbd6b7af1d",
        "cursor": {
          "ref": "55e72262-fd18-4216-a951-ad5504e1f670",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5780ab45-8371-48a9-a9f6-93abcddf1f4d"
        },
        "item": {
          "id": "9bde9239-eecf-43de-ac1d-9bfbd6b7af1d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7dc87616-a893-4779-a60b-a7113d64989e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b69d8b-d23f-49a7-8ff0-fd536a8912e4",
        "cursor": {
          "ref": "c2266c6a-864f-4caa-a4ee-8d9522fe078b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7456d984-9622-41b3-b35a-33a6e7151eb3"
        },
        "item": {
          "id": "46b69d8b-d23f-49a7-8ff0-fd536a8912e4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0b77abd7-9eb0-49c7-a5a8-7c0d04327407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f501bb-eb88-449b-883c-fc33549b04f1",
        "cursor": {
          "ref": "a969d7ad-f055-4f99-a100-932194a99426",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b3d0da84-421f-4b82-9b36-0d8082f9fb6d"
        },
        "item": {
          "id": "54f501bb-eb88-449b-883c-fc33549b04f1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "dec5d1a0-6ac7-41f2-badf-f5c1e15cabd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ffdff3-9fab-4c57-96db-12bcf09430b5",
        "cursor": {
          "ref": "f4c164ef-3564-4cf3-9086-0bd3658d8aad",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f505af29-6cd1-4215-a723-3fbfafaf6995"
        },
        "item": {
          "id": "b0ffdff3-9fab-4c57-96db-12bcf09430b5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0202eb1f-9c22-4b5b-bbca-8b966a0c6c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c810f1-11bf-4d62-a876-24f0b560cc94",
        "cursor": {
          "ref": "1f298398-21f0-4039-80f5-75747eb2044f",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a378ac56-09aa-430c-8504-64739e7b157b"
        },
        "item": {
          "id": "34c810f1-11bf-4d62-a876-24f0b560cc94",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "96e790b0-9c18-40a8-a0fa-2853f5ecb978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c2bbce-8efe-4905-b90b-b1601660c0f5",
        "cursor": {
          "ref": "bdee466f-f05e-4afa-8251-a5b2ffef9933",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c6a95a0b-d581-4087-a21e-3d73ddd2c823"
        },
        "item": {
          "id": "46c2bbce-8efe-4905-b90b-b1601660c0f5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "efbb4b28-8b8d-47bd-8789-810a28bdcfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde2a45f-4539-4b48-a206-6e55489204a6",
        "cursor": {
          "ref": "05623fc2-0878-4b78-8fc8-910d8465fecc",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "030f8e90-1d5e-4b38-8e4a-8a8b1fd7b042"
        },
        "item": {
          "id": "bde2a45f-4539-4b48-a206-6e55489204a6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7f7d902a-f525-41db-b0d9-fbb8bbfbdecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e4a4fb-8960-4093-84a1-4fdf5282da0d",
        "cursor": {
          "ref": "3818f314-2cff-4ead-8efd-d5c0b43ea35b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0fdf3b0a-c061-466e-a770-f67b38f7559c"
        },
        "item": {
          "id": "d2e4a4fb-8960-4093-84a1-4fdf5282da0d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "41d3a833-acaf-458a-854e-d2bf00e990c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495f74e4-f290-46ea-883e-8baaff3b0906",
        "cursor": {
          "ref": "30b8a6a4-e17c-46a9-8f13-d9aa7afa9cc8",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "efdc9221-5619-428f-9a0c-b81ced44b335"
        },
        "item": {
          "id": "495f74e4-f290-46ea-883e-8baaff3b0906",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1f5c273b-29c0-4af5-a585-c4b6ce9d698b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3231aa97-559a-4a64-a09b-05dbcbed2694",
        "cursor": {
          "ref": "2fb19ccb-934b-4c8b-9000-5047478d4000",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9a7cd92a-074e-4363-87f7-b44563b35991"
        },
        "item": {
          "id": "3231aa97-559a-4a64-a09b-05dbcbed2694",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0c912577-21dd-409d-9899-fb2a3316da78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ae426c-e546-4fc1-930d-f236a03e0ec5",
        "cursor": {
          "ref": "0bbb8160-4650-4017-8e78-cb8d0e165322",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59588b9f-ff79-4424-a2dd-01e5f24806d0"
        },
        "item": {
          "id": "a7ae426c-e546-4fc1-930d-f236a03e0ec5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8295dcaa-4d18-41cb-980c-f89cc6b3908e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edc5624-0a50-4ce1-8fac-ecca4a383155",
        "cursor": {
          "ref": "9fb108e8-9f9e-401e-b1d9-4b323587b35d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d1faf06f-7acb-49ea-8771-7268e6ec9eee"
        },
        "item": {
          "id": "2edc5624-0a50-4ce1-8fac-ecca4a383155",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "562aef48-73a3-4227-9073-fd0ae498138a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b485b85-7042-4c4e-9c56-8f126dcfc460",
        "cursor": {
          "ref": "289bf0f2-d270-4451-9587-eb8d87fcb71e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e67f0f61-877b-4bb5-8602-10258c1bc71d"
        },
        "item": {
          "id": "2b485b85-7042-4c4e-9c56-8f126dcfc460",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c53f8ca2-34d7-49a0-b075-537447d9b04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52c264e-923e-42df-a947-7c5c76d577a0",
        "cursor": {
          "ref": "4a5ae112-2cf1-4bdf-8a0c-2ce01aed5392",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "39231cd2-b9b2-4499-933b-02f2c6be42d2"
        },
        "item": {
          "id": "a52c264e-923e-42df-a947-7c5c76d577a0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2f8d2670-5983-4976-af52-914eac5d75cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec52894-37c7-47be-b323-b545974849c4",
        "cursor": {
          "ref": "0d37b939-0d6d-4cf2-83c8-0529ed062512",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cd9fa499-5ffa-419b-a32f-a92581b20327"
        },
        "item": {
          "id": "0ec52894-37c7-47be-b323-b545974849c4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2fa49ee7-4389-42b7-8e1a-1518bf80fe18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ab5f02-ca6b-4392-9c14-99492b4b3560",
        "cursor": {
          "ref": "24e0d91c-33b5-4d04-949f-4ce4760ca99b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8e80e351-c837-43a6-8bde-b5f4d2d76e4b"
        },
        "item": {
          "id": "e7ab5f02-ca6b-4392-9c14-99492b4b3560",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "af88ddbd-c57c-434b-a43b-921ee26dfbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ea10e6-f711-4ec1-af55-e47338e0c53f",
        "cursor": {
          "ref": "f0011dc0-bad5-46ea-b12f-16e8db8f7c7f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "739a8120-d29a-4892-9a2f-5e22e9a904cb"
        },
        "item": {
          "id": "59ea10e6-f711-4ec1-af55-e47338e0c53f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dcfdd48f-513b-4c34-8b09-7be5bb7ef2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673fe093-e55e-479f-906a-f19355cc6263",
        "cursor": {
          "ref": "54c31794-db4a-4a55-b479-dea95adc1315",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8c2b36f9-b8fc-4a45-b73c-90d357c7b594"
        },
        "item": {
          "id": "673fe093-e55e-479f-906a-f19355cc6263",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "011c630d-c612-4c2e-a653-5423e555bf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c318574d-8249-4758-a929-0a2221de548c",
        "cursor": {
          "ref": "c71c56e0-8045-4a98-9a6f-daeae9c82a42",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "83ec8668-3524-4a0f-8df7-eb2242abfd52"
        },
        "item": {
          "id": "c318574d-8249-4758-a929-0a2221de548c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dde8ad4f-d5fe-47bc-a7d6-cd7d39560e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214013ac-a7e6-4a2b-9089-02460090d820",
        "cursor": {
          "ref": "8a833ecd-1347-4ff0-a281-589708d75f4a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a28e539b-4e36-4665-a880-f5f2d06970bb"
        },
        "item": {
          "id": "214013ac-a7e6-4a2b-9089-02460090d820",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e77877b5-89b1-4787-a6a4-76483a774842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214aa0dc-dfd5-4536-a572-693b0dfafbea",
        "cursor": {
          "ref": "c1714924-9a60-4bce-b6f0-9233cec73440",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ada92b7a-66bf-4c32-807c-af5bb490f9d4"
        },
        "item": {
          "id": "214aa0dc-dfd5-4536-a572-693b0dfafbea",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "98ecea2b-f638-4793-83e1-4f770400e57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafef5a6-b2ce-4c11-9d16-eb0d14612472",
        "cursor": {
          "ref": "a96fbdeb-6380-40c1-8f10-7f7dd67eb05c",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2ad4a0e9-406c-4f72-99f7-5518f9f71ff8"
        },
        "item": {
          "id": "fafef5a6-b2ce-4c11-9d16-eb0d14612472",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5767f940-8792-49f2-bada-9a2e08df581a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1158ddfe-40c2-49ca-bae7-5ac63b84a789",
        "cursor": {
          "ref": "ebbb5249-cc64-412d-b0b4-33722965878e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "de258d1d-fadc-4cf1-8f0c-98cf560ccf9c"
        },
        "item": {
          "id": "1158ddfe-40c2-49ca-bae7-5ac63b84a789",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2fc905ac-2c8c-4d50-8226-bf54b38281ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171b36cf-e3fc-4a20-8211-b599ed4b455b",
        "cursor": {
          "ref": "d2514c2d-97c7-4926-a6d0-fdc1d9d01b29",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8482aafd-854d-4184-9c8b-6e1d15b31261"
        },
        "item": {
          "id": "171b36cf-e3fc-4a20-8211-b599ed4b455b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "47aaa458-bbc5-4b3a-b6cd-89f8b21b5a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbe0ab5-f3ba-41c0-937b-3538352a7ac5",
        "cursor": {
          "ref": "92716055-6082-433e-9396-57258a75b427",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "688dc9a1-984e-4093-9787-9cc8c6014ee7"
        },
        "item": {
          "id": "8bbe0ab5-f3ba-41c0-937b-3538352a7ac5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "002454fa-2e42-4828-8fc3-e1c4590c438c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91bbd0ca-f27f-4ce3-9ed7-fa64cc842f3e",
        "cursor": {
          "ref": "523511ca-e8fb-4f92-a6dd-6692d5c4c521",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5800e7cb-59ac-485a-b737-6942f7b9712f"
        },
        "item": {
          "id": "91bbd0ca-f27f-4ce3-9ed7-fa64cc842f3e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c97722ae-4737-4db8-b4c3-31a2f33f7517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effcc77f-14bd-471c-91cc-dcd923359669",
        "cursor": {
          "ref": "a7a8f047-760c-478a-9800-6d46d1d4d329",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b6c659d4-2b42-4552-9be0-4b9c25f5126c"
        },
        "item": {
          "id": "effcc77f-14bd-471c-91cc-dcd923359669",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0ba6426b-817f-4437-a40f-dfdc6bd1f015",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b5d14f-d724-4ca7-aee2-9aa934b0c86a",
        "cursor": {
          "ref": "8543170f-c18f-4489-a5ef-48aca29ad13b",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e2505f6f-2991-4dfd-a83b-091f3ce3cdac"
        },
        "item": {
          "id": "58b5d14f-d724-4ca7-aee2-9aa934b0c86a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "565219e0-4f27-4605-a7fa-0b4938395194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7a63d59f-2ccd-4164-b3eb-87263c68a159",
        "cursor": {
          "ref": "c8d683c3-42c2-4c57-82b0-1d0beb74d4a4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a0b6767-3dd4-48a8-aa47-c3a5f4ca49dd"
        },
        "item": {
          "id": "7a63d59f-2ccd-4164-b3eb-87263c68a159",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9237646d-a4cb-4edb-bd17-2050f7b9660b",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a32f99e-7495-4d8c-9daa-c7dcbe27a3af",
        "cursor": {
          "ref": "692257c9-e4a3-41ed-b5e5-cb1c21f33326",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "85c809a4-79ce-4731-8d76-5a0bb5dd9a24"
        },
        "item": {
          "id": "7a32f99e-7495-4d8c-9daa-c7dcbe27a3af",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "24dc69dd-20ea-4786-b33e-56bed889d424",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20c30c4-692b-4b92-9e58-b286e18ac974",
        "cursor": {
          "ref": "93e50462-21ec-4a4a-a6fa-fe35b6056255",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dd91d170-956a-4348-b6f5-96c4d31f7f8d"
        },
        "item": {
          "id": "f20c30c4-692b-4b92-9e58-b286e18ac974",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "beabb919-4198-420d-bc6c-cba028ebbb1f",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74786d56-c297-4b02-bb8c-8c95f623adae",
        "cursor": {
          "ref": "8dbfd717-6c25-4cb6-8cf5-ccbc68238793",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a1ae68cb-c1c0-4a9d-8601-1ff74d94ad67"
        },
        "item": {
          "id": "74786d56-c297-4b02-bb8c-8c95f623adae",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ca626ffc-f421-49c3-8c7f-a31b23f85bdf",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81571893-48f5-4562-becd-5f429cd51839",
        "cursor": {
          "ref": "bcdc692c-4763-4b75-b847-4b40e219d53e",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bdded426-e9c5-4179-b5e4-eff9cc2c5a05"
        },
        "item": {
          "id": "81571893-48f5-4562-becd-5f429cd51839",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eeb8f6c0-c614-4aca-964c-d45a0f48d205",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-30T00:34:55.524Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-30T00:34:55.524Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "58f87083-5f16-4434-8212-f1a257c7e4c7",
        "cursor": {
          "ref": "e0ef3415-4afa-4222-b341-61d3c71c5792",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5f4e9937-5908-4e43-a313-8170ef5e5459"
        },
        "item": {
          "id": "58f87083-5f16-4434-8212-f1a257c7e4c7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d9411dbf-00e8-4ca6-bccd-a8a928323c0a",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c69de9-f481-427b-8d95-37a15f4a8b29",
        "cursor": {
          "ref": "5ec0f3b8-7359-4557-9017-81e82c06acbf",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f4e60040-8a79-47af-9637-a507fe60d908"
        },
        "item": {
          "id": "14c69de9-f481-427b-8d95-37a15f4a8b29",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "869742f3-96b0-4082-a384-6b1846520b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f30fe1-6096-4f8b-8a21-d4807f946439",
        "cursor": {
          "ref": "13c91a6b-c6f8-4fb7-b000-cbb081afff7f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e5862aab-5e99-4f55-a417-11ef96cb3a13"
        },
        "item": {
          "id": "54f30fe1-6096-4f8b-8a21-d4807f946439",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c769756b-6e55-4e5d-bc5b-0cd7828ea887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d024c1cd-7e7e-4216-acf7-9d7fe681c978",
        "cursor": {
          "ref": "8e646d67-206b-4179-8cf0-b5ebb44bd4e4",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bd4cd363-304a-4103-8987-d1190c770645"
        },
        "item": {
          "id": "d024c1cd-7e7e-4216-acf7-9d7fe681c978",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4a0b85ab-fc6b-4e73-9608-fbf9c9401681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69049570-1504-424e-af18-46f1a5d3f1fc",
        "cursor": {
          "ref": "9df394a1-8c56-409c-881d-5948b6e5951a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "864be5ec-e31c-40ee-a014-fc845f7a2742"
        },
        "item": {
          "id": "69049570-1504-424e-af18-46f1a5d3f1fc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d0376f72-aa2d-403f-8cf8-d146a2e3c15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5624d7b6-a557-4ef8-8fec-36f2fd715e5f",
        "cursor": {
          "ref": "bdc38255-2b85-45a0-8981-119d02a91a03",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e383fe5-1d8e-4892-a421-ed00bd13c222"
        },
        "item": {
          "id": "5624d7b6-a557-4ef8-8fec-36f2fd715e5f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "afafc5fe-f9e7-49cc-a8e1-96f77561d560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1991e4c9-43a9-4993-8413-56a1b1ada4ac",
        "cursor": {
          "ref": "ef8a84ce-3c54-418a-a36a-e48ec424e205",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "65a08be1-1249-48e9-ba69-7674cbae0dde"
        },
        "item": {
          "id": "1991e4c9-43a9-4993-8413-56a1b1ada4ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ca9655a8-aa6d-40e0-b9b2-f260882f5c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7ed908-bc0b-4811-b6ac-bb6cec3176b3",
        "cursor": {
          "ref": "6aec7727-1937-4915-8073-5546d25dc93c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3a33aebf-df47-47ad-970c-4f0ec8a8bc8c"
        },
        "item": {
          "id": "be7ed908-bc0b-4811-b6ac-bb6cec3176b3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c2335de3-9d7b-4322-8367-2ebc69f34220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b801faaa-3d30-4140-ba35-72de15ca09fe",
        "cursor": {
          "ref": "ef0940ec-a26b-4cab-b44c-698479c0f79c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "07c57ccf-cf53-4521-bfa7-66c2b23f4cb2"
        },
        "item": {
          "id": "b801faaa-3d30-4140-ba35-72de15ca09fe",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "91508ed9-90f7-40c2-a1c5-d7ff4dfedde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b39e0b3-3945-4647-a44c-4d9d8822b23d",
        "cursor": {
          "ref": "fe1567a4-351e-4828-bc04-59a1a9f9afc6",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0ab89053-c565-44e0-8160-6b7ef2dcc1c3"
        },
        "item": {
          "id": "9b39e0b3-3945-4647-a44c-4d9d8822b23d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "61250aad-4c76-413e-bcf3-81316797067b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760526d3-0e43-4be6-b973-0da553a75855",
        "cursor": {
          "ref": "044955c4-791e-48cc-b4fd-dfaab2fa40a3",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "14acf61f-75fd-4467-8e40-c8ba22f49090"
        },
        "item": {
          "id": "760526d3-0e43-4be6-b973-0da553a75855",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "934dc5b3-6a05-422d-8a29-6401872d2c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e5e577-291b-4dba-b5a7-a66951187618",
        "cursor": {
          "ref": "ab37abe1-2ecd-4fa3-bf42-917a1a52cd3d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d49399a7-874c-4fc3-8814-aa2270890042"
        },
        "item": {
          "id": "04e5e577-291b-4dba-b5a7-a66951187618",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1999fba9-6291-4565-ba73-fb5a9c642b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7e4b48-1ed5-4c40-8577-acc83e5fe56b",
        "cursor": {
          "ref": "77f4c113-8b92-45fc-90a3-dc0627f837b3",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "02c56334-b3ce-4c54-9713-74c911eb4c7c"
        },
        "item": {
          "id": "dd7e4b48-1ed5-4c40-8577-acc83e5fe56b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ff93a871-85e5-4f62-ba58-8616d7f74c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8120e09-6ec8-49bc-a5ca-c7813599239d",
        "cursor": {
          "ref": "b3fdebb9-a26c-4b8f-a249-1e0697e284d9",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f288f4fc-6cbe-4f36-b449-9693ab1ab061"
        },
        "item": {
          "id": "e8120e09-6ec8-49bc-a5ca-c7813599239d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28f45135-9316-4252-b9be-1b51b8339ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbdc71a5-04bd-4e61-9633-3a6ba5ab5d53",
        "cursor": {
          "ref": "715c55f8-e516-4485-8e63-138b3a14287a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a7048ebc-e61f-4f92-b233-a1948981a50a"
        },
        "item": {
          "id": "cbdc71a5-04bd-4e61-9633-3a6ba5ab5d53",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c094b282-75ca-41a5-a35e-cb156774c043",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6dc029c8-8077-4e10-b9c1-eff2627c0ba4",
        "cursor": {
          "ref": "63dbe88e-dfa0-4d6c-b1fb-46d3af325737",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "11f16a7b-a27c-4961-bcc0-b375a93cc5fa"
        },
        "item": {
          "id": "6dc029c8-8077-4e10-b9c1-eff2627c0ba4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d995a1f7-6e86-4c78-8fc3-491467bb6d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf9dd6f-9801-465d-a303-1ff50d8a3e8b",
        "cursor": {
          "ref": "75f9eef2-6f47-423d-9d96-4702277b9721",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f22e259c-cd8b-4e9b-923d-f4d57818d266"
        },
        "item": {
          "id": "bbf9dd6f-9801-465d-a303-1ff50d8a3e8b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6064b28e-4103-488c-906a-f71567dd1594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1221288-2170-4dee-b022-c7c68252e78e",
        "cursor": {
          "ref": "e04e85f5-c308-43dd-86a2-c2346fc19b78",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0856bd02-57ae-4069-bc2d-5feec8c1b918"
        },
        "item": {
          "id": "f1221288-2170-4dee-b022-c7c68252e78e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "169f4e9a-425b-42a1-83b7-cf5276cf8e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1892963-dad2-4e76-881b-b81791b113b1",
        "cursor": {
          "ref": "67f9e1db-e2f3-4d6f-9bb8-28fa5c1de566",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e029d25-dc73-4422-8f57-4cfc53e628ec"
        },
        "item": {
          "id": "f1892963-dad2-4e76-881b-b81791b113b1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "696e8193-0341-4d6f-a9b1-18e8f891f84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e8c263-3c1a-4e9e-96bd-46f9a1582acf",
        "cursor": {
          "ref": "654072b5-9341-446c-9a1a-7099af55c6ab",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f0de4ea1-1706-4299-932a-64164b8d058e"
        },
        "item": {
          "id": "d0e8c263-3c1a-4e9e-96bd-46f9a1582acf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cb31534f-e7d4-4094-9337-f3ec8fd1dcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e4126b-485d-427c-9c2d-a49cd8aa0c1d",
        "cursor": {
          "ref": "2c81150f-9513-46b5-b7ae-5532db4fa6b4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1edf6eb6-194d-45cc-b11c-827493c832c1"
        },
        "item": {
          "id": "d0e4126b-485d-427c-9c2d-a49cd8aa0c1d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b22e7e4-5e78-4e5b-875f-7dc5dd112f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99aa80f1-6bff-47b8-8174-a07042d53ab7",
        "cursor": {
          "ref": "a26a5541-1597-4979-8255-25fd8d41f9f5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5d89115e-3ecd-41ef-a735-680881d5c89a"
        },
        "item": {
          "id": "99aa80f1-6bff-47b8-8174-a07042d53ab7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "961d7ff6-de27-4900-aa75-fe7359c00821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9be1e7b-ac12-406e-a846-9ba2bb54f78a",
        "cursor": {
          "ref": "91ca3664-793a-4926-9945-2f76c38c60e6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "31260a91-a546-42db-805f-6be11110a176"
        },
        "item": {
          "id": "d9be1e7b-ac12-406e-a846-9ba2bb54f78a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a1954a68-ef92-4433-9a58-6431d1854fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451f8d7b-2120-4489-9e12-60b80d37dcff",
        "cursor": {
          "ref": "acd863fd-cb52-427d-8ebd-5bf8fd93f15c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2b2a1fc1-c2fb-48ae-96f0-b7d2c0997314"
        },
        "item": {
          "id": "451f8d7b-2120-4489-9e12-60b80d37dcff",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "99431623-e6f3-4df5-a75d-caaa46b65a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc5bbe5-19f7-4b03-b9cf-3171f3aae959",
        "cursor": {
          "ref": "6805da91-e65b-49f0-9f3c-ef3e4824ed5d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "80945a91-a28f-4f65-ad97-315277a71744"
        },
        "item": {
          "id": "bbc5bbe5-19f7-4b03-b9cf-3171f3aae959",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0d150691-709f-4c5b-9a16-21b9cc78db3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18faf7c1-88e9-4920-b58f-0407dac87d34",
        "cursor": {
          "ref": "f074735e-3885-41f1-b7bc-1e5b35caf821",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "340ddbc3-f943-453d-8639-9a504b8aec18"
        },
        "item": {
          "id": "18faf7c1-88e9-4920-b58f-0407dac87d34",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "35f7af67-32ec-464e-b162-a3a0b162e7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe9bfb5-46ba-4dcd-9f9c-8e52a2d3c8c5",
        "cursor": {
          "ref": "fa3a725e-01eb-43ef-afdb-6a4d51959c5e",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0a02a4bd-02f1-491a-b746-6cf599514eb8"
        },
        "item": {
          "id": "6fe9bfb5-46ba-4dcd-9f9c-8e52a2d3c8c5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18224b04-7fde-4970-93c6-7035fc2a64be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f963f33-aaf2-48ae-90e2-7fcf20e1ccd4",
        "cursor": {
          "ref": "c9c89b02-5eb3-4647-b268-f3db1c486041",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7814fe74-5f3b-460f-bdc3-551fffbf1a15"
        },
        "item": {
          "id": "2f963f33-aaf2-48ae-90e2-7fcf20e1ccd4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "93150e48-6187-46fd-9c6f-3917c02f5d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f51edd-9de5-4de6-8044-44ca4bad1910",
        "cursor": {
          "ref": "435d547f-f110-454c-995c-97baa9043bb0",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "47bc2565-3a14-490e-a993-a850be521cd4"
        },
        "item": {
          "id": "95f51edd-9de5-4de6-8044-44ca4bad1910",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48182456-7c00-4b37-a47c-cfa4134c817b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b40df9-75e0-4818-b9fd-4af981e8f8d5",
        "cursor": {
          "ref": "cdf78125-f151-4de4-a52a-3c3444b3a372",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5df4bc39-050c-4b47-8fdc-11dd81eb8827"
        },
        "item": {
          "id": "50b40df9-75e0-4818-b9fd-4af981e8f8d5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9f2ab40c-4d85-4ffb-a8fe-a51c877e78bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33087804-1be1-4201-955f-855331f2011f",
        "cursor": {
          "ref": "2fbe8548-6864-4960-a7cc-e5fd3fb0df41",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "623334ad-bc03-44da-bcff-7d3322b31272"
        },
        "item": {
          "id": "33087804-1be1-4201-955f-855331f2011f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b202a7ce-b02a-4c0a-b5c7-d426daf9ba45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bcb0af-2b7b-4543-88aa-e8df0d8de4bf",
        "cursor": {
          "ref": "6a34c9e4-3f67-4000-a868-3e770c224bb2",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eb9e81af-36fa-40ad-8286-397f28232bac"
        },
        "item": {
          "id": "e8bcb0af-2b7b-4543-88aa-e8df0d8de4bf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "df3925cd-bd82-4890-9730-dd52d37e5f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f212dc8-8b5e-4dd0-999e-87606a96441f",
        "cursor": {
          "ref": "ce559f28-7fbb-4b7e-9fcf-b2c1e6cf0080",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6b752e23-bb8f-4077-8299-9ad86785abfd"
        },
        "item": {
          "id": "8f212dc8-8b5e-4dd0-999e-87606a96441f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5a6fe62e-90bc-481f-af4c-9ee95a0e9138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73568b1b-c833-486b-8f88-7fa9dded80ec",
        "cursor": {
          "ref": "d21584ac-87ec-4a19-af7f-148f0e569d0e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3bfb9f70-7d83-4f1f-b425-f95af0a180cb"
        },
        "item": {
          "id": "73568b1b-c833-486b-8f88-7fa9dded80ec",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "aedd904f-432b-4d7f-8d8f-afcc5371068b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c930174b-5b8c-47bf-b8c6-215209107bae",
        "cursor": {
          "ref": "0542a024-e73b-4c1c-95e6-61c3d415741e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6b306157-8bde-4303-8cb3-da5f33ac6ad0"
        },
        "item": {
          "id": "c930174b-5b8c-47bf-b8c6-215209107bae",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "41752a40-82ce-4147-b3d5-36cd0c1ed323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91db49e-70f4-401e-a5c2-b1c41f4bc7f1",
        "cursor": {
          "ref": "f0d0b549-8db9-4896-a08c-c141dbbf0cdd",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e6557d1e-d8ef-496b-a64a-13a6502b5123"
        },
        "item": {
          "id": "f91db49e-70f4-401e-a5c2-b1c41f4bc7f1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "43b92708-357c-4c4e-99db-5aed01e69600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c557485c-147d-4fa0-8d4f-3abffbed4f15",
        "cursor": {
          "ref": "e63239b9-6445-4f85-a255-afd0cb0db009",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "41c3410d-718a-4d9e-8830-4e744ea90b79"
        },
        "item": {
          "id": "c557485c-147d-4fa0-8d4f-3abffbed4f15",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ee98d986-88a9-4b24-88ee-ff7793964d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1aef92-6c58-4018-b94e-3e7e1bcb0483",
        "cursor": {
          "ref": "31c8a1f9-7ca1-476c-b7b2-26e38092f46b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "aa9d7d77-beeb-441c-81a3-fa5a8fdc02d4"
        },
        "item": {
          "id": "cc1aef92-6c58-4018-b94e-3e7e1bcb0483",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "45f74757-43e3-4caf-aeeb-8fb9fe1bb3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e420f2-ff66-41cd-9d93-8ae929103917",
        "cursor": {
          "ref": "37896640-2ada-495c-829d-b22017c7e40b",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "003616c1-4db5-4b3d-b56f-b3685f47f4ff"
        },
        "item": {
          "id": "08e420f2-ff66-41cd-9d93-8ae929103917",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b3e3a32-3ac0-4a52-81d6-f81e26f79c21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68c8b97-75bc-4200-8340-113b5e673fcb",
        "cursor": {
          "ref": "46efd567-ed49-4382-8fa2-55215fa2825b",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e32de5e1-3af0-48fa-806d-28a578287b0b"
        },
        "item": {
          "id": "c68c8b97-75bc-4200-8340-113b5e673fcb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "72247c51-e878-4948-be67-9b7caeba4ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b2cd7d-796b-49a0-af0b-9cc9317afa94",
        "cursor": {
          "ref": "c160f8ed-37ed-4fff-ab59-7a67c021d215",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "86d5ba4b-da27-4b65-8883-0d657dbcf224"
        },
        "item": {
          "id": "05b2cd7d-796b-49a0-af0b-9cc9317afa94",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bc9bd1bb-7d1d-47c9-8b37-cb03b3f6221c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6ea8b4-42ac-46f8-8cc6-f07366e4f929",
        "cursor": {
          "ref": "1f2b58e8-4cdd-4156-87fd-b5580d7a5a99",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1498c36e-95cb-49bf-891d-ab98f9924b2c"
        },
        "item": {
          "id": "8f6ea8b4-42ac-46f8-8cc6-f07366e4f929",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "27b6662a-f791-465e-a6b9-316564dff5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43d21fe-3178-4e78-8231-ffdbe4b8a289",
        "cursor": {
          "ref": "251d7356-d9ef-497f-a6e7-fa798e6aa3ea",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5ca11e1b-bee7-472d-92f5-125cd30fd85d"
        },
        "item": {
          "id": "c43d21fe-3178-4e78-8231-ffdbe4b8a289",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "001f454d-96e9-454e-a4d6-c0182ae3901c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db429653-5b27-4228-b9f5-27aec989af8e",
        "cursor": {
          "ref": "69a121a1-4f7d-4d36-a5ff-37bbf600a336",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5b9a92a3-7500-4cf9-b93f-e66186824da7"
        },
        "item": {
          "id": "db429653-5b27-4228-b9f5-27aec989af8e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5b95911b-9415-490c-bc9d-c8639d39f3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4e18e3-4765-4a04-9fd3-f77cfac61c30",
        "cursor": {
          "ref": "473a132c-f0c9-4beb-88f2-874e03b3b8eb",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1ee896f6-a6fe-42ac-9c1e-6c841efc88d4"
        },
        "item": {
          "id": "bb4e18e3-4765-4a04-9fd3-f77cfac61c30",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b3d22f96-83d4-4a9e-b3fb-02879ad4d044",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "47965e67-d9a1-4174-a427-0cb1ce47b79a",
        "cursor": {
          "ref": "3993ddac-8fe6-4374-8d16-a8b889b04815",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bbbe1a29-3f3c-4138-bddf-15fdd53f1b26"
        },
        "item": {
          "id": "47965e67-d9a1-4174-a427-0cb1ce47b79a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b61fd41b-7933-46f1-843a-ae13c3a94cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe0f1a6-2134-4c35-ab01-8f59cde26275",
        "cursor": {
          "ref": "c4903e59-6ec1-4abb-9073-777adb555fa6",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "be41c89e-fca3-40e6-8198-47396f2f119f"
        },
        "item": {
          "id": "9fe0f1a6-2134-4c35-ab01-8f59cde26275",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7b3985e8-3916-413f-9e15-ce8ac578eb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d564033-230c-43ea-bef1-e5bbdfe1f9b3",
        "cursor": {
          "ref": "473d2f06-a178-40f3-b4d0-9481f3bea970",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "05b43a5f-0431-4727-a5c2-4597580f437f"
        },
        "item": {
          "id": "4d564033-230c-43ea-bef1-e5bbdfe1f9b3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "453775f6-e367-44e3-92c4-d8f8fa1a747c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622bdd41-0a62-4ad1-bf6b-6c5a3a0e0378",
        "cursor": {
          "ref": "e62b4b80-effa-4264-81f1-9f6455fdffd5",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "414e054a-061e-4b0b-a5e5-74449c50f337"
        },
        "item": {
          "id": "622bdd41-0a62-4ad1-bf6b-6c5a3a0e0378",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "db37d9b5-6f09-4100-9889-946dad76e349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8929fea-b0f6-42d0-bfef-728659152e50",
        "cursor": {
          "ref": "44f97b84-dae2-4f28-8837-c1b462aaa1d6",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d55f74f0-caa1-46ec-9974-fe00c4e752e2"
        },
        "item": {
          "id": "c8929fea-b0f6-42d0-bfef-728659152e50",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0ee0c07f-7ed9-4b6d-80c1-92721cf53475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57052be6-180b-4e58-a16d-abde045b70f3",
        "cursor": {
          "ref": "0a6f0f28-aafb-4df9-9268-a1b37289484b",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c452bd02-795b-4f77-85cb-4df381ff1e5b"
        },
        "item": {
          "id": "57052be6-180b-4e58-a16d-abde045b70f3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "95544479-f5c1-4d58-afa4-925d75612ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7cc10b-e5f6-49a8-9c97-5defeaac71b8",
        "cursor": {
          "ref": "daff3e77-798b-42fa-8f68-67cf2e4e6999",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "194a50b0-711d-48c1-a833-f913c8e92b06"
        },
        "item": {
          "id": "fb7cc10b-e5f6-49a8-9c97-5defeaac71b8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f2e14992-8caa-4135-9650-4c7e4616ca8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7001f197-cbaf-4f56-a388-6082cd400707",
        "cursor": {
          "ref": "a34effdb-d561-4266-a82a-b9f1fd096d53",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5821e370-f14b-419d-86ea-54eb4e5fac9d"
        },
        "item": {
          "id": "7001f197-cbaf-4f56-a388-6082cd400707",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0ebe0099-4ba5-42d2-9745-5b4337ad659b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee7c032-b572-4420-8b49-2c31dca62c68",
        "cursor": {
          "ref": "4ba82900-c127-4438-bf64-ac3293a1f6d1",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6ac72bf6-f953-4e44-8353-ee11c8b784d4"
        },
        "item": {
          "id": "aee7c032-b572-4420-8b49-2c31dca62c68",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "45874e03-b088-452a-8525-f8b4853dec4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c56ddf-ada1-4f05-9729-6bc7ba7e57a2",
        "cursor": {
          "ref": "b5f8aa96-61d5-43be-8d6a-fff8818f2b95",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c47e8aad-163d-4381-bf60-604049250e1d"
        },
        "item": {
          "id": "26c56ddf-ada1-4f05-9729-6bc7ba7e57a2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "955b3038-6fea-4ba0-b1a2-93fad7c2818e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8e3ec7-eb52-44b1-917f-2b2b588a2dc2",
        "cursor": {
          "ref": "963a5143-42c0-4d58-9ed4-7685ef57e044",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "75d96310-f052-43d5-96f6-e6fdbd9112f3"
        },
        "item": {
          "id": "eb8e3ec7-eb52-44b1-917f-2b2b588a2dc2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8e498002-dd6c-4c5c-88d9-d5c412a38300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a9f617-08eb-4cd9-afba-72f06529aef6",
        "cursor": {
          "ref": "19030b48-2513-404e-a6be-a470e117a47f",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d6846b90-d969-44d3-a2bc-60932d00fa27"
        },
        "item": {
          "id": "f8a9f617-08eb-4cd9-afba-72f06529aef6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e625c22-25a8-4d7b-a2d9-6781a938710d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb7fa48-9b2a-4ec8-bdfd-bfac681253df",
        "cursor": {
          "ref": "565e4861-a347-4bea-87e0-66b29535e608",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2b3ca391-d722-42f7-b8db-dfdbccc42672"
        },
        "item": {
          "id": "cdb7fa48-9b2a-4ec8-bdfd-bfac681253df",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5990dd18-bc13-4123-975d-a706b013ad51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0814b3-7faa-4cb3-8823-ab87cb3256a1",
        "cursor": {
          "ref": "b7777635-1d46-4002-8f81-448cb7be92cb",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6eaeaee1-662c-425b-b105-735c741671ce"
        },
        "item": {
          "id": "5c0814b3-7faa-4cb3-8823-ab87cb3256a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8da2051f-dcf9-416d-9c10-6b94cc563ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20856c83-f050-46bf-becc-44231a89fa88",
        "cursor": {
          "ref": "20ba9db3-18b4-4b6d-a7ba-bd7928ea19fa",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d5bad4e7-4953-4a30-a94b-8ea29e666fa5"
        },
        "item": {
          "id": "20856c83-f050-46bf-becc-44231a89fa88",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "00aaf55c-8c36-4f11-ab38-f14ff600d14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02e4e26-dd02-4042-8f32-84792d40caac",
        "cursor": {
          "ref": "638f1b33-d7af-4441-845e-a09224844729",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b4fd6a65-51b3-43d2-baba-97ff6ba23bcf"
        },
        "item": {
          "id": "c02e4e26-dd02-4042-8f32-84792d40caac",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e48c6457-cebf-4e48-b995-8f66dc9adac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91fc498b-eb71-42fb-a2db-6295fc878913",
        "cursor": {
          "ref": "5dbb54a2-a872-4586-a2ce-8c863f3167a5",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9446b346-90cd-4f20-bf2d-829928609e32"
        },
        "item": {
          "id": "91fc498b-eb71-42fb-a2db-6295fc878913",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f3cb1e25-faf9-4a06-825a-f608d0c3a842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b5c998-205a-49b4-8ec2-0048a27f2f7c",
        "cursor": {
          "ref": "f79d23b8-7c94-416c-b1b7-ef9835bdc471",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e516c59b-92ae-449c-98d2-7d262790e1b4"
        },
        "item": {
          "id": "27b5c998-205a-49b4-8ec2-0048a27f2f7c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1e921945-4f3a-4d0a-918c-994c16ecbdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2822e3e-ad06-403c-b3ce-09151f6b97ce",
        "cursor": {
          "ref": "34a66815-2630-41ef-a3ca-47762dde032c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "89034346-7bfa-4150-81c9-fc69be0a7ed5"
        },
        "item": {
          "id": "e2822e3e-ad06-403c-b3ce-09151f6b97ce",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e5fd80c0-715b-4d1a-af71-db09354ae178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406c88eb-74aa-4cc3-8120-1705e30d5da8",
        "cursor": {
          "ref": "2f7b3987-5d42-4a24-b4d3-60a068423a51",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "37320d69-e1e9-49ed-9fca-711089ecc0cb"
        },
        "item": {
          "id": "406c88eb-74aa-4cc3-8120-1705e30d5da8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "803d0b87-34fe-4523-a61c-de1d5913c956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d150e9a-fa1a-4741-8644-27f2a3372f60",
        "cursor": {
          "ref": "a6a32b37-6ccc-4fd9-ae2c-d2fc0b6d8c9d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5cf1b4af-f15b-48fc-9a11-56d138bf7643"
        },
        "item": {
          "id": "2d150e9a-fa1a-4741-8644-27f2a3372f60",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "58574da1-5505-4426-855b-ba320c56ef16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b6505c-ffac-480f-87d8-d3450847c5d4",
        "cursor": {
          "ref": "31fba1e1-ade2-4a47-8a19-e2d62e7c0644",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3c6e099e-5af7-4ced-b2a3-74367fb55daf"
        },
        "item": {
          "id": "52b6505c-ffac-480f-87d8-d3450847c5d4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c1d6bc45-72fe-4349-a9dd-09d01459eee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3ddc0e-3b38-4ce2-8d9e-80add555e11d",
        "cursor": {
          "ref": "7350ad82-2584-4427-bff4-5afeca6dbeaa",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0cb987d8-cb9a-4de3-a5c0-288861910a7c"
        },
        "item": {
          "id": "cc3ddc0e-3b38-4ce2-8d9e-80add555e11d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a7b86116-ed32-4269-920d-bd1dcd6c6b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98db376-c442-4e08-b881-b3c5101c4d55",
        "cursor": {
          "ref": "ad7ad628-41a9-4a91-9718-7afe60a7745f",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "613f2c33-39f1-44be-8a3b-c8f01e2f575b"
        },
        "item": {
          "id": "f98db376-c442-4e08-b881-b3c5101c4d55",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ec7ad946-d8c6-4601-ad83-147eb34612c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593cfd34-ca69-4515-bae9-71844b030023",
        "cursor": {
          "ref": "85635dbd-054f-43c9-a8b6-9d726b785ea9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "57831014-9314-4ce6-b805-53239915a911"
        },
        "item": {
          "id": "593cfd34-ca69-4515-bae9-71844b030023",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "faa7346c-bbb5-4984-911c-3aa6e2419c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab0fbf1-f50c-4c96-89f1-489f37a5be4e",
        "cursor": {
          "ref": "9faf1139-8047-4421-b337-5731d9c21d82",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d3de899d-17e0-4590-a926-3f3ef88b9649"
        },
        "item": {
          "id": "1ab0fbf1-f50c-4c96-89f1-489f37a5be4e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2cfcbddb-bfe9-4765-8b08-44e673e3b9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed45b503-e284-456d-8cde-9848160877ca",
        "cursor": {
          "ref": "1de84665-a808-4605-9379-54d0c4f84293",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d551c620-7583-481e-9089-8ae599edb47b"
        },
        "item": {
          "id": "ed45b503-e284-456d-8cde-9848160877ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "86464b29-5081-4a6e-89a5-aa9ff66d8659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7380b7f4-fb24-45c0-a830-f9de090c2e61",
        "cursor": {
          "ref": "4972c5e1-7d15-40d0-a1f0-cb92b54be4a5",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1b6a814f-c741-4af4-ba57-8f66fd01df6e"
        },
        "item": {
          "id": "7380b7f4-fb24-45c0-a830-f9de090c2e61",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3ed16b07-d9a7-4daf-920b-05962edaa5fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0758de26-5aba-4099-8bb8-4e476d69110f",
        "cursor": {
          "ref": "928a485c-7bbf-4f8f-a587-06b2f6330ac4",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6c4250df-dc62-48fa-a2dc-c3f148d56e40"
        },
        "item": {
          "id": "0758de26-5aba-4099-8bb8-4e476d69110f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "84008f06-07f6-48d7-979b-0a696304fd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541625fb-4aa8-4b1a-ab51-2d981cf6aced",
        "cursor": {
          "ref": "25e75b56-4e97-4f0a-8049-29276b3a80dc",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d1f50c66-5ffc-4178-b81e-d9fc83b2beb8"
        },
        "item": {
          "id": "541625fb-4aa8-4b1a-ab51-2d981cf6aced",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8d541b8e-0975-4c73-beee-e50d286d6c4e",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "18d0427a-44a1-4985-8b28-548036c25e90",
        "cursor": {
          "ref": "5903136a-d516-4046-9065-83b0b8acc6e8",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "193d8926-8548-4fc2-8009-3277dbd73404"
        },
        "item": {
          "id": "18d0427a-44a1-4985-8b28-548036c25e90",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bb7da0fa-ac5c-4766-be44-ea6bc155565c",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4aacc065-bd0e-4676-a9c6-93ad6e54920f",
        "cursor": {
          "ref": "9916c6c0-c2b0-4786-91a0-41c8bfda6027",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "60087228-ee9d-49c6-9909-a7e8346d5351"
        },
        "item": {
          "id": "4aacc065-bd0e-4676-a9c6-93ad6e54920f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "408c8960-1d4a-42b9-be43-d342e97bd425",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "7b08440f-6cbd-4c18-a663-cd87eeab1eb8",
        "cursor": {
          "ref": "a4616501-bf72-445a-aece-fb441f6d0e3e",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fc1f5f0f-e89b-4498-bad6-33224426a736"
        },
        "item": {
          "id": "7b08440f-6cbd-4c18-a663-cd87eeab1eb8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b8226c5d-0e37-4e9c-8ab9-deb80c1925b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864c8649-8817-4b60-8098-9e0807159eef",
        "cursor": {
          "ref": "1dd7d30f-f31e-4adc-81df-5bbc496a34e5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "37c71e9b-93a4-4686-a815-68ede0245b11"
        },
        "item": {
          "id": "864c8649-8817-4b60-8098-9e0807159eef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7625d269-a9fa-4522-a12b-b3643358a0d5",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2da0739a-c3c4-48b4-9b0c-a7661dabb260",
        "cursor": {
          "ref": "0aeb31c9-0dc9-477d-82d3-f28ffcaf8175",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5721f320-1bc0-4040-a91b-18b0518b7779"
        },
        "item": {
          "id": "2da0739a-c3c4-48b4-9b0c-a7661dabb260",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3587cfde-248d-4d6f-ade9-483a4ab57d72",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "5b5b65fa-3970-4136-9ac9-59c2a66dc91e",
        "cursor": {
          "ref": "0911f9b0-4048-4586-9f13-36ea6f68f1bc",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "16b1e86c-31d1-4a8e-a725-14361bb57319"
        },
        "item": {
          "id": "5b5b65fa-3970-4136-9ac9-59c2a66dc91e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "610ad5c6-d7b3-4980-9334-282edc726671",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "881deb1b-3b9b-4e36-91d9-7e8cdc569dd3",
        "cursor": {
          "ref": "c05e3428-9204-4e5d-a4b3-390313584762",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0f921c93-b47e-450a-b32a-27eeb3e6398d"
        },
        "item": {
          "id": "881deb1b-3b9b-4e36-91d9-7e8cdc569dd3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5971628e-7075-4db9-a8ae-456e0dd2db5c",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "83036714-0fba-4584-bb00-d66916332bbb",
        "cursor": {
          "ref": "4bd25cc7-47c8-43ab-8ade-27284dfb3ee6",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ba6f4fe1-cca9-44d7-8757-870e43cf0dd0"
        },
        "item": {
          "id": "83036714-0fba-4584-bb00-d66916332bbb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "85cdce46-d8fa-445d-8378-42a4e1225dfb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "03761b69-2098-48ce-941a-0bc21b9f114e",
        "cursor": {
          "ref": "feaf2a1c-cd5d-4ac7-aee8-a04a330ba032",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "122c8087-5d13-4bf2-a017-3318006f6954"
        },
        "item": {
          "id": "03761b69-2098-48ce-941a-0bc21b9f114e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e4df5986-422e-49c0-8707-9f60e151088d",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b03224ae-b02e-4e79-8a6d-5e9e68fb8148",
        "cursor": {
          "ref": "534854de-5726-4441-9a91-ab634b398fba",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "152cea9b-ce12-4c3e-b4c4-e7619f5504eb"
        },
        "item": {
          "id": "b03224ae-b02e-4e79-8a6d-5e9e68fb8148",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f77b4064-5064-4ec5-9cfa-ecce0b67e2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6287e6e7-a6f4-4954-83c6-2b85c33de6ac",
        "cursor": {
          "ref": "fa3c917b-cd91-4d54-bb24-85869343cb2a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2221b09d-1803-4a50-9e78-8ff2d46c4ec2"
        },
        "item": {
          "id": "6287e6e7-a6f4-4954-83c6-2b85c33de6ac",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "759d0b32-b535-4c86-857e-f362c0bb358f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0379d06d-ce9e-4c37-8403-15195ad243ff",
        "cursor": {
          "ref": "8f97379c-7fc4-4e91-8df8-6417c0f70727",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2709372e-7ec2-4170-bea2-72a52b595260"
        },
        "item": {
          "id": "0379d06d-ce9e-4c37-8403-15195ad243ff",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3e2c7002-7c86-4228-b6d5-967d152620e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe34b232-ea98-4c7b-a6e1-f2e69956cb2d",
        "cursor": {
          "ref": "2d9d7e46-68c2-4288-8438-3e6d032b075b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7237109c-faff-43ea-af5b-d49751f094a7"
        },
        "item": {
          "id": "fe34b232-ea98-4c7b-a6e1-f2e69956cb2d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "64136228-d1dd-4b14-af4b-88fbc73c9618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd99a27-7588-4c3d-9e75-7b851f5d94a3",
        "cursor": {
          "ref": "c1c520de-253a-49e3-b2b8-1462cfe7c2e0",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d5fd7249-e135-4bce-bfb8-3b3a9d2939f6"
        },
        "item": {
          "id": "9cd99a27-7588-4c3d-9e75-7b851f5d94a3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0c409c9c-1c78-495d-ac69-db1c34305355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217843a6-8910-4275-961d-e8affce467a4",
        "cursor": {
          "ref": "3932d43d-fcf1-4f5c-ab37-38730f31423c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "34898e99-2059-4446-ac2e-17ec2a30ddec"
        },
        "item": {
          "id": "217843a6-8910-4275-961d-e8affce467a4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2ab43cce-f1ae-4550-b41b-4512debd0cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026086d3-4794-4889-889b-cadb8d7ba4ee",
        "cursor": {
          "ref": "97540276-f13a-47d9-8c93-67b2813b5207",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4183267c-8599-4d3a-829b-a6ea5b0ee6cc"
        },
        "item": {
          "id": "026086d3-4794-4889-889b-cadb8d7ba4ee",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e37202a0-f25b-48f9-b9a0-b975e82a69c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "390e1c57-3514-46eb-b4ee-d45082a5cd2c",
        "cursor": {
          "ref": "43021994-a0b5-4446-a766-499e08b3a591",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "526b0d09-1a8e-425d-a9aa-a10e6973ccf3"
        },
        "item": {
          "id": "390e1c57-3514-46eb-b4ee-d45082a5cd2c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cd39a2d1-3cb8-4ec7-ba7e-737e33f1d53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eee8a2-b6b1-4526-9501-8b4dd2cae599",
        "cursor": {
          "ref": "bd9808df-5729-4ac9-96f9-1615fd44dd13",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e1f5ce9b-25cf-4585-98c4-8600d4795b1c"
        },
        "item": {
          "id": "35eee8a2-b6b1-4526-9501-8b4dd2cae599",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cf28833c-9d8c-44a7-8471-fd9c53a1ea90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9d0488-3267-4f86-a10c-375649d91ae9",
        "cursor": {
          "ref": "b616385f-bba5-4c8f-92a6-1d0d92e1698a",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "74efd977-c628-4b2a-acce-8d3defa84952"
        },
        "item": {
          "id": "2f9d0488-3267-4f86-a10c-375649d91ae9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2c9b61cd-d5b8-4e0c-a2b4-86bb936b3206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae46df2-dde9-46df-ae6f-fa5ea1c1763f",
        "cursor": {
          "ref": "44463198-e43f-46f4-861f-1bb35b41e1eb",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a2bbe554-3b5f-4e26-8282-1e5cbd0e2c4d"
        },
        "item": {
          "id": "cae46df2-dde9-46df-ae6f-fa5ea1c1763f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e6917bbf-adf7-44ae-ae47-213b596d98d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544eba5d-4601-4885-8e6c-de1880c0b25b",
        "cursor": {
          "ref": "592b989f-47f1-4338-a056-26660768256b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fcb9440f-7259-45af-9148-eb84d3e0b219"
        },
        "item": {
          "id": "544eba5d-4601-4885-8e6c-de1880c0b25b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b02accb0-c384-482e-b93f-65d47671e6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40368850-f416-4a88-825d-9ff66d36575e",
        "cursor": {
          "ref": "1eaef988-552d-43e3-b3a4-e8d2d4453bc4",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "58b8860b-68f3-4cfc-95a8-d688b4a60f34"
        },
        "item": {
          "id": "40368850-f416-4a88-825d-9ff66d36575e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "41570c7f-e79d-4e1f-ae92-585248e53332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e45bf70-88cd-400c-b5c5-183ea250699f",
        "cursor": {
          "ref": "2aa54285-00eb-4e81-b19e-8670be2961ae",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "02d6c781-48ed-4a26-8a4b-0fc5e6ace8fe"
        },
        "item": {
          "id": "4e45bf70-88cd-400c-b5c5-183ea250699f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1f0d6a6f-4c6b-47af-990c-f3edebec1ed6",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0a045f46-d45e-4d48-ab12-063339a9c636",
        "cursor": {
          "ref": "964f8b20-0c5a-4a70-8489-14915ab2963e",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4cc9315f-5562-453b-aa30-eb236c80066c"
        },
        "item": {
          "id": "0a045f46-d45e-4d48-ab12-063339a9c636",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d1e0b315-4c1c-48f8-9d50-4f02d884622b",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ae3bd683-5842-4745-9228-6f6f8de69d88",
        "cursor": {
          "ref": "577c67d4-5806-4f4e-bc27-a8356b92b7c8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6720f519-6ca0-4204-b691-3c5cf4f3e1e5"
        },
        "item": {
          "id": "ae3bd683-5842-4745-9228-6f6f8de69d88",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "caebf7b7-cb69-42cd-83a9-414f1fe0a050",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ed745dc9-66d1-4f32-b011-7f5260a74954",
        "cursor": {
          "ref": "87bbf7cb-93ce-4357-a788-3291f6e9d2fb",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "33eddd0a-f880-4706-a596-d34cc5a89e4d"
        },
        "item": {
          "id": "ed745dc9-66d1-4f32-b011-7f5260a74954",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e5834da4-3d00-4149-a675-8038d831f03d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "8203da68-0daf-455c-80c8-e08040487064",
        "cursor": {
          "ref": "1c2d2721-1111-4d7d-83de-0b8ceae4887d",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a3055bee-645d-4937-8f5f-718f6f4cda2f"
        },
        "item": {
          "id": "8203da68-0daf-455c-80c8-e08040487064",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "91fe1586-7c4e-4c99-a67b-50cef34dd5e5",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "93cd4626-f1bc-42d5-a813-8b1f953a7d66",
        "cursor": {
          "ref": "3ec0cdaf-b22e-47f4-af0b-80cc2d1c755f",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a4ee4dcf-096d-4abf-a47d-977c8f450ff5"
        },
        "item": {
          "id": "93cd4626-f1bc-42d5-a813-8b1f953a7d66",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f2c1bf23-9bb3-4b12-a673-61e72e3a91e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee58a89-d78a-4454-9d0f-0360d7506f01",
        "cursor": {
          "ref": "26ef97eb-0a91-4cdf-be85-18f6e81b8a76",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "25b3007b-1c00-46c9-acd6-789b83f7bb71"
        },
        "item": {
          "id": "9ee58a89-d78a-4454-9d0f-0360d7506f01",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8d1733f0-add9-4f35-b740-36511d28cd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a9c16f-a724-4066-9077-13ca2707a601",
        "cursor": {
          "ref": "642166bf-af03-45b0-b295-ec05d2128a13",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "eee2e190-cd51-4856-84ad-eae3bf1c5100"
        },
        "item": {
          "id": "01a9c16f-a724-4066-9077-13ca2707a601",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "afc66e45-dbc1-4435-9d95-4e44d5b4886d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b3f242-3a13-489c-a02f-7451af5dc584",
        "cursor": {
          "ref": "5a27e042-5085-4a49-8c19-46f5745a4319",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7962737b-ea07-48d7-a642-09a3be857a13"
        },
        "item": {
          "id": "68b3f242-3a13-489c-a02f-7451af5dc584",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ba7dd7c6-dc6d-4360-83f9-f85f60e972ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4b68ab-2b3a-487b-b534-0200a90b0eb4",
        "cursor": {
          "ref": "d16635b1-74b2-42c5-b19e-b9d4c29fe50f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "896763b2-4690-43e3-9592-66e0cc20b4d8"
        },
        "item": {
          "id": "7a4b68ab-2b3a-487b-b534-0200a90b0eb4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "00250529-e1cd-4cf6-864e-587a5cb2565e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f842a8-bc02-4c3f-8109-2b07825b0c7b",
        "cursor": {
          "ref": "01cd7699-c4a1-4639-b6d0-9e2934273b24",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "13d83bc8-3ea1-4b45-9a5f-5ef7d0666d37"
        },
        "item": {
          "id": "b9f842a8-bc02-4c3f-8109-2b07825b0c7b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4f237ed-8771-436c-8b9c-e33af31116e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848a60ed-fdca-4f70-9b8e-87159bbd0eed",
        "cursor": {
          "ref": "d7f52039-feb4-4d9e-81ea-d7ef5e70e2bc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1aa093a4-951a-4ee6-8b74-4f52fa8a3ac1"
        },
        "item": {
          "id": "848a60ed-fdca-4f70-9b8e-87159bbd0eed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "08b3ea4d-ddde-421c-ae3d-e93803448dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c39c23e-a79a-461a-877b-d520f960e7f1",
        "cursor": {
          "ref": "a89b9382-3e41-4917-ad9b-81e0df5c08c0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7a3ccdd1-706d-4c11-917f-cbe1af1fb6aa"
        },
        "item": {
          "id": "7c39c23e-a79a-461a-877b-d520f960e7f1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eb9a74fb-b6fa-4730-a264-98ea1127145c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c7b2de-92ff-49c0-9069-9aa7ed9111d2",
        "cursor": {
          "ref": "8200355e-2df4-4e03-8de6-c12b1a89255a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f0fa3066-fdae-4c85-a4b3-221793821a3e"
        },
        "item": {
          "id": "82c7b2de-92ff-49c0-9069-9aa7ed9111d2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ac22437f-79d4-4407-9765-033b2c25415d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa742da-16a4-4eb3-89c5-8512cb447fcf",
        "cursor": {
          "ref": "670653a0-26e8-47fa-8ec6-f55f4580cc02",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "343df738-5373-4bd2-bf7d-622db0404a95"
        },
        "item": {
          "id": "2fa742da-16a4-4eb3-89c5-8512cb447fcf",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9744fe1f-5504-4d9c-8bb5-c8f929d180fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb74b48-3070-4b58-bd14-fe2727784b37",
        "cursor": {
          "ref": "d8a77dd6-711b-4370-bdc0-2d8f5ae4d9a1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ef95f1b2-b0df-44cb-a6c3-3a8debb6c878"
        },
        "item": {
          "id": "5bb74b48-3070-4b58-bd14-fe2727784b37",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "258a3ace-7bcb-45a5-a38c-02b5f3c56439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de24d9d2-1e8a-47be-8305-42cd5398a09c",
        "cursor": {
          "ref": "d6a5a18f-e139-41ad-add7-e94c4d131282",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c5ae26ce-58ad-43e9-8a2f-85582d6bb608"
        },
        "item": {
          "id": "de24d9d2-1e8a-47be-8305-42cd5398a09c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "237f9c45-1cfc-49e0-9291-2625aecab59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620c259b-9f02-4977-aaf0-aef2b49be66d",
        "cursor": {
          "ref": "0ec78ac9-6ba8-4e5e-897d-6879558de0e7",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0d322ddf-3f13-4751-a0da-2713b7ce281c"
        },
        "item": {
          "id": "620c259b-9f02-4977-aaf0-aef2b49be66d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "081165ba-eac9-4eeb-9537-c2afcee6ec4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1944a7e1-171a-4546-b955-55ff5341d860",
        "cursor": {
          "ref": "a7668c46-2559-451b-a3fc-977c6a6b855f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8770ffae-b1c0-45a6-948e-660430b1a807"
        },
        "item": {
          "id": "1944a7e1-171a-4546-b955-55ff5341d860",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d753db4-9073-4c65-9226-5cda3c6cff51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344c618b-a74b-4ec5-a29f-53e3e5ecd76c",
        "cursor": {
          "ref": "7ea25db9-0eb5-4b8d-9b8e-ae1ca171ef62",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3612c0cb-4c4b-4d5b-ab8c-5b567dd2b124"
        },
        "item": {
          "id": "344c618b-a74b-4ec5-a29f-53e3e5ecd76c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "156cc6ef-00d5-4dc7-a1d2-f8ee759ba8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ad7cf8-235c-4c10-892b-b403811644aa",
        "cursor": {
          "ref": "a9a9ef06-d219-4241-86d3-da55bf1aeefc",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2f934b71-8eaa-4e0a-9afb-98c0a5964a0b"
        },
        "item": {
          "id": "b9ad7cf8-235c-4c10-892b-b403811644aa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9cd8505c-aa01-4679-837c-02fc94425239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a53627-9cb7-4d09-aa35-da02cc6b79f9",
        "cursor": {
          "ref": "2bcd12cd-b886-40e7-8ce2-81cd0f5445d1",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7e8aa07d-05a9-4207-b7c9-a7427c426d58"
        },
        "item": {
          "id": "91a53627-9cb7-4d09-aa35-da02cc6b79f9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e11e3776-3e27-4ab9-9fa8-f2a4b901a546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8f5a8f-4372-4df5-badb-db9382dd2369",
        "cursor": {
          "ref": "a6f925de-3144-498e-8eff-9b324b608510",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dd8cc670-a490-4bde-ae0e-9eb0fbdcde64"
        },
        "item": {
          "id": "ff8f5a8f-4372-4df5-badb-db9382dd2369",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "aa049d70-8184-41f8-a5f0-f20d000e1289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c261163-783a-4f39-be3e-a483417ac0a3",
        "cursor": {
          "ref": "9ff788b8-b7f6-44f2-8a60-20e4998b884d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d2680058-dc13-47b8-8be7-ab8c545179d9"
        },
        "item": {
          "id": "7c261163-783a-4f39-be3e-a483417ac0a3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bd2bce33-300f-4fd8-9f7e-90f24fb20c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ea2445-1fa8-47a2-aec4-13c06092c1e5",
        "cursor": {
          "ref": "61f1fd83-a38f-4718-b73f-501cb72589a0",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "15863213-6d84-49a6-a323-76a5891d2f81"
        },
        "item": {
          "id": "42ea2445-1fa8-47a2-aec4-13c06092c1e5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2da2af64-82cc-4b2c-982f-ff8338428312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135434df-5f6f-42c1-a0a7-2408cf90389d",
        "cursor": {
          "ref": "b21e869f-bf14-40a9-8bb3-34baa01abfb6",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "03bc2444-5f58-4dae-a594-5c426092b609"
        },
        "item": {
          "id": "135434df-5f6f-42c1-a0a7-2408cf90389d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4e085e84-718f-48e5-aa7a-58eaf8bfd4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1dfa38-0291-4ab1-9f41-89e5deca5ac9",
        "cursor": {
          "ref": "bb89197f-339f-449a-b931-739675103693",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "13a422e4-901c-4e73-8439-313b1ba57edf"
        },
        "item": {
          "id": "ea1dfa38-0291-4ab1-9f41-89e5deca5ac9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8a3b74ca-e9b5-487d-854a-49d210d9a0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e326de-ff0c-4219-9943-89ebf870fd80",
        "cursor": {
          "ref": "0ddaf5f0-6611-4ada-9547-b53c8d73f2b0",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b52125a3-4cb0-4fa8-bbcb-0858fa5313f5"
        },
        "item": {
          "id": "b3e326de-ff0c-4219-9943-89ebf870fd80",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "468f4f35-f69d-4643-80c6-b8427366f85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3d2921-f416-49c0-9a4e-654687808bd6",
        "cursor": {
          "ref": "ed7c2e3b-fdc7-4b3a-a44f-4a2da7694c45",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "44ac5503-df23-4e84-8673-36142001e1c5"
        },
        "item": {
          "id": "8c3d2921-f416-49c0-9a4e-654687808bd6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fe396b6b-4953-4d34-a2d2-0401ed4bde3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bd3d09-c1f6-4b69-ae78-824adeaff90d",
        "cursor": {
          "ref": "50cb085b-82fa-4603-a563-cebb2a5787ba",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "471a0ee5-9eaf-4394-97ba-28370ef31ae5"
        },
        "item": {
          "id": "16bd3d09-c1f6-4b69-ae78-824adeaff90d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4264657b-5dba-448b-bfd2-2a28ad168da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e29054-ec5d-44cf-b92f-7ab9dc9180c8",
        "cursor": {
          "ref": "a48f1707-1072-46c1-b242-c826b47deeb7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a5338f07-41d8-4300-b58c-386e67c7f322"
        },
        "item": {
          "id": "71e29054-ec5d-44cf-b92f-7ab9dc9180c8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "58e5e6a6-ca2f-4e86-a2d8-62c03307ec63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0667493c-add6-4ece-9b33-3b8f10acf155",
        "cursor": {
          "ref": "09084ba3-24d3-4f8e-8d91-fd3c3f8aa04a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8316ed67-6eed-468c-9c0e-11bc7f5602c4"
        },
        "item": {
          "id": "0667493c-add6-4ece-9b33-3b8f10acf155",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e335c98e-549d-4df8-bb56-33a1a341e57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45a509e-34c8-4c8e-b47f-67f03dd30676",
        "cursor": {
          "ref": "469ad82a-fee2-4db9-9302-0bfb3b4125a1",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1e4d993f-0765-4808-923d-d3d05d272cdd"
        },
        "item": {
          "id": "f45a509e-34c8-4c8e-b47f-67f03dd30676",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5b3b9e9e-5e13-4403-87e8-0f919ada6631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3602e0-e8da-483d-bdf4-1c276380b6df",
        "cursor": {
          "ref": "897a461d-dd8e-4f13-90d4-b2ecfd793d78",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "23a4189d-32ce-416f-ba38-bbdc87b8a363"
        },
        "item": {
          "id": "0b3602e0-e8da-483d-bdf4-1c276380b6df",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cde2b27f-918c-4c47-bd38-3200754bb3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17388f19-f080-4acc-8197-057057b6498f",
        "cursor": {
          "ref": "558dd4e0-400f-4366-8036-191af955e4ba",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "35a1d8db-673b-4199-835d-9a31bd66e06b"
        },
        "item": {
          "id": "17388f19-f080-4acc-8197-057057b6498f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0c8fef4c-1ec6-406e-80a0-30f57769c6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae55991f-5fed-4152-bbbe-d68d42cd7b9b",
        "cursor": {
          "ref": "912a642d-1f51-42f3-8f4c-3c9cc4af94e8",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d24b60c0-f1bb-40ad-962d-8e7dc9ca87d6"
        },
        "item": {
          "id": "ae55991f-5fed-4152-bbbe-d68d42cd7b9b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e8c39ca5-b957-4d8e-9885-dfc9ce3d0809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7ea820-3096-450c-9881-37182d91901d",
        "cursor": {
          "ref": "71b701d1-42db-4280-a972-fae87f665995",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5da194be-d65e-4406-9d38-96162282a169"
        },
        "item": {
          "id": "9a7ea820-3096-450c-9881-37182d91901d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3929f5b4-7689-44bf-a1fd-822fc997ef9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec73de7-e854-4c7e-aabe-ecd968ee1b8f",
        "cursor": {
          "ref": "70fdd0dd-66cd-40e2-9f00-355ca511842a",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7fa756b9-179f-4440-a5b5-7b171b334d9b"
        },
        "item": {
          "id": "eec73de7-e854-4c7e-aabe-ecd968ee1b8f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a9d16012-08d9-4910-99fc-22ddc1d9c816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d3092a-3829-411f-add3-26446ed8358a",
        "cursor": {
          "ref": "9554c515-5083-4f44-963e-ac5706cd8fa0",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c9a08eed-04bc-404e-8033-e35bab5986c4"
        },
        "item": {
          "id": "75d3092a-3829-411f-add3-26446ed8358a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "687da249-6bab-449f-985f-ec24930d3a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc078e1-8ef9-4867-b670-1d599262ac1e",
        "cursor": {
          "ref": "55a45910-e630-4183-8165-d57b4926c27c",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e43c780d-5ff3-47db-bd40-6cc8c8290d99"
        },
        "item": {
          "id": "8fc078e1-8ef9-4867-b670-1d599262ac1e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "58c90f01-74c2-4f0e-9643-8398b1da8ef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34bdcce-c905-4b7b-a8d0-e8c7b8ed299a",
        "cursor": {
          "ref": "64e5eb5c-415e-437f-a942-5efaf4ece971",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2c107423-660f-42fb-9478-4cdd01fdfad8"
        },
        "item": {
          "id": "e34bdcce-c905-4b7b-a8d0-e8c7b8ed299a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d066b3c5-3b3a-4533-8e59-a13c477958ed",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "44fe84c4-2f08-48da-a2e2-da4889b30112",
        "cursor": {
          "ref": "94e4cd86-6c7c-4130-b557-3b1dbbe07aeb",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c3f31d61-d398-46ec-b5b7-7cfe93469ccc"
        },
        "item": {
          "id": "44fe84c4-2f08-48da-a2e2-da4889b30112",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4116c49a-af4a-405e-a62a-032a9663a8ad",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60abf88-1b5a-4ce6-b44d-14f8a048f89a",
        "cursor": {
          "ref": "cc5ecff9-cf3f-4781-98dc-d282681e88fa",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "54c35697-4850-41fe-b41e-8e904d573c94"
        },
        "item": {
          "id": "f60abf88-1b5a-4ce6-b44d-14f8a048f89a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "22f5b42d-4e6d-4c5f-9dff-be4a8481da30",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac20899-fdf0-4cf9-b7e7-d6d07402f742",
        "cursor": {
          "ref": "15261ffd-2fa0-4334-abd1-36278ffdea87",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "05e09f64-0b2e-46bd-849d-66d1689bf9d6"
        },
        "item": {
          "id": "dac20899-fdf0-4cf9-b7e7-d6d07402f742",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c22a2aea-8651-47bb-b3be-2661a5a77ce8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac20899-fdf0-4cf9-b7e7-d6d07402f742",
        "cursor": {
          "ref": "15261ffd-2fa0-4334-abd1-36278ffdea87",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "05e09f64-0b2e-46bd-849d-66d1689bf9d6"
        },
        "item": {
          "id": "dac20899-fdf0-4cf9-b7e7-d6d07402f742",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c22a2aea-8651-47bb-b3be-2661a5a77ce8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9fd169-036f-4c32-8d39-8f6f02809655",
        "cursor": {
          "ref": "1586cdc9-bc98-4b27-9910-a1c8931fc276",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c5aa25f6-7194-4991-8292-e622a5aeef2b"
        },
        "item": {
          "id": "5f9fd169-036f-4c32-8d39-8f6f02809655",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3023cd79-1920-433f-9758-a413301e0a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccf80ce-e678-4945-aa58-d0a07984ad00",
        "cursor": {
          "ref": "dc5fe1b6-4b34-444e-ad31-3e5cc6995fed",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "11f48c83-065c-4438-8abe-5d81869c180d"
        },
        "item": {
          "id": "4ccf80ce-e678-4945-aa58-d0a07984ad00",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "68a1800d-fda1-418e-a4ed-6057b108b90b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}