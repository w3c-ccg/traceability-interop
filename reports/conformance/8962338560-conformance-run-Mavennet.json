{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7513d412-b121-4d99-a5e1-6d3280b59e4b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d38e9001-dd78-429c-9e8b-d2c124c2a555",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "167f15e0-68ad-43fc-add9-3201380b7dcf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db3a70f3-b8da-4f19-86ca-e73376116ab2"
                }
              }
            ]
          },
          {
            "id": "ee9fa77f-af3c-4bce-b547-934686950a4b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef69916f-e33e-4e38-be03-3d5ff1ba7ce2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c20f2db4-c5e8-4106-b89d-1fd49a2467cd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "62f6af38-1541-4842-9c7e-8a662f28733c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "abd088fa-83c8-4385-9111-a1163b6be7ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f9e22495-6b67-4f23-8f79-4f747dc2343c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c800b5bf-b122-46e1-ab7e-cccb6f2792a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c08b0b3a-cc98-4202-bdc7-7b0483002814"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa419408-2b18-4ce0-a36f-3ff76f5a343a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5f99af2-22a3-4f79-ba40-e71d03dfa03a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3c3e5ac6-59a1-44d3-8caa-f136f696beed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8d560d6-cbd2-4053-8c94-09fa8438f8ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bab81aa-26b2-4b7d-b7d5-5241a5f5f7b4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ad0c1ca1-433c-4ab1-9b22-554b69dbbcdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a51dd96-2d37-4b19-922b-53834ecc9836",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "366e67ca-4a57-49c6-a601-ff992b922674"
            }
          }
        ]
      },
      {
        "id": "fc88522c-fcca-4afe-a758-1451cdf5dafe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "681e30b7-ec7e-4f99-bdc4-a3d58e6c3095",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7259bffc-00b9-4ada-86ad-1b095b39943c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6931acc4-c7d8-43a0-9af3-115e8c55687d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705d6a35-c326-43af-8cb2-3b0827d6a693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5615fd3d-674f-44b3-84f3-d8e2c041dbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836b2cef-48ae-4f34-9b0f-85c8fa83fda5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02013af6-c8a8-49ff-bf97-56985e99ef3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6c7f01c-c7bd-4b1c-9210-5523fa85d845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca8dc83-8703-4799-9595-24a96abfac49",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9adf1cf-d3db-46fc-a080-d3eca2e5962e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f29d9d7-d5ce-4458-b725-521753bd2a14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "085fdfbc-6410-4e71-85ba-9db622014a17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d0537eb-2e6b-46ac-99af-e019db1e36e6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29a652d-4583-4f8f-bd1b-91b880e2c96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e93c3032-5ed2-49bc-b5c8-c44f04d1191d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbcd9fd-fa6e-479f-85e4-790a1ec0f9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca6b3d6-28d1-47ca-bb62-55969e30f2d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "60052b51-42af-48d2-b572-71764524ae2f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ccd1b68-7407-4d16-b425-bd5f067f15b0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a980f78f-d5a5-4e83-846e-ba24147559de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f0594c63-2eb9-4de5-ade2-4db08820be46"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fded97cf-1a7d-4cdd-bc83-a0dfb2c21889",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "df1c51e8-c363-4b77-9e45-280e6a86c1e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4dbd92ce-c6db-439c-9441-796a783d9076",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f377a022-30ad-4b60-83a8-e7c87aca88f4"
            }
          }
        ]
      },
      {
        "id": "2fbd79a9-a185-4a68-a2e5-61ad8d3e1051",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "78b12352-7ca9-45ca-abbb-a5252f750f16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3b5166e-1c9e-4cbd-ae95-52aee523e220",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4720ac8c-c488-46d5-809b-e4244b300120",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4398b4-da02-4b42-a5e3-93b0ec45a8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c50a58-6f4f-4b50-8a9e-4a0119d8a961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e75055-004d-4077-9ab1-3ad0eda6e6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "beeabade-f977-4297-998a-cd0661b42bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda1db8b-1c48-4245-b578-48f9774a32b3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e2f8d6-ec7c-4cea-939c-aaadd9dad8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155d78e8-cbf6-4c9a-882a-048a7cd3b144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067f13ad-31b7-4fee-9740-508a37bd7334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83e9ecde-dd21-4712-82a0-aec0af367173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad4d17c-19d1-45c5-b994-51ed44047441",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79427a3b-2c18-4a77-a58f-b31f01a1452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fc09ea-c26e-471e-a135-97a8523351ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fd217f-2562-40be-a8cb-b1bf38450628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc46ccbc-ee72-46ec-9957-f90910fd5866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427d5ceb-43bb-4799-a08c-ed2b2ffaca80",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f1f857-ba18-4e1d-b60a-f189ec9d5fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959bbdc9-6e82-44b6-92d8-d311e5f2d003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a0e3ab-acf1-434a-97e8-fbcf94594037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f4dd0c6-83d2-42a4-949f-9c0db79eac2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7275a0a7-4b46-4336-9540-9d2185c6a3a6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865bdf4e-9c0e-41bf-8335-95b324f4e7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb472009-41a9-45b1-8b01-7db1fa1d7e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659112c2-b33d-4364-9ca4-53a100a7c2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72e70e30-6604-47bb-8f0f-20a4a1cac4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62719b23-4d8a-47f8-b35a-142c64f1d20e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c532d2-b56a-4cb1-bfd8-1868761e58e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e882ecc8-c1a3-4cbf-be4d-c2959e9a7a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b454ec-0ba9-4d6a-ad86-541de32a4f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ba0aac4-9fed-46b3-9202-2fc1558259c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc1a3c4-2c9a-4089-b08b-891473596d8d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161faad5-a372-4cb8-94b1-c34126dfbf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f856627-5faf-4076-a5c3-31d6fd73d95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c808fc58-44ea-4e2c-9eff-cf52c82a49de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b5188f-a7c1-4d7f-af36-cdc24073468d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41fe3a5-6060-4102-9037-714ad640b8d6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d7e92b-39ba-4e84-b60c-e9058849c725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b81c2ef-98d0-45a8-a5b8-0aa2d79e77bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f10a30-4ed8-41ed-8355-58888994a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22290fa1-da7c-41f1-bbed-e987b80dc3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cea05ff-093b-42ae-be24-be0d4da53636",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b336c5a-fabb-4093-b808-a9940ae8b08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b5ea15-228b-4e86-85fd-0bd0e4c027b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf1e797-ea40-44f0-b91c-244ea172660d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88d79d42-47c4-447d-96cf-bd595e9ebfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2c8367-5fb4-4827-902c-020827d7ca0c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e283c29-e441-487d-a156-54e2a27c0573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3026c2-dfaf-4647-9159-af6c87454b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d1193c-c61d-40bf-a1e1-4abbf600e53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1152a431-5e58-45db-877f-abfee35576f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3729c72c-45d4-49dc-b84b-bbaa565648b2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8879839b-cff4-4c8a-a067-e1ad5f578b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61197bfe-e758-4a23-b2f4-ab83ee419f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4365de10-a9c9-4657-af15-226f1ee37910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbff8d48-4b17-4a46-8ccb-c35b72620f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3de4e3-fce1-4c8b-97e1-6eb49e9e1a7e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc30f1b4-5efc-41c6-808c-b52b5267b5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad8192f-030e-40e5-89b4-6a6e37218356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec7f348-0787-4bc8-9c0e-a433653f58a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98f97ec5-c717-482d-8cf3-f060e16851db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687e561c-f2ff-4ad9-b617-455c1d4ee1b2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3574a99-8258-4de5-bab7-58ed9998ca78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166a5c8a-3862-4c94-9ef3-489392b95355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a04a08-ae18-4012-b496-84f3f56aa815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "961f90ac-ea70-4440-821f-6ffd757958b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff33111-1a67-435e-b810-3217cfc12ad0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574a1ce0-e29c-47a2-bf06-30066c41929d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306a5f59-7e8c-424e-a1c1-62367acfa4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6933b18-ff39-4303-9063-cb2307b9adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c41e1913-7e24-4f52-8873-d710f81b9737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6975eb4a-9e4e-41cd-bd2d-3a36caca6109",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612cd09d-f407-4630-813a-2fc38f2a113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8dbb8b-ae3f-4114-bf63-f022de1c045c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f05a34-6611-4e5c-bb4b-d331d5577556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae7262a9-124b-4865-858e-3b73b96a9e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91abff2-69fd-4350-ac48-f37929a43302",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d75777-89f4-4e57-bb0d-dfb41d4c8b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d072737-0a59-4eba-baa2-7b5a5e608fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd268ed-70e1-44f4-b270-b4216990091f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "319f7fbb-7d01-425b-bbc4-88e72d40645a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e573f2f-2ee5-47d1-b4b5-1d7eb5fcc34c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3064051-70f4-4627-953f-874a454c163b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c4cab7e-ae2e-40d5-b90d-ce7fc28d5fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9473fcc6-29d1-4594-b0f5-4bcc446a2e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bfd38cd-c280-4306-8a6b-548f22d63b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c8e4f6-416b-4a33-a566-bd409fd73709",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb26a49-c793-4d0a-8683-7fb447c2585c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937cc736-8d1a-4cf5-b2d5-81b37396dfba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000131f5-a8d4-41e8-97a6-056c4ae77a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "60800f82-5646-45ae-bd13-277ced45f819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d741186a-c47a-4269-acf0-9f6268477df9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d862859c-a85a-4ffc-8fe5-22a571f6a257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88343af5-0d74-4d95-a0aa-5620bbece698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7250c46-5ab1-4957-a63e-64732438561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c55c85e5-c1d7-4386-8920-64890c25187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8708d667-f22c-4b35-8849-93501b1b98b3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d2c407-cede-48b3-ad5a-e81bcdcbdcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dfb8f2-b9c6-4080-a589-d47a04b9d701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cc2621-857a-4c2e-8694-3fa5bf1a0a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fd0862-8db7-4cd9-8fcb-859a93a9f690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013c615c-14d3-428c-9438-82bd655d9374",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aa5db7-69aa-4751-a797-8bae1e54bc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0e1c97-8b1c-43f7-a698-b288887aadc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3394d542-5a05-4c26-aa97-6e2bc136e250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "007d8add-e645-4b2f-a8d5-996a897d9067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c17a05f-d3c0-4e29-a16e-e74a8ccbc397",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d107a29-edec-46ca-b125-9464f57d4ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd18c6bf-756a-4e06-af96-a5fd012534ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b653f09-c253-484c-8fd2-b858b415f35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f63852-eb0a-4c64-ab2b-66ff145067b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d195c92-d078-4a7d-bc9d-9680aa5d3da9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e8f87d-224d-499a-9a74-08d57dc0f049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573fcdbe-c1ac-45ec-8dad-7387f8830f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9936e6a5-c3b8-4504-97b7-97dc85aa7389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a700e9e-6cc3-4040-b488-14a337f5698c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5939fc2-a8f3-47e1-881c-b49a8999033b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7e051b-215f-4564-a37c-5f0217ee0578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8aeeb7-1caf-4b92-9aee-83ea553a7d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c001b4db-96cc-4625-b78f-b6c510ca1e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad32ae9-056a-4259-8363-52cfc758d40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311dfa69-7e0c-42e6-821d-fe7bf506ddea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e1f3c0-489a-4670-a2da-fcd9be107ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18df73d0-23ce-4fd2-a334-53d74bd5c26e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dccd43-9b79-4ff4-b8e9-35d828a6d509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb59de92-4f49-4530-8776-059fddc30d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d08a608-55d2-4280-a821-7c1c8a6d5033",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec258283-6854-419e-aefc-40e4e4b66fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086006b4-6f9a-4e67-9cde-276c86584f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4552ffd9-765d-49ae-a3f4-df6dea34550e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "394fecb5-b838-4a1b-80b0-0dde09a5fef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c22950-adeb-4b2d-8064-516580b5f016",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb9d77e-eb46-4975-a400-cea0100a2035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e692ac-706d-4909-881e-ca1630d30d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221b889f-fced-4d70-9deb-ee9f3506869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f289a15-f02f-4525-98eb-69af4e67d3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba3b0a6-51ba-4273-b610-01e3f37c3fce",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fabee7c-1693-44d8-b851-5bcb123e739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebfe54d7-5d0c-4669-a15e-97ca947d16dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f975e2f-f893-4d05-8aa9-66a477f65a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f32703b5-e57d-4dc7-951f-f9e8008db081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3378dfc0-eb72-418e-82f5-cc2091f7f17c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408ed572-9e59-4c3a-8f69-43de45df4f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8a68b0-ec32-4ae5-87ac-d42e6561dd5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bfc74f-373f-4622-a4d9-7f8e52a5e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13b8e8d4-0cbc-4e40-a198-9e5e51c34f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9da08d-8e85-4c88-bf78-097c66f22825",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d7bf3-c718-47c9-9cc1-942ca6d1a358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06204dc-ab8a-42cc-b00d-52eee75b661b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b3d327-e0b1-4aaa-b96a-6064595c9780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5330d72-5f1a-42af-b975-7fded0891bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd35203b-39b4-4819-b70e-3ff3e5b7f944",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1378ae9-2a2a-4987-850d-2f3307843b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c28c572-7073-4c7e-8c97-83231e28f2c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914a1826-cd01-44bd-bda5-2812107d8f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d76bd224-8835-4c8b-b390-9c9aadab9f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6674191a-465b-4234-b23a-cd86d95bf941",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1566ac-1c27-46d0-9ef9-3a7044a9ce84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b7c4c2-12c5-47cd-8de9-c3c86d213457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc473b1-a209-4b89-a99d-4298d882b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eda42e8-d1d3-4911-a46f-1ceaaff0eec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3f86c0-3a8e-4d37-826a-cd89ba9daf3c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d81a1ba-e62c-47e1-bde6-cae2d00059a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c755fe-5761-4c6c-b5c0-d6f2698d9f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6218306-6f82-44a8-8364-4126216371a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f3c5d4-3b66-4a92-bf01-558d939d0ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b466c49c-f3ae-4f2b-975b-e285af8385ec",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2ae8a8-1585-42ec-af2e-9072568ecdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e57d4b2-a349-40d2-b887-c71ff5b13065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e8b11c-f019-4634-9553-053879896c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a10edad-1a02-4c3a-9ab8-f56c6c41a8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7568916-e8a4-47a2-9191-7d9f48d9d683",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c708ad9d-f31a-428b-9673-6ee5d6b60608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a7bd40-5278-4e57-a74c-ff7f5ab556ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69337abe-7bb0-442e-abeb-c138a5a74c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6018409f-8073-4153-9709-ff22fc8c7fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5320c1-d825-4cd8-8984-02f8f05d4f32",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb4a1be-21e7-4faa-b080-e9f2c6d3c968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c943ccdb-0afb-455a-99cc-f91c5f851854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83b03df-46a7-4708-bc26-8c6fd14b917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "306d8bd0-85cb-4826-b48c-e28c2e550b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ab12d1-dd7a-4a44-9334-fda18f1a3eed",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb94fcc-876c-4c46-9c8c-394e8531aa47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1ba565-f026-4065-b0e6-f682cba07e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48624d7d-78dc-443f-8187-af0dcda9cccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf492cd-9bab-4598-84e7-8ca5633728be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f1db2c-ccd4-4fdb-b98f-986c71953160",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678cd23b-d1fc-4304-b59e-f1c84f5f1549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045f830f-d805-40f8-af88-62775c3a2d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8133ae6c-7b3e-4772-a3a7-9c5172314860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9014b7b4-c16f-4ce0-b73d-059de3cf3c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f93e0b4-86e8-4ee4-a1c5-6bf6d529db42",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9463929-8d9d-4bfc-9dc7-2afd617fe079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204b0253-d362-4b8a-b428-eb57ab486750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a33464f5-303c-4412-9e1e-c7e25192ef83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "162d7647-4cb3-4331-9269-a0708deab4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a86901-a19d-4e16-8594-9b461c149f26",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6002df-2320-4f61-92b3-6262acee862a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da31c501-339f-45f6-9280-b567879ba4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8a4936-4677-4aec-9131-df7f37b3084e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc839cdc-a042-4862-896a-f5955d29c6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2a2a86-2822-4947-bfaf-c0d036a6b40c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01cc8b33-72c8-425d-92be-4000da795407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3156bb46-0209-45bd-aee3-3becc97bfc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a34b9f-7ab9-49ac-bf13-a24424739ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c92728e5-c144-4e19-9d7f-e7ffa0f68b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbee58c-7af1-4a12-bccd-d257c18506ed",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1446cab8-7c8f-425e-abfb-c15224238016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314958e9-5753-4fe4-8be1-95ce782a37b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85adec2e-47eb-404e-ba0f-389c317aef3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6b8525-704a-4144-bc6a-d209b3b6c9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a69e25-7830-47e6-833e-ed7e167b0a7e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cab7502-8c53-43dd-9285-7355d86922ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904e4385-a847-417c-b21d-802e54c14fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a8286f-2bf3-4757-8f6f-a072fc95025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "913d655d-3e7d-4831-a899-ebbd76c07fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30bc8ac-b4c9-481a-ba8a-c6c546f2733a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9d62a8-7308-4fdd-9015-8f5cd5451606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2a22a1-c54f-43f9-9d92-9fb6a069dd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408f1891-9dd8-45d9-89a2-dd137b34e97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f09689b-15b0-48e3-8546-eaf4ded0da5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ab8892-0c31-4d4e-9446-ff0d2c405533",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac49694-71f5-4302-b1dc-285954f52d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952a0e84-d0a5-4512-8d8c-1d84f9d88b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed5ce02-9b4c-4031-8635-af054c058f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "24fefea4-e91a-4d19-8279-04f7a5ade141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696d04a1-9b53-4b01-a1bd-cd0922cdfc7b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74463fe-29b7-491a-9955-496ae99b47b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1717e956-be0f-4652-ae2f-40fa6fc4c009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5db1184-b642-417a-aca4-a167f59dccc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5640fa9-76ae-46e3-ac65-c79ada955a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4757b48d-0771-423c-aeda-82b12fdfb64d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70e29a8-1a43-4bc3-b9e0-36189b2d6caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a10448a-1a16-42f2-ab29-77bd4b547f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe82672c-ab37-410c-81be-677f82fdc1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10764980-cd3b-4af0-b285-d12bd438c3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917eda0f-c34c-4b8d-816c-f78f8a52d0b1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a8ace3-105c-4588-a0a4-0f5ab41b488c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af77e8b-2db3-411a-b583-a04fb176a7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a34d45c-3f74-4b7e-9efc-d1abe8ed7893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af95ca25-a176-46bd-a058-7b534cf5af5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887f356f-1067-43f2-a754-57e30578c69e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f901b1-0c63-403b-8a17-73112e8cb234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba8b64e-1f6f-4a2a-8b0c-a4c205b3da28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb32cce-84b7-4daa-9a61-bcdc1e28cc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f41a221-04dd-48eb-8c0a-593311f48cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04418816-d509-461f-8c34-622221a24715",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a458e80f-90b1-4485-8b66-be0fab8421a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7314a11-b333-4e6e-ae8f-0fd4032c1f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58966074-4964-4b5c-bd4f-70e3ad30b05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6c0bf0-e6f9-4600-aa3f-1a2715849cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7d549-4d70-4f61-ab22-cc53ffccd321",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5ef991-44ed-468b-9a6e-1d9391e5ff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60953cc1-9b2f-4747-b3ba-02615939dee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c00ceb6-5166-4e8f-8d77-c3a24f28a143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e83ead0-20cf-42fd-aa73-3487ee6f6fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e1c61f-800c-4b4c-a9bc-979352872beb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c813e44-b0c7-43b7-88f5-42c4bcea4f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86439d5c-a71f-4687-a1d9-bb4ce5c87bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5bd5f4-f9ca-43f9-9763-821ea48973d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2778db-1388-4677-a736-09f0e6ea2cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4361b71f-fbc8-48c3-9d44-c550717be084",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d3ebba-1178-4074-9ced-9fa93b0da521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3fcf45-3b7a-4df5-8fec-445fa2ddc370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895a5f36-9005-46c3-a7dd-9ee986fe3659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4159e06-15fa-480b-8cff-360d166e262a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c727c6bf-d353-4e41-b896-2ab036504233",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6b17bf-32ab-4e1e-9e77-d3bd0f2873e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316eb1de-5ae3-4be8-9186-19629be41b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46654914-6e55-44a4-9c1b-5ff09c6ed162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be006c2e-633b-40b0-8711-f9deba02d6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97294c87-98e1-465a-ae20-783adfca25a4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7221cb-5587-4870-8dc4-583a415ee3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d18d921-4999-4c08-b2d8-22db765f9acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a037171d-9e80-4423-bbe1-ae961da00d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18dee467-2a6f-4733-8d51-c6229d54bd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ca423d-412f-4f55-a937-9aa8056866e9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824c371a-4c82-46ba-bd4d-4709fd000bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31279bb9-dcc0-4a7f-a9e2-a3aee7d27f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ea2507-94a0-4d86-9db4-221e0941f456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1165a0-dbf9-4278-b26b-a41f39be195a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44af3693-9a81-4e2d-9448-e8ac05f91a55",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395eab23-feed-48d3-a946-de2b5f0172ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa151bb9-7286-4e6c-91cb-3df89a428bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fa9dc4-9e35-4ce2-bf21-f0dd05afa089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1675baa3-9787-4c2c-b068-aa11e9f00573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2bf46-bb26-4bd7-b151-9be48df3ffe8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb27af84-fc21-4e95-98f4-16ef5a640dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51e8704-d697-442f-bd18-1fb2a7567a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b237f3b3-b75a-4d9f-a1a3-6bb6b188cdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b69c807-d4f0-4091-94dd-cf84a1952f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1c88f8-6e9c-4ed1-819b-2200cc18fc1d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524811ca-bbd6-492d-afb7-f50dd93b19ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056e6f16-9718-4a5e-b39c-0038292b259a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a49f769-c8b6-4828-994f-8ce4a4be36da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a51faf5-58a5-401e-a619-d2f4b8c46ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec2ca46-3a50-4a4c-ad4a-0ba635cc75fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2641ed53-0818-47ee-8c19-7974d049ac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59056c9-f81a-4ccb-9d52-db708df0ca3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990c7662-89e3-4818-9b01-92f140b3fee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0423f75c-442c-4aa8-ae41-8607cb3726c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f444cccc-4e9d-45b6-8f72-9f25896e8f18",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed274f5c-f30e-4f5e-abc6-e66725ece3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dfbaed-7c28-4298-a107-6ecd9d26f7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfaa1ba-5e22-410f-99b4-1968473793b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9418052-bb11-4f2a-82e8-633b476cbeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f545780-472c-4979-a633-e51f2bf031de",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c35fc97-9939-4050-a708-7290542a1b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e4903f-97e5-48db-9ac2-94f0a1e43ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16db1dc-7ab0-469a-92de-88884115c413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d37fd310-5b1f-4913-aa25-d50cc2c9f093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57e4880-d574-4029-8fa7-c708f6c9c191",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d27fad-663d-4ee0-85ef-d89fa234ff55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49baa21f-9f65-46cc-87ec-187676842b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f3b06b-46d9-4ab2-b0dc-87728cdb2044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a821ba4a-b1d1-430d-8a66-a378155de3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9683d509-157e-458d-a1b3-87418eec0913",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9787b460-149c-463e-82b0-9b89608462dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008a9449-5171-43f5-81ea-85d3ce8a113c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeb8d94-3786-4437-a7e4-7d6f7435097d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "368eba07-328a-4573-a27d-ead27e98e8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afda22ac-897b-460f-ac9d-19536e917dba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52173de-0ded-4628-b201-6772fa8afe93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74be239c-1f6d-4aad-9997-0665527f9e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861d34f1-2541-46b3-864e-c8c36411ed85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b35b21-1321-455f-9d87-9b40341c24f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a04603-4c40-40bf-aed0-487cb70e3aa1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b131aa4-e6f6-4157-ad88-20623d6600e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6664c9c1-691e-401c-9308-c36015c1ee02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47955fc-2b47-47f0-9fdb-ca91ec765602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d21777d0-5e2a-4078-b3c7-1140f489a8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f9257b-37e5-485d-924e-1210b1b74f02",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b978ba8-6895-41a8-a0e1-51a04a4723ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3477ac12-434a-49d4-a3d2-daf26d9bf17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed7460d-7dd7-446b-a124-ac7d6c0420b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3de918a-eb42-4c1b-a0ca-4f34a5b46e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d50021-91e9-4131-a525-6050b5d5446c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b8e8d5-d806-4f92-bfe5-e49d835a00a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b37d88-0793-4243-8659-9cf19b80ec5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72243573-8b56-4759-83ea-7405dc91f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aeb176a-5020-462d-92c3-7b85f679799e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe7755d-bb1c-46c0-87e9-aafbe55be22d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f31584-454c-44ce-811c-d189aa01a466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5167394a-200c-4a90-b34d-1b91544859a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eb391d-999b-47d4-85aa-32832b924f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a2ad7b-1cfd-4cc5-b923-e3cf8551436f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67534f52-a1ab-4784-8bde-1ba0d689c249",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df32cc96-325e-445e-9ce8-f30e8b4eaa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9cb555f-7211-41d4-8f56-acc25876a152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622a7d63-c226-4180-be33-2b0c1d11d15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "499d39c1-88a1-4bdf-b8f4-f00913eb1377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caa975d-4aad-42ff-ad44-7f022c9af3c9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b331f872-b8af-4591-b66c-8fcd161c1255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff4a1a9-ef6b-477b-ae24-61da537c4ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4530b869-b091-4125-bdee-957a440fb43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c088c450-bfe9-4ef6-8f65-c2c756c854b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fed506e-48bb-4552-ac45-39c8de80c616",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e8466e-be4f-422d-a29f-949cbe42984c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728fe5d2-b19f-4609-80dc-f7953bd65de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33129570-29f7-45c9-b849-fc5b4566b747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f41af81-affc-4110-8fe5-a7ecfc6be559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9becc5b1-85b0-469c-934c-817d3f354da0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c17bea-2d2e-44bb-b10a-b93f009ed379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2c4a00-5cd2-47b2-8217-3783cf7a0ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b411abc0-04fa-4b1c-89d9-e4ce7ce3336c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36f3a6b6-d2c8-42ca-a049-7894ff4bd3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b242aa-108c-4972-9606-8cb265decb46",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebe7f6b-d6af-448a-8bb0-18b188fbc5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80819861-a458-463e-bae8-c93b4e75a129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d212f5f-3c5a-456a-9771-70c20be4fbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1cb31f-5eb5-43af-9367-3cc62be60d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8849c110-5702-4356-9664-a73db90b3f15",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5c9c43-8520-467c-9335-15203a356db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59a03eb-8d72-49c3-8926-61c82901a604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8824bf10-c1d1-4828-9a3d-2349769e830d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10015ba3-53c6-45c5-822f-eeec10d819a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b440086-d6b1-460b-9c24-dd4342618304",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecc03a2-6b09-43f4-a161-2fa8862e1dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b270471-caf0-4625-92c6-44df4b28dc4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a62ccf-47d1-4e3c-af1b-5bfaecf3133b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5cefef-e8eb-49b2-908b-05f4929a9a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d49f71d-064a-42a0-9ec5-ace9ac8e427f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fdd7d7-7fe5-4bb3-8c6b-39a99989096e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23dd5ab2-cf48-4473-ba1c-3bfcea6667b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c158d5b-dbc7-4c1d-816e-b50563bc7ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb5f9bc-3a92-4bba-9116-80f2639f4d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4a6385-6f04-464e-a0a1-6ec6b2daee5e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d64625-cd89-43af-ae5b-5cc193f64c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a130b7f-ff35-46c0-a940-0e693ee67b59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efa348f-62e4-4909-94ed-98bdf36765d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e226d4f9-5746-43d8-9755-f9a85505ba45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6709283d-4b58-4010-aa21-b16d77f00fcd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff38cdee-bf59-498f-a04c-973961e4f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97968bdb-9cf1-4678-833c-02adeefee458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2103e80-442b-400a-b416-1c9bedd76df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4ba5ea3-31fc-425e-9edd-7e597ae44ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb68eae-0d92-4814-b01e-e8aa998bb60b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb17026d-1481-4867-b0b1-715e6931cb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697669f7-08db-46a9-92ef-1af2028f7a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596c0ec2-07a1-4f12-8c78-6419bfa84cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f09fadb6-1f7d-4d63-9e84-2d0dc016a6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9eaea5-c2f8-4e04-b56e-2a0e3aa20e2d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a03772-cdc5-4956-b02a-6b56b262a0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e06fca24-9b0a-402d-be3c-b592ddc7b0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9489bc28-9c79-4f72-b121-f4c58a3f8e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7492a595-7dcd-4bff-9375-87457f94b6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9601932-2ff2-42d6-89a6-a0cd9c42da15",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b18b748-889a-4190-94a9-34be1babfbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b69efa-60d5-4adf-888c-2edb3807884b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbe470d-5225-4ce6-b700-90913426719f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d7f1a9-570d-4712-a4a2-bccc72c6d439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9eaf2cb-2cc8-448c-b4f7-9478920a2764",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12134052-cefc-4aa8-8c9a-b1dac9007553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb2a404-1156-4a1f-b3b2-7a037eeee3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e95db1a-5ead-46c2-810f-7715845bbcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd88499-5178-49b8-8aaa-a95561c15127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db60723f-8db5-4e00-a1cd-d7b76a4d62d7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23219bf7-d6b5-4475-a7b4-57a0bb18abd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b665207-b780-4eb8-bef6-3d1828a315f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f04321-bbae-413e-ab39-b625e038d544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fad8d7bb-7661-4f21-9719-e14c013931ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edadcfea-f3c8-4670-9452-377987fc12ec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3651a78-1c8c-4894-883d-43651fac7d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3902a5-289a-406b-a22b-ed75c49b5437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7086cad6-9f76-4009-9c64-41b623711441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3ffc1c-c5fd-4ba5-9618-b1c130133107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b39fc2-3c5c-4bff-9b1c-179270171175",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19f3aaa-7e50-4286-bbde-e497755a8418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc03aa66-4a9b-42fc-af62-1ed755e1bac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4741c942-07b2-407c-a256-8120c4bb594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c83b480-4281-4028-9bd6-a2b6099125d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147454ad-21c2-449a-b19a-92cea886d5a8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daac6057-de07-41d1-8dd2-a55200d248a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318e9fc4-f5dd-498a-9edd-2c816af071df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c5eb2f-20f2-4454-9e48-8ed5d3a89771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c28acb07-6781-4976-8fb4-cf6d3278c3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6825175a-d3f3-4841-9244-c05499135f50",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1daa20-dfcc-4cb5-9bf1-164d64ee9649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492aa9a4-d56a-4eaf-8e81-f4a840f72d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f3d349-b266-4e27-b931-01824e48e651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cff5366c-61b6-4248-a2df-4cad53868f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff46b4e-87a3-41ce-a1b5-2faafd863bf5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bf9a1d-89ea-49e4-ba91-321041aaf9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f095dff-aced-46b6-842f-fb4cb3b1e3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cbdf2b-d426-42b3-9c3f-4111b2752583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c33264de-11df-4fd4-8e10-581a4f667d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba53a706-94b7-4290-ac07-0496080a92c0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048666ca-e501-481f-9125-304f066f418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a7b2e7-de06-458a-9b0a-8b99c10ed285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf6b4b4-f4ac-4e22-a51a-f169cd3c2abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8725b402-4c72-4060-993a-d96407fa303e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e80344-db4f-409a-a8ea-4c5732063c86",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3090a36a-5f5e-4978-b8c5-80e5ebf67a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260e2c27-f8b1-4551-bbd7-42439c121d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6592a05-c4ba-435f-8c21-d4fdfc06aef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "17631bca-8e49-4296-a9e0-f1968fcdc938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e0425-966a-4a04-9426-e5abcec4f93e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df234c8d-a03a-4cf0-bd0b-9a29016bd551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ce7b318c-2012-48aa-bffb-35b6d478d717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f46a02-cf74-4686-b0d8-eaf51e68877a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "af6e9157-9c8e-4f1a-9e16-6dcddd18baee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bcda2fe8-3830-4d45-9885-20ebc2e0f822",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0005779-be9e-457e-95fd-079163ce2379",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b367a9e-18c5-4dd4-afb1-60f8ea79b36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "667f9910-14ad-4707-b158-a527907b99ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b75616-e98c-4ed1-9698-2250809f20ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5348387-dec7-4486-9147-ef2a499fb6f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6b2fdcb-9f3b-4704-85e3-c16b8a9f13d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16ce0d18-95e0-4ad4-9f94-3ce84dc8ba0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a057048d-1d2b-4f30-a4fe-3d10090c44b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b64e96b-6370-48a4-bd9b-2176247e067a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b09e504-2716-49b8-9a92-941ca5744093",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50ac0f8c-7630-4d2e-b630-cdc3eb2b4651"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c2252e69-78a5-43fd-ac31-1cf675ae3a04",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4bc3fc05-f2ef-49ee-bb0f-a082953d9646"
                }
              }
            ]
          },
          {
            "id": "a402f1aa-cfc3-4d0f-9998-115bdd18a6f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c9370921-0937-4dd8-b16a-f7809dcd2d12",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "81c5f5e9-1840-4059-91e4-e293dd5dd65f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d18e39c-4d6d-496e-8edc-a638830a6230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7cf5cb7c-2660-4a88-b58e-929254b46810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562067b7-c0c4-4dcf-9a72-8199d7e376fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a9411d-51db-4e3e-a0c5-210bc5b2a894"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d2a7b1e8-277e-4cbe-b774-727a24836c1c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad870767-d6b2-49ee-a7e4-9ed010f6052a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37439c70-2de3-4e2b-bd18-abde65931194"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46b47d17-b0ff-437c-8d3e-77b3400c742e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34213533-edc2-4566-a15f-3cca84f6d6ae"
                    }
                  }
                ]
              },
              {
                "id": "83474aa0-1164-4d75-a3a8-e5e1ea635eec",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "568f1704-b11b-4841-bcfc-55da9470c7fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3b493af-6eff-4f78-8c32-e0a575e28512"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7c3987b-0a08-4d34-bd6d-ead17d762052",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d190e513-9a8b-4351-b189-18baf11e9355"
                    }
                  }
                ]
              },
              {
                "id": "bd6a38be-e281-4d59-9252-e9a6c1b88e4c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f09259b-b857-4c0c-95f5-bd2592720f16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78585997-79ba-43d6-b9a1-f0aac5d8105d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d18d570-ba26-4043-a58e-164158f0ecab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5cdcedd0-84b3-4b60-836f-ecfa186950fd"
                    }
                  }
                ]
              },
              {
                "id": "a5e6216f-d673-456f-8115-55c0b3a8271d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d46d8a3-c297-4353-a87b-fc686751be35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6c543e6-b610-407a-aaae-d39baf6b5f81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac7a23df-4b75-4b82-93ea-959aade6acfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "da813a7d-d826-4924-aee5-a4c0967e8ecd"
                    }
                  }
                ]
              },
              {
                "id": "40901cc6-c7e8-405a-b3ed-ff1919a9cf7c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "994e8acf-bf43-4472-a4f7-0a7650a71774",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3ba44c2-2acf-492c-8271-de6e00b78301"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d781a41-7f6f-4ff3-9690-6724db681447",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5aac1225-f20e-46af-a77a-cdf81d2638bc"
                    }
                  }
                ]
              },
              {
                "id": "c9a0aec7-57eb-4881-a3ab-7b10be0283ae",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "685861dc-abaa-491a-adaf-8d2cc2404569",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6128e1f4-3490-4ab7-b175-098d5d1d0b86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3c98147-550f-4f82-8158-d0d00026163b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e5c8001a-f520-476e-9bfa-3edeaca6370b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f47d2ce2-9f64-4516-82de-43d4d3381bb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e18a3d21-c2a4-47a4-a7d8-09103c2ed761"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0c40a3cd-b9b1-4417-9606-38607f1fdb5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "064b345a-a7b2-4855-93c6-e39d6301d5f3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a134cfd3-51ea-4cf7-b304-cc92d3df620e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "439de2b1-53f7-4187-a9ed-9b4ef04813ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "050b6853-fc21-41a5-be08-dd205116ef91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "661d13c9-696a-4c49-8d36-34d723413e39"
            }
          }
        ]
      },
      {
        "id": "ef606610-9485-444e-a554-9c4826b638c8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e58b5a37-742c-4db1-9c85-ca7c69e0e185",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a10b66b7-6579-4f4a-83b2-7170b6f4e99e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b78561ee-cf4f-4fd8-8b8a-3ab9ac9003e6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a079177-b934-4d5d-87f1-a3402d8b0a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae53fddc-a01a-4247-95b4-94fd3eeb9520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c36b666-c44e-4bec-a332-b4c6af8a9d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e5f209-13aa-4b8f-b7a9-76aa4de7e19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e5ff21-71f1-4020-b48f-0f327154e34c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e0c276-6a0a-4a17-98cb-b8cd240a5db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac6770a-43a3-4b72-9797-ae5c79460de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36649254-91e2-4176-82b3-47c7aea70e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ce8a43-b216-468c-829a-4e87c0cabbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0420d8-41df-446f-bd97-13aa39baab4f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2644c4e8-9fdb-49a9-b24b-68b0393fc15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bdae59-9c5c-4bb6-881e-d010f19d5d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597b4fb0-ab24-4824-9633-17ee2720dc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2acb8bb5-17e2-45dd-8e93-b35e617e7341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcf33d6-7ea4-412a-8077-503fe9492474",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ef0e61-1899-4ef8-b337-a98bbc0f0a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cad18c-0cd1-4a91-828b-af31134d29be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecdcc43-47ef-46b9-9c5b-dcbbb363daba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "586233b0-b0b3-4354-87af-29154d6a5092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f446b3-305e-4ed9-8e7d-a7cd5b35232c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c55d842-4ea8-4fa0-9af7-181101092b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77702e69-226f-459d-ab69-401b2267daf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938a3791-2952-4ed3-aca2-91e547eeb69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d39b680-f6e5-47fe-9573-1173e4d89cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94251a-5a3f-4119-8717-a978575478a3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be79f30e-b153-4b55-be3a-2930f31dfbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a522be7e-85f0-4ddf-afa8-560e05ae3361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b9a1d4-96c7-41cb-8a3f-241b36517c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c65f7f-6873-4b5b-9227-1e4c8e06c3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40a6444-5fe5-4c35-93b3-08598c392397",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a53c24-7bfd-4812-833d-1da7f2c669e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65548beb-3fea-4862-b572-401ab6e474cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283bb92b-d8a8-4f1a-8bf8-2389e34a18ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c071dda-5579-4dc9-8f46-680f65029d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7d2c7a-e391-487d-bc81-95064285647e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7017df9f-4787-4b73-9853-7e9096517468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a38882f4-a529-46e2-a071-b59f333c17f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7f0c62-ab23-4029-a145-d16379825ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa21b92-24a0-42ee-a920-73fb8c05d804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324fab0f-fd94-4c8a-bc95-ceeb3cd8d0ef",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46dd1de-4073-49e7-bd4b-201f21619aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adeebe10-8204-4571-a44c-ea50c6021f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c00adc-2752-4a58-b18b-842e3efbe1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a711e34-a035-4caa-aa1f-b9632c1727eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9609b11c-1a3f-4d8b-ae51-f6385969555c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ff5524-b226-4b9f-bbae-a8c619fb6a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c10a10e-b2e9-4bca-8c5e-499b9d6213e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2555d8e2-d5a3-4e31-8cbe-514123b10c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca040cce-4543-48ee-86f2-648cd9d4485c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650d7bb9-8d3d-4925-a9ed-5e2aa26f8abc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6852252-f700-4a90-9ce2-7035ae82b0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e44c51-6165-4678-8412-f66f62ad91df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a57609d-a1b2-4e1d-a0d2-fdc0f7b23a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "39c59f5f-04f6-4aa8-837b-dd87f7d1272c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca68a38-19d5-4dcd-9c6d-e199b00c266c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d224e81-cf5e-45a0-8112-14299d2175bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45214f84-ab6b-427c-8f7b-6bde8ccd27d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a251c970-6f65-4fbb-9b32-313fee781c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2d6029-166f-473b-b719-f578555f195a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6a70e3-ad6d-4acc-a3c4-12787111125a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ee5abb-9d76-479b-9cb7-93e6b9648fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536465f8-e6ac-484b-9f48-29eac22f4675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bff9bb4-f30e-4534-85c1-bb5ada4b232d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e71582da-4b5b-4a8e-94e5-2ff7bf6dfcc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73e82de-c809-43d8-ab30-40dc7d147cd8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d32efbe-40cf-4390-863b-7fc23c8ba591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41914593-7a2e-4068-b71a-1ead24a0aca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078c0a64-475e-45b7-9188-a9cbda8424ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8935e8-95cd-4e91-a263-fa25e9f5f6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf381d5-ddeb-435c-b75c-28ac4e0cb6a8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c3d8da-3d80-41f4-a2b2-3636d75ba06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf20d53-f3c7-47c9-af61-7045ea8a0faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f6d81b-3433-40c9-851e-ead45cc4db85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "73379919-58d2-4452-844c-8ab812627a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2de18d9-a055-47a7-b094-03e3c8f0cae4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d601fb-a0b9-4d64-98f1-62f43ac01e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d21a44-584f-47dc-b6ce-12e9bada12c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022f9f25-9f7d-42e6-ba88-464ca12fc692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1120ea8d-8435-45b8-88b0-985a3b2172b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf838b1-5a87-4560-bfdb-52903f74cde2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c91c066-ab5e-4647-b4ee-6f8033846269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a557d21-15cb-4c1e-9588-60fedace2e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295d148c-964b-4fd4-84e3-169e93606bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e03ac16-cc15-4802-8736-bd94934b0392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2037c5-9628-4782-b152-d7a99eab7124",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2328f7dd-6d2b-4969-8f2a-c84726168ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fdf810-8fa2-49bf-93f6-00792d46461b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f08fb9c-4bf3-4d10-88cd-960fb79a99f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6278c5e5-6337-42ad-9708-a9c169ff244e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd79dd6-1c42-443c-a105-85a6b50f7ea0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82a22fe-17ed-4e46-af56-5d851e1d86c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c87627b-99e0-4cdb-8f4d-8feb3aa235b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0257ef3-c3dd-4111-b42e-7cb16bad75c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d2accc-c5aa-40d5-8734-79578f2c8d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e05ede-3fa4-4e53-9263-30d1c855fb80",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93cd7bc-a276-4ecc-94d2-e8854f3c1073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a938a967-288f-47c8-8a18-5ac94cc38ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d56b99d-13ee-472a-b726-1e3679e2dd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e7d0af-3868-49a4-9555-a3ebd1ed0c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ddda3-fd75-4ead-97c1-0a4d0dac111b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f08612-649b-4604-9e02-59c32c034340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7518f20-8385-4785-9a21-334d7eedf972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfd42fa-879d-41ae-b560-16491eda8590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b76ee45-7c66-4d29-b6b6-95fca329c2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5306c7-3ca1-4a00-bd6f-204acb1c4eb9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc56c04-d57b-448a-a3c6-355cea35d3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e801e72e-9097-495b-ac45-52ddd7789805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11786f43-e455-4481-b967-84d7103965a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a07c472-568f-4bca-8cf3-fa3b133a9750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da22dddf-b3d7-4851-a84b-6f0e0393bf02",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50451dba-ddfc-4be7-a289-f4f9fb89f5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb5e168-1542-49aa-861d-7e4373486eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe7a13b-cefe-45fb-9491-e4f28d52cb43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62ec20e-b106-4d0e-866f-503a26b4dc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c942b1d-8d86-42a2-9385-e267ea4e7819",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6ba19c-53ba-48ed-8e93-e6342c45ac03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ac621f-182c-42a3-9e12-d00cd17f50ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd220130-f2c2-4bf3-9b85-2a0f4d61756e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b58d8c6c-7eb2-4455-bffa-977ec5f4f99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd45ff2c-19e6-4f8d-90ac-c82411e23455",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa92ac5f-8f7a-4ec4-b8ae-4707fcdbc164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262d604f-db89-432c-8e64-ef5f317e3c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346b2ab1-bc3a-4ba4-8672-26dee68f3a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dca83e6-7e47-427f-8189-fdf01ec38348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b79ad01-522e-4ed6-92d5-4676be8fbf68",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d2e1b-7d1f-40e3-9baf-e42f47e6b7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4493c192-5f97-4f00-b0ba-c989faf243c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261298fb-2847-4989-b7af-3f43a2f5c037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1f38bc-ddd7-4493-957e-fb4d7354025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada31058-36da-4483-a71e-45695dc1f032",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e59d4bb-4472-48d4-ad16-fdafafe22205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468e722c-d9d0-4d2f-a332-ab664dfe0a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e87fd4-43dd-460c-bde5-05ebec7f5311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d615bf-c400-49ce-b15a-35b2dc1cc0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2857762-3108-4a3a-857e-da791d2cd531",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d3dc5e-8ff7-4969-bde9-5bde25d2ef11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f5c054-9b01-4974-a6d8-e122bc752d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c439bb-4f48-482a-8167-db3016112d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd03fc77-a09c-426c-8865-94aa1255ce03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce3be42-a486-4cdc-9460-65835f8196b0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c93292-96aa-4c21-a3a1-1e0d641f56a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118f0346-fb22-405d-859d-edb7af88cf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4651db7-70a4-40fa-8eba-ea3191e42f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f0df35-eb97-450e-8fd2-a35ea4508271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b6333a-06bb-4c0f-ac64-85e6d19316af",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83eef08-d463-41a9-995c-8dcfe2cea163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d8778c-7153-4ea6-ac2b-e1e55857a381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999aaa3e-60de-41ba-a3a2-bbdfe25662ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "166e588e-6129-4771-a8ff-be2deff77572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926619d6-7ce1-42a7-8eea-3537669a0809",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddce04bd-1df2-49c6-bdfd-61cd78db76ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec826e60-9f68-48a0-bd7c-895d0203eea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6187416e-a761-4a89-a2d1-26e807babf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb56d6f9-ea8b-489f-8952-caa6b435d8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d750eb56-7c3c-41c2-b1bf-121d01a0d11c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ccd23f-c5a1-4fa3-8202-91ac3cd6ff59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6103633-2f0f-48de-9638-619a56739249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f860de49-6fdf-41e6-8bb7-4fb06899b787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d705ac4-820a-4b65-873b-3ebd8d64cadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ed7907-43e8-4d44-8593-8feda16e13fe",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a8d676-b542-441d-9d35-88f6ef9fc686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bd8498-4a63-482a-b338-c6537cff8584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca58bfdf-063a-4acd-a71e-9d252ccd2abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a68883b8-2251-439e-9d81-6c05062688ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0248ded-6234-44f8-9963-338308f81efa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba9a750-38a7-46ea-bbf7-bd0c2ca8f520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9891ad67-16e1-4485-b85e-7c66d4ca9854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfccfc9a-77ea-4554-aeb7-63dca3fe250b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21276018-d5fb-4a08-b167-418813d2a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c475e5-7be8-4122-ac76-4a597c65f88d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51575d71-b1c2-4584-8eca-6ab85a513cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c05801-c063-4488-bc74-463bec6bd721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41980790-7031-4b32-99dc-a6bf6c92053f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "049fcb2b-733a-443a-96c6-c30a7e4d1c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756201f5-cf49-46af-9aac-702cc8605d63",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f626826-7715-4734-89f7-171d437eae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff333c0-e913-40b7-b6dc-1f9be498db0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6ce36a-7611-4c2a-ae79-458e803cbb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf012875-7d63-42d3-86c4-c58c23b9947a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d153a2-4c77-48a4-9656-9fb89ee5fb0b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b2d8ee-03ba-413f-94ae-4d4433944d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f176c9a-c6b2-409f-980d-e56800989ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca91806f-5126-4338-8f65-9612bf9b17d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1914d876-17dc-47e0-ae54-a614374f78b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3c60a29-0825-440e-bbfe-e528cb0213ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4afbc307-79d8-4ebe-86f1-4611b9b3aa11",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e12b58-ccf2-43fc-948e-833b4c4af8f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0c37c60d-d742-4cfa-8ffc-466df7d249f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a15e21-9099-4601-b342-9b30facfd606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "253d9d03-cc8f-4622-bc8a-ab77a66a4299"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3da41688-7df7-4fce-8397-74761ad7a826",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d0bf34c-f235-4e0c-9cbf-2aab2e49abe6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e67cbc01-651f-4cb8-a2ea-5ebe881dffd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1eec0a5-8035-4cc9-ace9-c549e2e87adf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e62939f-5818-41d3-8ad4-06c2c2b42f26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4c57f916-a6b7-4656-bf98-d2ce82cbb083"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3971835-01a2-4c6d-8d4f-76658d02a9f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc4400cd-8c34-4618-9373-0333774e4b89"
            }
          }
        ]
      },
      {
        "id": "78adfd80-4e17-45b6-9996-fda01d69b785",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9a2283b0-958a-4688-a80b-b9cc7df00604",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b21e2c6b-5bb1-4469-a7eb-5e246edfd874",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c2e472a-1ace-4c00-aa21-837da8b7c47c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a31ded8-db79-4780-9d3f-d416eed6397a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf57790-8c38-480a-8870-af43dd7da77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857b92f4-119e-4d7a-bc6a-d7ddb3a4cc13",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67445caa-9a06-4f4a-a5d9-76fc4eb701f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388da32d-f35e-4e78-ba37-8cf5fe8b3abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f046941-8712-4a97-b260-32a69fa2f2f2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc6c0d5-8fa7-4a32-851d-386124cfa0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e3bc8f-5dd8-40b8-bc78-6a1f6a836651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07911e9b-fa04-4ce7-adfa-70031f81be32",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aed5641-d77b-486b-a787-501d41927be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6b7067-7bca-4397-813d-f9f3aa2a171f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa451587-3ed3-4be3-a383-092e78aec455",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e765c72-ca1b-4371-a148-2734d290439e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9206558-7bdc-4c2d-81fb-455621118cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5093cd-b569-475a-9b8f-b97e3ecddc09",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37fd602-7e9e-4f61-b8b8-df312ca59f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93147bf-df3a-459f-b7d9-81d8b6acdfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6faafea-afcd-4c0d-a32e-c5dbaa46a728",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b73850-475e-4d05-9d5c-e101f040d4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e213cb-7ee5-4f13-b356-ecef822e27ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dd1b2d-88b0-4301-a10a-10a9aa4323d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc540085-67d3-4ad3-99fb-3b50186f4073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf44f6b7-d99f-48e1-be26-057169fee71c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a322a0-4fa0-45e7-9fd9-611f81f7cfce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8b88fd-2ace-4e78-8ce1-2858ca3a1a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e168bebd-4628-4276-a5ca-675259da8441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804c21da-dc14-49bc-bda0-430a65509aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9100d43-6999-4193-8423-d561cddefd4f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9808e5b1-59bf-4bcd-97f9-e0d8a5947f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43408abc-63bb-449a-bd0b-861eba883195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3423c68b-dbde-4bb7-a33b-19b98fe51324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85416f6-69f4-4e32-b4ac-2f9ef024437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554a50a5-0733-4108-9e00-0a1830fddf36",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bc5d8d-0b57-43af-ba2c-9cfa5bd66d17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45f8b6f4-1eba-4bb8-9a41-892bd48c926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1d0d0c-83be-4a30-aebd-f86832c71734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be21d3b1-a981-4bc6-8fe3-5422c8ed1d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfef3473-9b99-4b13-9f2b-868bec9da404",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa57d42a-adfd-4b25-af88-7d1f6227a0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c21459-b3bd-49c1-af6f-47ca7b71c1ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62970e3-6759-4688-8102-ce588c1f35e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b1f953-7c6f-412b-82b5-7163851551dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f45556b-c877-4ade-a43b-324e633536f0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a3071e-dbc2-447c-b70f-2b74321fa718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675b1003-e5a5-4a9a-b659-15b608590c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761e9d02-263f-4d23-b049-5e5a5ffecd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3df1f4c-3268-452e-9e0d-e03d20f3bf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1918e513-b256-45a3-a1ae-53803695cc6d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0edaf3e-fc02-45b5-950c-14286c1cb83a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7733349-8f6c-4406-b9d5-6dba32d875da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20009b0-aba2-46dc-be85-181a0d58be3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec21630-78f4-49e5-b1d4-6dded9a5d09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b09aef3-d582-49a0-942e-d6e0230ee9d8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd95be36-8590-424f-800d-7bb13f1d079a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a7ce00f-9537-4dd0-b328-87afbdd4e036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a00d96-386c-4425-bcc9-d2804ee9e60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c16060-975a-4901-ba2d-db569395f61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97336f0-773c-4036-be75-6478ad7d7e28",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a665ea19-61cd-441a-affb-a1d5e3e53ca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "705e593a-7bda-4e60-b057-40ca824f976c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed56d949-a410-4858-bfab-e227414f7b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6ac990-10f9-46c6-ae0a-2e800f607f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2d3008-4893-4de7-b7c9-d8526e5beb85",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703ca59c-2113-4d25-859a-5ccdc0ebdd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "201467bd-ede4-4adb-a1d4-b58fa5a8e96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9650774c-3a83-4ee8-ba4e-efce81840787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4156b41-b8fd-49cb-9176-59ac5dc8de56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808b09eb-1ca3-4de5-95cc-4f657a182ce9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb62d6a4-53a4-4657-9aef-a67a8ac6bd30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801716e6-505d-4bcb-8a13-370b0e49b5c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc353de-03ff-4392-8986-9c6a161ad34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ed5bcf-8e57-4b63-b133-affe77e9f2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee29ef1-7777-40ee-b61e-b06848ea15ad",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4241b91-3378-40b3-b266-77d54c218ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d5aad8-3247-4e04-9b12-9338ceeb64ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa58993-58c1-4106-9860-a0ff202f7de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cde1019-6dd8-4652-943e-0d982f2e1b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcb0e7e-2be0-4ab5-ad17-e74eccc0445c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438b080e-fcc3-4d07-a9f7-bc7d442b778e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed725704-0bf0-4530-a04d-e36e47a8cd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdab0662-77db-4f0d-8f3e-6ebb67a0c466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0759e447-cb2d-47d3-bb02-e2fb530826da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a80e27c-5f90-4e73-84f5-143783ffc161",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5b3ead-2124-4b93-aa47-e6e2c491d06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1443a7-f2c8-44fd-acdc-79ecd451a63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "473ccec1-66dc-4ed4-8663-eb3a0926d02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50af502d-52a5-49ce-8e68-14842c068598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f407208-e243-4b88-9e2b-8a76b9bd7f66",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d838fa87-515b-4add-9ab7-8e24f1067062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a20ab7-5ed2-43b1-9040-2236f11761a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738a7a02-2c21-45f1-a90e-2546619419f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16760b1-64db-416c-8e48-77562b230ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4688864f-d912-4c18-bd12-a4c0658599ea",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0b1b31-ae33-458e-9bb0-9a03db323543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da7ba27-39f4-4980-91a5-34ca6d7ba807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0911b1a0-c23b-4fd5-a622-319f1419cd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7d3aed-dc65-4a1c-9d19-3b05c5e94ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48b9df0-c539-43a4-a2ea-e11c3393c0dd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3809e3-df41-4731-9b29-962a50e2e0df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65586841-83ce-439b-bd16-a399f8ce59e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a12cf6-b509-473c-a78d-ea1d95f0563a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f138897c-7c61-4bc5-8d56-4e4bdfa68cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed4f2e6-afb6-4ca9-b547-fd84e49706cf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bfd047-1778-4468-a32b-6813a15a2964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4a9a023-dc85-4125-8a67-5bcc7b67daa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad5c49a-980c-4d4e-a1e5-05f437ce8890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f0860d-5578-4ac4-8508-87c9d47cffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3f2de6-8533-4be0-af92-1af87d0b3841",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038e4a4a-2f43-4d2c-a82d-11aa86e6e9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1667a2a-1a1f-432d-a722-6a39e5c89a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43c3c60-c603-4cb1-bede-9b7c4ec08f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00bcecb-5a3d-48ce-a4dd-97fce922e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc62ab96-b657-4734-b7ee-bb59bd3b9a72",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2e99b4-929e-45e8-865c-a8a006757155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a41e0d8c-ee76-417a-94b6-6a997b47f5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0d9e7a-c2d9-44ad-9917-478bdd9f1de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbed27d-70e6-4529-83d0-c211c17153d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48787ed-10a5-40ca-87bf-a37a1d8a2f69",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3160ddb-23f9-4aae-8359-9fb649e00d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1fa3e6-c149-4fd9-9e3e-da325a790f14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57389a59-44f0-4637-a36c-d56c072428e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9aeeb1-ef22-4fcb-8e29-0a50dab8fde7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d688c86d-77f4-474c-86c7-a6656b42d98e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf25493-c072-4d74-933d-000cc10ef2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f60cca2-6ca5-449a-a7eb-3b807fe2d3f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27251adb-8963-498c-8909-05ba55012a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f20b25-27ed-404c-8976-18577fe8843a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5890514a-78aa-47e4-bd33-187a29ad7bef",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ac1a45-416f-459f-a48f-32d04b069f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb00f15c-79c9-4068-a9e8-0a97786f6366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dadb58b-a478-4b89-9b8b-9f73c0775650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27a886f-4896-4fb8-88e8-47a1e6368dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a3f640-1eae-462f-884b-ec3394e1db56",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873bf554-f34a-44ea-829c-d9b1aafde0d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f07628a-ba44-4afb-b554-8986e4cca763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62ab351-1364-42b6-aaab-c9a3ec1e77ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa81a40-a49d-4580-a946-5b880f4453e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3460fd58-f59a-4b84-a373-c3bafb6bf7af",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7c9f05-8993-4189-b917-c3337a87d811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f06b18e-1143-45d2-ae15-b2fd7f576f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff7db86-42f0-41de-8e30-0b4aa8e5a811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8e2220-5108-413c-802f-78a32d77530e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f581ed2d-d37a-4725-8d65-916c89670789",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5892c7-9511-4c1d-ba5e-670a02193a1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2de8210-9624-474e-bf90-0e8c6abb0f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc6dadf-c366-4964-a3d0-bec9a9b45ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce62be4-5085-42b4-92ca-19525163fd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83e63d3-2460-4389-b43f-4723984866ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "470a5bf0-55b1-4f11-90e7-39313a357f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c628c729-8769-4d86-b53f-b60741bb181d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24cffae-c699-41c3-adbe-c3862a07ae20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7434a02-1e01-407b-880d-23d26625cbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86867581-85fa-4d62-ba2b-a42a454653ac",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a77c2d-e112-46b1-adc7-c7a3c9f05f56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b629f6-1bac-4114-a34e-39345771c7ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c34f40-035c-4b9d-8c66-fa33eaeb4e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3967853-b03c-4c36-8dbc-f141abbe36f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a05dd1a-be1f-467d-b350-0746da4808cb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38037d6-ef8a-4f9a-8700-2b37f62168e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea41cbd-e8ea-4f79-babe-6bde4e3e72f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d7d80d-acb5-4bb9-ab73-13cf1ac31c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583a23cb-0a8a-409f-8dc5-39523ada5983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b943fdb7-ce21-44fe-b28b-21f2d9ad84fb",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3bbb26-32b7-4562-922c-f207dc70f989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7ecc79-524a-4c8c-85c7-a7cf341e443e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98fa0f7-3b01-431e-9d06-be57968b7320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd9d316-7726-499d-aa5c-f7bc35b9c0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d842dc9-460b-47a9-bfec-b0b6c9bcafd7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f120a03-781e-46c3-9472-9b0a6df1f1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f2f04a-02b9-43e3-9b40-c24fe0797e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bf715d-eca6-497c-85a4-ca65e7174f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c507ee31-8836-4f27-930c-c9531138640b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b574f88-5fd4-45db-b455-46340c08840d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa772fe-1867-4430-856e-fdb39ce21af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bfdd2a-1e4f-4c72-b69c-f5c7fa799212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5042be8f-9394-4f88-90a3-979e6099e080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e2f919-4925-4388-aaab-75ff8066c1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38ce86f-2c42-4819-bf31-ea1c52652723",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd8dff3-579f-4d48-9b70-8c86754dd97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d4d8f4-9786-46db-96d3-0a40bb65820d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c2c000-eda4-44a6-bb1c-3bb0969cfd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03815e5c-4e38-4750-8c1d-ff8e08ef4c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7af2f2-adf7-44c5-bd92-506880f6a9e8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e09131-c741-4a70-9c5d-5ea777bf6948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a5486c-829c-471f-a012-de30f07fb767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddefd73-f08a-492a-9166-f3e9098f8c29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b35dc9-fdb2-410a-b046-779b883d7166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72b8347-9ded-4b1e-827b-d246dc130af0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc0e98e-9891-4593-be8c-f48806fb95a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9d3a56-fe42-469c-b718-c321f4d974da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97326198-8a52-4266-b309-63abee002dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16da85f-e1e0-42ca-b1e1-00be9557f838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b910de-e167-434f-b3e1-40a113604140",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907958fa-0612-4f4d-bbff-7691b9c0b618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd84e769-d866-46bc-aa49-d515b5fdaf25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9570b3e-4421-412e-826d-477377c6208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484dc2d5-a097-4fc2-9ecc-336f9c4482b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3262a472-1a83-4cb5-90b3-648312b8c28f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ac4f77-7c94-4048-a634-3fa64dcca2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236ed3b9-b980-4d99-ad30-a4dfd9103d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "871923a2-b4b3-4d8d-b0cc-584506dd2a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71224b3-4505-4543-8de3-b3fe047fe299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17f5be8-b557-49dc-af90-816600ae1734",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6296331-8501-45c4-b898-7a195021eae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3457bbf7-7cfe-4895-91be-f37c283a8846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dd467a-3ce2-4192-838e-ebe899d1071a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31c6ecd-2334-4829-af9f-3303ab228dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34028466-a0bc-4c2a-8e07-144062acec9b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de00c965-6a1b-4139-8dd5-ad1deec83a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2c69db-a96c-4873-b460-2848876b73f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf879fa-ca0c-48e1-a5f5-d0fe8b6644c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af9244f-5d10-4bcf-bf67-fdc1cb45aaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83812b16-2730-47a4-903e-c1e78f0ccea9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9a8591-24eb-4ea0-a6ac-6f8841b2f356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ee03bc-96fd-49fb-833e-a645bc053076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6ff9a5-3e76-4a28-81c3-da94b84c01f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cee627-9768-450b-b07a-059fc4f8707b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0693ed4d-9bea-4f03-81be-3eda0ac4a1aa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af7e6ba-deb5-4f76-b9da-cc073d0e8e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7a41f1-a8f9-4c1e-8a6f-24d53522c683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40b9e98-f830-44a8-bd95-137aa0837f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eca893e-8327-4a34-b2f4-19710f80d235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6600a0c-f016-422e-b555-5625d8f4b14e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b507397b-2226-4ed2-8387-a73a5204116c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f4c87b-9842-4490-8fd5-3278243ab172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5839b611-585f-4b23-9d02-29ffffe9a2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abde4318-d703-464e-b363-62ea4a1c0b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e52dfc6-4b3d-4f48-b318-3180a50ed3fb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72babd11-d321-440c-a3af-48650ab38f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8592cf0-6ea5-47d8-9bf5-c21c40803360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b86fea-3482-4848-a102-e96d4a8fc376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266b8166-c85e-498b-9587-128e2a06ac53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12225022-b8eb-4738-813b-2ca168486161",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3705ffef-f2dc-4cff-86a8-6932bafb2871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1227be-8e35-408c-b96d-d1fbeb23864b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d246c2e-bce4-4402-b619-6155b479f00b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ad176d-050d-42bc-b424-a91266b03b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372522e4-8ad1-42e3-ba27-8bf7f1005fc9",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa743f9-73f2-4b03-a0f0-12b7aa4c53eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda14380-ef4e-498d-a54f-286272970434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51780378-ac27-4511-a6c0-304bc40653a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11d70a2b-b6a7-4d6a-9e13-6e26f3a3a2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802b2fc1-ef1e-427d-8a4a-e27ed9b0bb2e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1015813-18f2-4382-a342-fccf5a1e543b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f52773f-c1cb-4a0b-937f-c0be0f58438f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f6e931-485c-48d2-8dd7-580c8e1288e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31c6d1c2-f3ed-43cc-bf63-e815e41eea59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9387e82e-d3b9-479b-b303-f68f8f45df51",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca55940a-592b-488b-86ac-013ad8b82b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14be1d47-0bda-4b07-bd09-ce8f1926f41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f527b5f8-a0c0-443f-ba17-92df5d77ae88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de347f29-ecd8-4632-a41c-98278e8b987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96121a8d-a8b1-4811-8018-893494c54875",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d817a219-b583-432f-b2b7-d4fe05bdbd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b84139-43c5-46b0-94c2-55ccfda67b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bf3e37-45a2-499a-aded-9020057e3074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ebce6c-3b92-4a85-a25f-b49d62a0b7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8329b4f2-f7db-4a2f-a30c-4dfda4594a01",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d290e0-ae8a-401f-86ad-3a5ee107a961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52443176-67fd-4395-9135-1ef44f740cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffef6611-b8d1-438e-8e09-899f9ac645c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec67a0d-66af-420b-b41c-4849831ed78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17ba883-a161-4f15-a756-8be750b7e327",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a272517-e8fd-4bbb-a422-edd4bce2251b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114666e5-1c77-402e-8e09-20733b12466b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dcb945-61ae-4627-8a63-2d4771a9c4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676aae2b-7495-43ab-a0b8-56c9aad1f0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd41847-a36b-4722-bdaa-e3ef2f976946",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab60ca96-c049-4da6-ac90-46146203031f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722eaedc-c3cc-4ee8-a5fe-7b1aad3590c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbce780-057c-4d25-aa43-04fd1ff5fc84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482b3158-b41d-4720-8507-59b93e09f52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c129832b-d966-423e-a092-c40c1d9572e8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31a971e-42bb-4675-acff-e9432e5d5c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16844aea-bdf6-4689-bd9c-5838d8063ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e427e70b-9524-45b6-86ce-80eba31851b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e4b7a6-5cea-404c-b3fa-1a0563342a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0aaa3ed-47e4-4f68-90b0-4dfc86d9c681",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed7710b-5795-4a22-88a0-43ac2af78a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b23ecb-b0e2-4688-917a-b9e024e3311f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fed27cc-30ca-4418-bf59-5edde724c223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe95e4ca-04d1-450a-837f-90c9125bec7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403e78cd-dd9c-4cb8-b3e5-713659307294",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf77d04-c06b-4521-a157-0795ed3aa2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8406f1d4-dc66-4364-88b3-85a92ff56ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfc2eaf-3e77-4ddf-8a6a-c12ae6e1ae30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ba0f44-c2b4-4d84-9336-83aa118f30f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a610a1ba-0313-44c4-b21e-53a3ff780489",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e404e4f7-98a2-4eb3-8bcf-3402b9218387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e72dc7-2870-4dfc-9c9c-de0cefc50cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067199ad-5534-4f02-8118-681efe2e9165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945b93a7-3967-4b09-99f3-dac9b9e6d8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0102c952-b10c-48ca-b8f4-5204e589b0cd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d08176-1499-4db9-89a7-fe3eb50c79d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13a097b-a152-4d73-8b01-c0accb7e1c45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4dc7ec-f352-41f9-be9c-23ac029487d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f83be9-f953-44e0-a033-920d45ef9b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e08f65-6115-476d-98fe-b91c22816f01",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd864cdc-39b2-4515-90a4-b4e856c20ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f805061c-8667-496c-8b4e-7070aefb8b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e732c72-b025-4110-9ce7-e25cf93ba683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e7c4b3-cfb0-4af6-bbe3-1f105d58dad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02ead5c-fd67-4f90-a520-52858a33d0d5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e10209-3354-4c73-b89e-d0cf557929f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41f6586d-b7f2-4785-ba26-7764cacb126a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c97f917-8dd1-4153-8b3a-11a6e6cef2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfdaf9a-7697-4cb8-b6e1-ceb598d9906f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1d57f6-a932-4736-a4d4-fb15497833d0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51397606-7980-4a49-89e8-64b88227d309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40481c6c-625b-4c08-9683-e20fb0efc141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc50a1e1-c2aa-47d6-ba41-fddfdcf2a91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5d7ba7-6274-472f-bbde-21ae22db223e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355fc2c0-ece3-4f3d-9813-a6180b9bdf89",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca70ed70-fdbd-43c6-802a-1081d7f08a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e619e559-1adb-4861-b16e-55a56dfb0ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d1fa27-cde1-43aa-9c00-5995ef21ab0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdaf5f85-02a7-454f-8996-5d9013cd3266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d375ae7e-fa25-46dc-87b6-ea3acf82f2de",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc837198-5501-44eb-b32d-d18ead0d4146",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10822a5d-a11c-44a5-9004-9e78ecf3c650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a85a3a-49c3-43f0-a0e5-1181174036f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2760e0b-2caa-4828-a237-6fe1afe0931a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ba5db4-c69f-4f19-a3f3-0e27a890c5e3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7186f11a-c18e-4554-ba47-e5a6493e0680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcaf9e1c-c021-4a76-a046-28392bb2a60c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745f6c75-d25f-435e-a3d4-ea3cfac35a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5daed4e5-e1e3-4df5-9a22-316a435a3061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92abe17c-78ce-46a8-8744-3d6bb5bfef06",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb159bf-2b2a-482b-b659-e6d1d6ed55a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9d0c3fa-7f2d-418a-96dc-e050f44e7c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e7ea85-c1e5-4fc5-85cd-4cbd0e5950bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2652841-0be3-4f19-9038-48ea205007d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3230dd-4a2d-4be1-9e0c-4ef180623581",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a751c0-dee5-4d30-9049-ad547b0ce40c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e36108c-20a0-4c7c-9c86-2f5d170ce489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30072758-3541-4905-89c9-8d5548daf3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4325c213-9a9c-4aff-bf5a-bba1b40318ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0e65bc-bc02-480b-b98c-cc6669b073a6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ffc6b0-a857-44da-b4e4-f1de481f0f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2e8f2a0-85c6-4090-95a9-3878cfe1a5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564e981d-d71d-4b71-a184-a1e9d8b853ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694e039c-9741-47dc-b9f7-01176f662780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd9d113-99a9-4d41-b950-562f8aa8a970",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548fc441-58d6-492b-b680-eb82552845ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2974bc39-6136-43d6-bc69-d2e6eeb73496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17993337-b151-43d8-a011-df04c37a76d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f25a7d-c0f9-4764-b7d8-3a23cd5c20f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ee5c5c-ebd7-4eec-a32b-017fa0ac509d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e9f7da-91f8-4680-b824-14c9f471e8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c414e8e-1179-498b-857a-8bd2280fb98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a26c6c1-e0a4-42aa-9359-74cced29026a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01df47db-a55c-4218-8752-d9111f5374b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71311f4c-bb01-4b07-af30-684d3051e304",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d634cf57-8f80-449f-92f0-70f846cf0d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74698dbb-eb53-45ec-99e9-75225435bb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45bcdac-7b93-4660-9600-78e375817ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b16798a-4e43-4df5-9295-894ad8d37fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8612d6-35e0-4c96-8c6d-90a2f0c6e63d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7bc931-d727-4213-9816-d8060472f862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "011449fe-cd8b-4e1f-9810-c485040945f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c368a980-5012-4259-8e65-bd13fd477fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a7c21b-aa38-4228-8a0f-d9f2e13706f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cc7745-ba28-48e7-9781-d0c2a3f05386",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391e5425-fc4f-48ac-9e8d-1bb5db58b2b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d287ed9-f883-41d0-baf8-64ef2e7ea540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a7c9d9-2cd7-49b6-a89d-700626f37c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028eb68c-d40c-4a5a-9828-a7358d7e78d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1979e317-90a8-4e7c-a3b4-744a670afc6f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a178a007-51c6-41b9-8694-f4bd30b600b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f1dc77-b551-4390-a4cb-163b56085896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfbe01ea-2233-4b1a-90ae-d2f3a71418da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2b2b73-c739-48fd-afb5-9bc23b2b0403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de75dd30-22cf-4018-a5fd-2ad767d30fe5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e41326-ba42-4710-87e0-ca10b4f632c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d267a65-974b-48f6-a721-b3a7868f5817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f611ac-c399-4bba-9ed1-2311a7062a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f348476-4723-4ee1-92ad-1a450edd6233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73693065-2098-4129-b2bb-ba48689a4bf0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6c53d7-86ce-4ca4-805d-16bd9ed4c490",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12664533-16a9-4f35-a799-a8cb9854e1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9020c00-b683-4ef0-8187-b60ef7cb58e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d0a110-1396-4d41-b95a-4ed9cfd4d60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0789f962-d249-4f94-8cae-2475ed67dad7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93603bbf-e21d-41a8-9f1a-0cf6fb6616aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b63aaf2-1b4a-4f7e-8dc6-ce6e9d723586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225ddafa-fbec-4189-84d0-bf76af039a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc856e1-a638-4f21-9ffd-e86e2c6fc608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fce62e-505d-4ef4-af74-55e2ecac109b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0001fa3-e2ce-4c0a-974d-9efd87fb5e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf1e78b-5c5a-445c-a187-a0d22f7bab35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e350f11-3ceb-4fc7-8797-ecd3b336a784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233370c9-e1a4-475c-b1ea-930b2d4f471f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6862c2-952f-4547-89c7-6452df161c49",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e7ab45-c45d-4552-8632-69829e96f488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a02dfb7-0b4b-4144-b6e0-083f34763d98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5a9094-328e-49d2-b20d-0a6037afa881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8d2998-8a6c-490a-bcf1-8d81da3d3cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeedcf38-6e2d-4bf3-bce2-220fa642ce7a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1209d19e-2578-4d00-aa2f-1ae6d2049390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a8a73c4-41b6-4070-900b-eecfc1b6d00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c111ce1-9ec4-4fb0-aadf-964732fdf593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfca283-4ea5-460c-b223-12fdc89564cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426fc4b8-5d5e-4411-84e6-b2a58c077610",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f806d7-2d7c-49ee-a0e8-23a5850f646e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee082b9-bdc4-4acd-aadc-30b2aea224f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80e2ac5-542c-432d-88ec-e21c6669b702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068e0e12-0b02-4cd9-8b40-87e511526faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05328063-d1a8-447a-88f2-e9b752b59672",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d8c16a-f1e7-4098-8453-62c1bcffe8df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20eb4af4-e510-4f5f-8d5d-89e65b60429d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44e9ec7-6d66-4dac-b9c6-0f8a5fba0019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e83c6de-2511-46bb-935f-951262b21e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85112e94-83b4-4de9-aa6e-7617a422a867",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e599f75-797f-4f57-b0b6-8a1560807a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d666c07a-85c0-448a-b87e-fadc03fbe7fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c76185-6367-4b47-92f2-ffa0be9063dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a96de59-0c25-4da5-9639-1db02c917d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57182b95-e838-4d20-a3f7-c75c6c8769d7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b79c293-9fc9-4fac-bf8a-a6fa58f67506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "712fb252-7f83-4e76-91d8-98c51675fcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ebdf68-6f58-44b5-b64a-135f89392392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955749fc-0957-4989-a7c4-3048ef4de0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d2289e-bb1f-489b-bffb-a0fd238a3c15",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd22da0-5e49-494e-9d8e-c09f4c0311c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2a9521-795f-4fda-8c59-4fb059812ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f04542-f260-43c2-a21a-28f6e98763f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6759583-2c31-44ec-bed8-7fe7151f8c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d04a60-1f22-4987-b004-31002264077e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7b0377-7a72-4b82-99eb-7f256785c079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d169e27-8d12-4920-9a8b-3cddd0692e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e50586-bad1-4bbc-9b55-14a014d4c9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dba0685-c727-41eb-a049-730cf98befd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75377335-c603-4688-bc0a-eb5bd98a55d4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666c163c-8550-4873-8422-5049ffff4c75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a440ff6-aab5-4e44-9895-d6530119d025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af98b0c9-6b5e-42ac-b958-d1d5b75a497e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b1a631-7ebc-4f7c-ad5c-eb3b79e3b013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f22b929-2960-492a-8ff3-e723b8152589",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8b4c63-fa8c-48d0-a90c-6d1f287e2970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1319353b-3405-49c3-bc9b-20f7406f1f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f066ce2-0774-47ac-a183-416cab4f953f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45877cf5-cd2a-4f2e-8184-f56cc5890c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6fb140-4321-40ff-a62f-ee0e8717443d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920298fb-7d94-43af-9555-c39ab1b03108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a4247a7-e29d-46a6-8b0d-aaaa242f28e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba334ce0-d847-4985-85b8-c93636c63549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1c8aac-b432-4a2b-877f-9a0b6ae97d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108e5990-98ab-4be4-97e6-dcd11b707fc4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426d91c3-58fa-45bc-982a-8e63eaa2ebd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8ed5fcc-1fc8-4134-95c3-8cf3cabf01bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d35c80-0790-4302-918b-ae097110c452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae28ef5-dc78-42c7-ab92-c2311e212e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba720ab9-24bb-4414-ac6a-8fb368bc59e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a2ee98-aa05-41be-9122-98638f1f14f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c013a21-5c96-48d4-9550-c9d2cef2c64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a037fe-640d-4a8f-b5ea-67b67507e53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f547b5b-26c3-4ab5-9cee-6c9bd422a38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b7ac3f-561a-41da-8e6d-28f2c2f26874",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9495c5-8eb1-445a-89ad-f1a8b7a17c13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a36de55-1958-4779-8cc6-a8c3474dc534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecbffad-5249-42d4-abb9-73db7cbe4d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aaef7b9-73f7-4c6e-9968-98a75892b1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07a8bc5-d418-4b98-b45f-ec480130fd94",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ceba6d-ecc3-4346-b744-c4a3db2ec336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a607f119-e288-4839-91a2-da92758c5b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879dce57-f95c-45d2-87c3-78532d2eb469",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3c2c3d-b853-46ea-98a0-e969050b4da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9828896-a0c0-4c3b-a6de-af24c9cf92e9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169fb4fd-8a64-4140-aace-7ff09d8aaa6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced2f0d1-030d-4c22-b9e2-1393536b10b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "684ff5ee-79e1-4d7a-9629-fa5b15415e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117160dc-052c-49e0-b6b0-ec92da2af0bf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb3cc582-11ce-4281-8182-e8f944173ca0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10407d4a-a327-496f-b2fd-c901025f60f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "81ad137e-59f8-4c34-bbcf-e74cf3c72bcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dfc73c0c-cadc-4c43-9fcf-6804074fbca2"
                    }
                  }
                ]
              },
              {
                "id": "29c4a2e0-82b1-4753-b33c-bfcbbb4ec9d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3335cb5a-eaf3-4a8d-8ccc-8364b8438748",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445c94d3-430c-4af9-b287-c90250d693f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b9c7acf1-5625-49f2-98b7-50be2a6e39a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ec3deb-eb31-46ac-874b-11d87b5963e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c236a44-89c2-44b5-ad03-7d9ad5e68644"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cffb57c-0dc1-4acb-9683-d354d76deb80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd34b989-40c5-4f90-8eed-0fe0176af00e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2788c17-5e85-421a-b25f-3ed629d1c813",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "031e6f09-7a52-44b5-ad8b-30d18b760f8c"
                    }
                  }
                ]
              },
              {
                "id": "ec86732f-944b-400b-ae01-32c160ccac75",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4bb27a6f-6f66-4d5d-a6f9-f348ba9e4480",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70110f1-98ce-4a9a-afb2-e31aaaaf625b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "afa53ada-537a-4b8b-a2ac-a40a68035172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529859a8-fe40-43c4-a0fb-a03663dd6335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028d5858-59e6-4dc8-9ba6-723b976b7868"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "299230bd-0045-4fcc-80dc-d6de3960a21b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db8d8134-4e89-4cfd-b487-7caf474fb4ec",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1aef75ef-a553-4dcb-b1e9-4b320c5d8b38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "da5f07af-45bc-4052-b614-95bb90721253"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb27fd22-199a-4f03-8746-bc2b9e693e71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aba82dbc-6071-4b44-8682-b8d80ab8ae8b"
                    }
                  }
                ]
              },
              {
                "id": "613752de-97c9-49fd-aa67-292426c883b5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec4393bb-ae61-4408-8e6e-bbe40976ccc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f26bc7fa-3414-4785-b09a-c37220abb56f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b5c93d-98f3-4d1e-af9b-96ca21c139e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f11e647-3e18-4cc9-89b0-7e44132f2db7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a7b86584-239e-481b-8bee-24e6ca80da0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9eada9bf-7bec-4b3f-9d74-e181700771a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f39af7ea-bc25-41b7-9159-2f72934fddfb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1a6f8db-ff9d-4d6c-b17a-b7ac5a996085"
            }
          }
        ]
      },
      {
        "id": "c0b4491d-cb60-4842-a4f9-34df72fe12ea",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "83d187cb-cdfb-4bef-9c94-52c288555254",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e397331-d257-4731-a232-2089e95ecdd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7180688e-76d2-417a-a026-bc1975441023",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98225735-efee-468c-987e-3bc713c1fca9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e3f61618-b743-4964-9242-def9ff8505e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df06261a-e778-4fbd-8c24-e6b5cdf2a038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50be8da9-afbd-425e-bf92-352bdf3d5c86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4199f75-589c-41a6-a26a-2c12ff3efeef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fae1b7d9-c287-4cc7-ae74-40024a216103"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e1e8501-41b6-43ba-b65c-9620cd072a95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "005e4d72-371b-4340-ba1e-7ffc7e591fe4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d096cb0-d8dd-4c28-a02b-6de9aada4b89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "55ccf1f9-ca07-48bb-84a3-1eb2ede803a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84d1fa97-8111-4b40-987e-f2b2a0e024b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6cbafcd-31e4-4bb7-9b3d-9305cbb53298"
            }
          }
        ]
      },
      {
        "id": "dc96aac7-6b29-47d6-87f0-0ab2d112db6a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c5f719f0-636e-4124-ae32-4484e9d59ce2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fbda4e4-9650-4188-b4eb-2e608d81c1c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61107083-fc0e-4d03-83ae-97d5fe6db4af",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed2a387-6974-4604-9be9-1d6f25cc6b47",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8abb49af-e73b-4238-a83e-e7c1b48fbd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a6b8d6-dfc1-4471-8e86-230ce1a384dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ddba83f-d110-49dd-b585-8740e62c427e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b46e9c39-fe8b-465d-a5d9-ee63e80084e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6877c0f9-bc76-488d-8410-d571a07e985f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8b01a69-c1cd-480b-beb2-6d7aa76a3c73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb2bc43b-5485-4e52-8516-090bf7ef1a67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e4901df-447e-4c3e-8f1e-41c8877880c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "495aca21-ff4b-49fc-9b2a-13d0b7f72195"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7d31a3d-9a18-4edd-b18a-8a59214901d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5467ae92-e153-4a9b-be09-19c9cbd92d77"
            }
          }
        ]
      },
      {
        "id": "2c352979-0d63-4c80-9b30-ddf1b436242e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b70f084a-cca0-4848-b8e7-60de817d3ffb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d119b57-5578-4d3e-8409-aefccd4114af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0eb23601-f103-46a2-9f14-3a883739ff04",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc9f110-4694-49ac-baf1-b297a7584c44",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b64be7c-f717-4214-98a3-17b5cc3ef6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4aaaa4a-48d8-4a86-af5f-ec032905411a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "015795fd-98a3-4f8f-b71d-420d8154014e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e4a4d89-bc06-4fc7-a2e0-c1b59fce028b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3767d628-e97a-4940-919c-467c71e0ebb7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11fcddd2-8924-42c3-8314-472ed9d199dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a3236cf-00e1-45bd-91d7-90d55ae92476"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76133e8d-8d1f-46ab-b9f0-f913a0ff407b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4623f179-5c11-4331-9b36-6da2ca55bc35"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f59127ef-cc04-4a65-8742-41f847635bc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cae6a438-a64a-4c9f-ab35-d121493009e5"
            }
          }
        ]
      },
      {
        "id": "2412eae0-03d3-4942-a84b-aaab7553a036",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08faf814-d003-4627-96c1-b81c6867b0a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81d1875c-762f-44ae-aa1f-425c88599ced",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ce3388ef-7f9d-4978-8ef6-e5fdc4cd159e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "168f3b65-11cf-411e-9a97-121ae407b5d6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "966d8087-b903-4b22-813b-4920b5392d1b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.09920634920638,
      "responseMin": 7,
      "responseMax": 625,
      "responseSd": 77.60365622628596,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714955806830,
      "completed": 1714955833472
    },
    "executions": [
      {
        "id": "d38e9001-dd78-429c-9e8b-d2c124c2a555",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "00b3ebe0-e9a4-496a-9477-d3ac072e6e7a",
          "httpRequestId": "97e09046-6683-4fd6-8be3-2db1fb2cbf8e"
        },
        "item": {
          "id": "d38e9001-dd78-429c-9e8b-d2c124c2a555",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "06dca6ba-b211-441e-a941-294649d00dbf",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "ee9fa77f-af3c-4bce-b547-934686950a4b",
        "cursor": {
          "ref": "e3bd2e39-cd72-46a9-a229-ffd3a6de86dc",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b1fc3b0f-58a8-4479-aa77-1e013a7035e3"
        },
        "item": {
          "id": "ee9fa77f-af3c-4bce-b547-934686950a4b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ce18c265-26d9-4621-8e4e-2fb951b24ead",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "f9e22495-6b67-4f23-8f79-4f747dc2343c",
        "cursor": {
          "ref": "259f751a-3a9c-44e9-a862-b6adbf7c0e83",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a679f5a1-e1bd-495b-900c-c8b8ca9c5997"
        },
        "item": {
          "id": "f9e22495-6b67-4f23-8f79-4f747dc2343c",
          "name": "did_json"
        },
        "response": {
          "id": "91ea35d2-c32d-43f7-9573-f0ae8f5a08df",
          "status": "OK",
          "code": 200,
          "responseTime": 380,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6931acc4-c7d8-43a0-9af3-115e8c55687d",
        "cursor": {
          "ref": "39c77be5-b0c4-4324-a8b8-eda3036ba247",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3faaebe-9b1e-4414-98dc-917c4f03d31e"
        },
        "item": {
          "id": "6931acc4-c7d8-43a0-9af3-115e8c55687d",
          "name": "did:invalid"
        },
        "response": {
          "id": "91d1920e-0a03-41b1-aa49-50430406c226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6931acc4-c7d8-43a0-9af3-115e8c55687d",
        "cursor": {
          "ref": "39c77be5-b0c4-4324-a8b8-eda3036ba247",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c3faaebe-9b1e-4414-98dc-917c4f03d31e"
        },
        "item": {
          "id": "6931acc4-c7d8-43a0-9af3-115e8c55687d",
          "name": "did:invalid"
        },
        "response": {
          "id": "91d1920e-0a03-41b1-aa49-50430406c226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836b2cef-48ae-4f34-9b0f-85c8fa83fda5",
        "cursor": {
          "ref": "3c5f4210-2b9d-41c1-9627-9e04814efdd3",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "29984b01-d2dd-4212-bdec-5c1436bc3f10"
        },
        "item": {
          "id": "836b2cef-48ae-4f34-9b0f-85c8fa83fda5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ca85c409-c307-4f2d-b34d-e5ff0dbaa3e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca8dc83-8703-4799-9595-24a96abfac49",
        "cursor": {
          "ref": "cc5b6479-4d06-4a22-a719-ea3af97082d7",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2b60ec11-32b6-4fc7-af6b-50ab1a7d8b8d"
        },
        "item": {
          "id": "1ca8dc83-8703-4799-9595-24a96abfac49",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6edd3f49-395e-48d5-94da-5252f67fb6f1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0537eb-2e6b-46ac-99af-e019db1e36e6",
        "cursor": {
          "ref": "3ca3cfea-7a45-45fd-a85b-c9fdd7f16dd9",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "934709f6-1582-4c34-891f-8eb3561cbbed"
        },
        "item": {
          "id": "6d0537eb-2e6b-46ac-99af-e019db1e36e6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8006d936-2fb1-4343-b716-6ac201c75d35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccd1b68-7407-4d16-b425-bd5f067f15b0",
        "cursor": {
          "ref": "fc7143a1-c5f0-4853-a11c-359b7d1cdf5d",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5bc5634a-8bab-4fb8-bb33-0ec0d60b181f"
        },
        "item": {
          "id": "9ccd1b68-7407-4d16-b425-bd5f067f15b0",
          "name": "identifiers"
        },
        "response": {
          "id": "f8eb90ed-7cd7-4c50-b220-c8012b522605",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4720ac8c-c488-46d5-809b-e4244b300120",
        "cursor": {
          "ref": "7a4f7939-95e1-47be-8323-f455e3948399",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c3ac9343-4418-463b-9273-f39b33c4ec8f"
        },
        "item": {
          "id": "4720ac8c-c488-46d5-809b-e4244b300120",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "08617a0c-62c4-4151-97e9-07f69af23bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda1db8b-1c48-4245-b578-48f9774a32b3",
        "cursor": {
          "ref": "917a67e3-5238-4a04-b41f-2ced900e9fb7",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f11720e4-b442-4a7f-954b-313c5b0a9c5c"
        },
        "item": {
          "id": "dda1db8b-1c48-4245-b578-48f9774a32b3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4b5c8110-d6eb-4fba-a5df-518baab81123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad4d17c-19d1-45c5-b994-51ed44047441",
        "cursor": {
          "ref": "b0c34af6-f6bd-411c-b571-c5c886606a6f",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "20affb9a-e3ca-4204-a7ac-dfb376968142"
        },
        "item": {
          "id": "dad4d17c-19d1-45c5-b994-51ed44047441",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "13828514-a629-4b48-8b56-8a0dc6114f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427d5ceb-43bb-4799-a08c-ed2b2ffaca80",
        "cursor": {
          "ref": "3c35fb0d-33b4-4962-8264-529a4ba0b5c0",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9e01b931-ab69-400c-9cf8-3230f61c2443"
        },
        "item": {
          "id": "427d5ceb-43bb-4799-a08c-ed2b2ffaca80",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e6544af7-c170-40fd-b191-7bf1a24d6e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7275a0a7-4b46-4336-9540-9d2185c6a3a6",
        "cursor": {
          "ref": "3fb129b1-6786-41e7-bfaa-91b2c3d8ddf7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4e014656-b257-4378-9e4c-dac1309ada76"
        },
        "item": {
          "id": "7275a0a7-4b46-4336-9540-9d2185c6a3a6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e52c8b7e-2bdc-439e-bbd8-cbb34b9e3952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62719b23-4d8a-47f8-b35a-142c64f1d20e",
        "cursor": {
          "ref": "67d9409b-0e06-4afb-9a36-ea6d88289b51",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fa364253-3782-4037-bcda-90d922876c8e"
        },
        "item": {
          "id": "62719b23-4d8a-47f8-b35a-142c64f1d20e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f075bd89-82bf-4e90-bbb7-1d7ad1376893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc1a3c4-2c9a-4089-b08b-891473596d8d",
        "cursor": {
          "ref": "6090c743-ca09-4b60-880f-49e9f1f504f5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6643de0f-c2fa-4758-99bc-cc941a511dc5"
        },
        "item": {
          "id": "bcc1a3c4-2c9a-4089-b08b-891473596d8d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5992e502-a95f-4a9a-9080-ba25bfbc3962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41fe3a5-6060-4102-9037-714ad640b8d6",
        "cursor": {
          "ref": "4fe66089-307a-4aed-b4d6-814716322a32",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "585fce7e-de64-48ae-8525-e0aa064b3073"
        },
        "item": {
          "id": "c41fe3a5-6060-4102-9037-714ad640b8d6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fb812d89-27d1-4d7c-9c75-c509bb8f405d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cea05ff-093b-42ae-be24-be0d4da53636",
        "cursor": {
          "ref": "c16e1ce5-0a10-4d57-b60e-1889119c4e73",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b42db8c4-e3f1-4749-a13e-5ecdd08e0a9c"
        },
        "item": {
          "id": "4cea05ff-093b-42ae-be24-be0d4da53636",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "090be3c0-9bb8-453a-bd48-a678a4666751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2c8367-5fb4-4827-902c-020827d7ca0c",
        "cursor": {
          "ref": "341283dc-ef7b-4744-917a-7a3504c94c9d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "08873652-a1ac-46bf-837e-7b170edd9d25"
        },
        "item": {
          "id": "1c2c8367-5fb4-4827-902c-020827d7ca0c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f813b08d-ad41-4096-88df-50968daa8011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3729c72c-45d4-49dc-b84b-bbaa565648b2",
        "cursor": {
          "ref": "8ea80981-9f7b-4cdc-8714-7ea0ded40228",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "74beca4e-84d5-4fd3-b0eb-2e53c3db226c"
        },
        "item": {
          "id": "3729c72c-45d4-49dc-b84b-bbaa565648b2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e47e45f0-ae37-4484-a046-5907ab83825e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3de4e3-fce1-4c8b-97e1-6eb49e9e1a7e",
        "cursor": {
          "ref": "c8e1c752-bc2a-44c3-a3d5-01297168fa8f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d9544ab9-b740-4658-94c9-845eb3b87963"
        },
        "item": {
          "id": "3d3de4e3-fce1-4c8b-97e1-6eb49e9e1a7e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bf979090-b444-489a-bc62-d8a5571df5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687e561c-f2ff-4ad9-b617-455c1d4ee1b2",
        "cursor": {
          "ref": "4f2cacea-3a00-4999-9f2f-86cdd19f89b8",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "536398da-dddd-41a2-b894-ee76c99c18bf"
        },
        "item": {
          "id": "687e561c-f2ff-4ad9-b617-455c1d4ee1b2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1d73f3e3-1be4-4ae6-9f2e-e192d8f27de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff33111-1a67-435e-b810-3217cfc12ad0",
        "cursor": {
          "ref": "54b2598e-ea0f-48d2-8453-345e9a96ef78",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "44fad80f-90cf-4eaa-8aab-e6f14439bfd0"
        },
        "item": {
          "id": "cff33111-1a67-435e-b810-3217cfc12ad0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0a2ff257-e2d1-4fe1-89be-c32822788d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6975eb4a-9e4e-41cd-bd2d-3a36caca6109",
        "cursor": {
          "ref": "0149ce63-e795-44f1-896e-c895d1ec8cd5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d7dd77e7-53a2-4772-9c3b-f1a22f76270d"
        },
        "item": {
          "id": "6975eb4a-9e4e-41cd-bd2d-3a36caca6109",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "31598a63-4091-4ef7-b2d2-26a24bfe8df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91abff2-69fd-4350-ac48-f37929a43302",
        "cursor": {
          "ref": "f89518d4-e732-4acb-9bda-8f5c9fc2afba",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79bda4f0-0525-4fb7-9575-97780b858600"
        },
        "item": {
          "id": "a91abff2-69fd-4350-ac48-f37929a43302",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "28dfdd30-1122-4a4e-851c-24e641dd044b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e573f2f-2ee5-47d1-b4b5-1d7eb5fcc34c",
        "cursor": {
          "ref": "b1c5e769-538c-4af2-a5ab-5cad43ea90a1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "db6e9104-c982-44fc-b8aa-c10fa4c8ea02"
        },
        "item": {
          "id": "5e573f2f-2ee5-47d1-b4b5-1d7eb5fcc34c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "abc46f6a-37f8-4dd4-b528-30515cf9fa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c8e4f6-416b-4a33-a566-bd409fd73709",
        "cursor": {
          "ref": "dd294c6d-ef7e-4175-9bb5-7e45c79c39d0",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f4b609c7-2bd6-4fd5-bc9d-cb4d2c6fa5f9"
        },
        "item": {
          "id": "10c8e4f6-416b-4a33-a566-bd409fd73709",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b821cd4f-c7dd-448f-bbcb-e3bbc71a55fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d741186a-c47a-4269-acf0-9f6268477df9",
        "cursor": {
          "ref": "95904fbe-385a-450f-8dbc-9ff8c5c8e6e7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7086083a-ad27-44e2-b3be-2c335cb19693"
        },
        "item": {
          "id": "d741186a-c47a-4269-acf0-9f6268477df9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "84a28dfa-cfd1-4dc7-8dc0-43a918e7aff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8708d667-f22c-4b35-8849-93501b1b98b3",
        "cursor": {
          "ref": "a4f55744-97a9-4115-bdd7-46d8312bda9a",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b58e7ce3-1b5b-4432-8101-eba346923755"
        },
        "item": {
          "id": "8708d667-f22c-4b35-8849-93501b1b98b3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f76ee27c-9462-4f77-aa61-72faff8a8038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013c615c-14d3-428c-9438-82bd655d9374",
        "cursor": {
          "ref": "325a9b35-355b-4e55-810c-8dfe6e6b1623",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "46db377e-4eab-4611-ba3e-07e69e526f8e"
        },
        "item": {
          "id": "013c615c-14d3-428c-9438-82bd655d9374",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "860f0a56-c0cf-4b31-9d4d-1bec77509541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c17a05f-d3c0-4e29-a16e-e74a8ccbc397",
        "cursor": {
          "ref": "304c8b29-5cf2-4bca-b56e-6d8b88637e47",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "32157870-caf4-4440-911a-ec29e12207ec"
        },
        "item": {
          "id": "0c17a05f-d3c0-4e29-a16e-e74a8ccbc397",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "34cc64a8-fde0-41f5-bd85-03c048880937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d195c92-d078-4a7d-bc9d-9680aa5d3da9",
        "cursor": {
          "ref": "b615898c-b765-40cf-a51d-fb66904fe515",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6c7e266-fa87-4714-82be-bcbebb34924c"
        },
        "item": {
          "id": "9d195c92-d078-4a7d-bc9d-9680aa5d3da9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7183fd28-3ec2-4829-bb26-bfbaa246b12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5939fc2-a8f3-47e1-881c-b49a8999033b",
        "cursor": {
          "ref": "fd0a5033-09c4-4762-bfe4-9833fd0b2385",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2a64342b-3bec-45d2-aa9e-78e7ae72fd28"
        },
        "item": {
          "id": "a5939fc2-a8f3-47e1-881c-b49a8999033b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9aa41f10-c033-4b4e-b6d5-9f1fc55b2c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311dfa69-7e0c-42e6-821d-fe7bf506ddea",
        "cursor": {
          "ref": "be8cd3ee-6ff9-4572-b374-3361c2776c6e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f55123fd-ea05-4673-bb08-e96d092104bd"
        },
        "item": {
          "id": "311dfa69-7e0c-42e6-821d-fe7bf506ddea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c4a18285-aec3-48b1-9696-0fe300268f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d08a608-55d2-4280-a821-7c1c8a6d5033",
        "cursor": {
          "ref": "f0813bfb-e4b2-40d6-8e1b-2726a46e8e20",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b524518d-5d6f-4178-8185-6270ec8c063f"
        },
        "item": {
          "id": "6d08a608-55d2-4280-a821-7c1c8a6d5033",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c01177cb-8100-4ec6-bbcf-24f66b42ec92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c22950-adeb-4b2d-8064-516580b5f016",
        "cursor": {
          "ref": "fe98c020-d813-44f0-a0bf-daf74b1ef633",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8889d851-7c80-4381-9fe3-f6b6f93a6b48"
        },
        "item": {
          "id": "65c22950-adeb-4b2d-8064-516580b5f016",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b268908a-955b-40a4-8ca7-7621a5b1afb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba3b0a6-51ba-4273-b610-01e3f37c3fce",
        "cursor": {
          "ref": "c8da4413-925a-492d-955f-748a34e17009",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dce6fd98-339f-4c11-873e-9c2db40d60cb"
        },
        "item": {
          "id": "9ba3b0a6-51ba-4273-b610-01e3f37c3fce",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "21b62622-20f8-4cad-831b-cedc9b595fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3378dfc0-eb72-418e-82f5-cc2091f7f17c",
        "cursor": {
          "ref": "8ee64ca2-62dd-4142-84bc-1965a1d88734",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "72d908fa-1bf0-47fb-a447-5d7c6727eb5b"
        },
        "item": {
          "id": "3378dfc0-eb72-418e-82f5-cc2091f7f17c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ec73dd52-8a92-4b85-9f02-b4dca842d7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9da08d-8e85-4c88-bf78-097c66f22825",
        "cursor": {
          "ref": "caaeaf53-de86-47dd-8ca1-b7416bfab377",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "eaabaf9b-eb55-46cd-89d1-f846597cbdc7"
        },
        "item": {
          "id": "ae9da08d-8e85-4c88-bf78-097c66f22825",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79f5044c-1659-494e-b1ca-887a69529d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd35203b-39b4-4819-b70e-3ff3e5b7f944",
        "cursor": {
          "ref": "7d45a5ca-3b57-4f93-9121-f504a1f3c84e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "645746e8-88f3-4116-8b29-fd926c291f9c"
        },
        "item": {
          "id": "bd35203b-39b4-4819-b70e-3ff3e5b7f944",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "30686375-0a9c-484c-90fe-942790dfe217",
          "status": "Created",
          "code": 201,
          "responseTime": 625,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6674191a-465b-4234-b23a-cd86d95bf941",
        "cursor": {
          "ref": "d9d6f529-b757-443c-98c5-2f46f6d02f86",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4823b49e-10fa-4a7b-81d2-8153bc6387f0"
        },
        "item": {
          "id": "6674191a-465b-4234-b23a-cd86d95bf941",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "051f92d3-1a54-4806-ad18-b97899ce8928",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0a3f86c0-3a8e-4d37-826a-cd89ba9daf3c",
        "cursor": {
          "ref": "879620fe-63b1-4897-a3b1-4b6cb84b7eee",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2e2964bc-1bdd-4db0-a92c-3e60fa14d9b3"
        },
        "item": {
          "id": "0a3f86c0-3a8e-4d37-826a-cd89ba9daf3c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d6068f60-88b6-4b2b-811c-dcf78c4b01e9",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b466c49c-f3ae-4f2b-975b-e285af8385ec",
        "cursor": {
          "ref": "7742453b-8ef0-407b-adbf-9ae28f1c6159",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c993b2a8-6b02-4c46-a692-ec5db6f1529e"
        },
        "item": {
          "id": "b466c49c-f3ae-4f2b-975b-e285af8385ec",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7f1ccef1-8d7f-4f3e-a541-38f0c9c7ffca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7568916-e8a4-47a2-9191-7d9f48d9d683",
        "cursor": {
          "ref": "a642f548-168f-4038-9497-5ffb119b5e68",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8a919487-3f53-41ce-9a10-5c93fc871327"
        },
        "item": {
          "id": "b7568916-e8a4-47a2-9191-7d9f48d9d683",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "65b23c36-3132-4c2c-82c4-71b1134f275f",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0c5320c1-d825-4cd8-8984-02f8f05d4f32",
        "cursor": {
          "ref": "1da5a271-bf6d-4a59-8cb1-841e6db331a1",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "faf4d7e0-f6fe-42dd-9b85-8d7f7bb9a02c"
        },
        "item": {
          "id": "0c5320c1-d825-4cd8-8984-02f8f05d4f32",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "219b244e-bc53-4092-a465-7fed6f301824",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "86ab12d1-dd7a-4a44-9334-fda18f1a3eed",
        "cursor": {
          "ref": "178a7a4c-ef09-4281-9c24-b4eddfcaed8e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "13de9c86-6f5f-439d-a676-554c42e85669"
        },
        "item": {
          "id": "86ab12d1-dd7a-4a44-9334-fda18f1a3eed",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "79f72561-4c7f-4a73-b206-e1657c6c2ef2",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f1f1db2c-ccd4-4fdb-b98f-986c71953160",
        "cursor": {
          "ref": "393946cf-afd6-4fa5-b19d-09d365ab5a5d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1dae9117-18ce-487c-87db-461f92191938"
        },
        "item": {
          "id": "f1f1db2c-ccd4-4fdb-b98f-986c71953160",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9ff68ec5-50c9-42cc-9bfc-73cd7b854c48",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0f93e0b4-86e8-4ee4-a1c5-6bf6d529db42",
        "cursor": {
          "ref": "745dab30-7a07-4d05-971c-f8c04f9ec720",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2b1c7071-9fc9-4854-86dc-c03e61a65a1e"
        },
        "item": {
          "id": "0f93e0b4-86e8-4ee4-a1c5-6bf6d529db42",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "62fbb24b-f4cd-42d1-bf0c-46e2b581933f",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "03a86901-a19d-4e16-8594-9b461c149f26",
        "cursor": {
          "ref": "70ab57aa-1954-48f6-9aae-b81f719e5ef8",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9b753167-27ac-401d-89e8-8a358ae0d0f0"
        },
        "item": {
          "id": "03a86901-a19d-4e16-8594-9b461c149f26",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3a25517d-2897-48f8-a4b5-ee75bf5968c4",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8d2a2a86-2822-4947-bfaf-c0d036a6b40c",
        "cursor": {
          "ref": "ba5a49fa-e37e-4cee-9f9c-5288c7649b6e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "078e4d6f-9fe9-4019-af64-6805cece3e97"
        },
        "item": {
          "id": "8d2a2a86-2822-4947-bfaf-c0d036a6b40c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7545be94-0d9a-4262-b1ce-49a8c3774870",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8cbee58c-7af1-4a12-bccd-d257c18506ed",
        "cursor": {
          "ref": "eb04c67a-a2f5-42cd-8d6e-28a5e4e41f88",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0498939d-a80e-4f6a-b309-d6a99eaade64"
        },
        "item": {
          "id": "8cbee58c-7af1-4a12-bccd-d257c18506ed",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "22097ebc-f1e7-4625-8f72-b2a43624a099",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "59a69e25-7830-47e6-833e-ed7e167b0a7e",
        "cursor": {
          "ref": "f948b969-7f36-4b37-bee5-405cb5dee987",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b91d1cbc-c35d-4707-8b15-50a14ca96bfd"
        },
        "item": {
          "id": "59a69e25-7830-47e6-833e-ed7e167b0a7e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f53afb8c-bfb0-483e-a3c2-1ce240a05b68",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a30bc8ac-b4c9-481a-ba8a-c6c546f2733a",
        "cursor": {
          "ref": "e71311a4-4c39-4a81-950b-d1b0cb8a56b2",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2150257c-5ebc-468f-9da7-a56311d37f3a"
        },
        "item": {
          "id": "a30bc8ac-b4c9-481a-ba8a-c6c546f2733a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3afd636e-b5e7-4abb-8a20-466a8e4b15f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ab8892-0c31-4d4e-9446-ff0d2c405533",
        "cursor": {
          "ref": "cd27d404-877f-4fc8-b7fb-9a65bd072858",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4493ac9d-b122-4ddf-bd79-9a2bd0f2044f"
        },
        "item": {
          "id": "92ab8892-0c31-4d4e-9446-ff0d2c405533",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fb5f08c5-d05f-4bf5-8729-cafe6d5b6157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696d04a1-9b53-4b01-a1bd-cd0922cdfc7b",
        "cursor": {
          "ref": "7829af8f-c95d-4c8e-94f8-3303a2af334b",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "65e479f0-7e11-46a2-9483-3cc442f7001d"
        },
        "item": {
          "id": "696d04a1-9b53-4b01-a1bd-cd0922cdfc7b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "82e67c5d-565d-47c7-9aa5-12b0b50112d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4757b48d-0771-423c-aeda-82b12fdfb64d",
        "cursor": {
          "ref": "621cf087-26f6-417c-8970-9ebe98320f37",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6ee35728-039b-4108-8dff-d5a32da4954f"
        },
        "item": {
          "id": "4757b48d-0771-423c-aeda-82b12fdfb64d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "efa91f14-509c-496d-a231-be379129f760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917eda0f-c34c-4b8d-816c-f78f8a52d0b1",
        "cursor": {
          "ref": "c57fe425-4814-482a-bdc2-c685cf31e9bf",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5bc674b8-02a5-4f96-abab-eac77e6e7132"
        },
        "item": {
          "id": "917eda0f-c34c-4b8d-816c-f78f8a52d0b1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8106854c-05c6-421f-aadc-b33275f1e09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887f356f-1067-43f2-a754-57e30578c69e",
        "cursor": {
          "ref": "9ec3049b-a353-4a5b-8a78-e5b21bbb1734",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5fecece0-0d28-4696-b7be-8b7c1e85f5c2"
        },
        "item": {
          "id": "887f356f-1067-43f2-a754-57e30578c69e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e06d9434-beef-4b74-bb24-72a772b31762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04418816-d509-461f-8c34-622221a24715",
        "cursor": {
          "ref": "a7c8dce4-35ed-4918-9091-e489ed1dae07",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "92cca183-61e1-414f-8a5f-c1ab19e9ce27"
        },
        "item": {
          "id": "04418816-d509-461f-8c34-622221a24715",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7d321304-5f62-4aee-a186-148e4beb4024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad7d549-4d70-4f61-ab22-cc53ffccd321",
        "cursor": {
          "ref": "a7ada484-fbbe-42b2-a70d-805185cc29e1",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3ee6cca9-963a-4871-9c8a-832e00ebbf87"
        },
        "item": {
          "id": "0ad7d549-4d70-4f61-ab22-cc53ffccd321",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9558b2cf-1b63-4fd9-855e-f2abb0290b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e1c61f-800c-4b4c-a9bc-979352872beb",
        "cursor": {
          "ref": "07a40c1b-fe7a-40b5-82a3-af57ee580c54",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cfb3a83b-ada4-4e2d-9e30-1f50145fd316"
        },
        "item": {
          "id": "c1e1c61f-800c-4b4c-a9bc-979352872beb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "16ac1772-c0ad-4634-9ec8-44daab1081d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4361b71f-fbc8-48c3-9d44-c550717be084",
        "cursor": {
          "ref": "a0bf3022-e96a-4434-acf0-4dec261042cf",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a7d3447c-2af9-4267-85f3-cd044a6280b3"
        },
        "item": {
          "id": "4361b71f-fbc8-48c3-9d44-c550717be084",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f351efaf-fb04-49ad-96f5-8b9d8277b917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c727c6bf-d353-4e41-b896-2ab036504233",
        "cursor": {
          "ref": "f6c440d0-29b2-4f16-a866-38837c576ea5",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c5eca0b4-a835-429f-8d47-46c093a508de"
        },
        "item": {
          "id": "c727c6bf-d353-4e41-b896-2ab036504233",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5a0b2a09-993c-4891-ada4-e3cf1261d1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97294c87-98e1-465a-ae20-783adfca25a4",
        "cursor": {
          "ref": "fb6eaeb4-4423-4799-998c-f303d9eaa224",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d01e887f-18a5-45ea-9359-4028d4898e38"
        },
        "item": {
          "id": "97294c87-98e1-465a-ae20-783adfca25a4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6fafcd76-d1dd-4d59-9b6b-046164470a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ca423d-412f-4f55-a937-9aa8056866e9",
        "cursor": {
          "ref": "e5457665-7190-4d7e-969c-6806fe1608fc",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "58bf0523-a9f0-4c2e-9126-4b3717e5f08f"
        },
        "item": {
          "id": "a8ca423d-412f-4f55-a937-9aa8056866e9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "76f5cbc7-6919-4a1a-a6fa-7d3c0e2af326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44af3693-9a81-4e2d-9448-e8ac05f91a55",
        "cursor": {
          "ref": "ff7ae65d-b45e-4d72-b005-cd55463fa515",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e12213a7-46df-4b29-abec-b365e1de6660"
        },
        "item": {
          "id": "44af3693-9a81-4e2d-9448-e8ac05f91a55",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b9890c37-0423-4045-be3f-2b3ee6512320",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c1b2bf46-bb26-4bd7-b151-9be48df3ffe8",
        "cursor": {
          "ref": "693f8801-9f06-4f9d-97e8-123f21d2d20a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "699443c3-dbac-46d5-9c13-7195d04cb5e2"
        },
        "item": {
          "id": "c1b2bf46-bb26-4bd7-b151-9be48df3ffe8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b7fda20-efc5-4271-850a-28a389419479",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8e1c88f8-6e9c-4ed1-819b-2200cc18fc1d",
        "cursor": {
          "ref": "cf76a1c6-d472-4e9c-82a0-785f78ac14ff",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "39810d2d-2f8c-401d-a2b5-db3211056d91"
        },
        "item": {
          "id": "8e1c88f8-6e9c-4ed1-819b-2200cc18fc1d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9d01640a-d2d4-4639-8a85-5d10a8ce479e",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7ec2ca46-3a50-4a4c-ad4a-0ba635cc75fe",
        "cursor": {
          "ref": "aee124a2-5895-45cd-9e8e-29bf52d4d624",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "df58e240-2de5-460c-9372-bebd395e3818"
        },
        "item": {
          "id": "7ec2ca46-3a50-4a4c-ad4a-0ba635cc75fe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5fb00bf8-b4ba-4d11-ae11-61dcb6901e45",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f444cccc-4e9d-45b6-8f72-9f25896e8f18",
        "cursor": {
          "ref": "0876863f-455b-453f-9481-f8e0f781c191",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c0318c8d-4288-4155-891f-45496079670a"
        },
        "item": {
          "id": "f444cccc-4e9d-45b6-8f72-9f25896e8f18",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "569918c6-974a-4aec-a64e-7835ed895773",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5f545780-472c-4979-a633-e51f2bf031de",
        "cursor": {
          "ref": "cba4f0ed-ea48-494f-b79d-fff5beed691a",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "83f160da-792e-4f74-9462-e5cb0608e8bf"
        },
        "item": {
          "id": "5f545780-472c-4979-a633-e51f2bf031de",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bb957e93-3ad9-4b39-9e63-4ad54e3ff269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57e4880-d574-4029-8fa7-c708f6c9c191",
        "cursor": {
          "ref": "add74685-431f-41d3-829f-cdddf51dd579",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "43df3bfc-723f-4c37-aa44-95fd8fd36836"
        },
        "item": {
          "id": "a57e4880-d574-4029-8fa7-c708f6c9c191",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "39d27c08-29e8-4f5d-89f6-1b20456883b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9683d509-157e-458d-a1b3-87418eec0913",
        "cursor": {
          "ref": "a67b2ccf-2f95-4ec0-bd59-2331b78836a8",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0d0abec0-03be-4e56-acb7-eac1956a85f7"
        },
        "item": {
          "id": "9683d509-157e-458d-a1b3-87418eec0913",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ed8c8dbf-869d-4071-aebc-ae60d7dc0109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afda22ac-897b-460f-ac9d-19536e917dba",
        "cursor": {
          "ref": "7662bb9f-15c2-4af8-95c2-6058e1588c4e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c77540b6-6d59-41ca-bfcd-068586e3fc2d"
        },
        "item": {
          "id": "afda22ac-897b-460f-ac9d-19536e917dba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fe4b55fe-5bf2-4e62-9457-0f53f8144629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a04603-4c40-40bf-aed0-487cb70e3aa1",
        "cursor": {
          "ref": "abf88110-87fd-42b8-924a-f9f69d7b297f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7f143043-c8fc-43bb-b0e4-8c3327f109a9"
        },
        "item": {
          "id": "71a04603-4c40-40bf-aed0-487cb70e3aa1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "600c5916-d81a-414f-badf-a8fd91a9cf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f9257b-37e5-485d-924e-1210b1b74f02",
        "cursor": {
          "ref": "3436307c-95c5-4b79-b6e2-4d503c65ed72",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8b895211-fdc6-41c5-a306-33675b062473"
        },
        "item": {
          "id": "b9f9257b-37e5-485d-924e-1210b1b74f02",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a3082c20-eb60-4d0d-8104-e6476b42a0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d50021-91e9-4131-a525-6050b5d5446c",
        "cursor": {
          "ref": "55543c14-7152-499d-b554-cde620fc80cc",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "81721bbb-bfaf-4a8c-92db-8081ccf965e0"
        },
        "item": {
          "id": "97d50021-91e9-4131-a525-6050b5d5446c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0596a2c7-9ccf-4e16-9792-69f22d7cf5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe7755d-bb1c-46c0-87e9-aafbe55be22d",
        "cursor": {
          "ref": "94352ba1-379e-47aa-b373-da2c1f89c6f7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "08f4e013-c382-4e5b-9535-490b2665f736"
        },
        "item": {
          "id": "7fe7755d-bb1c-46c0-87e9-aafbe55be22d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "22da092f-8c90-4d08-952e-d4c808a9878b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67534f52-a1ab-4784-8bde-1ba0d689c249",
        "cursor": {
          "ref": "c3d10df8-0ec4-4cbe-b173-e0f92f62e242",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f75eef08-516a-48c7-8a61-46687d269b66"
        },
        "item": {
          "id": "67534f52-a1ab-4784-8bde-1ba0d689c249",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f321dc36-df2b-40b4-993f-cdbb0b293312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9caa975d-4aad-42ff-ad44-7f022c9af3c9",
        "cursor": {
          "ref": "346888f5-1e3d-4878-8d79-280d15fcb7fa",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cfb43735-1058-44ad-bdc4-d6e103fe1525"
        },
        "item": {
          "id": "9caa975d-4aad-42ff-ad44-7f022c9af3c9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f8ce065b-247e-4dc1-b2e9-2e50010e5beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fed506e-48bb-4552-ac45-39c8de80c616",
        "cursor": {
          "ref": "fe6d443d-a1fb-4a65-a9b6-740da396b05d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8c5dab25-124c-4344-bee3-0c8c536a62ed"
        },
        "item": {
          "id": "3fed506e-48bb-4552-ac45-39c8de80c616",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9ac46eac-2bd4-4e89-831b-8b7d4a4c6433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9becc5b1-85b0-469c-934c-817d3f354da0",
        "cursor": {
          "ref": "9a6640b3-c1f4-416e-896e-0ba1e47d18f7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "90412dc8-7f30-456a-bf28-a1d08df85cfd"
        },
        "item": {
          "id": "9becc5b1-85b0-469c-934c-817d3f354da0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3ac801ce-e55e-4c26-8487-374ccfb2fc72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b242aa-108c-4972-9606-8cb265decb46",
        "cursor": {
          "ref": "3a3008ec-d682-43fd-8542-87334c85c61b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "08663910-9577-4265-8574-b5df2dd8ed9a"
        },
        "item": {
          "id": "c1b242aa-108c-4972-9606-8cb265decb46",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c66a7e27-7df8-4778-a0b9-7bbe36c7ae44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8849c110-5702-4356-9664-a73db90b3f15",
        "cursor": {
          "ref": "5501f3a9-7758-4dea-93c3-eb0ccd7f0036",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f14a1a01-233a-48f3-9e2c-b8ba7ae9ccaf"
        },
        "item": {
          "id": "8849c110-5702-4356-9664-a73db90b3f15",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e184511e-7fdd-4ba5-8736-80a45c68e995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b440086-d6b1-460b-9c24-dd4342618304",
        "cursor": {
          "ref": "258518e6-e6c7-41d5-9104-15cf37a0f364",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad1c7cb1-4942-44a5-bfae-d1bec3d818db"
        },
        "item": {
          "id": "8b440086-d6b1-460b-9c24-dd4342618304",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "53c2dba2-dcba-4639-a457-a2e3db1c3edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d49f71d-064a-42a0-9ec5-ace9ac8e427f",
        "cursor": {
          "ref": "21055781-685d-4083-8437-e4af5066a653",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f54654cb-bac9-4863-ad6a-aed8eb6f639a"
        },
        "item": {
          "id": "3d49f71d-064a-42a0-9ec5-ace9ac8e427f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ac77f8a0-7e3a-4acf-8872-d124e65ed30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4a6385-6f04-464e-a0a1-6ec6b2daee5e",
        "cursor": {
          "ref": "5031503a-521f-48cf-aa4d-f9d93453e32c",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be749107-70d8-4e0a-9280-2c9733ccb7d1"
        },
        "item": {
          "id": "fd4a6385-6f04-464e-a0a1-6ec6b2daee5e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8c4725f3-fac2-426a-908e-e16a299d34de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6709283d-4b58-4010-aa21-b16d77f00fcd",
        "cursor": {
          "ref": "8a772837-c7ef-4f88-88d8-7d2b474db70a",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5b2a17c6-007e-4c63-95f3-e938feba7ec5"
        },
        "item": {
          "id": "6709283d-4b58-4010-aa21-b16d77f00fcd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4c2163f5-3ade-4e24-aa40-4d03958e28df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb68eae-0d92-4814-b01e-e8aa998bb60b",
        "cursor": {
          "ref": "f152793e-db43-49b9-afbd-7845ea948066",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ff169de2-e5bb-4a99-887e-11107797b66c"
        },
        "item": {
          "id": "fcb68eae-0d92-4814-b01e-e8aa998bb60b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f6374e60-f791-49b5-b98f-89f4288cba99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9eaea5-c2f8-4e04-b56e-2a0e3aa20e2d",
        "cursor": {
          "ref": "153d11d8-ddb4-4462-9ecb-4385a1bc86ad",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "80acd872-e059-4144-a020-e0bab39d5233"
        },
        "item": {
          "id": "0d9eaea5-c2f8-4e04-b56e-2a0e3aa20e2d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "42d2a288-3fed-4bf9-b9a5-d0b197f61828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9601932-2ff2-42d6-89a6-a0cd9c42da15",
        "cursor": {
          "ref": "9e9e821e-519b-47e6-b996-bbb4851cf78f",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "70a8c87e-7a67-4fc5-9bd4-15c147394cf5"
        },
        "item": {
          "id": "a9601932-2ff2-42d6-89a6-a0cd9c42da15",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f850ecb2-a5cd-424c-a1b6-661af16920c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eaf2cb-2cc8-448c-b4f7-9478920a2764",
        "cursor": {
          "ref": "826ef431-a6ca-451a-ad17-92d9a6de305a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a56d3ec1-0ed7-4c0c-a603-178de9cf0fbe"
        },
        "item": {
          "id": "c9eaf2cb-2cc8-448c-b4f7-9478920a2764",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "67122ca1-17c6-45e2-a3f9-7ba41d9c57c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db60723f-8db5-4e00-a1cd-d7b76a4d62d7",
        "cursor": {
          "ref": "d9a011d3-1999-4e48-8e77-50ed44a0609d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8ce26cdb-fa32-4edf-be82-581c9aa84ac3"
        },
        "item": {
          "id": "db60723f-8db5-4e00-a1cd-d7b76a4d62d7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8a7c72fe-ab48-4982-b18c-3044be8ca873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edadcfea-f3c8-4670-9452-377987fc12ec",
        "cursor": {
          "ref": "5397c140-aeeb-451c-81e4-5a7fa5be4fdb",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a377f9e0-d591-4f6a-86d8-2d38ac29d31d"
        },
        "item": {
          "id": "edadcfea-f3c8-4670-9452-377987fc12ec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6be49bc1-e309-4ae2-a485-18fe90774120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b39fc2-3c5c-4bff-9b1c-179270171175",
        "cursor": {
          "ref": "22fa3a39-443b-4fd7-b8fb-1732ac68c4a5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d19c65c3-d58b-400e-9481-5387ba1541e9"
        },
        "item": {
          "id": "87b39fc2-3c5c-4bff-9b1c-179270171175",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6efb7b9f-b270-4d40-9844-087add5cffc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147454ad-21c2-449a-b19a-92cea886d5a8",
        "cursor": {
          "ref": "9b3b98a7-1471-49e7-9b3e-17012236d89d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "98074d2d-a88a-4175-a6bb-c025b04cfe76"
        },
        "item": {
          "id": "147454ad-21c2-449a-b19a-92cea886d5a8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a23ae5b9-274e-402a-954f-7ca6dc500067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6825175a-d3f3-4841-9244-c05499135f50",
        "cursor": {
          "ref": "a4cdbbb6-97ab-456f-8440-3fc98177fe41",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0fefaf47-bf7b-4caa-af62-ac7328ab9ac4"
        },
        "item": {
          "id": "6825175a-d3f3-4841-9244-c05499135f50",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e7ddb18f-ec05-4943-8ee8-2dcc86fe5bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff46b4e-87a3-41ce-a1b5-2faafd863bf5",
        "cursor": {
          "ref": "fc25f080-ce0c-4891-a7ba-634a6a7dedc4",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "95f5950f-2b25-41e2-a6e3-f6bee162d053"
        },
        "item": {
          "id": "eff46b4e-87a3-41ce-a1b5-2faafd863bf5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "14c0c10e-56a8-47e4-a036-778963f2f76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba53a706-94b7-4290-ac07-0496080a92c0",
        "cursor": {
          "ref": "96f1cc3d-ab94-4db8-bd9a-1bc4283ca3ba",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "23c4cd60-2ddd-4028-b5d1-b07544682ff9"
        },
        "item": {
          "id": "ba53a706-94b7-4290-ac07-0496080a92c0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4e39ebb7-573b-4b54-bbe0-fac1d16560fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e80344-db4f-409a-a8ea-4c5732063c86",
        "cursor": {
          "ref": "116d1397-d448-4ded-bf54-1401a7c4de95",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "25a66494-8334-4ea9-984b-c7a868f63e58"
        },
        "item": {
          "id": "b6e80344-db4f-409a-a8ea-4c5732063c86",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "588ba8a4-163b-4960-a60b-3ebff1216601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e0425-966a-4a04-9426-e5abcec4f93e",
        "cursor": {
          "ref": "0d574988-78fc-42c7-b671-a621f0cc8e6c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "42f3c879-f972-4e83-bb40-bf6a69155201"
        },
        "item": {
          "id": "813e0425-966a-4a04-9426-e5abcec4f93e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4f5a66e7-0752-4889-8e67-2ffad6fcdf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0005779-be9e-457e-95fd-079163ce2379",
        "cursor": {
          "ref": "a12e17bd-2774-4aa7-bc43-be7113cc3212",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "618ffb34-0b9d-4c75-ab31-3253eac1c26a"
        },
        "item": {
          "id": "f0005779-be9e-457e-95fd-079163ce2379",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e1f356d9-624c-4443-bba5-ccf09eb02fd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c5f5e9-1840-4059-91e4-e293dd5dd65f",
        "cursor": {
          "ref": "2efe5af5-0943-40e3-a9ee-10f0fe587fad",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9ac72fa3-38a3-498c-90da-b2e048b62d23"
        },
        "item": {
          "id": "81c5f5e9-1840-4059-91e4-e293dd5dd65f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c0003bbc-e4b6-4e5a-87d8-6bd13a1f1b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d2a7b1e8-277e-4cbe-b774-727a24836c1c",
        "cursor": {
          "ref": "631de71f-f226-4b8a-8157-657c173a72cc",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "81a6ba2a-ef9f-41cd-9f4e-5a55b532b88e"
        },
        "item": {
          "id": "d2a7b1e8-277e-4cbe-b774-727a24836c1c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e32cf7ab-8d14-4851-aa09-6b40379b744a",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "83474aa0-1164-4d75-a3a8-e5e1ea635eec",
        "cursor": {
          "ref": "bae9e6c8-2847-4ecb-9abe-31d452b378fe",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "643d7ed5-89c0-42e1-9409-a58a9d6cda58"
        },
        "item": {
          "id": "83474aa0-1164-4d75-a3a8-e5e1ea635eec",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "963346d0-1225-4674-9dcf-297a5e243a90",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6a38be-e281-4d59-9252-e9a6c1b88e4c",
        "cursor": {
          "ref": "72f92995-7436-4aca-8ed6-054c2cb66ddb",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c01687b1-e55e-4ea6-a3c3-3a6968896798"
        },
        "item": {
          "id": "bd6a38be-e281-4d59-9252-e9a6c1b88e4c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e92b9548-bb3f-4b57-b87a-355bd4020e36",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e6216f-d673-456f-8115-55c0b3a8271d",
        "cursor": {
          "ref": "20cbc698-9c7d-4870-9836-fcc1220f3efd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "234856e7-0bee-460b-a025-0bf449d59a70"
        },
        "item": {
          "id": "a5e6216f-d673-456f-8115-55c0b3a8271d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "398ff8c5-67c0-48dd-9606-68749bf097a5",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40901cc6-c7e8-405a-b3ed-ff1919a9cf7c",
        "cursor": {
          "ref": "50fb82b6-d8b1-4baa-b813-46c005b9e215",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "223e847a-304e-4686-9c98-e67d8c80d1a2"
        },
        "item": {
          "id": "40901cc6-c7e8-405a-b3ed-ff1919a9cf7c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d96b6534-e7f9-4133-bd29-5404181df8c5",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-06T00:37:01.397Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-06T00:37:01.397Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c9a0aec7-57eb-4881-a3ab-7b10be0283ae",
        "cursor": {
          "ref": "c67095ad-d68e-4413-834a-72032baa2743",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "abd775fa-9e02-49f1-ae15-8f48fc6845cc"
        },
        "item": {
          "id": "c9a0aec7-57eb-4881-a3ab-7b10be0283ae",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "61bdbaae-a06f-4aa9-8b21-38427e49f10e",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78561ee-cf4f-4fd8-8b8a-3ab9ac9003e6",
        "cursor": {
          "ref": "c1db872e-66c0-482b-9f8b-85876c2481fe",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c7bab3c9-94ac-4629-afca-9c462d0114d3"
        },
        "item": {
          "id": "b78561ee-cf4f-4fd8-8b8a-3ab9ac9003e6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae01de62-dffa-44ab-9eb0-a8478738cde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e5ff21-71f1-4020-b48f-0f327154e34c",
        "cursor": {
          "ref": "878e5ef6-9a54-46d5-bd03-6326ab6cf872",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a65907d6-5d54-4761-b0a1-c3a1bc049055"
        },
        "item": {
          "id": "39e5ff21-71f1-4020-b48f-0f327154e34c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6485e9da-3a39-4254-b692-bbc2b7ae35d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0420d8-41df-446f-bd97-13aa39baab4f",
        "cursor": {
          "ref": "89d0ab8e-da25-4023-9bfb-d1937f0155df",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7574c535-dc3c-4cbc-a0be-89c3728ccd0b"
        },
        "item": {
          "id": "5c0420d8-41df-446f-bd97-13aa39baab4f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b361095d-5be5-40ee-8a49-fd7c4903aee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcf33d6-7ea4-412a-8077-503fe9492474",
        "cursor": {
          "ref": "238d2831-05de-4a4f-b1b0-6e3383de065c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4667014e-118f-4c20-ba66-f9f8de0eb90b"
        },
        "item": {
          "id": "9bcf33d6-7ea4-412a-8077-503fe9492474",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ad5162a6-a4f5-4e54-bff6-847cb151281c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f446b3-305e-4ed9-8e7d-a7cd5b35232c",
        "cursor": {
          "ref": "d18e9854-4136-4603-a4c7-0be67347ba1c",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "02f9585a-9caa-4c5b-bf5f-5b1134dea00a"
        },
        "item": {
          "id": "05f446b3-305e-4ed9-8e7d-a7cd5b35232c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0e6a44c2-ab3d-49fd-85a0-d783dfde1b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94251a-5a3f-4119-8717-a978575478a3",
        "cursor": {
          "ref": "1af5ca19-84db-45d2-9182-39102683480a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a7072b01-9844-40a4-9caa-35c3cb4bde80"
        },
        "item": {
          "id": "df94251a-5a3f-4119-8717-a978575478a3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b3dbc71c-c712-40f8-b712-1016a9543d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40a6444-5fe5-4c35-93b3-08598c392397",
        "cursor": {
          "ref": "54ccfe43-9900-40c4-b108-0283febd68ea",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c7f338c3-e9bc-4225-8e2e-c6126c1f8346"
        },
        "item": {
          "id": "d40a6444-5fe5-4c35-93b3-08598c392397",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7799e689-48aa-4b95-826c-832637e447fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7d2c7a-e391-487d-bc81-95064285647e",
        "cursor": {
          "ref": "3ddbc603-dbeb-47c8-ab22-0a61639efe72",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "55b713d9-5be3-4282-9904-3f99c76ee9e6"
        },
        "item": {
          "id": "3b7d2c7a-e391-487d-bc81-95064285647e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c72e0d2d-c0f9-44b1-9c44-17e5c265e574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324fab0f-fd94-4c8a-bc95-ceeb3cd8d0ef",
        "cursor": {
          "ref": "6d8183b7-7580-4d75-b6e5-10463d175092",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ca33fc4d-f56a-42b7-bcdb-bdb05838e4df"
        },
        "item": {
          "id": "324fab0f-fd94-4c8a-bc95-ceeb3cd8d0ef",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3ceeae7e-7f2e-4928-8a52-d810c6438eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9609b11c-1a3f-4d8b-ae51-f6385969555c",
        "cursor": {
          "ref": "ebf34718-2208-4aea-a0e1-a45eebdec526",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4ed89ec8-f811-4913-a40a-b6781d4307a4"
        },
        "item": {
          "id": "9609b11c-1a3f-4d8b-ae51-f6385969555c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "09256eec-cca1-4b9d-b4b6-042c20e78682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650d7bb9-8d3d-4925-a9ed-5e2aa26f8abc",
        "cursor": {
          "ref": "7ebf6fb1-c87e-4830-be09-2bbd0d776580",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f67573bf-fbe9-44db-ab09-5a5361b94448"
        },
        "item": {
          "id": "650d7bb9-8d3d-4925-a9ed-5e2aa26f8abc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e42002d5-ad03-4573-8751-231212990203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca68a38-19d5-4dcd-9c6d-e199b00c266c",
        "cursor": {
          "ref": "544b2c40-47ac-4b6e-a531-b60be21bbb98",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "08df437e-c81b-4c82-8d04-fbc37c8b6c11"
        },
        "item": {
          "id": "bca68a38-19d5-4dcd-9c6d-e199b00c266c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "de76d20e-bffe-455a-8a71-9509f0ea6034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c6a70e3-ad6d-4acc-a3c4-12787111125a",
        "cursor": {
          "ref": "faa79039-3076-45e2-8f3c-fa4ba3a88b0a",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "63891691-0ba0-4fa4-8455-8c03ce89554b"
        },
        "item": {
          "id": "4c6a70e3-ad6d-4acc-a3c4-12787111125a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "44886efa-cece-4843-b9bc-875210c2cc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73e82de-c809-43d8-ab30-40dc7d147cd8",
        "cursor": {
          "ref": "bfe30341-c95a-4e8a-96a9-b370fe738524",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7fe7ee9b-4375-4648-a9ba-b076c158ef5b"
        },
        "item": {
          "id": "a73e82de-c809-43d8-ab30-40dc7d147cd8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e4b73741-e8bc-4144-9a8c-e3910f4d83e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "4cf381d5-ddeb-435c-b75c-28ac4e0cb6a8",
        "cursor": {
          "ref": "b379a55d-633d-408f-ae50-48127e793992",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d9c439b1-de12-411d-a998-5e09d97bf799"
        },
        "item": {
          "id": "4cf381d5-ddeb-435c-b75c-28ac4e0cb6a8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e2f89705-2f47-40b5-bf60-cf8578105280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2de18d9-a055-47a7-b094-03e3c8f0cae4",
        "cursor": {
          "ref": "45d08628-0c7c-4a51-b1ad-7f48ca5d180b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fa9991c3-8a90-4935-a59a-9831ef96a51b"
        },
        "item": {
          "id": "f2de18d9-a055-47a7-b094-03e3c8f0cae4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ff3cd088-daeb-4641-9423-0d1540eef63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf838b1-5a87-4560-bfdb-52903f74cde2",
        "cursor": {
          "ref": "3c92e7b5-8b07-4d4a-a019-2dc051a8a4c8",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8097d607-71d4-4643-8530-12a13223b482"
        },
        "item": {
          "id": "5bf838b1-5a87-4560-bfdb-52903f74cde2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ab86150b-a91a-4e8a-af63-8d06014ec48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2037c5-9628-4782-b152-d7a99eab7124",
        "cursor": {
          "ref": "6e71779e-1e6c-49c8-8036-b224fe7fa0e1",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3b2fa6d1-e8fe-4eb8-b513-9c135cb97664"
        },
        "item": {
          "id": "fc2037c5-9628-4782-b152-d7a99eab7124",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "aec6d21a-9da3-4c43-bad9-cc00f9f5001a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd79dd6-1c42-443c-a105-85a6b50f7ea0",
        "cursor": {
          "ref": "fc2bdee7-61cb-4cdb-8c59-8adef43c9ea0",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ad73a3d2-f2a5-4253-bf0f-87625b69bd48"
        },
        "item": {
          "id": "3dd79dd6-1c42-443c-a105-85a6b50f7ea0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d12a811b-697d-44f4-b80d-08a8d8705cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e05ede-3fa4-4e53-9263-30d1c855fb80",
        "cursor": {
          "ref": "67cbcd5b-d50e-4504-9165-882155552cf4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f2ee2611-e051-4321-bc9a-b4fcae2929a0"
        },
        "item": {
          "id": "d0e05ede-3fa4-4e53-9263-30d1c855fb80",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "84115345-f49a-4be4-9fa9-645faca4769f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60ddda3-fd75-4ead-97c1-0a4d0dac111b",
        "cursor": {
          "ref": "59874220-2583-41a2-b130-4b26a21293be",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dcab4062-5d1a-4bba-bca3-180e2790cb1a"
        },
        "item": {
          "id": "b60ddda3-fd75-4ead-97c1-0a4d0dac111b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b293f25-f6e8-4b6e-84a2-beed6f5b7fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5306c7-3ca1-4a00-bd6f-204acb1c4eb9",
        "cursor": {
          "ref": "ab0a363c-8475-49c7-9594-21d154531dbf",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d95b1446-066f-43d5-b7d6-0ff566c8e1ac"
        },
        "item": {
          "id": "3c5306c7-3ca1-4a00-bd6f-204acb1c4eb9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e7ba24b1-6ae4-4b0e-b086-c7c3e4218e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da22dddf-b3d7-4851-a84b-6f0e0393bf02",
        "cursor": {
          "ref": "d25aca44-e42e-401a-825c-08238a0fe366",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "97df2274-1e2e-4b0e-a5d1-aa22d9c69206"
        },
        "item": {
          "id": "da22dddf-b3d7-4851-a84b-6f0e0393bf02",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "465790c1-46b5-479f-8563-2b832f087d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c942b1d-8d86-42a2-9385-e267ea4e7819",
        "cursor": {
          "ref": "d726ddc1-3f25-4ec0-a43f-1f6bf6112d8c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d8428f89-9039-445f-bd8e-862cd131e20d"
        },
        "item": {
          "id": "2c942b1d-8d86-42a2-9385-e267ea4e7819",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "641e6fc8-037d-43bc-a5d0-6b77ae2c6a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd45ff2c-19e6-4f8d-90ac-c82411e23455",
        "cursor": {
          "ref": "aa7d36e9-c727-407c-b7fa-c3bc09444f40",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4e9d12d9-cc13-48e4-9c07-a3ee7dfc3cac"
        },
        "item": {
          "id": "fd45ff2c-19e6-4f8d-90ac-c82411e23455",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8e983f16-b9fb-48cd-a11b-f7bc1831da60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b79ad01-522e-4ed6-92d5-4676be8fbf68",
        "cursor": {
          "ref": "f2d4ed7f-091c-46b8-871f-3b7b92580082",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "03c46cb7-e62b-49b5-b0e0-b69f8b4eaee2"
        },
        "item": {
          "id": "0b79ad01-522e-4ed6-92d5-4676be8fbf68",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "440cf777-d98f-4899-8172-2d31d97c4b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada31058-36da-4483-a71e-45695dc1f032",
        "cursor": {
          "ref": "15a795a5-d91d-4514-b1d9-53db8167e0ca",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "db10f2e0-dc0f-4b8f-a4cb-8bc9d7c0002b"
        },
        "item": {
          "id": "ada31058-36da-4483-a71e-45695dc1f032",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5af1ba2d-03c7-4f2c-a09f-2a7460f6d47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2857762-3108-4a3a-857e-da791d2cd531",
        "cursor": {
          "ref": "144f60f0-e3b2-4df5-8dd7-c2d262e73347",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "68c0e4ad-954b-4027-8dcb-25a95c97208e"
        },
        "item": {
          "id": "e2857762-3108-4a3a-857e-da791d2cd531",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c3649cf0-2b1f-46a4-ae05-9f9d9e3aa15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce3be42-a486-4cdc-9460-65835f8196b0",
        "cursor": {
          "ref": "30bdc13f-8f0f-45ab-b8bf-087d987f472d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9f35ca51-430e-4feb-92bf-020c94eb0542"
        },
        "item": {
          "id": "bce3be42-a486-4cdc-9460-65835f8196b0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8b43f14b-9281-46b7-a46e-e6a2c29bed37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b6333a-06bb-4c0f-ac64-85e6d19316af",
        "cursor": {
          "ref": "d6baaee2-7819-45ca-a1cf-de2d2376d0fc",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2974106a-2eb7-4dc7-af2b-a434305b7ba3"
        },
        "item": {
          "id": "41b6333a-06bb-4c0f-ac64-85e6d19316af",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9f433ae8-c02e-4a90-9e15-eb91cf97dc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926619d6-7ce1-42a7-8eea-3537669a0809",
        "cursor": {
          "ref": "ade2136d-0505-4a4e-a706-0763954b431a",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "06b735f4-7df1-499d-b1bc-c6edea2698f6"
        },
        "item": {
          "id": "926619d6-7ce1-42a7-8eea-3537669a0809",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7e9651cb-d1c3-4bf1-908d-729901c8a26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d750eb56-7c3c-41c2-b1bf-121d01a0d11c",
        "cursor": {
          "ref": "8ea93473-3eab-45a3-bdda-9d2832d53465",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "65790699-005a-43bb-8576-0808feeec899"
        },
        "item": {
          "id": "d750eb56-7c3c-41c2-b1bf-121d01a0d11c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f4a14fe1-6534-4cdb-aad4-503de6cd951e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ed7907-43e8-4d44-8593-8feda16e13fe",
        "cursor": {
          "ref": "e5bafcb9-ada5-45cb-aa91-265b0548421e",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c9f90e27-41c6-4657-8cf3-03cc89e35d9c"
        },
        "item": {
          "id": "e5ed7907-43e8-4d44-8593-8feda16e13fe",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d2839ab9-80e4-4e91-af34-ee50f1152b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0248ded-6234-44f8-9963-338308f81efa",
        "cursor": {
          "ref": "80b9086e-fc7a-43df-a46c-7987e84e9652",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1489c19-effd-4f6d-96d8-dc4e37ea59c8"
        },
        "item": {
          "id": "f0248ded-6234-44f8-9963-338308f81efa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cd305719-6259-407a-a7db-73d78ef15a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c475e5-7be8-4122-ac76-4a597c65f88d",
        "cursor": {
          "ref": "9727f321-f4e5-4ac1-9b6f-62896dcf102a",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d8da29db-66d1-4503-8b93-b7ad7089bb35"
        },
        "item": {
          "id": "80c475e5-7be8-4122-ac76-4a597c65f88d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "24a1dca7-4a02-4572-8aca-002d95e6e4b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756201f5-cf49-46af-9aac-702cc8605d63",
        "cursor": {
          "ref": "877f027c-466a-41b6-9da4-ba1aaf6108ec",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86589705-ce97-4d6c-8649-2f2b7c1e7d44"
        },
        "item": {
          "id": "756201f5-cf49-46af-9aac-702cc8605d63",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d75f3cbb-b371-4ff7-8e29-0c09d6939f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d153a2-4c77-48a4-9656-9fb89ee5fb0b",
        "cursor": {
          "ref": "c2f025fd-4a45-42c1-b10b-5e6e142b0eb8",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "169a3fab-f274-460f-8be2-8b663a277921"
        },
        "item": {
          "id": "60d153a2-4c77-48a4-9656-9fb89ee5fb0b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f73958c8-b547-468e-91e4-b356daf6e53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4afbc307-79d8-4ebe-86f1-4611b9b3aa11",
        "cursor": {
          "ref": "f3e4e2d8-4ae8-4524-a6be-085e33ee824d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a74558b4-4057-4959-9851-b26370c914c4"
        },
        "item": {
          "id": "4afbc307-79d8-4ebe-86f1-4611b9b3aa11",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a214ff0-2640-46dc-ae60-0b3591817521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2e472a-1ace-4c00-aa21-837da8b7c47c",
        "cursor": {
          "ref": "7d2a9ff2-34d8-457d-ad88-4ed6b3f06efc",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e8e91cef-ed55-4cb3-a600-cc044d53ff38"
        },
        "item": {
          "id": "9c2e472a-1ace-4c00-aa21-837da8b7c47c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66d1861e-1dd6-49c8-b08a-5a7aac1bac6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857b92f4-119e-4d7a-bc6a-d7ddb3a4cc13",
        "cursor": {
          "ref": "13209632-4050-41e3-88d6-6de33558f720",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "44080eb3-a27b-4130-be29-750f66b0ee5d"
        },
        "item": {
          "id": "857b92f4-119e-4d7a-bc6a-d7ddb3a4cc13",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cf8df9e8-6657-4c37-87a2-595443485b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f046941-8712-4a97-b260-32a69fa2f2f2",
        "cursor": {
          "ref": "968c52c3-678b-48a4-83db-35addc354ae8",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e4384763-ace5-4667-acc1-cd4a2368d662"
        },
        "item": {
          "id": "0f046941-8712-4a97-b260-32a69fa2f2f2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "32a127dd-2914-4160-8759-be45859644c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07911e9b-fa04-4ce7-adfa-70031f81be32",
        "cursor": {
          "ref": "f2f76579-e0b9-4951-af3c-8065cb105afe",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cc51f60f-5283-43a6-9b80-30b0e10e6d47"
        },
        "item": {
          "id": "07911e9b-fa04-4ce7-adfa-70031f81be32",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "329ce7ad-7e30-4548-8bf2-56ed308e6549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa451587-3ed3-4be3-a383-092e78aec455",
        "cursor": {
          "ref": "076cc316-abe1-4db5-ad9e-d2776e7a6dea",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f847d447-1273-464d-a3aa-091bb04a7032"
        },
        "item": {
          "id": "fa451587-3ed3-4be3-a383-092e78aec455",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "525f2fb4-a153-42f3-b3bb-54d285594db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5093cd-b569-475a-9b8f-b97e3ecddc09",
        "cursor": {
          "ref": "7e317d20-48b5-4b30-aada-823837cf615e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6136fa4-fca0-45f7-855b-8df3200877c4"
        },
        "item": {
          "id": "8f5093cd-b569-475a-9b8f-b97e3ecddc09",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "24a685c4-5c54-4f4c-9854-c7583b1f30cc",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c6faafea-afcd-4c0d-a32e-c5dbaa46a728",
        "cursor": {
          "ref": "28b44f1d-e576-4ccf-91b6-14da17e0dc5b",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bcfdfbe9-37cd-4630-8da7-4dd713be6367"
        },
        "item": {
          "id": "c6faafea-afcd-4c0d-a32e-c5dbaa46a728",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "21a18ec2-c4af-4f1b-b9d3-7eda756ba39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf44f6b7-d99f-48e1-be26-057169fee71c",
        "cursor": {
          "ref": "4679d7c1-67d4-4bbb-936a-ca794d63d06a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "03bd9760-f1e7-401d-ad56-a89cdeabf4b4"
        },
        "item": {
          "id": "bf44f6b7-d99f-48e1-be26-057169fee71c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f7449c6a-d583-4bb9-818e-cf2f840761da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9100d43-6999-4193-8423-d561cddefd4f",
        "cursor": {
          "ref": "d62f6fb4-32d8-4d23-bf5f-aa612326ec9a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6425a06d-76c8-4fc8-b27a-ae86d65491b8"
        },
        "item": {
          "id": "f9100d43-6999-4193-8423-d561cddefd4f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cf573f1f-e75f-4cde-a567-50a996ec3317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554a50a5-0733-4108-9e00-0a1830fddf36",
        "cursor": {
          "ref": "b177a569-1ac6-4b4c-abe9-9212c8725d64",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "97b5e432-ffdb-4246-a1bb-c919de2b9dfb"
        },
        "item": {
          "id": "554a50a5-0733-4108-9e00-0a1830fddf36",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "461b47f0-8c31-4a4f-859e-e7e9b2bd8580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfef3473-9b99-4b13-9f2b-868bec9da404",
        "cursor": {
          "ref": "9d4ac331-3448-47d9-b4e8-e3058257c416",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7b017f4c-0958-4c65-b8fd-bc4fc8129c53"
        },
        "item": {
          "id": "bfef3473-9b99-4b13-9f2b-868bec9da404",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5759c2cd-4f02-446d-98fd-c2c38ee29138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f45556b-c877-4ade-a43b-324e633536f0",
        "cursor": {
          "ref": "f4a50bbf-787b-485f-99d9-4d34763b3a23",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ca88db00-1a72-414d-b55a-ddb44652f1bb"
        },
        "item": {
          "id": "2f45556b-c877-4ade-a43b-324e633536f0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7f507eb7-49ac-4a05-ac0f-5a05f9f13c98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1918e513-b256-45a3-a1ae-53803695cc6d",
        "cursor": {
          "ref": "23fc2cac-bc88-495a-9640-6bcad1bed7b4",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7152e4e6-d642-4728-bdb1-c6ebb2ebb7da"
        },
        "item": {
          "id": "1918e513-b256-45a3-a1ae-53803695cc6d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0efdf5c7-63a8-46ba-b047-20883f7c9bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b09aef3-d582-49a0-942e-d6e0230ee9d8",
        "cursor": {
          "ref": "02d8e4da-a3c6-4fa5-bc73-f6feb39af28a",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fa31bde5-0215-4361-98ce-6ee403b3bb6a"
        },
        "item": {
          "id": "8b09aef3-d582-49a0-942e-d6e0230ee9d8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b446b9f7-39c7-40bf-945d-b7c07ebd872e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97336f0-773c-4036-be75-6478ad7d7e28",
        "cursor": {
          "ref": "7c127751-f12f-48f3-b9ae-9039c0223e67",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "06b2dd54-0b04-4e43-a6ea-41d3419d6dd7"
        },
        "item": {
          "id": "c97336f0-773c-4036-be75-6478ad7d7e28",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c4e38272-982b-4434-8f6e-cbc9e4d9e873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2d3008-4893-4de7-b7c9-d8526e5beb85",
        "cursor": {
          "ref": "b77074c0-e9ee-4015-a994-2f48c6b097c7",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8913c993-3f42-4983-bc4b-6cf9a45a3d52"
        },
        "item": {
          "id": "1e2d3008-4893-4de7-b7c9-d8526e5beb85",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c0f54c66-2520-46cb-b88a-3559394ce8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808b09eb-1ca3-4de5-95cc-4f657a182ce9",
        "cursor": {
          "ref": "e34c32c7-10bd-4ad8-9be3-ab40719fafe4",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "73538bc1-2f15-4235-a60d-b2ef65180905"
        },
        "item": {
          "id": "808b09eb-1ca3-4de5-95cc-4f657a182ce9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c28fa106-d6ac-4f3b-b135-e9aeb7221b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee29ef1-7777-40ee-b61e-b06848ea15ad",
        "cursor": {
          "ref": "ea4b1c57-2ee9-45c2-b8bd-f6337a5ca05a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "fe0e3d35-3f23-4f0a-bd35-b8a78cc10975"
        },
        "item": {
          "id": "5ee29ef1-7777-40ee-b61e-b06848ea15ad",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d271e505-d948-4def-8a9b-f67884b5c869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fcb0e7e-2be0-4ab5-ad17-e74eccc0445c",
        "cursor": {
          "ref": "5a2051b2-9f83-42ec-a19c-4ef300ac7cc9",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "03f5849c-61e7-4f7f-9f54-0540869bb179"
        },
        "item": {
          "id": "7fcb0e7e-2be0-4ab5-ad17-e74eccc0445c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3369711f-6b65-4d23-acde-5efd7edfefe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a80e27c-5f90-4e73-84f5-143783ffc161",
        "cursor": {
          "ref": "945b4f26-51bb-4567-835f-facf63d92963",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4aa0a269-3e66-4ee8-9a16-ed3b3b44cea4"
        },
        "item": {
          "id": "6a80e27c-5f90-4e73-84f5-143783ffc161",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1eca3f02-5b7d-4ff1-b613-c9995621402e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f407208-e243-4b88-9e2b-8a76b9bd7f66",
        "cursor": {
          "ref": "3b40ddf9-bb6d-4151-b2b1-84bf0718ba19",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f4b92ac7-dfe3-40a4-b06d-b1f662d85eb4"
        },
        "item": {
          "id": "3f407208-e243-4b88-9e2b-8a76b9bd7f66",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "94abb4e1-8d30-4b27-909f-009399ccee08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4688864f-d912-4c18-bd12-a4c0658599ea",
        "cursor": {
          "ref": "e095dc7f-5d04-48cb-9595-2965a0b5d9c3",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "49080d2b-8137-438a-9f72-817b975c2749"
        },
        "item": {
          "id": "4688864f-d912-4c18-bd12-a4c0658599ea",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a702754a-6762-4490-a688-eb2160e72c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48b9df0-c539-43a4-a2ea-e11c3393c0dd",
        "cursor": {
          "ref": "be87a150-414a-4a44-bc4e-6e291f938a38",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0e5d69b0-11bf-4b9b-bb64-fee7a16693d1"
        },
        "item": {
          "id": "e48b9df0-c539-43a4-a2ea-e11c3393c0dd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5ca755ab-e770-491b-9103-2165d6557b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed4f2e6-afb6-4ca9-b547-fd84e49706cf",
        "cursor": {
          "ref": "43b06382-7743-4af5-acf7-0552e723a42c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c929105c-c62c-4362-9fa3-195b838ecff7"
        },
        "item": {
          "id": "1ed4f2e6-afb6-4ca9-b547-fd84e49706cf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5749772a-6799-4bff-81b5-ef7c23d1551f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3f2de6-8533-4be0-af92-1af87d0b3841",
        "cursor": {
          "ref": "20becf4e-7db0-4448-95d6-660f799332ed",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5713bd4a-1269-479e-b938-4e1609929c3c"
        },
        "item": {
          "id": "2e3f2de6-8533-4be0-af92-1af87d0b3841",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2247825d-2047-4a0a-ad1b-0c2ff9ad9e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc62ab96-b657-4734-b7ee-bb59bd3b9a72",
        "cursor": {
          "ref": "7f69a2c9-1ec8-4ce0-8812-a842771b2181",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "529b46eb-ac56-47dc-8385-1633e5333d64"
        },
        "item": {
          "id": "cc62ab96-b657-4734-b7ee-bb59bd3b9a72",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2aef3bd0-ed9d-4d0b-99bc-87e7466e38ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48787ed-10a5-40ca-87bf-a37a1d8a2f69",
        "cursor": {
          "ref": "3c663ae6-dc99-44e8-9551-13ecd67addad",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d0c2ff76-f757-4e7d-a3e4-c32a914dff60"
        },
        "item": {
          "id": "b48787ed-10a5-40ca-87bf-a37a1d8a2f69",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "04147731-a8c1-469c-9c3b-b2c2630b9dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d688c86d-77f4-474c-86c7-a6656b42d98e",
        "cursor": {
          "ref": "77e97d77-015d-48fe-8bdf-53e213830dab",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8857ff9f-ed82-4f85-9574-1a3cf15f5fa2"
        },
        "item": {
          "id": "d688c86d-77f4-474c-86c7-a6656b42d98e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "032e5960-de3e-471c-8264-7405c7f786fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5890514a-78aa-47e4-bd33-187a29ad7bef",
        "cursor": {
          "ref": "c7afcd71-d35e-4bfe-b3f3-954c48b235af",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ddd1837b-cc5a-4992-8ec3-fbc5605edfa4"
        },
        "item": {
          "id": "5890514a-78aa-47e4-bd33-187a29ad7bef",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0a738be0-4e0e-49b9-80c7-c6894cd1e4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a3f640-1eae-462f-884b-ec3394e1db56",
        "cursor": {
          "ref": "2019e894-a1d9-47a9-a7da-03739288012d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8ec460b0-7827-4834-8977-2947d180132e"
        },
        "item": {
          "id": "01a3f640-1eae-462f-884b-ec3394e1db56",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "66e59aee-c53f-4462-8f15-531c9a54a837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3460fd58-f59a-4b84-a373-c3bafb6bf7af",
        "cursor": {
          "ref": "4af95933-bc9c-4022-bedf-07d219e4d8e9",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3357548d-8749-4719-9cb5-f154de400c29"
        },
        "item": {
          "id": "3460fd58-f59a-4b84-a373-c3bafb6bf7af",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6b3ce668-a3f7-4ec0-830c-18dfadbdeb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f581ed2d-d37a-4725-8d65-916c89670789",
        "cursor": {
          "ref": "e64b15a3-0e02-4b7f-a81b-69cce5c1f645",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3c817438-c468-4e12-832b-6c4ae7870144"
        },
        "item": {
          "id": "f581ed2d-d37a-4725-8d65-916c89670789",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c44d3134-01a9-4e6f-bf83-ddc8e4fad853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83e63d3-2460-4389-b43f-4723984866ca",
        "cursor": {
          "ref": "98ec14b0-351a-43b7-bfa1-ab387b585b77",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a319fee2-59d6-4112-9b6f-fb2495b4de38"
        },
        "item": {
          "id": "e83e63d3-2460-4389-b43f-4723984866ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "db7dc332-b718-4120-b840-ec3e3d6e0f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86867581-85fa-4d62-ba2b-a42a454653ac",
        "cursor": {
          "ref": "a81adb5d-4690-49e2-9929-5113b2aaa62f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5678cdbb-b497-4857-8372-b30a62d2a49f"
        },
        "item": {
          "id": "86867581-85fa-4d62-ba2b-a42a454653ac",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2aa1a155-54d6-4583-a151-89394dff7c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a05dd1a-be1f-467d-b350-0746da4808cb",
        "cursor": {
          "ref": "dfa089cd-1182-48a8-9db7-964ecc3b7989",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a40989fa-491c-4463-b2cc-c704c96cc1a4"
        },
        "item": {
          "id": "3a05dd1a-be1f-467d-b350-0746da4808cb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c05cb12f-6a51-48e2-91fc-370cdb557a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b943fdb7-ce21-44fe-b28b-21f2d9ad84fb",
        "cursor": {
          "ref": "aeff2551-5a9b-4c7f-b570-92ad669119df",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "71ce23ce-b6d9-47ee-9549-5703cc623389"
        },
        "item": {
          "id": "b943fdb7-ce21-44fe-b28b-21f2d9ad84fb",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "24d9e8d4-6b72-4a6b-8413-c87d242403db",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9d842dc9-460b-47a9-bfec-b0b6c9bcafd7",
        "cursor": {
          "ref": "5a342e99-d7be-4491-a69d-548c3fe88834",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "82c259f5-161d-4124-a73c-aca477f485c1"
        },
        "item": {
          "id": "9d842dc9-460b-47a9-bfec-b0b6c9bcafd7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "62e9cf10-c9ef-4b7b-b362-d3e8b65b0a82",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "5b574f88-5fd4-45db-b455-46340c08840d",
        "cursor": {
          "ref": "27a35e25-f8d8-48d6-bc62-ded2c47eabc6",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2f307f4a-98e8-411c-bc19-a4386f17e581"
        },
        "item": {
          "id": "5b574f88-5fd4-45db-b455-46340c08840d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "06a34375-3017-447f-ae13-ab9aa0ec59ce",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a38ce86f-2c42-4819-bf31-ea1c52652723",
        "cursor": {
          "ref": "8acc9db8-3749-47bd-b9d3-d97cd1156d41",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "73945e49-51b6-494a-9df5-c74e63ea0375"
        },
        "item": {
          "id": "a38ce86f-2c42-4819-bf31-ea1c52652723",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "78acfbf1-3667-4bf6-8023-3cf76c833ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7af2f2-adf7-44c5-bd92-506880f6a9e8",
        "cursor": {
          "ref": "5f51ae8a-fb5b-45f3-9341-a41e5f442613",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7589ce4b-3ef9-4146-8b73-0e30a693e358"
        },
        "item": {
          "id": "fe7af2f2-adf7-44c5-bd92-506880f6a9e8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1db1ae31-ac1e-471b-ad24-8e8e1dbf59a8",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b72b8347-9ded-4b1e-827b-d246dc130af0",
        "cursor": {
          "ref": "cd7b1e66-4d98-4ede-8367-dbcd7f5a6911",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "93d219b3-c827-4faa-88cb-8fa1888c0e85"
        },
        "item": {
          "id": "b72b8347-9ded-4b1e-827b-d246dc130af0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eee8c6e9-23a2-44de-b205-558cdcf8b510",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "75b910de-e167-434f-b3e1-40a113604140",
        "cursor": {
          "ref": "0bb673ee-4513-4ed6-a559-a0ee2d13fd9a",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "acaa06c6-dfd6-4b58-a458-b434b39e09c6"
        },
        "item": {
          "id": "75b910de-e167-434f-b3e1-40a113604140",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f2d82af2-3668-4b2e-93e6-5d8c4f41bf6d",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3262a472-1a83-4cb5-90b3-648312b8c28f",
        "cursor": {
          "ref": "3d77f1c5-774a-47ad-9190-43f1230667be",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7baf2de0-baf3-408f-ba91-1e4993d79c15"
        },
        "item": {
          "id": "3262a472-1a83-4cb5-90b3-648312b8c28f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "450fde5e-fa74-48fc-ab7c-91d7730eee67",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b17f5be8-b557-49dc-af90-816600ae1734",
        "cursor": {
          "ref": "80334e1c-6c9e-4f58-997c-3866f97ea2b8",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b53d8566-cfee-4b9f-9972-2ef7435b06f8"
        },
        "item": {
          "id": "b17f5be8-b557-49dc-af90-816600ae1734",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4f1cb7c9-81c9-4b8a-a8ad-d3dcd61c4bf7",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "34028466-a0bc-4c2a-8e07-144062acec9b",
        "cursor": {
          "ref": "f1b2f2bc-a06e-44b2-b6b4-9d5d0317e384",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c2f043e0-4332-40a9-bf56-f0e385c71291"
        },
        "item": {
          "id": "34028466-a0bc-4c2a-8e07-144062acec9b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e95b1e17-ae33-4aac-b974-2d5c98afbe03",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "83812b16-2730-47a4-903e-c1e78f0ccea9",
        "cursor": {
          "ref": "61678b69-1ff7-496f-8e1f-e374f6fcfe96",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4c75f7ad-ea26-492d-b7d8-1a4800eb07b5"
        },
        "item": {
          "id": "83812b16-2730-47a4-903e-c1e78f0ccea9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad417de5-1ff1-431e-ad9e-931016769545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0693ed4d-9bea-4f03-81be-3eda0ac4a1aa",
        "cursor": {
          "ref": "618b5b99-88c4-418d-b93d-b25830349e96",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c85a4696-a62e-447f-bd5a-49a58e3bd021"
        },
        "item": {
          "id": "0693ed4d-9bea-4f03-81be-3eda0ac4a1aa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a0806cf8-75d3-4dde-8523-7b1a981aa425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6600a0c-f016-422e-b555-5625d8f4b14e",
        "cursor": {
          "ref": "4d0dbe31-aaf1-4ec7-bf3e-08c308d3570d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "088e33b7-77fe-404d-8466-fe91930b12b7"
        },
        "item": {
          "id": "f6600a0c-f016-422e-b555-5625d8f4b14e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "df0ae3d1-f45b-4cce-987e-2942398d7373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e52dfc6-4b3d-4f48-b318-3180a50ed3fb",
        "cursor": {
          "ref": "c3718401-5407-49a6-af20-17d2bc14b93f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e17920a-2e4f-4ec4-a8e5-70d1e19a51cc"
        },
        "item": {
          "id": "0e52dfc6-4b3d-4f48-b318-3180a50ed3fb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "de0cbb23-a9ca-4fcf-bdcf-f55fc08ee5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12225022-b8eb-4738-813b-2ca168486161",
        "cursor": {
          "ref": "b5d052ba-dd25-4357-bb7f-67cfa8fbfcf2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "64429241-bd6f-47d3-9789-7458e88966b2"
        },
        "item": {
          "id": "12225022-b8eb-4738-813b-2ca168486161",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "dfa42542-d866-401c-9438-c0aca8bd716c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "372522e4-8ad1-42e3-ba27-8bf7f1005fc9",
        "cursor": {
          "ref": "7cd58a7b-a210-44aa-b7c1-28182be1718c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5cdd089d-56c9-4ef8-84b4-eb877ffe7ff2"
        },
        "item": {
          "id": "372522e4-8ad1-42e3-ba27-8bf7f1005fc9",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "52c8dd56-9014-46c6-b4b2-05ee4042426d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802b2fc1-ef1e-427d-8a4a-e27ed9b0bb2e",
        "cursor": {
          "ref": "a0549e01-673c-4f7f-801c-b2ac625aaffc",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0b07edb4-40c8-47b4-af0e-23f1c96fed9a"
        },
        "item": {
          "id": "802b2fc1-ef1e-427d-8a4a-e27ed9b0bb2e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c7153a1a-acbd-461d-b8d1-d49005dadfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9387e82e-d3b9-479b-b303-f68f8f45df51",
        "cursor": {
          "ref": "a492bca2-d621-4724-86d7-63f4226759b0",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7feb6389-eac0-4da1-82fa-a313c04f8717"
        },
        "item": {
          "id": "9387e82e-d3b9-479b-b303-f68f8f45df51",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b890e4cb-e642-4289-8bb7-ac558c9563ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96121a8d-a8b1-4811-8018-893494c54875",
        "cursor": {
          "ref": "c59db6b4-c2fd-4002-a888-167d6e7d7274",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0dee3c2a-2b51-462d-bf54-aa24e1b28339"
        },
        "item": {
          "id": "96121a8d-a8b1-4811-8018-893494c54875",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2d6d308e-d179-4d9c-be2c-5928e6d87534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8329b4f2-f7db-4a2f-a30c-4dfda4594a01",
        "cursor": {
          "ref": "927c89f0-e6bf-4e3e-bb15-4251924da18e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "062afe16-d472-4544-8213-0cf033054ece"
        },
        "item": {
          "id": "8329b4f2-f7db-4a2f-a30c-4dfda4594a01",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "78ba5eb3-86f4-4733-bb30-72812a453ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17ba883-a161-4f15-a756-8be750b7e327",
        "cursor": {
          "ref": "0e5ae428-1b93-432b-9c8b-4e703c848acc",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0c2d92ea-3d1e-4a12-8f6d-bad4fcdda9ba"
        },
        "item": {
          "id": "d17ba883-a161-4f15-a756-8be750b7e327",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f81be33d-8503-4e30-8d64-fedc2d125da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd41847-a36b-4722-bdaa-e3ef2f976946",
        "cursor": {
          "ref": "98aac510-4124-4b70-8ac9-0a277dc72f34",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1cd89122-997f-40cd-aaa8-c73d95a19139"
        },
        "item": {
          "id": "fdd41847-a36b-4722-bdaa-e3ef2f976946",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "22cb5fc5-a80a-4600-9965-3606ec02940f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c129832b-d966-423e-a092-c40c1d9572e8",
        "cursor": {
          "ref": "105a1463-76d0-4bc3-b42b-ff9b9d9b1bb8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "97355a8e-857d-4bc5-ad7d-8b4e2c1aae19"
        },
        "item": {
          "id": "c129832b-d966-423e-a092-c40c1d9572e8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4fddba55-8337-4e49-aa68-afc3d077a0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0aaa3ed-47e4-4f68-90b0-4dfc86d9c681",
        "cursor": {
          "ref": "5912865a-adc9-4ef9-bfeb-8a78a3dbefb5",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "feac3f44-7ebd-4113-b753-e68d43b87da5"
        },
        "item": {
          "id": "b0aaa3ed-47e4-4f68-90b0-4dfc86d9c681",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3d26618c-3f30-4e3b-8301-0c551fbe63d7",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "403e78cd-dd9c-4cb8-b3e5-713659307294",
        "cursor": {
          "ref": "19b6f5e2-eace-44ae-bb7d-33ee3a615121",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fc96abc3-cede-4a72-81a1-ede7ffb8921e"
        },
        "item": {
          "id": "403e78cd-dd9c-4cb8-b3e5-713659307294",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b0b3e59c-1f4b-4e9c-8306-481e64e6c79c",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a610a1ba-0313-44c4-b21e-53a3ff780489",
        "cursor": {
          "ref": "86a86d0b-acf7-4980-861c-400434f24ed6",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1fe2fcd9-ae48-4803-859b-d14187e778b4"
        },
        "item": {
          "id": "a610a1ba-0313-44c4-b21e-53a3ff780489",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4d79903a-9ab0-4ec3-806b-44ab79b7657d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "0102c952-b10c-48ca-b8f4-5204e589b0cd",
        "cursor": {
          "ref": "4e827309-f8fb-4d71-acc0-5ec9f941b5df",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cfea3747-3b02-430d-82f6-04ca3bfca015"
        },
        "item": {
          "id": "0102c952-b10c-48ca-b8f4-5204e589b0cd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "01db6b29-d29a-4b61-b935-cdc8c3b34b87",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f8e08f65-6115-476d-98fe-b91c22816f01",
        "cursor": {
          "ref": "736bb945-a83c-4e12-a4ed-2d026fb59e92",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1fd66993-f93b-4986-8ff1-63ee733cacc9"
        },
        "item": {
          "id": "f8e08f65-6115-476d-98fe-b91c22816f01",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ce29310e-8f63-4ab5-bfd6-cde95c352164",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b02ead5c-fd67-4f90-a520-52858a33d0d5",
        "cursor": {
          "ref": "50635b0c-81a3-4dfb-9046-c7f21c56275a",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bb19a7d2-5013-4b16-8fe7-28db66b08251"
        },
        "item": {
          "id": "b02ead5c-fd67-4f90-a520-52858a33d0d5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7e3ba371-f2bd-40df-b18f-feca58d5a89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc1d57f6-a932-4736-a4d4-fb15497833d0",
        "cursor": {
          "ref": "78c96ffa-394d-445b-8774-a13051a97ad3",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3f861bdb-7ae8-46c3-8ad5-520de68316ea"
        },
        "item": {
          "id": "dc1d57f6-a932-4736-a4d4-fb15497833d0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "520c8172-ce3d-4313-ae6b-02c294061326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355fc2c0-ece3-4f3d-9813-a6180b9bdf89",
        "cursor": {
          "ref": "e24af650-410c-4e87-8c28-4c6d342b6b56",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d7edbf88-495c-420d-b535-47e64bbfe513"
        },
        "item": {
          "id": "355fc2c0-ece3-4f3d-9813-a6180b9bdf89",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "12d1ead1-8e15-4085-92dd-39bfcf69be04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d375ae7e-fa25-46dc-87b6-ea3acf82f2de",
        "cursor": {
          "ref": "54e5642a-8286-48fb-a1e3-195193e2ce47",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d1bd5d0f-210a-4caf-bc23-13999cdb4e27"
        },
        "item": {
          "id": "d375ae7e-fa25-46dc-87b6-ea3acf82f2de",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "62fe0bf3-b2a9-46d7-a46a-73b72a70d032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ba5db4-c69f-4f19-a3f3-0e27a890c5e3",
        "cursor": {
          "ref": "21b68e6f-cb96-4c20-91d1-ca7a96d3c1ce",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "17abb248-7e07-403c-a0ec-d77ac0be5b48"
        },
        "item": {
          "id": "b9ba5db4-c69f-4f19-a3f3-0e27a890c5e3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "21d33a66-b3fd-42a5-90a0-65d0453385c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92abe17c-78ce-46a8-8744-3d6bb5bfef06",
        "cursor": {
          "ref": "73f48e90-3c77-4fe2-a827-8126349bb8e9",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f3527fc0-1de4-4caf-a714-33afc6d670ae"
        },
        "item": {
          "id": "92abe17c-78ce-46a8-8744-3d6bb5bfef06",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a160462a-bbbd-4f6a-912c-5f546f5df6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3230dd-4a2d-4be1-9e0c-4ef180623581",
        "cursor": {
          "ref": "16bef4c4-6012-4a06-966f-707fa3fb0812",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "54347992-b399-42af-a428-615368158f1d"
        },
        "item": {
          "id": "5f3230dd-4a2d-4be1-9e0c-4ef180623581",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d6b4cecb-b7db-4f65-8eef-d852a2d1841b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0e65bc-bc02-480b-b98c-cc6669b073a6",
        "cursor": {
          "ref": "574af3fc-d4b5-43f2-94e8-2d1b8167af74",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bc2d593d-22fb-4497-abf4-18251b2d9c66"
        },
        "item": {
          "id": "0c0e65bc-bc02-480b-b98c-cc6669b073a6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "28abc683-42ab-45b0-a009-67df57b49cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd9d113-99a9-4d41-b950-562f8aa8a970",
        "cursor": {
          "ref": "9bce48c0-e4eb-4e12-9c6b-018edc17f67f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "33d9732f-1ea7-43bc-8eec-8212ae80bda4"
        },
        "item": {
          "id": "bdd9d113-99a9-4d41-b950-562f8aa8a970",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7d78f66f-d1db-4ed4-82a2-3278b2124b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ee5c5c-ebd7-4eec-a32b-017fa0ac509d",
        "cursor": {
          "ref": "ba734d8a-400f-4063-85d7-f7645044bb1b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "36a6e651-639b-4c66-868d-e5afa3de528c"
        },
        "item": {
          "id": "c8ee5c5c-ebd7-4eec-a32b-017fa0ac509d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8e2a0a4e-e2f7-440b-8708-bc2817cc53f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71311f4c-bb01-4b07-af30-684d3051e304",
        "cursor": {
          "ref": "c5f1032f-05e5-4ef5-9b4c-86ea53551b6d",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "028d8343-7251-41a2-b82e-b5d0e0105a76"
        },
        "item": {
          "id": "71311f4c-bb01-4b07-af30-684d3051e304",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "949e9f48-ea36-4b67-86c4-d062e1f04610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8612d6-35e0-4c96-8c6d-90a2f0c6e63d",
        "cursor": {
          "ref": "72137957-60cd-4fe0-b09c-321ff29557a2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "eeb1dd73-37e4-4d1d-a8fc-d5e3fd41f373"
        },
        "item": {
          "id": "8b8612d6-35e0-4c96-8c6d-90a2f0c6e63d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e0759a2b-bc0b-493e-b06f-34702987c816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cc7745-ba28-48e7-9781-d0c2a3f05386",
        "cursor": {
          "ref": "c29e72e4-164d-44f3-977c-a15f1e5b604a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b7d4965e-0533-47b3-81a2-1c1acdaa204c"
        },
        "item": {
          "id": "10cc7745-ba28-48e7-9781-d0c2a3f05386",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d94d4608-968d-4d8f-9510-0d9bcbe64b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1979e317-90a8-4e7c-a3b4-744a670afc6f",
        "cursor": {
          "ref": "bbd9631e-79ba-44f2-a385-0443a9be28f9",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "357f11cc-7d54-4169-a054-1cd1d496fd8e"
        },
        "item": {
          "id": "1979e317-90a8-4e7c-a3b4-744a670afc6f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d211e5a-d366-4daf-ae75-b4d743b73ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de75dd30-22cf-4018-a5fd-2ad767d30fe5",
        "cursor": {
          "ref": "2d2bca72-94bb-47e2-870f-a1e4f5b9735c",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1b48434f-d895-4ca0-b3f6-2a625b061300"
        },
        "item": {
          "id": "de75dd30-22cf-4018-a5fd-2ad767d30fe5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f4c08874-c311-4634-850f-07637fd9aefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73693065-2098-4129-b2bb-ba48689a4bf0",
        "cursor": {
          "ref": "295dd832-4cb2-43ad-80cf-d1f7bb71db40",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "912faf35-d75e-4e4e-8555-fa183406d703"
        },
        "item": {
          "id": "73693065-2098-4129-b2bb-ba48689a4bf0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e2b41cc7-c70f-446a-8dcd-434101116b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0789f962-d249-4f94-8cae-2475ed67dad7",
        "cursor": {
          "ref": "0e997826-f838-442e-848a-ce23dace845e",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0d3366b0-4375-4361-9a0a-80d424969f68"
        },
        "item": {
          "id": "0789f962-d249-4f94-8cae-2475ed67dad7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c4158811-bd2c-41bb-9be7-25d0e8d6f576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fce62e-505d-4ef4-af74-55e2ecac109b",
        "cursor": {
          "ref": "00571e93-3c31-404e-85f0-903d71a14766",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6583ddb2-a2db-44f8-aa33-163ceabb7607"
        },
        "item": {
          "id": "f9fce62e-505d-4ef4-af74-55e2ecac109b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a435facf-04bc-4bfe-ad0c-9295db90acb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6862c2-952f-4547-89c7-6452df161c49",
        "cursor": {
          "ref": "6834386b-25d5-41b8-b120-33e8475dd538",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6c7a7fa1-b140-4c2c-b249-520c99282bdf"
        },
        "item": {
          "id": "0c6862c2-952f-4547-89c7-6452df161c49",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "30538232-c77f-489e-953b-bf9a79918229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeedcf38-6e2d-4bf3-bce2-220fa642ce7a",
        "cursor": {
          "ref": "6ebdc20b-0d5f-4674-9e7c-ca3d1745a302",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f973b790-6fae-469c-b13a-c6473635dae6"
        },
        "item": {
          "id": "eeedcf38-6e2d-4bf3-bce2-220fa642ce7a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "667dbe78-14d7-4b1c-84ea-87cdc5791e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426fc4b8-5d5e-4411-84e6-b2a58c077610",
        "cursor": {
          "ref": "d362042c-bcc4-40b2-aaa8-78dcf2007e42",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "28fe2326-8fd3-429c-9764-716602066d50"
        },
        "item": {
          "id": "426fc4b8-5d5e-4411-84e6-b2a58c077610",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e7999573-25de-4fa2-884b-6016de0cce6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05328063-d1a8-447a-88f2-e9b752b59672",
        "cursor": {
          "ref": "3171ec18-ad54-4e18-aa56-ede1d3e4d748",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4c2bbd3f-f868-48c5-a173-7e76ac4a5475"
        },
        "item": {
          "id": "05328063-d1a8-447a-88f2-e9b752b59672",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6bf846fa-17ee-4fc2-995c-a2adf984e9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85112e94-83b4-4de9-aa6e-7617a422a867",
        "cursor": {
          "ref": "e5c51e13-a5c4-48b5-bb00-0f14523dd2ae",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "091e18b3-3ea3-4604-b9bc-fa61ba75ea5b"
        },
        "item": {
          "id": "85112e94-83b4-4de9-aa6e-7617a422a867",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c41323ff-9bf8-4caf-be29-d39627a739dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57182b95-e838-4d20-a3f7-c75c6c8769d7",
        "cursor": {
          "ref": "be0af2cb-837a-4b1d-821e-2ab2a590b1dd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "486df415-ad18-4657-98c5-aa9d9dac68f8"
        },
        "item": {
          "id": "57182b95-e838-4d20-a3f7-c75c6c8769d7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6697cf96-f001-4b19-97bb-a7efd086794b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d2289e-bb1f-489b-bffb-a0fd238a3c15",
        "cursor": {
          "ref": "e491ddfa-7b7d-43f4-a7ad-954619feb3f2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4331a386-b3b6-4d4a-9c66-f8a32894ddfd"
        },
        "item": {
          "id": "13d2289e-bb1f-489b-bffb-a0fd238a3c15",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7f4ddb2a-b02a-4def-9b30-4dfff3e17cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d04a60-1f22-4987-b004-31002264077e",
        "cursor": {
          "ref": "f41877c0-44c0-45ea-8e0a-721ba2d6448b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "dccd1348-0e4e-4112-ac84-16b4d4c71af7"
        },
        "item": {
          "id": "d9d04a60-1f22-4987-b004-31002264077e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "60fc9427-e038-4384-8f0e-e4c546acde60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75377335-c603-4688-bc0a-eb5bd98a55d4",
        "cursor": {
          "ref": "555d891f-b6fe-48f6-9827-68d965f63c50",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd706429-9277-43f4-b94a-31cb2cefd5bc"
        },
        "item": {
          "id": "75377335-c603-4688-bc0a-eb5bd98a55d4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7833f9cb-d4a4-4952-a073-eb88c2693cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f22b929-2960-492a-8ff3-e723b8152589",
        "cursor": {
          "ref": "6b1df76c-bd20-44b1-a385-dded27c271d7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e15f7447-fbe7-4203-a510-53915ac668f3"
        },
        "item": {
          "id": "5f22b929-2960-492a-8ff3-e723b8152589",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "698a344c-8d4c-41b7-9b50-bb0d28fdabad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6fb140-4321-40ff-a62f-ee0e8717443d",
        "cursor": {
          "ref": "2f0ddcb4-0838-494e-9133-5e6419acb860",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "67365659-6f68-42a1-bd82-15d9ae0e05ea"
        },
        "item": {
          "id": "7c6fb140-4321-40ff-a62f-ee0e8717443d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6c170d0a-bcfd-46c9-9b0e-b138405f7204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108e5990-98ab-4be4-97e6-dcd11b707fc4",
        "cursor": {
          "ref": "6494dca3-dc0d-426e-b191-13245a8c486d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0b955608-76dd-4daf-9ff8-617056349196"
        },
        "item": {
          "id": "108e5990-98ab-4be4-97e6-dcd11b707fc4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "aad26b7e-34e8-4c54-9c09-1d898f524044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba720ab9-24bb-4414-ac6a-8fb368bc59e6",
        "cursor": {
          "ref": "376d7478-cd69-4410-9299-12fab1a66e18",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "eb0fe12c-ef60-4f42-b017-49d8b914f406"
        },
        "item": {
          "id": "ba720ab9-24bb-4414-ac6a-8fb368bc59e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b366d26c-a94f-4691-8d1c-5f267ca1aee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b7ac3f-561a-41da-8e6d-28f2c2f26874",
        "cursor": {
          "ref": "e4526fe1-09ec-49b6-bf08-f3b108df0721",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "06cb1222-0a80-431a-b8a6-ae74a17753d2"
        },
        "item": {
          "id": "47b7ac3f-561a-41da-8e6d-28f2c2f26874",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5a4903fd-4533-47a8-b9a2-1aabb4c308bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07a8bc5-d418-4b98-b45f-ec480130fd94",
        "cursor": {
          "ref": "553ac1fc-344e-4377-b024-d40eb1a3a559",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "308cd243-51f7-4b94-9a27-a2b2b0da8208"
        },
        "item": {
          "id": "f07a8bc5-d418-4b98-b45f-ec480130fd94",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "02bd5fd8-5d84-431a-b050-6ff1db4ed15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9828896-a0c0-4c3b-a6de-af24c9cf92e9",
        "cursor": {
          "ref": "cc753572-45bd-481e-a254-2006e98a107a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "12384a09-6140-40e7-a429-519a85ba596d"
        },
        "item": {
          "id": "a9828896-a0c0-4c3b-a6de-af24c9cf92e9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d56a2c5-f087-4fc4-9b35-3700e7c217c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3335cb5a-eaf3-4a8d-8ccc-8364b8438748",
        "cursor": {
          "ref": "9cc8ed37-a707-4fa7-a841-f663fd9b9a70",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "58e8bf83-8d69-449e-8599-c14b553cd415"
        },
        "item": {
          "id": "3335cb5a-eaf3-4a8d-8ccc-8364b8438748",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a2209e04-f78f-43f2-a67b-7c159c1c2a3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb27a6f-6f66-4d5d-a6f9-f348ba9e4480",
        "cursor": {
          "ref": "ce3fc5cf-7c66-481f-9b93-657f419f1a7c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "aa0edfcf-1afb-456a-b753-075601cc7428"
        },
        "item": {
          "id": "4bb27a6f-6f66-4d5d-a6f9-f348ba9e4480",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e778c3ce-76b6-4853-b76e-b72001eb6369",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "db8d8134-4e89-4cfd-b487-7caf474fb4ec",
        "cursor": {
          "ref": "313c50b9-837a-41b4-81bb-62a6cc910abd",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b8c77d79-e54a-4c76-b527-7173048c3224"
        },
        "item": {
          "id": "db8d8134-4e89-4cfd-b487-7caf474fb4ec",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8b293d94-97c5-4114-a608-92b818883338",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "613752de-97c9-49fd-aa67-292426c883b5",
        "cursor": {
          "ref": "58c4537f-0ade-459f-8199-7fa19c0ebc91",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f5e68c9d-2bac-4906-a60a-7d748eec4c16"
        },
        "item": {
          "id": "613752de-97c9-49fd-aa67-292426c883b5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e2faf7d8-e373-4428-b3e3-b3004e7ca49b",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7180688e-76d2-417a-a026-bc1975441023",
        "cursor": {
          "ref": "74aaa2c4-8911-4944-b89d-ca55d7a7c33e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6714a6ad-0b1b-4300-9fe6-cc1f4116696c"
        },
        "item": {
          "id": "7180688e-76d2-417a-a026-bc1975441023",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cf44c157-2f56-4d4d-a4f1-920053d76727",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7180688e-76d2-417a-a026-bc1975441023",
        "cursor": {
          "ref": "74aaa2c4-8911-4944-b89d-ca55d7a7c33e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6714a6ad-0b1b-4300-9fe6-cc1f4116696c"
        },
        "item": {
          "id": "7180688e-76d2-417a-a026-bc1975441023",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cf44c157-2f56-4d4d-a4f1-920053d76727",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61107083-fc0e-4d03-83ae-97d5fe6db4af",
        "cursor": {
          "ref": "584089b5-50b8-4f49-bc91-4cfbce065053",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0fac43c6-3005-4072-b7c9-62c23b78ebc8"
        },
        "item": {
          "id": "61107083-fc0e-4d03-83ae-97d5fe6db4af",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4d077d25-f7cd-4267-8308-6b2c10937898",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb23601-f103-46a2-9f14-3a883739ff04",
        "cursor": {
          "ref": "56e1da82-6cbb-492b-9804-e72e3c5aee16",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0bb62fd8-7bae-4b6a-9727-b3b6cd757f6d"
        },
        "item": {
          "id": "0eb23601-f103-46a2-9f14-3a883739ff04",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "afda887c-bfe3-488d-ac18-4f5317a6f20a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}