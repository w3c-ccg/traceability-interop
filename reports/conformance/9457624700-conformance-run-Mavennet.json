{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "678648e0-cf93-492f-b975-a25af689f134",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7e37a96c-8585-478f-add0-156b7bf02308",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a59fc369-b793-4b4f-b0c4-54d916896319",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "90760a23-117e-4fb7-bbe8-d16fcbd8a926"
                }
              }
            ]
          },
          {
            "id": "1e4a2d9a-597a-4cf1-b277-67d047c194fb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0aba2d37-44fe-4c23-85ea-b1953f75366a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17673713-d7f9-43b7-a887-520b86d71c1c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a3335e74-6edf-4897-818a-c1031885f8e9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "26bc8007-d2c5-4b7a-b27f-67e34071db2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cb618413-9739-44f7-9ed1-71b86372f2aa",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e6aef0d-1b84-4f3b-86e6-03d8c13f6470",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed938cd5-b9e9-4018-97d0-a6aeaa16c064"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d38ab40-d7bc-4dab-ad70-8549c62036fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee411137-00dd-4286-a792-da9b3d6bdc2b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94135cc5-5a0f-46d2-b2f1-18e7a0fd887f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56645763-db23-4c95-9e86-7f7f4aefae91"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d87ec5f9-4051-4777-8bea-766771dc16ee",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ecf6976f-1aa9-4823-95ec-88201a8c8110"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2e17ac1-625c-4788-9296-b2cf3af13410",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88a47b26-e871-48ab-8e0e-1c7c3e61834f"
            }
          }
        ]
      },
      {
        "id": "a2e1bf9f-caba-4385-9a4c-c3611d1f9c43",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aab6eaa8-699b-44d9-818a-73018b595ae3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f8a6eff-efe5-4e79-81c5-5ac53232e441",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "260297d9-8ac1-4de4-9aa4-9752c8a11a77",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c18fcef-f448-48f3-bb8f-b91f9df5367f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dcfb354-5683-4a2f-8d83-ed3d65452141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60967198-5541-40f1-813d-3877342577c3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927572c8-e6a9-46da-aad2-d7ab33afcb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46e09c73-e93b-48aa-b819-b28067037449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf4afb7-4a9e-46bc-b543-a22016dfd363",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a31b69-f544-43b4-8b99-07f2a0f2a980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b82747c7-6164-4779-bb72-548de83bc6d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8975abb7-51a2-48d6-8b4a-07cc7efaf395",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b22400d-5e2b-4d38-81b7-194a94d86761",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd029a3b-a2e1-4347-8dae-3c86615ba66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "234a2ebe-0a59-4a93-8205-a85bfee9c06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2776cd8-3742-4f98-9ff4-5c8764e692bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c22481-69cb-4e50-9dc4-1b04311fe7a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46959ed3-646f-4052-b784-53fed0b70e96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc33f6d7-fe71-4213-a49f-baef6fd41e73",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f06161b-e692-4194-b49c-fb85a9dabada",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a93856b1-8041-42e8-83aa-ed5b7fa421b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e213479-108e-4364-9d97-c802cfac14a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "504702af-4087-41b3-9c10-4521fe4a0854"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37cfc80a-4520-48bc-bd9e-a1bda62eb785",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "707f3693-dc20-42fb-9ec1-e5ac45bd60a6"
            }
          }
        ]
      },
      {
        "id": "64a4554a-682e-40d7-ba07-8e1f5ca6e46d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "feacfd01-2867-4e16-ae1e-ff1556fb626f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a92a0ae2-cf34-4f6a-87c2-dc80c6702753",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8d57f2dc-a737-4701-8e15-a2fcea6f2402",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df48c22-a021-4b8a-bb27-4f272b5e8ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25762e0f-2809-458d-8c0d-0949b846fa8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500c2085-3206-4389-9098-e0f5cdf3a912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32c3258d-5c40-4e1e-b704-bddf8dec16e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7e0d2a-7ed5-4e99-b1ac-0f92ffc7de6f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0687cc3-2902-4be1-b8e0-069cfaecfee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152bad4b-f797-4b85-8c5e-a60760e4499a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c5b00a-69f5-4e72-87e0-5add945b9b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c68f6c7-acdd-48b0-85bf-b365fbc64141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cc6afb-cff1-426f-9977-1d850f85114e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997620d6-af61-42d5-ad24-839d05022b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cceba2c-6842-4f4e-a4af-066e9dc4e746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b71976-4451-4bcd-bc18-8a59d0628109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "551f2bd0-2a71-433f-8497-5c0c37c68bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b684170-ea4d-4362-924c-a57855a84220",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f2d5d7-8061-490c-a505-2d6a625529b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b256bd81-2bb9-4c20-b35d-6b2adb8c45c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6f477e-388b-4c34-a2eb-15db5607246a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a30a6d63-0b9b-4830-9731-40ed216f98d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042e90bb-7037-4407-9990-4366c082349c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40a31cc-4cb3-4d74-8c57-3e06258cc648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab222f1d-ea04-4ff2-9ba8-2a6824ac87af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53048dca-fa29-4d24-b4e6-32ca99bf05a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbdddfc-1e7c-4cb5-b27c-b9d91e3af21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc32962f-93d1-4e83-a927-30106d47134a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bcc5c7-ff00-4900-9725-d83282e9a5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f40788-24d8-463d-8cae-ba3a33efd823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893c3e87-59c4-4af9-b20e-2f32db7e1249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d93a6bfc-d66b-4f1f-a08c-a7d9cfda3057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2901121a-1081-4f7d-99e2-24517fa9c115",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e73842e-27a6-4dbf-8db4-72289f354040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08119b6-4294-409a-b670-1ed79b0aad3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fd0a33-edb0-4bfc-bf87-0201b97aa0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36613496-7f5b-4c9a-97d8-8aa024d7cb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c1a473-a51b-471d-a5d9-34c6adb61e12",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e10eea-6b23-4f14-91c6-b0b8336ce82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e3f2bc-b196-4b7b-b0df-71a6be33b991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1866d8d-c232-4106-971f-fc5e050ec228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee39e22c-fd9c-45a4-97a2-848075de69b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a79bfc-0e1d-4e4b-b053-cd65eb92c8d8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdd4acc-2489-4d6a-8aac-272b65883796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6261eee-18a0-41ee-9cc7-24a4ec5887d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef0fa28-150d-45eb-9e29-73b8e47d8d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e883535-b357-4c10-93c3-718fef9e3aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7ab8ba-fdee-47d4-995c-40758a25a03c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fbf237-4f50-491a-8b8f-a623d51e70c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c98bebf-f5d1-4f99-9261-6bdcf41872e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9420a80a-51f2-4ac5-afcb-0ac801752cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2968941b-a31f-4266-99ea-65e90cf32255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7b39f2-c931-4a75-b76c-e4054481093d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed31251-0480-47f7-829f-f05606d58b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6479aa-fa39-40c8-86da-3537e63c1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6292aa8-323d-432b-89bf-ee7cbfb7a103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdeead59-5ef0-413e-808e-ed193a9d278f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1bdc8b-05b1-4140-8e10-8519e7e059dc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a6381-33fa-4af3-9e71-73255f4246e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634171f1-d4c6-44f3-96ec-10b37f4fcd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9aec9e-0364-4198-9dc8-9d399184412b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15fa2c6d-c695-4201-8c18-634526ff06c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb337dd-cc52-46ab-a560-fd5ae3a2b815",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9d1a01-00b3-4891-95b5-242f9fc3e6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82579e24-a112-460b-b0fb-56747cc36ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03063b4-5243-462e-a2ba-bbe7b8b0902d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "963e8425-0927-4a4c-821e-cd62258e8a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4166fef-34fa-4007-9c32-59827d48d672",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97788d28-f056-49ba-80c3-1f589f81b8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e0cf32-1ab7-4fe6-8569-8723b84fd5e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a47435-35f8-44e9-a053-cad4709e1f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faea59eb-725e-4afb-b15a-6fd2d3bea11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a114e181-2ed7-410b-aa23-382936a71e93",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecf5f67-7912-4da7-b7bb-e3fb940364db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb46ab8-7c41-44df-9cc7-7647596a61b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8077904-66fe-4a8a-9162-441ddc360acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcfe4982-f7f8-4e37-af0a-f915a6e4cc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e932e60-5c7c-4fc9-9656-6be61b522b8f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cbb931-b868-4f1c-b6bd-0e0596fc245b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a7e774-fdde-4d03-9396-6c84d941a1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c0e6ff-f240-4101-9fd0-bca3eec96ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b93b9506-8d25-4c7e-9ea7-733017aafce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ac1d3f-832d-4026-ae30-f21867c6d840",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b069efa-25d9-4367-b362-4877c84ca58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae85ca16-d41e-4605-be81-d9ec463a5b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ae4e38-da22-464e-8ac3-c01a6eb53215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3563773-580f-4fd9-969d-c907d2efc255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e3bad3-9d10-44e4-b9f9-3833d34839aa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20e2d1c-3317-4d79-a5cd-0562df0a949f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aca14cb-8364-434f-933d-abe67205122d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ccc0b5-bfaa-4e65-b610-5c2786d46579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdae269-d9c8-457d-ac9c-308740cd4862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf08319-520d-45d5-a8ea-079382a9e67e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3036fe2b-6bee-49be-bd4c-e4ad5833f18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f161f0-38f9-4bdb-afb3-e22c46e89e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec319d3-b836-47f2-a9e4-3d0d29ae04f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "489d49b5-52bd-4053-b1a4-672e8fd83b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c13822-088c-4c3f-9b2d-b1dd546f852d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2039529-26f5-4a25-b2af-d7cd3232f0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f71327-db39-46e7-99bd-846a5cea0bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b48d2d0-eff9-414d-932a-8dabd5ed1bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86782b54-ca7f-42cf-b20a-380f4a08c76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ac2351-8d37-44fc-8302-4a39966a8493",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1f7203-2d70-4ea7-a650-a30084f90c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1374f6c6-98c0-4f27-a01d-8601e19b63a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6dba3d-8d66-4c11-beb9-df971b12f8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29b6732-d6c7-45a5-b425-6d0589b476a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52056dd3-6bcf-42c0-9cc9-5f0a1d0419b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5a1e37-9866-47de-ac10-7abbcb64bbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1a5016-d161-47a7-b4db-fa255ec437e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f766435-3543-4258-8d35-a789fe26bf48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "452f4051-184b-4500-9705-ffc12c8ae040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3573a0bb-9249-4be9-81ed-240651998a1e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d343e9-776f-4090-ad66-47a0b71c1cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb8bf54-ce5e-4406-bc6a-57f09b5995c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c661f3-83e4-410a-9055-6a90705999c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc51db63-eef3-41eb-b658-24165666c209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d51062-fb82-4203-8728-fb2000bbe6dc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37acc760-0ff4-435b-a011-bf7c7daeaf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914efcfe-2c5a-4038-800d-2097533c3ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cd6c24-cfef-47d4-ad0c-92f59a5ddd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "46387567-e489-4929-928f-b0e1384b70a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5592d807-71ab-41ac-bef2-342b57b5c107",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8c9945-a387-4b36-a8ed-45a5bdf37578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1d6c71-19e4-49e1-91c9-fec6912e12f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2dd97f-db96-40a7-9d59-d34a0e30cc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bd53016-958b-4a8b-b6f6-44d8c97f3266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbaa98d-2acc-456d-b0f0-91a9195a31e5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d8cf58-e039-4a74-afa8-d79c5737a74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19f8a8d-d8f8-4530-8291-f13a0090d8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75220a3-1c31-4e1e-b292-5b7eccdd614a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9b5a2f-a888-412f-9e04-dd3262a06cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5776ea99-9a7f-467b-bf02-0c206b587261",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c08104e-a12c-473a-8c22-13825fe78f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42dd026-909c-41ff-acdc-1630ac08b781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7605b62-35ae-463a-abff-08da8798bcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffc4020-4bff-4f61-92d2-ad9c2e173205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3de150-39e4-4ff8-b4d1-dbbbe527ba06",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836fd722-dc03-49eb-8cae-a538e78b601b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c35939d-c0e2-4b76-b0d7-9ecbce062cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beccfcac-af29-4ecb-af2f-327879885bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc23c5d7-fec2-4251-9f6c-cfb8211a5e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38794adc-8ef4-49e9-bce5-bca5ecbf5e5a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a26542-bfd2-4172-8a89-ef040db3819a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33703c85-0eb6-4611-a8c9-e492ffc56bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00d1572-6b85-41c6-9305-68e11b7a0525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a2fb41e-b41c-443a-8065-a3f43efba3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04c6c8d-f03c-4d38-bee2-92d228861fbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1df302c-6735-4fb5-b2cd-55e4b571d1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35dedc6-2725-42de-8064-d6db6396ee4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd08714-793a-4f0a-b706-7f97bf657667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eadd7c-5e30-46a8-b55c-7cc482c7f15d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4f975e-2d89-42e2-b256-721d1ad65734",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0385d15f-bf09-4134-a34c-400bc13136ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735f833f-5fad-45bf-8500-c190e4a7e428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396b437e-4fdc-46fb-819c-473eedcf8db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "450cd786-23d5-44e1-81aa-44321e77648d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91edf20a-c4bb-4bc5-a0e3-4f24fcfe6166",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82052161-22bf-41ac-abbe-83ee876c52ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e132e2b-6132-4140-bbc6-79ba5d2c9703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68afdcf3-26ca-429f-868f-39d7f214ee3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aef891b-005b-4e62-9131-6911d7251d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2584afe4-acd6-46d6-a56b-c17a58379363",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd94f28d-833c-452f-80c3-2548736dac32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4efe81c1-1878-47d2-af4c-c7d9c8a0855d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b237e09-251c-46ec-bc42-caa99aa343fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b080e3c-664a-4b39-ab88-44fe0c0bb018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a48ff29-6362-47c3-a635-95d71e2579ca",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf79502-f058-4350-bf5d-b78b8ae12ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac77237-6a4d-43b4-80a4-bcb507e3b2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ede1b05-95ea-4ec9-8abf-b043a612a023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18dbac90-39b9-4c62-a82c-f977b2e5968b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94ae624-70dc-4787-a6be-7ae7d837ec7c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db19171-7e09-4d79-9f1a-596283d28f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14700552-ea81-4a59-8db2-56fb71e43945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484eb351-a79c-48a6-b966-77a9aaffdc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8794d1-0b70-4cfe-8b3b-3e7ca01b6c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a6f46e-4692-4747-b1ba-4e5ead2e6b19",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60903859-0664-40dc-ad25-8c7e7b09231a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8ec064b-8e2a-4e21-b549-d479286e97ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bc4dc7-e895-4cb5-b60f-30599a74eff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f282b3e6-6c51-4f72-8047-8591e9455b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05673810-ece1-4350-81f5-210861d2ec5c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7b565a-a456-44e5-8d51-89d437d39db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6210fbac-2dd7-4fc3-a0f7-76582eee0a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32659b5f-8c4b-466d-97e1-c237b10c1403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee54e775-593f-47f4-96e7-0cc512f8844f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f08d3a-2a30-4c48-8014-7701971442f4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45e148c-d5b1-4024-b362-d8830fa8d668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045f22f4-fb5e-4e0b-8e38-eeaf037bbe5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ef04da-4f84-4167-855f-7a30109d4554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3795514-9858-41e2-a653-f3110c236947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7dc6ca-9790-4526-a123-b25b58b436c1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48a4f8a-4bf7-46f0-a18c-2388098224c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3acc3bd-f968-4068-970b-e7b9ea40599a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539414d1-06f7-40a9-9afe-b2e29c906db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41243f2b-4c46-44fd-923b-6859084b61e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5ccabc-bc78-4b22-a984-7ef1d46491b7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94fecf5-ff05-4173-b9f0-0a5ae601d22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a6f1d9-db5d-456a-8ac1-c041c49fec20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580249f3-307c-4133-a466-581c71a5a0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aeebe088-d44a-4160-897e-0bbe37217cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d81d65-3415-46e7-94a9-98127665d03b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9704f453-552a-46ac-a7f4-6fed285139bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d78fb7a-c694-4b55-83f0-025468176c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad972fb-29fd-40ce-9d84-97f450c01c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6d66bb-769a-465c-9944-40565e4352df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f110032f-b982-497b-9656-9fff27fd9626",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f6fff2-e820-4d36-a746-3462c33e38c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8399fd-439d-454e-b3f2-899cf3022b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e00f4f-faf0-4b6f-8017-9c0942002c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "595c62f1-84bc-4d18-85b2-9d127b969980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adef178-c60a-490f-a7a1-864fbda24c02",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86353a6c-46ae-458a-9918-5e03ae551701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb6c57d-adc4-4afa-9057-cf833d3713ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7a519e-5853-4818-b8e5-754ec2405594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c542d3d-63da-49f9-97b5-6dbdcfb59931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c8d19e-fe08-46e2-9ddb-001636c2fee5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1c554c-c11c-4712-9d73-3885f00a09b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847d2edc-2464-4d91-8c76-f4c189534495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc643b6-18b1-4403-8cd9-633107c8977a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e5782f6-9558-4579-bbb3-6aeff3a570a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219cf33f-38c8-4428-890b-e4534f75a282",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f859bb-92a0-43e9-a947-27458cb6edf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351c260b-a275-4c32-8e2e-727ddab264cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01ddff1-faa3-4757-b445-1e1004c652bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c168699f-baf2-4a83-864d-d4bd7f7764c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c766d2-f1cb-45c0-ae00-0dcd72e69e41",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5279325c-afd8-4257-a4f4-4c5de4f36b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dcd91a-7afb-4a0f-b271-cf3be71a08dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfbd8f00-0e9f-4c23-90cf-899c030e35b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b1c513-b6fb-482e-84a4-ec7eccf7eb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3311391d-149a-4e2a-97fe-af39e525d5fc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4deebcb-bcac-4637-bb4b-aecc9bd15fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7eecc1-c417-47fa-b75b-d62f34a238b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003339f5-b0aa-41c7-b740-6e4aa58e5cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c93570cc-c347-42c8-bb6a-085b4a60d2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337686de-016f-4901-a8b0-5aaf39b3b5a5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8019fa7b-6a0e-4386-9e82-88e4d70cfc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87612190-a003-41c4-9012-d52845f87891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d06b48c-13db-4637-b7be-920bd962a2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8991f15-482b-4178-8cbe-fef340077a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce21cfd5-f1b6-44d6-a23a-7182c5665888",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dee0d2-d3fa-4405-a42a-91fb251babf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "293554d1-c71d-4aca-811c-98760d3c424b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a126cc-9c80-455d-ad56-87a4faaf3066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9ff459-9d3a-47ac-b623-37db45a715e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea1695d-71d4-4e12-b00d-6ab65f68df81",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73abfc62-891a-4be2-8081-4a90ce26d007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d90b7f-aec1-4e7d-87ce-580dba6ab3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265132e4-809f-49f2-b280-a6f0f819a3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21104080-6872-438a-bbc2-0637ba51afac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c98be4b-be22-4ad3-bc17-e725d294c621",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fa9561-41e1-47c3-9215-1d92c4590341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cf77be-aff7-4a64-ac53-9f699a101dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7c7389-d90e-4480-9ff8-76dfaf428678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8bda4a-c888-47d2-9dd7-876085cbc5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877ad841-7b0c-4ae7-8c7e-060483cb4876",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113978b7-28c4-466c-a1cd-c967c6498c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24dc9e06-121b-4215-b837-a5b6dec5c3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e916b873-96c8-40bf-90c5-74f68805a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5f2563-9473-4afd-960c-37ae7d2fdce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3532bf-52c7-4278-be78-73f38831475f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9456ccc3-3b0d-4aaf-be85-231163e49e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69aa5d7e-3cd6-4cc4-a98c-63676b906f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c930e04-e12f-4d7a-b1a6-16a18ffcba04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "458821f7-de57-4cc7-9ca6-6ad1c4b3f18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c8926a-e2a3-4401-9bc7-65972d3cf2e3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e969ce88-e165-4fe2-ae5a-10d6398facb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c537bff-7db1-41c6-a1d5-d5ff437fa9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bc8ad2-0032-41b4-8dd4-2ce9799439c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9eb7f53-b5ad-4588-9262-a6b2807973d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfd3663-ff81-4a04-8d36-377a2ac528c0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfaac2d7-15d1-4cf4-b36a-e1b673877ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373c4c7a-5a34-4b9b-b6f6-66e544cfcb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1165c7fa-82bf-4de4-af33-c64a1b2a7b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e88a0057-ff4d-4524-9ce1-500b90a0bb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26883ee5-17d8-4103-8ff5-73aa7972dcb6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4821c23c-4853-4527-b0b4-bd509213df5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2744cca4-dc7a-4251-b730-e148e76d8b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903460c9-f90a-4152-a7a3-bda410a4be3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf4cc36-3938-4cd8-8330-04654dafe36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875270f1-bef3-4671-9026-75a680d94aa3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bc06c8-d6f5-428c-a181-5ea5c51d0cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee806a09-6dbe-481a-9cc9-fe300d357000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73414d62-8483-4481-9b37-231665b8899a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "92881f0f-445e-4519-9b22-9119db7e7300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b0029b-a554-440e-8320-07e96370a9f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b48799-9941-4356-bc09-e7fd4961dc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1016b39-9b63-4b76-8ac1-76bcadc8299e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f6b41a-8236-44a7-bf2f-8c4e8850b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "359480bf-282c-4dad-acd1-fb55877eb01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40d2e1a-0c22-4928-8e6c-b1f2dcc1eef0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e026ea5-8eb5-4b89-9e37-6d0855efffef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419714bd-0d08-4e95-a8a5-5b3620b3179c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495576c0-a9ce-450e-819c-fb9e76621355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0601902e-df33-4529-bc2d-30c84d99c1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f930ce-adb0-4d2c-87a2-71bc6a984caa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d432d3f0-2230-49cd-acd2-25aa9e0a91ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cd7492-96eb-4ef8-9ef7-c3e09a97cbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2241c98d-c5af-4639-a62a-41773d59a1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0cfc03e-6e8d-429b-b8fc-0996303a1334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8344cf-2f68-4e4d-9371-b404f714f497",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e44b5a-7255-4e6d-be52-481e509ec771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cf7681-f8ac-4118-b3c6-7f0e8ec85110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429dd8f6-26b7-44ed-88f7-f4a6e2298cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "72648076-1ec0-4e4a-8e0d-1aaf434f2512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da5bd86-11d9-476a-b5e2-ee9bacf5d223",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e67940-5681-4065-817b-374eea56f91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ece6ec-fc83-4306-8f58-f5d2f58ce014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02cbe8f-0720-46c9-b5cc-eb15c6905f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe4de61-8394-46b4-b313-1e5b6f9d87b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759378f1-209c-4426-8b42-da52c9c84873",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79e899f-a823-4f58-8571-1321e4689c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c642f0f-8de0-4161-bef5-30e9fb41fb74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a640c7-7b7d-49f7-93e2-5ef888370005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a30d423-c84b-4143-8f25-903e165d9d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e6632a-7f3c-4141-b5e1-70a99df9c6a0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaba607d-c2e7-4d93-ba06-24afbe0ef5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6e9ec5-1602-47dd-b9db-670f9bc806b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32135f14-112b-467a-9152-1533840851ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee28dbd6-47b1-421b-9598-6d72f00239bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2463f2-25bc-4f15-ae56-c122c4a01fe5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55d9d58-863f-4720-aa2c-128126032dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5142d414-12e9-424f-a1fd-74c69197acd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571c6e60-5736-40e6-b863-127dd1ad96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "053064d6-e450-4f47-a9c6-f515f5822c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a2b297-a113-4805-95fc-2b49d56ac925",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37352ca-2d29-4550-8f2a-73ac6757ee2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37829f6c-2d58-413c-9aa8-e392b53e1419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33af8e6-d337-4495-b775-af3812ec825c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fdc262c-6b0b-4823-920c-f78033ed604d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bab72a2-c50d-4f0a-ba1a-5212907a8006",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100d0bca-ab93-465b-aef3-ab5e96398040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fd85b2-9047-4c42-95b6-aa969aba4ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef36c37-80eb-4995-bef6-122b8691f3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b7b5db-39dd-49ad-9ae8-72c5c731e3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caaaf4f-4c4c-4fde-aeea-18e35a631988",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d028b2c-9149-49e7-ab05-8372ff566c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bd1d34-3db0-48f1-9497-9f709331198f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4b090c-a08e-415b-9d3b-f3c6617ef7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd2585d-282e-4a56-980c-f505767a6fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdd699e-6626-432a-ba33-e3108137c685",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dffc78-bb35-4fc1-96d1-8979c3f729c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5940d20-24bc-41a8-8416-0835cfb4fe6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc552d19-12eb-45a4-879e-7ec6f710b50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3d2172-982c-498e-b7fe-04428319f4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbeddf5a-1f6e-46dc-a679-b400836dd39f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2277c0fd-09c6-4f37-8197-379b09161308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a7195e-d015-422f-930f-954a40c5a250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa40de7-6c9e-4765-9a5e-994033cc0abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afaacfe3-c48a-4778-ae5d-ae6cd93e1a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922063ba-cf17-4b77-9cc1-f378c60f1805",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd428252-2ea0-4f35-bb87-0a4f375996b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9a8476-2367-4ffb-b636-6423020101a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cb54c2-bae3-4e8c-b557-68cdcda67c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fdbe07-596a-43a7-ae23-02e4f75f5e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0f670a-2e2a-4f80-b6af-10e6ccdfa283",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9a26dd-67ff-45a4-9781-73617491baa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd9738d-56be-42fa-accb-c34ff5eb7513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e311d21c-5c89-4e9d-8a65-5c3e5c952d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12575d20-c543-43df-8c93-8bed37ba1b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a284332c-89f2-4051-bb58-dd0ccc78e00b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25074bf7-7e54-447e-b03a-bf0cfa70138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1ac366-e132-4b2b-98b1-c6244a611fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4bf1c0-4f30-441e-a044-89396b2d44d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b30c794e-921b-4202-840f-854e4d10c5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7af4993-1fff-45cc-9951-d3d082242dd0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b0aeda-7597-4541-ad99-0e2d62e4b2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c784bc6-244c-4130-b963-0049e70764ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8285cea0-bc83-41e6-af5f-c2abfd89ef68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38c4cd21-3476-4b66-b6de-54776edb6b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1a2925-9ca6-4255-8a4f-1fcc9b717da9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217f3b69-4517-4a1f-851f-c014f1ae326e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e64eb06-380e-460d-9966-b6eba596ad97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddac84e8-ff14-46bb-9933-c36cbdd3ffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "062ad5b9-9bef-4568-9994-220a09ab87c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a15007-ece2-402b-be7d-031bbb68504b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05436088-2be1-4650-b8de-86a428de9180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b22287ec-457e-4bac-93cf-059cd6227bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2fd3bd-543d-41ff-8fb1-07b702612c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caca7a3d-8a21-40c3-85ad-4221bc3dbd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6811995d-145b-4ff9-ab82-48f8c9c7d87a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711363b9-a950-4786-abbc-90c688b5f5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a012410-1516-4259-8ed1-a315ff90fc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eae998d-7ef1-4c3f-98a6-464420b4bdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29694dae-459e-40b9-93d2-aa897b38672a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e026f1-7bff-4a9c-b652-bc86ebd34bb1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7494f41f-2c0d-4606-b166-ffbf1ae6b8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bc2a96-b846-4d5e-aea4-f97f583d7a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ca178f-9413-45f3-9fa3-076acd85eca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "280d2e53-6bfb-4c5c-9057-38a9cc222f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0724c3c3-be9f-405e-bdf1-81ff2b2145e2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6cfeed-32c6-4042-a218-4c11c1617dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd75873-fa4e-459f-b455-246f5253ff4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460412e7-48d6-412f-b946-74eb0b0889e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa38554e-df04-4756-9a74-b9d1bf5d2ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65d596b-763c-4ec9-af35-f8a70ddf7632",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5af045-14f7-4358-89c7-527d0cdf005e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41af2b7b-48f6-4ac0-9779-a31a805182b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c514c455-6733-4255-b22c-f4bcb16bf997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2fac2e69-9fe5-4797-89d9-cbe8c1e8fd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d1bffd-94ce-450b-8045-676f17053859",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887f1fb4-4d51-4da5-9cb4-69c56b585089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d832af01-b53a-4d2b-bc29-15b7901d9e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0229d2-d4f2-44b9-b7d5-5931aae61afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5617ca-4704-4707-8415-1ac28f51e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5bf381-d046-4e80-b4a3-541858de2503",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3455ce25-0e1a-40a6-9c74-d207d92479f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49797ae-545a-4380-80d5-dbae1c30a0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b39d51a-0d18-4a84-8427-df1d1d56b250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85957a71-c05d-4e0f-99ff-018b90113659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ba32da-0a09-493c-a09f-49b763faf918",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9761ef-37a6-41b7-8ef9-1622c7b24b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2d202e-a230-46f4-be3a-240f151801e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b71a7e-4ca6-4941-8543-26905be790b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e84bda-363c-4f76-b54f-48e1f3e0821b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5bdd26-83f8-491a-98b7-d9cc7ed1c567",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd0bf5-688d-4196-835e-4c571597bd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4322554a-946f-481d-ab34-ba4a20d2069c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0f21ba-61fe-44ca-9445-543965e6928d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18546848-8f28-4569-8a5b-8d26808a123a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10123196-79f4-4b4f-a845-4d52a4076a0e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18acb7df-94f4-4b1c-a9ef-f049cd9ce4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791591f7-a430-437f-a56f-cf89f082d7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86680352-2009-4d9e-a963-9effe052214a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55b6775e-48d7-4c5c-9e0a-75bb9d77f617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad4d661-fff6-4c3d-8092-ef3caa976c19",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b519631c-48ca-4efd-9a53-e4ab12e3432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d623b8-3be2-4b5d-aa62-65b70d836c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09da65c-0358-45e4-9294-d8e8d6e0d411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e37509-00de-45e7-bfdc-d8fe497e2d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e16ab6-b89e-419a-bdab-d8948e2db32c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690601d4-bda2-4e46-8446-f94a1d9386fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbdacf8-39c8-43ae-898c-6cc69a7401fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2aced5-c48f-4abb-ac5c-8cd6ec482df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e01029e6-e653-436b-8877-ea19e9dc25a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883caf98-d0b9-4c70-9f4e-ca3232c7ad1e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e9be81-1c9c-4fb3-a1f6-eb69a19b2821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8a3982-1ff2-4649-86d2-77ad90cafa2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704868ac-2263-4c4b-92a2-0fa1f4309a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fac55582-8442-4cd2-9f42-66dc47286add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac39718-167e-4e16-878e-6018ff6281d5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c4a1d4-9c46-4d63-a337-8dedbcb55a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01202cde-dc6d-4232-91d9-786334d55b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53697e0b-57a9-4e96-940c-21ad4e9be65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbd1765-9227-4150-a463-d0ee4471ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bd81d2-a449-43df-9b5e-d0b8865addcd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f91cb9-ce67-499c-9129-84e3ff97862f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7db0937-006d-4df4-aaec-cad6db8ab024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5a5b1a-b892-4d0c-b1a3-008e3864cf92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a27569c7-04e9-44aa-92a4-0dc4581af824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7476857-04ef-4b02-bfa3-725d34d9b3cd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afdb4ebb-16d4-4a6b-b18f-d4c39df94e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3ffaa2-b533-42ef-af0d-9d70d67bf97c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60a42c3-5703-4c5a-8368-93b57b092518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b356929-d28b-4f31-91df-f120d3c0cc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba2f86f-3bc2-4a88-8e7c-cac8d7c740d6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0003067f-2724-4821-81be-b81d61698939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "19450da3-e490-4d8d-8241-e1bcca986cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0382822a-8bc6-4505-a970-1aeb85b4e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "08dc369d-75e8-4041-89e1-4ce856b0d0e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f191cd86-8f0b-44fd-bc1e-8d4d55b2dd31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dfda549-e56d-4f6a-af29-5aabffe65a73",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027ce4c7-2217-41c7-9b44-7d2786758645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b37a7b4e-0dd6-4c85-a2e7-d794a9add844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fe798b-a955-415f-894b-6b5cdaf5234e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d36a30d5-d9d2-4f23-94b7-7d03e019de95"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "155eb8cf-28ca-48d5-8610-fa045d4bbb40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d55bead3-5c48-452e-9c56-1255a79084e0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64be22cb-92b0-499e-b4ac-6df7f56a6b4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16cfc703-af4a-47ed-a15b-48f1ba3c1c57"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20bc1ef4-17a4-43fa-9484-4b3037ec7d9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97f78749-7e87-4891-a045-fd52fbe77fdf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "df48e372-7ab8-4e47-9019-2a0e11e416b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0563a8c-5940-4cfc-b8b3-b108388254e0"
                }
              }
            ]
          },
          {
            "id": "7a7d9185-d572-43c1-8ef9-2fbca13137fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06bc04cf-0999-4387-a3e6-12afcda5b2e8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e2248984-d796-4f68-98b2-55251883bd4b",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91348dbb-3e8e-4cf9-9271-35203d483c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5c406953-8329-40a2-97f2-f58477bde9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806022fd-7c38-4cd0-a2bd-78db22ef2423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc784b7-28e4-4887-a30f-b2dda95641a2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "35b2da81-c290-40de-a05b-32e7e2a9139f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "202dee8e-fe0f-4845-84e1-40e3e63984a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c7dd04c-f0fe-4a35-8302-6864d6fb5d9b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69aa3eac-80d5-45c8-ad39-9c2ac63f2969",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0773204d-f6a0-4742-bd5f-b81ee5c1638b"
                    }
                  }
                ]
              },
              {
                "id": "634d9fea-472c-4db2-9502-d6f4349d016f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "391a82b2-62fd-4aed-8c4e-8502fdf11ee9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "325ec7a9-3b4b-45c5-a3ce-fa9fcf61e65a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aab318d-9b49-4ba5-a91a-94b3205785b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2b43751-f681-4959-859b-0d15bb0a1af6"
                    }
                  }
                ]
              },
              {
                "id": "d2b652c4-23d5-49df-afc3-4b44ed48bacf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba2bfeef-3828-4f5c-aad3-88d29dadf6de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d4f7c967-a58b-41bb-99ae-8b7ecb9d1b81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01ff5bd3-3598-4cbd-9046-0fa8a3c9d860",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1229bbcc-2f5f-4ac9-a77c-352f314cb5ff"
                    }
                  }
                ]
              },
              {
                "id": "ea49eb1c-d0ef-4468-ba51-826d82d14fd0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c87c046f-0da5-4669-aed1-db9eead13ede",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "17b18615-d860-4998-b167-385d226b2b0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d783b78-1432-443d-9d3d-ca309550eb0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d228dea6-6c3c-4673-8068-8d49c25e6d05"
                    }
                  }
                ]
              },
              {
                "id": "c3f623e4-f680-4247-a35e-871dc816fe11",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ff561a9-4e14-4587-8af7-0414e7a18c7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e940f06-1eec-4e61-8503-600b1288794b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e84f2aad-1a20-4e8a-ab86-5ffe8286f4f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "07847ecb-ffb3-4767-a0a4-101925e43504"
                    }
                  }
                ]
              },
              {
                "id": "a816a365-51a0-423e-9d78-e736819a0f11",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e92fd9cd-c076-4a8c-b6d0-a8b4d4e6f5f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "611ec320-3fcf-4b06-b753-f1ca12c1c4c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3295542f-4373-4904-a460-8aed2e9c0c35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7bb771da-0437-4a77-b1ed-f38ceb64bd8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50dbe100-a6f3-4841-b59b-88197bdf7153",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1f4f4f4-8912-4338-bc5e-d84d29982907"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce074f42-94ea-40fa-99ca-5838e88c61ad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc10928b-23fa-4a9b-a380-212b4bd2c241"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cce146e1-82ee-4b86-bafe-43cfc9b6944c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2e0de7e9-2e38-4f07-b424-29dee2679a8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6b69406-03e4-406b-936f-50ff1ba6d76a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "561f9e60-dcf6-4c9d-a2bd-6d1dc03a8f0e"
            }
          }
        ]
      },
      {
        "id": "9f631ac5-3888-4723-8084-75ca3fc6bce8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2547d0a8-7fce-4057-9310-b80bb11a8e3e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8ef2fa5-9c02-4034-b40e-cf189a0f5584",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a27f4732-867b-4f09-9ebb-15ca26da6de6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5ac1a6-b39f-4a99-b3be-88b1a3df5a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f5569a-9211-4d4d-9575-6fc033fe52ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ed6cf-e730-4f4e-ae97-f42decf8f038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fbd297-0363-42e1-8db4-8080ed35bedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4c2236-bf1b-4955-ab41-2914ad70eacd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c03471-0813-43c0-ab87-f53829d5e740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07b40d73-4d2a-4249-beab-2dbc91753149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a15aa2d-73d3-4043-8e6d-05112a62e3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3e9c3f-d1a1-4815-99d7-2299f6a68ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5ca893-f65f-4bbe-be15-95c3c81b725a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88c8516-c69c-4fbf-a1b5-af446c5481cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63f4dc2-0041-49ef-98f0-bdd1b66c383e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ad5cdd-6f4e-4d18-be85-ac7784e9a4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f33b22-d387-4b72-816d-a7c4bf8c11d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8f1913-9324-499d-9d60-1177e624c6fc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46f7112-6ca7-4861-a6be-34d93d58d501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ceae03-9abc-4f79-87ea-da275fca7732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd227cc8-f653-4622-ac4f-6543d12d7882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1b830d-f392-4abb-8f31-2148e2b4bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738306e1-04cf-42a1-97f6-8c90b0a2ce07",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a80713-ac4a-4d94-87e5-367d7cb23506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54787f25-542d-460d-aa5a-26971a19a436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db3acb9-3b63-4101-ba72-5421f3f2819b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3656933-d719-4f1d-82f3-e18684c306fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615f74c4-6c88-41bb-931c-1af31e9ba619",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b732c218-51e2-4710-9314-61b648c9b72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f14461-a1bc-47c0-9604-0e68fad2a456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5ab719-9ae6-4420-9d03-e87a14888e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cb5c258-2ceb-4164-9348-fb22e2eabff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75c9f3c-c582-4fa8-862d-aa15b186ccdb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c42938-ee78-4788-9f97-f6fb343060ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c33d30-53e7-4be7-b424-f2aca046d907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdd6b78-c54b-4bda-be92-c63bfd1b4607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "09276e94-43c2-412c-a110-b346b1e4db9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdab96b-2884-4dfb-bd8e-ecaa5f990ad9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fbe954-00c2-43e1-be01-613f082f99c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25f0281-fc50-4afb-808d-6301dfe5606c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5927b43b-0977-4f02-bdce-3703920e6dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "292b73ab-e341-4b25-a1ab-ab0378e75f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd47daa-f499-45b9-b3b8-f584ec88c980",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8413e61c-6ccb-47e6-8dd9-d0aae73c7d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03051340-e691-4e36-bb28-35eee96c43bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82e5792-3375-4b26-82d7-ddd4bdfbb6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab2c6bf-7ff1-4a5d-bd0a-c3d242020c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ec1484-efd1-462e-a606-5ef7efd5b9f4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016ef862-ee49-4261-bd09-204ee3ae7f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d6753a-45c8-42f2-8bdc-bc109b09e37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b764d22a-87a7-41a8-9cf4-58af4b33c0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d606b4b7-5d41-4a9b-94b1-d3be266f20cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f36202-41db-4b2e-abce-90b6cfe409fb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc89b8c-b2c5-44d0-83f7-333a91688514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4a600a-08aa-4d13-9407-137dfc452606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a40111-b96a-4dd9-99c9-5a6dc76ba15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "bd706247-5615-40fb-880c-b346c9f7dccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30691d7f-01f8-47e8-949e-9d8543147912",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b126e7-348d-4057-b56c-fbbda8a2d759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df8f51c-7453-4cf0-bc05-4f5d8733858b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f46cbd-fd10-4cdc-a4ce-3749bd85f2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd124953-cf95-4ec8-9224-16c1ff0b3520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e939fc-c3c3-4f3c-99d8-ca01ef0e53c0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf88d79-6f6f-4606-9bf0-9de83b607aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03cefe7-388a-4a34-a08b-9a3f32f8f9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2e83b9-8f1b-441c-9a98-f847fb227739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f099354-8303-4ecb-b173-c8ad4ff9602f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c094db47-6144-465e-a3a2-ee3430a6192d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25edfa38-f0de-4009-84af-ebea4120cb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa0c46e-a487-49de-984d-b2e91636710f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330888fb-153c-4206-af2d-9c3f7f6e234c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "afdad3f9-0ed9-4414-b172-80331fda4b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad877b4d-c67e-4533-90b4-2d1f0b7d4f69",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcc9a75-2973-4ad2-8017-5753f6a8cc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671c15ab-d89c-439a-ab1a-2a80d64631d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cedfb7-bce3-46f7-8e5b-b6647d017d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "36312db8-07a4-4ddd-a38c-44883424c7b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbee44d9-117a-4994-8154-faa3a28ca998",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9777e326-0dc1-408d-ac3d-bfd78dd26cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566194dc-1024-4ed3-b6c2-7dacb255db83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09212d70-cb1d-4a57-b4cc-168333b1d3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "49db0a63-d775-4b7b-b542-c19c83a7575b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0989005f-849e-43ae-9eea-154e45c5b7df",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6969d90-8fc6-4037-a290-808988af43de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1252c8b7-e46f-4e0a-9810-d1f206d0464d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3044377c-0b7a-405d-acff-a4345a26b7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4563443-eae3-462e-9d3e-8fc27ab4004f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6edd85-5a2b-4363-b841-c6f715a7fe66",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb14aed7-b11b-468b-a00d-9d0289587ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7e7cfb-e93a-4d82-a0a9-a9b5782f847c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffdc38b-b383-459d-904e-2d0d158d7ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1de3fb13-639a-451e-8abe-8250774c35ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2a99d7-a1f2-4cba-aed3-10d49d18a7c9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d727d4-af8d-4310-8b61-0d0e8bb4d84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c882cc0d-99c0-4291-8dfc-044791615dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254a1164-ea82-4d56-ab3e-b40e30262a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a867063-667d-45f1-be75-8ccb2d66eedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b7c196-56b6-4530-a5e5-a021cb14b73a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70301bf9-24b9-4c14-8aa7-601c39e1f817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c6ca10-2458-4e96-b3a9-d5e0e20d3ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4d6f58-3db9-41fc-806e-7459a581cd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4df2eb04-a026-4fe2-9e5f-db3f6726403e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6918bcee-ac76-43fc-91d7-654de72d84aa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c679bb3c-03f1-4552-833b-ef17ca76fdb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76994d58-2b4e-476b-8ca4-ca2fa3b57580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00aa851-244b-41a1-9a4f-acb48d559968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e737ce10-abf0-4b88-b69f-9d66dda30deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a60b7a-84b4-4d90-9796-dbb4651b80ec",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243b0d96-2f63-4300-9d72-aaa41fe9bd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c91d62b-80e5-4417-b7f0-57e35d37c0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee70c9b3-55c1-4ddf-a72f-003a15fb174a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7670823f-1ad2-4b58-a6c0-df478d6d75ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7226fb19-9635-443b-a153-b25f6b808be4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82e8188-08d9-4ea7-b742-a4017e5e8f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ca53d8-5947-4aa9-9075-5ff2d842bea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8144bbc0-a719-4c0a-a787-229e6ece0a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65c2817d-49cd-4729-9474-aeb73403d959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83dd368-af43-43f9-b0ca-f5a40932f97d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb81215-adec-4ff4-a8b9-f85464b48012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7dd481-d1be-4c0d-880c-3e2d944723b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea1a30f-3829-45ca-807d-72563117c4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce04224f-9462-4589-9562-8cd68535fc0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02d5c3b-7b46-4e2b-8722-0b2afcc83fb8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ccf13b-30ea-4897-9486-b893ee6131fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15ef8af-9018-4e97-8d7d-e363f9e92b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cd8a74-53c5-4a5d-9235-7d9a77622cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40244a32-f4b2-4969-8cb9-0bb2ca4ff284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506c379d-891d-4185-a096-acc416ba1265",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7618f5e2-fd72-488a-81da-b3f80543b38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5fc0e23-b2f6-4927-a812-feafbd3b27c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0e502f-4c94-4e43-8768-8066372c5d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e4cd9f-acdc-46ad-b113-048f18ff9889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087a2571-0bf7-4a10-9aa0-267046f8397e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f92dd7-3b25-47da-a35f-775246829de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba355aa-7e71-4bde-be83-2450516ebab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e015ca17-ec50-4723-87a3-e9836803e0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "525a6e3a-17a8-4b55-b8fa-1c66638ff436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fe5196-137e-41d3-930c-6b1b51303072",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fad7151-83cf-4109-b6cc-703b6bbc1efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0006cea6-7259-4d1e-be2c-15fa842c69f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7220c04b-9d26-4d0a-8aca-48e1abbceef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14a52ef0-10f6-4411-84a3-fafcb34f4d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8220636d-4e9a-4004-ad1b-1c4af9330575",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4748b6b4-9280-4e49-8001-661a9409e3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ca78ca-da19-461e-8dc4-26886224c457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c39d756-3999-4c02-b376-a5e60a86b600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f704d6b1-d68b-4fbe-a8b0-35da891ccdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87f9bbd-16a5-48ef-9b34-c485078bd99c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3230ea51-85ae-458f-a984-283ccb23d9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78658dd-5bc3-45de-8a99-23c8f0f624d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a0473e-42bf-4efd-aa43-c4ad5e7ccb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0003b6ba-acf5-4fa0-88f9-cf21274cae2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b252c2-f7fc-4f00-8546-2a4676aefa3f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12752bba-06ec-4c2a-8be9-d5040a936cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdc5234-8f14-400f-86a3-8c2bb37bc7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fe49b4-4442-4044-a1f6-0b0790276eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13da83ec-facc-411c-82b9-265f0a60615d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe92a7c0-3897-4b20-bc32-cc9eb9be37f4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf108ee-551b-4f14-8ca2-794c9c375d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc8c4d4-dbe6-4d96-8daf-714b4ee57a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70525bdd-472d-4076-9d24-921510a34830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f407f014-654f-4eef-82e6-10122d05e925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3938abad-d5cf-4e79-9b37-4e793b2ffbfe",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4657a3b-9606-4111-9003-4c86b5fbacc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503fb956-8b3b-490c-92e6-18e1434a5427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d356db-c3ac-49b2-9e57-f93b2e8e831a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36864df2-1bd1-4fbb-83f3-4be8d8735fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab913df-a2ca-4ab7-82a1-fc4a4703ae6e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9483f10-8b67-4496-8fd9-06cd787f588e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed0e8a7-ebb7-49b7-ac41-feb693635096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9778b344-9966-4177-89ef-db2751e9ed35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7686cdff-337d-4733-aa5e-2c9eefc80e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be287b6a-1dd3-44ea-85c1-8ab59dd7f128",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1bee85-5241-4261-bf70-e7a7f8c1cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf99801-34e0-40e7-a2bb-5c7bb9bfd217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d345945-0ee6-4b15-b49a-3e7c235043cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "214d8c6f-d1d0-428c-9f36-6d63213072cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65508011-1465-4f47-ad23-02fb72f525d4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b40809b-ce50-401b-b55e-d5dd3a994dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb679f1-78ba-4ee9-8710-bcf4126de173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7d6d8f-5c46-42b3-ada8-59e0d815d079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f62870d-444e-472e-a725-e34c87d6b19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490be330-f57c-4500-806c-2459b6707db7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76c962d-103e-4520-bc4f-1ea422cab7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3f1ecc-956e-415d-90c9-6d5d19c6c56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30210eb0-2131-4873-be7e-2a21acd52fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb8e18d-4ffe-4ebf-b5ab-80f17fed154b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "70b316d7-585a-4c32-bf68-7b0fb1a7ea3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36d18000-9e32-417f-9d14-d77d5b1d9f1d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3c72c0-612a-4af8-9473-c3630509ca19",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a6e65c-83c9-4792-8823-39f095a61199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7136be4-b56b-430e-86e5-00b9cb3d975e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20e6528f-5343-4109-81a1-9eb8e2b2964d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8129b9d8-a0e4-4625-9cff-462c219ee646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42211630-ab82-4cc0-894e-51e3357b1906"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31a079ba-e299-48a9-8c00-722b606912d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce35f28a-cdfc-4ee1-825b-67db8c8e78f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ebb5dfc-0f8e-4845-9e46-19738583a844",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1947adfc-3e9e-4408-93d4-97d85275967d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "155959ae-2a08-45ed-8ffb-25653ddfb692",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01a65018-0f79-4d9e-a075-b39cfc06827f"
            }
          }
        ]
      },
      {
        "id": "01619916-3404-4549-b80e-6607df46dd79",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "dc069b62-4c29-402b-9a07-9808df8a995f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3800b0b-ff63-4447-8f2b-bf6f953d674b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85383559-0274-4963-903e-ab77f21a0af6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e711889-19d5-4c7f-bcca-30920bc31ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede4dee1-1cd0-4495-90ae-459dadc54655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c0b621-2e08-4507-8350-8b82d2b6ed93",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d138df-099e-48ed-aa96-885638d7b02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837e55ae-c469-44ca-b5df-cf76ca3aeec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d260c5-603c-4e24-99bb-f216fcb2faa4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f909c9d7-8b45-498b-a9e4-98bcab1945fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b87da5-362f-4f83-ae26-cf880164d977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d1a7f7-c1b8-460c-bd5a-500c6a0faab5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2997c3-1491-4706-9434-98b9c5755ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf99772-f76b-4216-9c0a-433a4a4856fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447ef1eb-1bc0-41ce-8666-f4dbc729e830",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34aee681-9510-494e-b529-30aef17e0b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5523c646-8c4a-403f-ac90-7f3becc815da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0d6c60-c0c5-4032-a70e-3fd529fba249",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df884c7f-c1f0-4883-9cf1-761ea97f3ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7f65d9-4d83-4633-9767-c0c58fc541f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea9e555-2db7-4a33-8300-58eb4c5359a9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0006942-97a2-4845-ab63-4b03f5d25321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e35a5a-63f7-452c-8b70-4e4f3104561c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdaef41-1392-42f6-ae89-4699e05e50f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80372454-674d-4ff7-b363-ca831a9045f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b701dc6f-09e4-4d07-b00f-8e1c6c4cc98e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c8d69f-f407-40d2-b055-7f4cd57a7916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe9983d-7aee-4e5f-9561-7bafb98878a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293afb78-bf20-4423-a01f-28ac14c42733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1662b694-a69c-4b88-9fa1-7f57d2201f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bce9e4a-d206-4213-a8eb-ddce2d99b0f0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446b45c7-30a9-413b-970f-1cf9ae8eced3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72dc50b5-71e8-4da2-8d77-ff49750e4bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdcaeb0-5589-40de-ac57-9d6b4604fe6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1aa8b8-252f-4896-8710-ddc6a8094015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b9444c-eec0-4cbf-aecc-ad5d27a499b4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528f713a-21a6-4d6b-b7c5-3f0932339ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea08476c-8f91-4e32-9fab-1af7d221b417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58259601-64cf-4ff2-900b-4bf525a8c742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bddfd9-6532-46ec-a9a1-bef67a94f939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a916c7-4864-46e5-8874-3de8368ed38d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c2c4b4-71f7-47d4-b726-494b9dab9b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514c2d70-b021-4af7-8b64-73c00261f07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def7e302-a6da-4517-87a1-8be815144ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a112509-b086-48f5-a5a5-36a9a612cc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815fa611-fbbf-43e3-9c65-6b94cf6b5a77",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434f303f-59ee-4fcd-91ac-a2e1800f19bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a78ef7b-dcf6-4f11-9b4d-8b927c1d0c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c457ff-5eca-4a44-98ac-2313293be08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f19f3f0-e332-4d15-ba7c-40d2d737c4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d732a9-542f-4a50-a51c-30dc95b555c0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6ba473-6445-4130-970b-e93e0ae9c00e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f5cb94-7a18-4599-ab96-d7881efd9490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032afdc5-3f46-489e-ab55-57fe198f1ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c9bf91-937c-4408-b4b1-aca6263f2828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6400eb-57a1-4dc5-b505-6b3f7d5bc717",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20926da-a0e6-474b-bb91-f193cdf81cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "826d4e4e-d8ff-4526-bdac-c8761cd345b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf1f63f-6548-42e4-8494-2539ac07febf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dca6de8-ee96-41b9-8c25-c523d6d948b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1e5dab-f33d-483c-a12c-00af09c23e7c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b71cde4-d980-4c8d-9f2b-67f1251de9bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d926dab-151b-421a-b928-32d0a1fadc3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf93731-18a2-46c3-9498-6590356239be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff0f670-8f7d-4e5a-a73b-307d3ae140fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e480e8-cdf5-4c6b-8a0c-f27a236f7d25",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d217771b-29e1-43e2-859f-b740ea7ab190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b6b63e-1a84-4903-93bb-d7a99a996901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89eb5d4f-fe3a-4712-84cd-41ed3f887737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b5ac8c-c645-488a-9111-4a59fc5350cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0259d5f-0832-4cb6-a3f7-1bc9991e22d4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66718b2-d25c-4cf8-8e41-755be934c8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3399b677-1461-4df1-b318-5910a38a1440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b13a6ad-db0d-491a-bb0b-587cde56eecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa6c6a7-d423-4438-8482-2573a86fd9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c22645-b611-4809-aa70-bcc5c51dd552",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf193d30-7360-40a3-a941-38f226ab9f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce15f49-9854-4ea5-a50d-4a13dfa5d831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b90694a-2fac-4060-8a6c-397743a12677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1baabccc-faea-4596-84ed-7d9a5cd14f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7433c16f-71a8-42a9-85c6-6b05cecb6b14",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043db55d-653f-49b8-a564-cf7bec1ad8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88f23cd-0907-42dc-938e-0ebdbc5bd37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117b3656-3266-4391-a435-04b424dbbb74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e07ba36-a8f7-4620-a4e9-620b10d38dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ef7676-a204-4ab0-959f-7dc7912e4057",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0d74b1-56e4-440e-bbc2-a98c058625ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ebd909-0196-4cb4-be5f-61dcc830204e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71161616-293e-41ee-a1f7-0a00ec567521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b625f7-3338-4ba3-8f64-c36913af36b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c5f884-0188-45ef-bb6d-19ab844532db",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ca7624-5fd1-410e-b9cd-28ef3c9f1811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ac7d84-d849-4d54-a72c-37eee5ea28f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0055780a-8983-4a51-b4e1-d7ce13b61234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13e2794-f4b9-4aeb-9cd2-7810c2459e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3028c8bb-305f-4c27-824a-ee6960183760",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649fcc42-78ec-4101-8652-b6934252f3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b4e9f7-a5d6-4d23-a398-ccf64024e34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eec2656-1c1d-46bd-98a1-e4dcf1cb2484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6da832-6c1c-45c7-8a5c-2baed2f72e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fe3db5-0e70-4578-b5f9-1289e2483412",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45afdcb3-c278-419f-8578-06b445231a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b207d35-0e8a-4d90-85b3-89c89a750721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b81f4c8-ab31-4c92-9622-59397d55f109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738ff53c-e3e5-4778-b330-2921671ef549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fd0f0b-2fab-4c2f-84ff-8afa9e46aaf0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb30a95-7458-4c4d-9c4b-13572cc649ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c14fdf0-9c59-4332-a266-1b1f5c26445e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e6ba71-74e5-49f1-a572-df2e1d692a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7023c950-23da-450b-ae86-6b76bad79a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f17469-c982-47b1-a9dd-7f824378ead0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47c05f1-8533-4813-b7ca-678df36baa46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7858f885-4620-497f-b91e-380874b8fb53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa140056-fcc3-44b9-b4ad-68ed7a43c1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36a5927-43ee-4108-8915-76a5d1429560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2485ee-5139-4855-8d08-0ec76d492583",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def77002-8398-4bc6-8ad5-42cdb5112c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc6de8cd-c1eb-414a-aee2-ae7d8ebb2ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c96fb5-8d42-4f49-9a9b-a31af6c6ab49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fdeff2-3356-4258-9760-04fa6a543b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26b96aa-8812-47a4-adb1-ace39fbd88b5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45893b5-e3ec-4028-b812-71df4d70a769",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe80660-f9af-4005-8231-dce27148e4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0962f0f0-aa46-4ec9-a66a-1436c5b81f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77467a7-2ce9-454e-aae6-3631662b373c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8285e16a-a539-43f7-8d3b-dfab88b16c86",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffefb2b-e0cb-4ac5-8101-fb88733a1c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90b1d75-eab4-4742-b72a-1f1edd979adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5923899a-c8cd-4f34-9ddd-2c1a3ca06628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30866643-59cd-492b-8957-e86670f84473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3902c9-59f6-4f7c-9b19-5e978ad6de53",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ab6553-c34f-42a8-967b-dc432547ca3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b4956db-5b71-4255-a97f-0b50fd06831e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3c70ee-5a3f-46fa-bfc8-aab8a9ee9754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875ac9a5-1412-4371-9db5-bb67cf92481d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e3c360-789e-4c1f-8d87-5334ced9f2d2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7350bfee-9d53-4596-b1fc-6c2d4999dd40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f790f2-d308-4e99-b7e3-6a7ac69f85a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3801da04-36c1-44d5-a2ee-ea1151b11883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfa501de-de00-48ad-86cf-bfa86df5abdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af66cb17-9753-48b4-a395-cac2dd56fa24",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a29c61-80bd-46f9-b219-e0779c2c1fae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c881ca44-4919-4fd2-a867-cb2b28bac9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d1ff88-3bc4-49ce-8824-2aac087ca6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31735d0b-60ca-49ec-b626-7d25d3a22913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93a911a-ea3d-4cb0-aac2-9e69f9bc8c21",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d2785b-feb0-47a7-a049-5a66d972c1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30dbe93e-ea7c-4138-b55b-3ce9d25f27d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b44db90-ec4e-472c-a5d3-cb8d7c88291d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5bedf24-5660-4603-aff3-e072b5da174e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e777a7bb-62c4-4496-9c1e-42ac01093a49",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9573d6aa-01c9-4279-a49d-5f66ad3be64d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bc0e3d4-4734-4930-96d3-0b26b1b27a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf95818-444d-497d-9326-bf02dcb9a1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b4411a-aa0f-4773-a606-2a161eeb8172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b877fb97-2e59-4462-ae38-96587dd61501",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d41a8f-bb40-405a-9aaa-ec0a9954f621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "166226fe-a47c-44ee-9c42-9557c5977ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f08555-cd3d-42a3-8cc1-257dd2604487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a0bdd4-f00f-4c2e-8112-20ddf6f8795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc56922-2c6e-4fff-a199-c2042b1b7863",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb3ec66-f647-4d0a-bb6a-a34394f537f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97bd340a-c0e5-43e6-a163-6540f706e1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d3fe89-37c3-4bf3-85fb-14b98c458609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddf0b28-1698-4da5-81d9-287d0c4cf3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c24714-8a95-4c81-a1c0-fcce88a1e226",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd999ac5-04b5-47a6-9a12-780dd0f9e386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "491b823e-986e-4bd0-958e-907f0afcc19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18944054-a325-4476-8f1e-d89fac4f0c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d93691c-4ba9-4c77-9875-022e3552d7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d9828e-cf6d-4018-a412-72c4e900047a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd36fadc-119b-45dc-b618-39971338582f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a178c77a-1966-43dc-acb8-156698e87da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e0cbdc-fd7b-49b2-b1f3-2ff5a983c0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7b5280-4819-4cae-bc28-196204272dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a955b6f-a2fd-4f6d-a4ef-a21e11b29805",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4362840-d222-48bf-9221-87ae4994e933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba451a3-6631-4983-969f-678edbbaaf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7b8733-ae85-4ef5-b826-a87f122fec17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3e0bdb-77c7-43d9-a9ab-2305026ba67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3522e1-59de-4e73-a8ca-d67aa056c300",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c880aa5-7954-4c36-af94-1765b07b2e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d301b4-c062-4fbc-b516-0dd0fa5b4f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ab53c0-dd9e-4010-b17c-352ac74d4c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d45d699-75f9-4b42-bc35-5791ece5e16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89b0de3-a9ed-4453-b651-f6fed7319e8d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb36c474-7f58-4470-a9e7-c1cad6045774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2043cf74-a74c-4bee-9355-932e52d4e59a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6510b8-afce-40ba-bb52-dcd1283f3490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03da3464-022b-440c-a83e-a388631e6b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e4c2d2-6a3d-4886-be0e-c82d3a30d838",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47aead58-d47d-415f-ad99-dc8d1e7aefab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a0b823-339a-4eae-ba65-11b79b5c7c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6779497c-8e7b-4913-bc84-6d73c9accc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8440e231-f4fa-475c-841c-b48afdcd77a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cba1dc-43ad-4169-9f7a-1ade8d754275",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c00dfd-d2dd-460a-a2ed-3a388daa7cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bea311-0e1f-47ad-beda-1c0e738aedce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c286dc-592e-4417-a05d-30f90736e8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5b6300-8c88-4131-a77a-9274d48794b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5e3ad0-44cb-4c50-8e31-327b7e5e7cd2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e268a0d-1f36-4c5f-8fdb-cfed37c13a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ed18fb-98de-4dd6-999f-8ff7cda24729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2864f42f-bca9-4ced-93a6-08ef3b2aa846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08ae229-f951-4150-80a4-d86347c42a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929b7d35-de01-43c1-bc73-2cecf330569f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9988e8e5-8ad8-4c6d-9035-2c0b1eab4eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501b4b76-552c-45a0-b56f-5e996e200abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e335f9b-3bfa-4231-a0c5-949d1cb79b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f129e50f-4cfc-412e-a8d8-a5e8c16d4d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e850866f-bd6f-4578-86ea-90b48c73b4d6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea39d708-e0cb-4b23-8d41-ed6d44d760fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8433b38a-8b75-4304-8d00-3ff24f41c63c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9191db-2025-4a14-9ec7-2353b345d2c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcac5115-790d-4780-aba8-0dedb07ec836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad176bad-58f9-4650-962d-7572bb962b02",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c8c7bc-31b8-4580-b4b6-dcbf7e1ba48c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8962e40-5dea-4973-a2f9-12dccef5f061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee80f13-9c19-45e7-9643-a9e50599ac51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5a34e1-2789-451c-9c9c-f5a6e425b8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3d083d-5b17-4ad3-a23a-bdb634f0811e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56df63be-7992-44b0-8720-4d7e498202d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a5e623-8093-4045-a7a4-c0e6e002cb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739b4c5a-162b-42de-b2a7-c86c003e2d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b871b3-48d3-49c1-86ec-36c39bf9f595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1dd642-f248-4baa-9635-ca44940d10f4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390f3307-bdad-461a-bcfe-07c8648a21e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7e22bf-36f2-49ca-9498-3c1dff951232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b2e1b1-cae5-4c3e-ae7d-4ca35b14f15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa618d8-8025-4a71-9908-a7490c6cb930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85201f10-3dd8-4e11-bca5-0cd50ee93ec2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15641ef0-4fd3-4cd2-9ab3-87ccdbf19409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290f4515-fc3f-48ff-bbbf-32d7bde4060a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1019c6e4-aa12-487f-bf0d-42fa94055610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0524467-c087-4166-91fd-732e1279c808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea1b43f-8443-4a00-a989-398272cb1c62",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5b0504-d651-4d3e-84e3-2b315c7d1bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f0b571-22b9-49f0-99da-0776da7ff193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5530578f-1a73-43f3-a3f7-b32c4ccee746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1a722d-8535-403a-9686-217db6cdc878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2717023b-f2dc-46d2-941e-2dae5779f6c4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1685d354-1efe-47f0-b8ba-be244d5a7347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4654be42-1446-48f1-9afa-d16369f74ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61582923-0a8c-4f3b-870e-4a17b55c7cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0a0815-cb66-4331-a5ea-f53fe7a522b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77f2b50-7fc6-40c4-b01e-28a5d77a952d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e88638-e40b-4ede-9f7c-855e49b703f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7803bc-c052-45c7-bc17-add8f7c5e298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2187fa34-e656-4ffa-befd-7fddc30a29ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933fff35-d474-4066-943d-65c3635cf8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106334d7-3bee-41fa-bc10-163f9b16a013",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5643decd-1f2b-4a19-a7d0-9005dfab2a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45830298-75cb-475e-8fc3-7e52672600b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287ca50b-77f5-41a1-98ca-a0d5ae334ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e33d18b-a27f-4c0e-bd52-2f8af467da50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a86cc41-36bf-4ce8-8d69-8b8dbe31b11f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845ccc34-f79a-4a20-847a-2e74def3959b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af66c8c4-f0be-4826-9b5c-4d8d941ca663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8875d10b-38cc-44f5-91e9-a02728cef435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31bfff2-3d3e-41de-9f96-e5fb614ce056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb2e23d-76f2-4830-b84f-da6a746975d1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49174434-4fe5-4db6-80e1-a612ddddda80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff670c8b-e0f5-4ab3-9443-a003ff37d4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e777fbb-fefd-4071-aa16-46411805a9b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0940f1-2c6e-425e-83db-fd1018bd457e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62660ac-d49b-4549-aca3-d87fb41b368c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32965a7a-f79f-49d6-80c2-26169734ec68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae2728a-d733-450d-9a0c-fec8c575d493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb53629a-f6c4-408d-8d36-31db12374116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be462d3-23bf-4c5c-97f9-a80ecc4e3409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6059b709-cf40-4421-a470-2e8c1201a5db",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccc16f9-3ad5-4069-ac51-54e4c0c69201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b87ab26-15b6-4ba9-82f9-4adaa24da994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e8ec26-92d5-4a4c-815a-af6d5f4db1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ada682-704e-458f-aff6-8608854ad89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b0579b3-c7e8-41f8-9409-a651dffe326b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48803f4-2900-4c77-889d-53956fa6e1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af818fc1-e294-4801-82ad-336d843c5557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62cd00ae-417c-47ec-9241-b2a290edd81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9e05d2-a9d9-415a-a0cd-9a6b2875c999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7e8b1e-58e1-40d4-b239-7d82e6d08221",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1980d540-a9b8-4900-acb2-d7ba31c708b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ad62ce-1091-4718-a0a7-068728cbc7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b27ce4-ff5b-4863-bf82-398c1d70f2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed166dd8-8337-450e-abce-2f1e73726e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bba4cd8-1451-42da-a8da-58d25ab7a1b2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79bf27a-521a-4477-a8db-ffee2226e2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e06c733-1110-4e3f-8177-483dd71863ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dded7527-ff80-43a6-8e34-1e302a101601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8eaf0d7-5d28-47f1-95aa-0b231b8a1953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fad090e-7d15-4837-a609-04b272a4b0f9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973b00f9-86b6-4015-a107-88155b8e8da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9076b089-7e17-45ae-8aa5-740ebf630344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85749cec-910e-49af-8959-18d4e2e9b166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd559a53-7cdb-4da3-9421-8f625e26f5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a03f89-0b63-45be-82b9-933ad9635c2e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82a06e6-5723-4d67-861b-f3132a328637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa20507-6d20-48d4-bf40-15ca8b8533af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae857dd6-6007-4afe-a232-70002bdbb972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b17d67-ee53-400c-a8b4-892451076622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1549679d-7f09-4e9b-806e-10fc64284723",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c3c37c-4b9e-4695-a5bb-126167585bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890689c3-d460-4402-ae94-36f454c8c12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968047f2-f1c7-41e4-aecc-425842344e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2642fb63-cf9d-4be5-9b0c-518c77170841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786bc4b4-49bf-4565-bb97-956b4f6f53f0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7db723e-9ba1-4bfb-9409-4fe0608e7416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9534b35-c0bd-4496-8fb2-d3cef96c2f8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08273b00-8d17-493c-a1e9-f13d4bf88aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0d6300-215c-45db-8101-21276275e7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fee4cb6-387f-4244-ad89-a44dce2b441f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbbdb76-d96c-4283-accd-90feb106c6bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "116ad460-cdac-4974-8638-ab5173d91149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03419031-14c1-4873-bcc3-bbc1dbad9c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89459011-54ec-47f3-840d-55ab34946ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b82844b-b378-401a-a898-6e1436fa129d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbebec7a-9259-40f3-a477-fe1d25235954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75156a4d-6afd-477e-9b2d-2ca9ba4cb7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60dab19b-6d8a-4fb4-931a-5ecd22a16171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4bdf882-2074-4ab0-beb4-bdf470eacf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb8b360-858d-4e98-9975-67203c016dbb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c35e3b6-22cd-49e7-b6fc-bc2eac3dbabe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f888758b-60d2-412b-9687-2001381d839a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f254c2b-d462-4686-81d2-2a6fcda039ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d54e0fb-7c35-43e2-ac0e-3cf2895dab1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820942d7-fb47-4883-bd76-2458c688f28e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f37b86-97c9-45a0-8201-085b7b148642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a30f817-2f76-451b-b411-f864acad5279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78876b1b-38a8-4a23-ac02-77162e067f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf14d1d-4a53-4575-a201-9e13a5d0952e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368dbabc-feff-491f-bd4e-4d6dba013310",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72aad950-88af-449a-9ef9-337a12310289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd946b5c-60a1-45d1-a3dd-da4016c20668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b18aea0-7d6c-4efa-adbc-c78674cabdcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e929334e-6a28-4719-bed5-531280eba642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295aa6a6-1ca8-4b6a-8647-36b2a60526bb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e21739-01a1-4b16-a4e6-86e37551c047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "084fda73-4342-4f79-9794-5b06d6d422b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded49d44-43d9-45b3-8ed3-0632a66542d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc19985-e337-4046-a3a5-83f8d5072eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edda5372-b1fa-43eb-b8c0-662f92ffdf00",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915bcd06-2ca2-4611-b592-7b847a4c2b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dbf1cf7-24b6-4efb-982c-2565aa5de668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11eb01e-aadb-4432-bf45-4abff7082f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16567a7e-b57d-44d5-bf9d-67359b5e7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08176a0d-6c07-4049-b894-da69c062f65c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928b6a71-be84-4aee-8731-0a5a2818f37e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52827c7-1c8c-4a4c-8c09-2eebddf61e72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa7d57f-ab77-4426-95f6-25be335c59f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44bb4aa-8e04-4f14-bd04-4f1ecbf14d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492874db-2143-4ee7-896d-1dc2b79247b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0306b0-5210-47f7-8365-ba6d860f3978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb298b28-2e4f-4155-bf46-8dfde404590a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a90c4c4-49d2-41c2-9980-7c543ddfde64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49c8362-15b8-453d-a3bb-58f68391e3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d43bcb1-3b62-40fb-ab1a-abdbcfc15a12",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d2ead9-7231-4f76-91ca-815f75b7582b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480d57aa-cdd6-491c-b248-d3645e359fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cdd36c-68e5-49c1-b950-48e33eb5e58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54820a4-fe82-4a85-a058-d23760964a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69932bf-54e6-411a-a986-a796c1f48d7e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033c01a2-4017-4946-bd59-6470d19da96e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b582dd-b4a5-4523-ba0f-87e236462f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171a2a15-1d18-4c2c-a6f9-8b94c485c7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "309ec193-dabc-4e8f-aa5e-ef727f59d3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95edf77d-c0ef-48eb-96f8-30c740645373",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea598818-8c52-4746-8c03-df189ca2d5da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19380660-9570-4cee-8931-723b0f8c4bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a562007f-5fd0-4035-b4a1-37a2851d87a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b7e8ed-4944-4039-914d-7dd98824e17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782d5702-e35f-41d3-9496-6677c27674af",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08162a1-d826-4b56-b212-553fc6c6ea27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3320eaa6-0c92-41d3-be42-911a9bc241f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6c0d2a-95e1-4a0b-a39b-be55ca8b643d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cd2eb9-029f-4b49-9da7-15fe45ed152d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4d316c-b529-4e6f-8477-7e333c67a73f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9264fa0-1bb4-44ec-9ac3-5e5c189075b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f95213-94cc-4f9f-aadb-9188e006f926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13afa5d-3f93-4746-b05d-da2cafcd4687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3ed8f1e-17e8-4d26-a11b-fe7cb7bbbac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb5ddaf-a546-4574-92d3-ae3d028dbe62",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e3ff5b-a53c-4c91-8d94-24c1474b75d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3e41af-56d5-4c8e-b5d2-155945aa97da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5c82fb-ab3f-454d-b494-1bc66248a5c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c346178-31b9-4a9b-b9bd-11bb07ff3f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ad63cc-d413-4e78-9d87-89b266c92e9f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1aa40fe-bceb-4e92-80c3-d75af095e048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47799cf4-f7c8-49a9-ba94-f321c8f6a4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599a700b-c1df-41ce-b7d8-9e07ffd02145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55835e3a-c6e8-49f2-97b6-ed86b5381496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6aef79-c78e-44d3-9840-ad9b615b4a27",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe102fd5-ae09-4489-b511-5c543b41d7c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb2a829-8701-43df-89cb-fa881b37820a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d425e8-1635-4430-9c10-dd5c86e4b7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44eb725b-4f59-4091-b612-718d7bcd7858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b926aa88-d479-46e5-acf1-4e785e8e47ac",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716adc39-5c5b-4521-ab2c-483bd79553a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e32542c6-e117-4ffc-9e93-f6c09c5b6f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a842f3ff-9b52-4457-abef-871694e873cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e345bb-0506-4252-bb58-d2df3c69a798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f44a1d9-ba56-47e0-b8af-908abf9294d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4817270f-819b-4475-967f-cfd42ee0dc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0dcfb97-ee1c-49e0-8bb6-9c0e63b74a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195afcc5-8cbe-42cd-9706-f8694fabc335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c813183a-8be5-4636-8e81-430fe4bd16ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08fabb1-4e6a-4908-8fe3-fda3f8f33398",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee435d8b-c13a-4f49-9190-a9ae4aad3d52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2bb06d8-d9e3-4039-9668-85e5883cae37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8808bea-5ffb-4bdd-ae1a-231f04d1c1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bcbe1b-5dad-4ff8-8e98-c3f0c59b04ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f72aeba-ddb9-4477-bcd7-f14c8f4636f9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fa46fe-6f6c-4fff-923e-14b1a9bdd444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a4c5597-c99c-4bcf-bbfe-520663ca9a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72180886-9e0f-41a5-9915-73da288b5aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e561e50-08a7-4f7f-af7f-a56bbce4de63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33247b26-5fe3-413b-9586-49ee1bc05f42",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd66683-dc39-4093-8424-d4356df62893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86237696-7465-40b6-a34e-4dcbf6dd8f89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e762a0-224c-4676-ba6d-700b47fd9114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836fc36a-d1e0-4ef0-a5aa-c56a305a26b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b10805-2f47-4c7a-af84-2b611be8a04f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b043853e-ed4d-4f97-b7fd-5e91018aada8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a25f9c-98be-4f4b-ba96-d20be501685c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b38d6c1-294a-4fbf-bd97-bb1620f343e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f75e07-207e-46ae-9c9c-b0b9ac16d5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8089d9b6-0f7b-46c6-81f8-ea2bb650c34b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3e4496-7623-4bab-870e-edfb463f1afe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae37161-3eae-43b0-a9c8-fc0ef219c339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47d4ba0-e6a4-469c-ad1c-5200019b3c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84abd4be-3977-456e-9b66-a0f1ad1cbb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce80474d-2753-49f3-8691-9fd2612e5b8d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ec58aa-e456-4438-b371-9ce45a0d9481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35399a67-4895-4ea2-b4e2-32ca2fbf52ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af199bf3-7803-466c-9de7-c951e5a70d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a85ff5-8db8-4d96-85f5-b1ea52b97c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc26649-f4f9-40be-a646-8b2715242f8a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2584feb-8eb2-4946-97fa-d7431c97fa27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe82439b-e620-4225-ad7e-5e0554fe6535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4689fc6-60d7-4be2-ba7d-6b8ab98da67c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdffe33-1d91-4120-b6b4-364837e620a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd9e745-68f4-4957-a0d2-33cac9bb6362",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a949a8af-db3a-460a-a203-f02045f7ff8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0305c811-92fa-4bfc-b469-9a7f79a63e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e698caa-fc5f-49df-a804-614b71e5cc65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16bd180-c043-4695-8d49-60db08836757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e461f8eb-6e37-4a3e-9c6a-7efc958c2cb1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9182784-2b56-4168-9c3f-ff00994826b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60cec3cc-c8a7-4aa2-9d3e-6b2d26d98929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860250c5-4a7e-45c6-9834-64663c5204ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfa438b-4673-4f43-ac01-711cd546b3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6883a371-e52e-4ea6-943d-9abd3c4fbf8c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041d9ffc-f14a-45ac-9708-5cbc3a681b31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2137785d-7453-450f-8770-f98305ca4741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2279b8-7798-453c-8aa4-ac1f10641e19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ced59d-31e1-433b-92c3-cf7e05362aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f0d0c0-70d8-401e-84ad-0979306105bb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d18333-1d54-45b1-b549-453391532a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdabb0d2-8b4d-449f-8ceb-7bba1ecf7e09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a93799-135e-429d-9e77-dee4c3973bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cceb83dc-f37f-4804-a059-051a7547b55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12367164-e11b-4cb9-a93d-21b98340c85d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295615a7-e9d1-480c-a668-910be6992cc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a75e79b9-2add-4fdb-8e69-380011fca7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5971cba-400a-4cd3-a065-ae7896a719bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1c96db-a470-46a9-a664-866340fc814e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37daad34-4052-432d-b542-9d260e53f3b6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f7d555-766e-4ab0-b27e-7d9a38f786f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905b1be8-c61e-4a99-9ed5-4e5d9928eaff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85defba2-b4d6-478d-9fa4-cf460fa2eea2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e375a7ef-794c-4d94-ba7f-6522b68d2e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9056a1c-0278-4e64-ac08-4f4d28ebf101",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42540364-367f-4ae3-98ca-4ecb7ddca42f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd667041-85fc-4956-a61f-3a14cd2890fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57376e4b-41ed-4587-8fcd-bbf2ba3ed5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9403de53-cb82-42de-93c0-cc67f59d2b6e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb53bbdf-c289-4383-8dcc-dc112f9f09db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ee356eb-7262-45d6-9fef-fcd330eb212b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56101224-adf8-4da2-bbd1-ca6d68082935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2cbd5448-0693-49a7-a0c7-af905114c305"
                    }
                  }
                ]
              },
              {
                "id": "b481f949-8ff1-4f64-9085-ae3062ad17bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44db4624-14e5-4071-ae18-593da6b73cf1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27d2b83-7683-4138-8a68-797f58f1523e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2aa95c55-b268-453f-a075-7f546bfbf387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914e73b6-948c-43cf-9304-0b5c94eac71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f31bbaf0-040e-4aee-a2d3-be264645ebe3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2cc5ceb-277c-41e2-9a04-4ca1f4409dd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e48a87e8-201d-4456-94bf-3304aadac760"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d131fe7-7b70-425f-bbfd-1101e5b42f8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3f256b0-6d0f-4dc5-8944-d4b58f131235"
                    }
                  }
                ]
              },
              {
                "id": "b830f6f1-c644-4f56-8768-12e8cd340e2d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0edde975-9bb3-4411-b8d8-26776646bf82",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98506bfa-9494-46fc-9725-2981c8e829e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "035b34cc-aee1-49d4-8649-47b2feefa6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68fa403-51b3-4d68-8596-d4f24d0ca344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c862b31-746d-4efc-93d5-3313038f1a87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "50896554-0143-4bc8-8bee-ab488768dbc1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a1ca7d6-b92b-4c6a-b555-384e31c571b1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "286d2362-5cd8-4d98-aff6-c0cd4ac24d57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dc56596d-c520-4470-89fe-e6c5c1e66969"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "849f3838-b1e3-4713-b3b9-04ef7f69dd2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80308e85-5d93-4f4f-8bc9-9ecc3d23a578"
                    }
                  }
                ]
              },
              {
                "id": "99b22df3-bf00-431a-bc40-11d011ecdc6b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "443bba42-4346-428b-8f7e-342eb1d26a23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1f2a130a-62c2-431a-8514-97457ceb6bfb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c792a2df-45d1-48ba-93b6-58b451b05e12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0534710-cc7c-44ec-962a-5fa45667297d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "649a1016-c172-4023-ab85-571a85abb3dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b340171d-21b2-4020-a69a-6de67fa44db7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af8662f4-1c27-47be-931b-dd16ec54f5b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ec3e03d-531b-4b4d-9fd7-e5bb72e82970"
            }
          }
        ]
      },
      {
        "id": "43d90202-62df-4948-8ba8-8e63c041c822",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8df234e7-37fb-49ed-b256-6f8cf7cca8ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe0aaba0-797d-4e10-bc56-736a0981032a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70122e28-cca1-4a4d-a0df-e726ab6e7f6c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfa6753-f23e-418b-b482-a106eb952507",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6d3302b2-1d26-4bee-a0ae-4401d644b6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20659c9b-e327-45bd-bad9-5e088923f7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc69b74f-b1f3-4b77-b9c8-5a1998a42bf2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be1d75e1-5e86-488c-8024-e364ebe6d5f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa71e4d9-3428-43c4-b336-e364e4d1c2f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3a9e7a4-e4a8-4d26-984b-84427c1b06f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "569f7cf2-c2f5-46c3-9bb4-9fec1471d5c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b38292b-3ab3-4de2-8b6d-09b3767a9401",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8389d17a-a365-426a-b149-579ab0389f18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab8d2241-2590-4062-b693-56ed310d0d36",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5ed7765-d5ef-412a-b3b1-d22a170c61dc"
            }
          }
        ]
      },
      {
        "id": "bb063824-b509-42e7-885b-4bab0f3e17a4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1d35c6d6-5055-4a22-94b0-a25e3eac921e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fc5e722-a4b4-4b8e-bd09-2ab0c0d05024",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "17c93f67-0511-4746-ad94-d16c08e011d2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acd348c-a128-4f66-af8e-d2f49b1b2e7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fd8cde0-e3b8-4d0b-ac6d-df52bf5d3686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f83f2b-7943-4305-8e2f-02e0347cc083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a10750ed-ef9e-421c-b736-0796c3b1cb92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b94b040-26db-4812-91b2-be6bd5ed7a97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b37eb483-6910-4128-9117-e2796920395e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ffd98ac-6a7a-4d79-8f9d-679d1096ce19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9cec3a5-ed37-4873-88ae-b0c29b2a2ea4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67110540-20bb-4ee4-84de-86daabc3857e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a014de57-6c1c-4879-8178-8f9470774a81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fc22ffa-55c1-4ccd-b5a3-673433ac2515",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e076799b-b2bd-4fb6-85c2-08d19d0c2ee3"
            }
          }
        ]
      },
      {
        "id": "a1a600e9-181b-4b95-afcc-3bfac0ccff6b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "677ae3b1-a75c-4b82-a497-5d84511c835d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e33293f2-2d17-4a18-a665-bdc1c44632f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e22b088e-8f40-47a0-9a44-2c254193a974",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44ec068-5012-42de-8c58-739eb061d1ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3f20a01-436b-436b-a90d-78730586f356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7968a5-e61c-442f-bf7a-ba5d5339ba78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b811d175-1cd1-402f-8dde-6d3fbb7eb5b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51d7da83-3025-4428-94fb-7d1009802aec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6910949f-c515-40f7-b3f8-c0164a8d2b65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b5eebda-d477-46a4-b69b-7a9e51edcd00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39430e5b-7c57-40ef-b5db-768c1a56873c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6cb9f97-d39b-4236-b570-569ae960980f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72cef6a2-d2dc-4251-adba-d28f87301476"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce081546-24a1-4c26-bc80-78d015136232",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "205edbdf-b975-4f17-94b1-0cb95182e1c8"
            }
          }
        ]
      },
      {
        "id": "a7acb7c1-84f3-4660-a5a3-352b52348421",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87caca8d-165b-49f3-9d8d-7b8d5bf87465",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55dea668-173c-4f33-853a-566a2b686f22",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0305dd73-e025-42e3-aea2-20b3ebb9e260",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c915fa6e-d9f6-410d-b4d0-dc007dad6a94",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b252ff12-b030-4c8a-baa7-5e70173c50bc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.6904761904762,
      "responseMin": 11,
      "responseMax": 664,
      "responseSd": 80.69710801900143,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718066279328,
      "completed": 1718066304620
    },
    "executions": [
      {
        "id": "7e37a96c-8585-478f-add0-156b7bf02308",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d94ae0e-0722-497f-b27b-a871b7857500",
          "httpRequestId": "01d696fa-4008-4696-a10c-1da36bbada3f"
        },
        "item": {
          "id": "7e37a96c-8585-478f-add0-156b7bf02308",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "af1e76f4-ba27-40b8-82ef-67099e32eec3",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "1e4a2d9a-597a-4cf1-b277-67d047c194fb",
        "cursor": {
          "ref": "d83854d4-deab-4066-881a-9dfd21d7994c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "90220fe7-9009-4df5-b135-d29b5d63552f"
        },
        "item": {
          "id": "1e4a2d9a-597a-4cf1-b277-67d047c194fb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c4cc2ef4-b0d7-4f70-ba4f-33c7b7657b15",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "cb618413-9739-44f7-9ed1-71b86372f2aa",
        "cursor": {
          "ref": "c104d902-a982-4d85-9062-7144ec5354ab",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8b7eaa70-1855-44bb-9290-970335fff5f9"
        },
        "item": {
          "id": "cb618413-9739-44f7-9ed1-71b86372f2aa",
          "name": "did_json"
        },
        "response": {
          "id": "4340bb48-21b7-45a0-8eb6-3a4d8bac97a8",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260297d9-8ac1-4de4-9aa4-9752c8a11a77",
        "cursor": {
          "ref": "513d1472-c7ac-471c-9ede-4f74f3dec8e6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c87b31c-e38e-451c-b072-79b53be10ec1"
        },
        "item": {
          "id": "260297d9-8ac1-4de4-9aa4-9752c8a11a77",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9daf561-3172-415b-8608-08424abdf993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260297d9-8ac1-4de4-9aa4-9752c8a11a77",
        "cursor": {
          "ref": "513d1472-c7ac-471c-9ede-4f74f3dec8e6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c87b31c-e38e-451c-b072-79b53be10ec1"
        },
        "item": {
          "id": "260297d9-8ac1-4de4-9aa4-9752c8a11a77",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9daf561-3172-415b-8608-08424abdf993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60967198-5541-40f1-813d-3877342577c3",
        "cursor": {
          "ref": "e12ac6d9-2621-40df-ab68-fdc00e667865",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3b69e98f-15a8-4569-9591-355b4e111df2"
        },
        "item": {
          "id": "60967198-5541-40f1-813d-3877342577c3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "37cb3617-d75b-4a66-8a0f-d8c3226572e5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 312,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf4afb7-4a9e-46bc-b543-a22016dfd363",
        "cursor": {
          "ref": "a06b620b-611a-4c3e-a0e2-184f7aaac2be",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5ce5e10-db70-491a-b31e-1634b1c69633"
        },
        "item": {
          "id": "7cf4afb7-4a9e-46bc-b543-a22016dfd363",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0823d413-0fb1-44a9-a230-e00da7b1eaeb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b22400d-5e2b-4d38-81b7-194a94d86761",
        "cursor": {
          "ref": "caca3f21-006d-4027-a6fc-e75dba4cd231",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "93c2f324-d7be-4864-aba8-736dd4006660"
        },
        "item": {
          "id": "0b22400d-5e2b-4d38-81b7-194a94d86761",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ebf0b463-43f9-4618-9ccd-75c02b3fc482",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc33f6d7-fe71-4213-a49f-baef6fd41e73",
        "cursor": {
          "ref": "673b9b51-c0fe-476f-b06e-37d3527a8b4b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b722eb93-48f3-4659-8e20-6e99402bf194"
        },
        "item": {
          "id": "fc33f6d7-fe71-4213-a49f-baef6fd41e73",
          "name": "identifiers"
        },
        "response": {
          "id": "8be8253f-dd4f-40b4-a055-ee775feda1f4",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d57f2dc-a737-4701-8e15-a2fcea6f2402",
        "cursor": {
          "ref": "32f55eb4-64e9-435a-a6a9-8c48cddf2bd7",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4849e68b-448c-4b69-a864-90fd89acd54d"
        },
        "item": {
          "id": "8d57f2dc-a737-4701-8e15-a2fcea6f2402",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4daf1b46-e526-40fe-9a67-4c5a02ae730b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7e0d2a-7ed5-4e99-b1ac-0f92ffc7de6f",
        "cursor": {
          "ref": "18eab386-bbe0-4b5a-bab5-22c8a9132b99",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "417ebc6f-f2c0-4d1d-bb54-bcde23b00ed6"
        },
        "item": {
          "id": "bf7e0d2a-7ed5-4e99-b1ac-0f92ffc7de6f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5f010545-aa1d-4135-90c2-26cdd75939e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cc6afb-cff1-426f-9977-1d850f85114e",
        "cursor": {
          "ref": "7cb6e9c5-c972-45a9-adc7-704df06a2400",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e42c2971-a535-4b7a-a1bc-a3f8cf24ef7f"
        },
        "item": {
          "id": "a5cc6afb-cff1-426f-9977-1d850f85114e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10182e24-6c6f-4e1f-9a57-653663d0d0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b684170-ea4d-4362-924c-a57855a84220",
        "cursor": {
          "ref": "84b4aa64-be89-42d7-acdb-2f91132bc8dd",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "675a5ff0-4dfb-42a4-a21a-e0deea106677"
        },
        "item": {
          "id": "9b684170-ea4d-4362-924c-a57855a84220",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b8d692be-dc0d-426a-a8d7-404054c9af8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042e90bb-7037-4407-9990-4366c082349c",
        "cursor": {
          "ref": "f6f4a0bd-a17c-4b0f-bb4e-0d1be4874261",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a38630d3-e0bb-4d66-8cd8-da84f5a0ab09"
        },
        "item": {
          "id": "042e90bb-7037-4407-9990-4366c082349c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7c517918-9c9d-4c46-a229-f013ca0478a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc32962f-93d1-4e83-a927-30106d47134a",
        "cursor": {
          "ref": "e30aeb71-487e-4aa7-a4c1-1e866c8ac6fd",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57d96827-03da-4e68-87fe-cd37834b8231"
        },
        "item": {
          "id": "bc32962f-93d1-4e83-a927-30106d47134a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9916bbde-27be-48a2-b559-7070a7d5e1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2901121a-1081-4f7d-99e2-24517fa9c115",
        "cursor": {
          "ref": "b6ed02b7-737b-400f-8642-3704d3ff64ce",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "df29885c-4ca8-4d12-bb3c-27f3ebb6d83d"
        },
        "item": {
          "id": "2901121a-1081-4f7d-99e2-24517fa9c115",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "31afb7cd-8dd2-4db6-9b7f-3dbc91f394bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c1a473-a51b-471d-a5d9-34c6adb61e12",
        "cursor": {
          "ref": "1d3a69be-2490-4dd1-84bd-6b6160473f19",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "34e1b984-6f77-47cf-b936-e625cfc5fd94"
        },
        "item": {
          "id": "74c1a473-a51b-471d-a5d9-34c6adb61e12",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "92f79566-e5a5-4f85-aafd-bf23db786da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a79bfc-0e1d-4e4b-b053-cd65eb92c8d8",
        "cursor": {
          "ref": "99ba03bc-1701-4b1c-a818-501b944dec97",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b333b58a-8909-4ea2-a8df-51ecb89679f3"
        },
        "item": {
          "id": "99a79bfc-0e1d-4e4b-b053-cd65eb92c8d8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1902ed44-fd2d-4ef4-b01f-263d110259d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7ab8ba-fdee-47d4-995c-40758a25a03c",
        "cursor": {
          "ref": "c8aff09a-956a-451c-9a43-f56cd07ebea0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7c5016a9-3ccc-4932-9027-c02192f2c0c2"
        },
        "item": {
          "id": "fd7ab8ba-fdee-47d4-995c-40758a25a03c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9a34c5d6-3684-45e7-96fe-72b12646215c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7b39f2-c931-4a75-b76c-e4054481093d",
        "cursor": {
          "ref": "9254fb5b-5242-492f-a7c9-a0a8016e2bb6",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9b5e18d2-f605-4c64-af72-a62aab285603"
        },
        "item": {
          "id": "cd7b39f2-c931-4a75-b76c-e4054481093d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f39a75af-6260-4c20-97f0-87f62bd87821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1bdc8b-05b1-4140-8e10-8519e7e059dc",
        "cursor": {
          "ref": "87c0f820-2a15-4c48-a5b3-e87ec5dabf68",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5e35b93d-3131-4f50-afff-6ba1707eddb0"
        },
        "item": {
          "id": "6a1bdc8b-05b1-4140-8e10-8519e7e059dc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bae9e19f-bd97-44d2-8ba4-e3d6de20f9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb337dd-cc52-46ab-a560-fd5ae3a2b815",
        "cursor": {
          "ref": "2681da42-ce06-4cbc-8202-4e7f70f4bc95",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e511d7a-63c4-4118-ac7d-5b35a8a8811b"
        },
        "item": {
          "id": "cdb337dd-cc52-46ab-a560-fd5ae3a2b815",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c91a389c-abcc-4ca0-b735-712f8229fcfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4166fef-34fa-4007-9c32-59827d48d672",
        "cursor": {
          "ref": "ccdec7d5-0d94-4e9e-933a-4671e6f89b48",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d0de7e5a-399d-4377-a02c-a865a358247e"
        },
        "item": {
          "id": "a4166fef-34fa-4007-9c32-59827d48d672",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "821e91d0-84e3-4369-80b2-2ac844584f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a114e181-2ed7-410b-aa23-382936a71e93",
        "cursor": {
          "ref": "70b23f8b-943c-4951-a984-c3bec5be7b31",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9bf76731-29f4-4374-8bae-e67577dd55af"
        },
        "item": {
          "id": "a114e181-2ed7-410b-aa23-382936a71e93",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "944cec0f-bc67-4c31-ba28-59de183272ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e932e60-5c7c-4fc9-9656-6be61b522b8f",
        "cursor": {
          "ref": "b399815b-7bfb-440e-8284-f3f198f4edf0",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9171afd5-4b58-4be2-8ca6-0f0644824ed4"
        },
        "item": {
          "id": "2e932e60-5c7c-4fc9-9656-6be61b522b8f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "504fd89a-7bc0-44b2-bd53-77e1ecbbf71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ac1d3f-832d-4026-ae30-f21867c6d840",
        "cursor": {
          "ref": "e9a97451-3a8a-4ed1-a1f3-f35f45e56137",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "acb8d2d2-4397-4f9b-903a-4844b9ae7b2c"
        },
        "item": {
          "id": "a2ac1d3f-832d-4026-ae30-f21867c6d840",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b694fa72-718a-4458-a84a-66d5d6e2c25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e3bad3-9d10-44e4-b9f9-3833d34839aa",
        "cursor": {
          "ref": "6e7ec053-7151-4cda-a6ba-db8a0a1f17c4",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c75906c7-258f-494c-ae15-94f26879f29a"
        },
        "item": {
          "id": "97e3bad3-9d10-44e4-b9f9-3833d34839aa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a42934dc-fbf1-4b66-9c55-b60ab0e9a4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf08319-520d-45d5-a8ea-079382a9e67e",
        "cursor": {
          "ref": "ad6da6a4-d69c-4320-bc8e-f8562d2f64a2",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c3299206-466b-4f6b-9efa-f24fdf802ff9"
        },
        "item": {
          "id": "5bf08319-520d-45d5-a8ea-079382a9e67e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c7a0d189-51f2-4752-baff-db0576de3e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c13822-088c-4c3f-9b2d-b1dd546f852d",
        "cursor": {
          "ref": "8c102855-e50e-4553-bd60-cefaca482f38",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "006625d3-6f87-4898-b0fd-6ca06d5b6c50"
        },
        "item": {
          "id": "77c13822-088c-4c3f-9b2d-b1dd546f852d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dd0a4905-f457-4303-8645-82921277b5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ac2351-8d37-44fc-8302-4a39966a8493",
        "cursor": {
          "ref": "f66fae64-cbf2-4633-95bb-9fbe0f922a23",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "56337ef5-6361-4acd-a70a-a80d8248d1be"
        },
        "item": {
          "id": "49ac2351-8d37-44fc-8302-4a39966a8493",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c554ae08-1968-4021-b6ba-a3607cd2adc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52056dd3-6bcf-42c0-9cc9-5f0a1d0419b3",
        "cursor": {
          "ref": "e5ba0832-17cf-47c6-97d8-39847a1048b9",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a71693b5-7711-4ff8-8a62-f5879dea2062"
        },
        "item": {
          "id": "52056dd3-6bcf-42c0-9cc9-5f0a1d0419b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5a79df1a-664d-42af-aba1-f3d907a9fb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3573a0bb-9249-4be9-81ed-240651998a1e",
        "cursor": {
          "ref": "b7785cfd-beb3-4fef-b415-8dfd21ddcde8",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a172eb2e-dd4e-4fb2-8610-d34cbf91c567"
        },
        "item": {
          "id": "3573a0bb-9249-4be9-81ed-240651998a1e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "caef7acd-be87-4e27-8508-5a43c364993a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d51062-fb82-4203-8728-fb2000bbe6dc",
        "cursor": {
          "ref": "091b20e7-f09e-448c-ae1b-ee6b2b0e6ad6",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0d153276-1243-4bbe-97fb-a6a3001bcb05"
        },
        "item": {
          "id": "a7d51062-fb82-4203-8728-fb2000bbe6dc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7784f3b4-aefa-4a1e-bcd1-46a033361454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5592d807-71ab-41ac-bef2-342b57b5c107",
        "cursor": {
          "ref": "59dbe8aa-02c5-4414-a31b-238b657e7240",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1b94b86b-a9fb-415b-8129-0e669809afd5"
        },
        "item": {
          "id": "5592d807-71ab-41ac-bef2-342b57b5c107",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "67255cab-adbc-45da-bbfb-fdf027ba4922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbaa98d-2acc-456d-b0f0-91a9195a31e5",
        "cursor": {
          "ref": "d2a8852f-6f78-4a82-903c-473c7a1e65b1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "365f3dd6-2a76-4695-bca4-1e369ec6b54f"
        },
        "item": {
          "id": "1bbaa98d-2acc-456d-b0f0-91a9195a31e5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "61e882aa-0c14-440c-a17f-3a1c0f8f43e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5776ea99-9a7f-467b-bf02-0c206b587261",
        "cursor": {
          "ref": "c1deffc2-49fd-4cc7-a853-a88b14bc9fc9",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "06bd54cf-67d0-4a97-8158-4d7e3d0b6c43"
        },
        "item": {
          "id": "5776ea99-9a7f-467b-bf02-0c206b587261",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e07e0e29-851f-4e45-9e41-d787cf880ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3de150-39e4-4ff8-b4d1-dbbbe527ba06",
        "cursor": {
          "ref": "6d4661fe-f243-4734-b287-b0886332ca80",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c9dcaa66-8381-413f-b35b-384348ae0037"
        },
        "item": {
          "id": "ad3de150-39e4-4ff8-b4d1-dbbbe527ba06",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f68fda4c-a895-407a-9e0f-00addda9d5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38794adc-8ef4-49e9-bce5-bca5ecbf5e5a",
        "cursor": {
          "ref": "ae6de5c0-254a-4a9c-a1e2-b6585e8d5d75",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4f24fb63-a4d8-476a-8f12-7c96d6be1310"
        },
        "item": {
          "id": "38794adc-8ef4-49e9-bce5-bca5ecbf5e5a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "07754079-f475-4bfb-aa36-4025892e8952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04c6c8d-f03c-4d38-bee2-92d228861fbd",
        "cursor": {
          "ref": "1bf3e1cb-414f-4082-bdb7-a5b23cd8fe09",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9573aea1-7f32-41bc-8978-fee6549ab464"
        },
        "item": {
          "id": "b04c6c8d-f03c-4d38-bee2-92d228861fbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "52823d91-bd9e-410f-9214-df1f775da4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4f975e-2d89-42e2-b256-721d1ad65734",
        "cursor": {
          "ref": "f67b662c-1f61-4d0a-88c9-ecbc56dd868e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c72b76df-8120-4fbb-8e9f-3ae36818603c"
        },
        "item": {
          "id": "fe4f975e-2d89-42e2-b256-721d1ad65734",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d5caa856-1367-493c-b491-2b8f1f6c6765",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "91edf20a-c4bb-4bc5-a0e3-4f24fcfe6166",
        "cursor": {
          "ref": "7ecd53ed-d5ff-41b5-b2e4-4f7e073c7f47",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b842ff41-f84f-4119-93f0-64d5ddd8c787"
        },
        "item": {
          "id": "91edf20a-c4bb-4bc5-a0e3-4f24fcfe6166",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f0b5dfff-a86b-4d08-ada3-d8e3f6ffe6a0",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2584afe4-acd6-46d6-a56b-c17a58379363",
        "cursor": {
          "ref": "a2ff5eab-a380-45dc-aee1-d5644fdb1b05",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f9849688-3ec0-43fd-830f-e8accc21b99a"
        },
        "item": {
          "id": "2584afe4-acd6-46d6-a56b-c17a58379363",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "704f790d-e495-4d4c-9435-e5e75b9d33a0",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4a48ff29-6362-47c3-a635-95d71e2579ca",
        "cursor": {
          "ref": "cbeea65f-11f3-4583-a9f1-7e76186ef3e1",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "22125464-e246-483c-8bd5-84c129eac942"
        },
        "item": {
          "id": "4a48ff29-6362-47c3-a635-95d71e2579ca",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ecb4061e-032d-4301-9974-0e5a2aa99db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94ae624-70dc-4787-a6be-7ae7d837ec7c",
        "cursor": {
          "ref": "5ce32856-af8c-462a-92a6-870f2f5889d8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1ad71d90-8aad-4dab-ab41-062cc3d618d3"
        },
        "item": {
          "id": "d94ae624-70dc-4787-a6be-7ae7d837ec7c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1856c727-b802-4b3e-bfff-3ad284f86188",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a2a6f46e-4692-4747-b1ba-4e5ead2e6b19",
        "cursor": {
          "ref": "475d42d1-5196-4efe-84f4-ff32ef53c3a0",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f0deb397-d5d4-4e05-8081-1fec86ec1863"
        },
        "item": {
          "id": "a2a6f46e-4692-4747-b1ba-4e5ead2e6b19",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "230c4678-0bc6-4898-a6e8-5ae38004398c",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "05673810-ece1-4350-81f5-210861d2ec5c",
        "cursor": {
          "ref": "494f66d4-41ea-440b-9882-d577076ce777",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "55157db6-fcec-4197-9875-b0c5f984380c"
        },
        "item": {
          "id": "05673810-ece1-4350-81f5-210861d2ec5c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0c8d05cd-616c-49de-a2dc-2f06e9943471",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "59f08d3a-2a30-4c48-8014-7701971442f4",
        "cursor": {
          "ref": "38c4b4f6-9a93-4ad6-b2ad-82e3e07c59e2",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "06b29aff-867d-46b1-b0e1-1c8fedb37eb4"
        },
        "item": {
          "id": "59f08d3a-2a30-4c48-8014-7701971442f4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "32138753-339e-4c50-9af7-e2c2bcc87d9d",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2a7dc6ca-9790-4526-a123-b25b58b436c1",
        "cursor": {
          "ref": "e140490a-c898-4779-a315-07d9e7b21788",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6e46dbf6-a258-4f20-9a31-b7349f14d8f1"
        },
        "item": {
          "id": "2a7dc6ca-9790-4526-a123-b25b58b436c1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "25b9d5da-5925-49b8-863b-a08a13b2024a",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "aa5ccabc-bc78-4b22-a984-7ef1d46491b7",
        "cursor": {
          "ref": "d933a264-e5a5-4e36-a01c-06f1bd770760",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "afeae0b1-758a-43f4-a942-0186a148bc7a"
        },
        "item": {
          "id": "aa5ccabc-bc78-4b22-a984-7ef1d46491b7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b58438f8-1401-4581-b3e7-0655bbfdbd0e",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "07d81d65-3415-46e7-94a9-98127665d03b",
        "cursor": {
          "ref": "1e48b13c-599f-4200-8aeb-1914ba20e115",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "bcf5d7d1-7b00-401f-9bd3-f4d4e384dba7"
        },
        "item": {
          "id": "07d81d65-3415-46e7-94a9-98127665d03b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cead108e-8da2-4ce8-b219-b7b8ca4917d2",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f110032f-b982-497b-9656-9fff27fd9626",
        "cursor": {
          "ref": "a6d69c54-6081-44ee-b950-a1325a8b9cb4",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c23a3fd0-470d-494e-8dae-8a130194da26"
        },
        "item": {
          "id": "f110032f-b982-497b-9656-9fff27fd9626",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9c9df7f5-0c2f-4bf5-b410-a67dd6851bcd",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4adef178-c60a-490f-a7a1-864fbda24c02",
        "cursor": {
          "ref": "942aedf0-6335-4a46-942c-656ef8171101",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d74543b-1fe8-4b1f-9749-ec37a0666654"
        },
        "item": {
          "id": "4adef178-c60a-490f-a7a1-864fbda24c02",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b5691af6-da36-4db3-9116-43c87724f4b4",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "46c8d19e-fe08-46e2-9ddb-001636c2fee5",
        "cursor": {
          "ref": "9e4d5c41-dd49-442d-86b0-a27b712dc018",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d3db3a4e-66c1-4267-9e53-426756745a0b"
        },
        "item": {
          "id": "46c8d19e-fe08-46e2-9ddb-001636c2fee5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ff3eed24-43c0-4539-bfd5-12bf22a8b3a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219cf33f-38c8-4428-890b-e4534f75a282",
        "cursor": {
          "ref": "9622b1fe-185c-4ada-8c80-85ece2dc5c93",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b58301a7-bf3f-4e9c-89f7-10199b75a52d"
        },
        "item": {
          "id": "219cf33f-38c8-4428-890b-e4534f75a282",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "778491d2-a961-490b-8fac-2792e6ece50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c766d2-f1cb-45c0-ae00-0dcd72e69e41",
        "cursor": {
          "ref": "ba14955e-a93e-4631-945c-508f4e2eeeb6",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "48e12ed4-d952-44ea-9b14-cdedc3707647"
        },
        "item": {
          "id": "81c766d2-f1cb-45c0-ae00-0dcd72e69e41",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a9d708b7-174e-4bc7-ab74-e36e407f0b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3311391d-149a-4e2a-97fe-af39e525d5fc",
        "cursor": {
          "ref": "c8ebaf86-4cdb-4855-a8a9-3d0f44e559bf",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e7a3bc76-5e82-49a2-9642-d66c429b032f"
        },
        "item": {
          "id": "3311391d-149a-4e2a-97fe-af39e525d5fc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f63d708a-32bf-4e53-afdc-3c9972fdf3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337686de-016f-4901-a8b0-5aaf39b3b5a5",
        "cursor": {
          "ref": "3625eb26-6525-4bae-b128-dd8a86fbe47f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bd948e18-4014-4efd-af83-69014b3afe4f"
        },
        "item": {
          "id": "337686de-016f-4901-a8b0-5aaf39b3b5a5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "31234d1e-fb24-4d6a-8da8-e69468d0e0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce21cfd5-f1b6-44d6-a23a-7182c5665888",
        "cursor": {
          "ref": "435c546b-5135-4aa7-88f4-913c956fcd16",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "293f6e1a-b9b6-4086-a429-435e5982d289"
        },
        "item": {
          "id": "ce21cfd5-f1b6-44d6-a23a-7182c5665888",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6b7ee62d-c304-4ad8-8467-f65f80857f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea1695d-71d4-4e12-b00d-6ab65f68df81",
        "cursor": {
          "ref": "9c434d08-28a5-48fc-877d-f57c36136542",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c7f395e2-fe62-4220-8ccc-959c1d144cec"
        },
        "item": {
          "id": "fea1695d-71d4-4e12-b00d-6ab65f68df81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3eda2dc6-81b3-4d9a-86f4-e7a9a2c6d1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c98be4b-be22-4ad3-bc17-e725d294c621",
        "cursor": {
          "ref": "4e2e0130-bc18-42c7-b322-9e25d6829339",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ebacfd32-6a37-4943-8c65-1b24c59b8bae"
        },
        "item": {
          "id": "7c98be4b-be22-4ad3-bc17-e725d294c621",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f78dede0-b8db-422c-9699-bcd4c6db4907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877ad841-7b0c-4ae7-8c7e-060483cb4876",
        "cursor": {
          "ref": "de6ddb74-bbd6-40fe-8b56-3a83de6f2300",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "54e2d319-2eb3-432f-99c8-f8d2664b8388"
        },
        "item": {
          "id": "877ad841-7b0c-4ae7-8c7e-060483cb4876",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ae02ae89-92a3-4ec7-904c-2716c08a6c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3532bf-52c7-4278-be78-73f38831475f",
        "cursor": {
          "ref": "080da09a-f5f7-4470-b4a6-abe596c3dd9c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "49f921e7-b94d-43ce-a75d-9556d9d36754"
        },
        "item": {
          "id": "8c3532bf-52c7-4278-be78-73f38831475f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9a214eb7-aa2f-4cad-afc9-631a254d17f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c8926a-e2a3-4401-9bc7-65972d3cf2e3",
        "cursor": {
          "ref": "9e8014b7-889c-4d1e-8d0d-00bb86df209c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "47a50e3a-20fe-4b9a-b7c1-10f064edeb29"
        },
        "item": {
          "id": "b2c8926a-e2a3-4401-9bc7-65972d3cf2e3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c0689b31-7e5f-461e-a739-b6612f3e2f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfd3663-ff81-4a04-8d36-377a2ac528c0",
        "cursor": {
          "ref": "8501d138-b532-4de5-916f-53e6f754919d",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e62dde70-71ff-4954-b007-25f71a381539"
        },
        "item": {
          "id": "8dfd3663-ff81-4a04-8d36-377a2ac528c0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a3592348-a7a8-40e3-93e7-74d4c863e213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26883ee5-17d8-4103-8ff5-73aa7972dcb6",
        "cursor": {
          "ref": "f53c7966-4e70-49de-a75e-d7185a161326",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bdd9daad-6b23-4ff0-add4-cd95f7ca07ac"
        },
        "item": {
          "id": "26883ee5-17d8-4103-8ff5-73aa7972dcb6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "97a1fc92-68de-4c82-aacd-70a1578cf62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875270f1-bef3-4671-9026-75a680d94aa3",
        "cursor": {
          "ref": "93d4c741-b676-4037-94e4-23624ce03236",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e8ac3abc-295f-4080-9091-47798e4b652c"
        },
        "item": {
          "id": "875270f1-bef3-4671-9026-75a680d94aa3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c5f96e19-507e-4258-b9b1-0ada6c735744",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "52b0029b-a554-440e-8320-07e96370a9f2",
        "cursor": {
          "ref": "ee8c7375-58f0-4560-ba22-fdd511959a4e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3ac53b76-c826-4aae-bf13-9ba3e3f0dac7"
        },
        "item": {
          "id": "52b0029b-a554-440e-8320-07e96370a9f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0cf1eb0c-41f9-405b-ad25-396e81d283b8",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d40d2e1a-0c22-4928-8e6c-b1f2dcc1eef0",
        "cursor": {
          "ref": "65731336-24bd-4304-8821-4729125f0919",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "77f0ecaa-bb45-4fcc-8c44-171a24469bd0"
        },
        "item": {
          "id": "d40d2e1a-0c22-4928-8e6c-b1f2dcc1eef0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d1b0f3b6-769f-481b-9457-ddf7c4c9ddbe",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b6f930ce-adb0-4d2c-87a2-71bc6a984caa",
        "cursor": {
          "ref": "b1ee66cd-2433-4524-bc89-59f02a72ef95",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7491eaeb-f37c-411b-a34e-9ca9985214d0"
        },
        "item": {
          "id": "b6f930ce-adb0-4d2c-87a2-71bc6a984caa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a010fcfe-695f-468c-9a18-66a532f2f182",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0a8344cf-2f68-4e4d-9371-b404f714f497",
        "cursor": {
          "ref": "05660619-c909-4d4f-8ce7-1823dfdac3b1",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ecbc2118-4f67-42b3-88f7-9291f627c720"
        },
        "item": {
          "id": "0a8344cf-2f68-4e4d-9371-b404f714f497",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f967566b-1cb8-43ba-b25b-a4d0d74a8546",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3da5bd86-11d9-476a-b5e2-ee9bacf5d223",
        "cursor": {
          "ref": "2ce64364-6283-4573-ba50-f8c475eab676",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a8b9e223-22bd-4d33-a3eb-61a9f692a2a1"
        },
        "item": {
          "id": "3da5bd86-11d9-476a-b5e2-ee9bacf5d223",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a9016f1b-e712-4fdf-8030-29c3e36cdf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759378f1-209c-4426-8b42-da52c9c84873",
        "cursor": {
          "ref": "44a89961-b6e8-47fe-9464-acbdef4bc122",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7f33d628-f62a-4909-8587-21c31e4d8bc8"
        },
        "item": {
          "id": "759378f1-209c-4426-8b42-da52c9c84873",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "69f6b284-8030-4162-b067-999977d3655d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e6632a-7f3c-4141-b5e1-70a99df9c6a0",
        "cursor": {
          "ref": "bf4eebc8-1534-48de-8fe4-01ad326bde25",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6dbbf48a-884e-4b66-8593-a41a22fc66fc"
        },
        "item": {
          "id": "17e6632a-7f3c-4141-b5e1-70a99df9c6a0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "970f7133-18ae-427f-8322-24757817dfb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2463f2-25bc-4f15-ae56-c122c4a01fe5",
        "cursor": {
          "ref": "bbe380a2-def7-43de-a66d-e4a7feb405c5",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2dfbce6f-851e-45a8-87bb-26455ac1618c"
        },
        "item": {
          "id": "cc2463f2-25bc-4f15-ae56-c122c4a01fe5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "697ea09c-13ac-4e87-9bbb-862601954284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a2b297-a113-4805-95fc-2b49d56ac925",
        "cursor": {
          "ref": "b2c1559b-f539-4b55-9dfd-2ece8f3302c7",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "213b8a98-e93d-4fa5-b5bc-1c06fe295aba"
        },
        "item": {
          "id": "13a2b297-a113-4805-95fc-2b49d56ac925",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3cda8205-2d62-43a7-91d8-dd75be90cfc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bab72a2-c50d-4f0a-ba1a-5212907a8006",
        "cursor": {
          "ref": "c6aa8a1b-401a-42a4-96cc-01dec6f6b73e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "525be8fa-b9eb-4c15-a6d6-8b47cd772a49"
        },
        "item": {
          "id": "4bab72a2-c50d-4f0a-ba1a-5212907a8006",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44781b6c-8d5b-4a45-b082-adb9237b9d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caaaf4f-4c4c-4fde-aeea-18e35a631988",
        "cursor": {
          "ref": "6cc08f1c-dd44-4732-8277-583d28019e85",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c32940e6-d420-4bf9-9c84-2d052aa1a6cb"
        },
        "item": {
          "id": "0caaaf4f-4c4c-4fde-aeea-18e35a631988",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4942b001-561c-44e4-93a0-2f4918e45a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdd699e-6626-432a-ba33-e3108137c685",
        "cursor": {
          "ref": "e37b4643-3f47-45ae-931e-4707832a0c3a",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "953e3242-e630-456b-90b0-6f031b846d0f"
        },
        "item": {
          "id": "4bdd699e-6626-432a-ba33-e3108137c685",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "10278fdd-c6d3-44ee-b6ae-d185e8bfd331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbeddf5a-1f6e-46dc-a679-b400836dd39f",
        "cursor": {
          "ref": "022b0059-437d-4fb2-b343-96ad2c01b0a6",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0a8c9119-f819-4f69-b575-580236306946"
        },
        "item": {
          "id": "cbeddf5a-1f6e-46dc-a679-b400836dd39f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8fed58a6-703d-4faf-b6f6-5eb5280e8f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922063ba-cf17-4b77-9cc1-f378c60f1805",
        "cursor": {
          "ref": "4cb7158f-684d-46a7-a871-c6bf0350be39",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e31324b8-b6a9-4886-b958-53d72456eb52"
        },
        "item": {
          "id": "922063ba-cf17-4b77-9cc1-f378c60f1805",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c9a0db77-84c6-48f4-a4fb-da249d689fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0f670a-2e2a-4f80-b6af-10e6ccdfa283",
        "cursor": {
          "ref": "484b9a26-8433-4e77-8e69-6389a818d788",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2c6c889e-4fb7-42d4-96e7-11a818e7a190"
        },
        "item": {
          "id": "4f0f670a-2e2a-4f80-b6af-10e6ccdfa283",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1b9ee0e3-9c9e-4942-a7f5-3f3bdcb04820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a284332c-89f2-4051-bb58-dd0ccc78e00b",
        "cursor": {
          "ref": "0e6086f6-44de-47a6-be83-dae269e6d984",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d89e07a5-0ec0-4f39-8609-69ee9b789b75"
        },
        "item": {
          "id": "a284332c-89f2-4051-bb58-dd0ccc78e00b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e8735326-ffca-4e97-a0ca-8c5776f6f789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7af4993-1fff-45cc-9951-d3d082242dd0",
        "cursor": {
          "ref": "97b97696-4267-48b2-bf76-31263b013153",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8ce1f788-81b2-4076-bb68-0e96a6e85b63"
        },
        "item": {
          "id": "b7af4993-1fff-45cc-9951-d3d082242dd0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8414246a-bdea-4739-9650-3e728d6c9d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc1a2925-9ca6-4255-8a4f-1fcc9b717da9",
        "cursor": {
          "ref": "73f61f78-9ffd-4ede-aa73-a39620af215b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a483b75c-7d7e-4fae-a687-dc0ec4323960"
        },
        "item": {
          "id": "bc1a2925-9ca6-4255-8a4f-1fcc9b717da9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0a32dd3f-00ec-45d3-9959-a6fa95c27795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a15007-ece2-402b-be7d-031bbb68504b",
        "cursor": {
          "ref": "ae08001f-c262-4bb3-91fa-8b8fc939e5ef",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5037b31-5a40-440d-b796-f38a29de8645"
        },
        "item": {
          "id": "47a15007-ece2-402b-be7d-031bbb68504b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f8eae4fe-2b39-4240-8d80-52fae22ffab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6811995d-145b-4ff9-ab82-48f8c9c7d87a",
        "cursor": {
          "ref": "715d0635-e2b2-4199-93d6-17e13133eed4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ed6b8881-4ebb-4a71-a41d-218c29fbbe14"
        },
        "item": {
          "id": "6811995d-145b-4ff9-ab82-48f8c9c7d87a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "017628fa-7382-4d29-8d83-02c169245e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e026f1-7bff-4a9c-b652-bc86ebd34bb1",
        "cursor": {
          "ref": "214077a4-5d6c-4cbe-87f6-cf2ca6472a34",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6c480598-8e70-4249-bb37-68ff171a2206"
        },
        "item": {
          "id": "f9e026f1-7bff-4a9c-b652-bc86ebd34bb1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f9cf39cd-9b63-4875-8452-b6042da6b37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0724c3c3-be9f-405e-bdf1-81ff2b2145e2",
        "cursor": {
          "ref": "69b9a16d-e087-460d-a1d2-63bbb75fd3ab",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ea972fe2-432a-48b8-8890-2e4ab2133bea"
        },
        "item": {
          "id": "0724c3c3-be9f-405e-bdf1-81ff2b2145e2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "74583181-8b35-4af3-aeb7-ddb813e5fd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65d596b-763c-4ec9-af35-f8a70ddf7632",
        "cursor": {
          "ref": "cbe82f37-ff41-4fda-ad3f-e89609f624e8",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a2891889-e245-4cd1-80b4-5d8518f3cde2"
        },
        "item": {
          "id": "c65d596b-763c-4ec9-af35-f8a70ddf7632",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "29d57728-2ecf-4eeb-a89b-1162ca453b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d1bffd-94ce-450b-8045-676f17053859",
        "cursor": {
          "ref": "1a0d08a8-9913-4302-9b64-00641a05ae60",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d2a2922d-cd3a-40ab-bd71-30ea2ee5f787"
        },
        "item": {
          "id": "97d1bffd-94ce-450b-8045-676f17053859",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ef525733-d402-4382-8e63-09888a2ce5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5bf381-d046-4e80-b4a3-541858de2503",
        "cursor": {
          "ref": "5403f6ee-113f-4369-b4f2-97afd924fd67",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4f26c6df-212f-4eff-93a6-4491c39ab03f"
        },
        "item": {
          "id": "ab5bf381-d046-4e80-b4a3-541858de2503",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0285f2aa-3ad6-45ea-b4e3-7bcb3bc2dfa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ba32da-0a09-493c-a09f-49b763faf918",
        "cursor": {
          "ref": "e6447d4b-883e-4e01-a472-1b98863f1ff4",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ad5bf8eb-1c63-4f5e-9e2f-ce507650779a"
        },
        "item": {
          "id": "e5ba32da-0a09-493c-a09f-49b763faf918",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0b225dab-24c6-49c5-a2a7-8454da7a5edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5bdd26-83f8-491a-98b7-d9cc7ed1c567",
        "cursor": {
          "ref": "aac71151-8d01-4c5a-8c75-7c774c92e802",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "540a8926-ff74-4311-9048-f6719544fbf1"
        },
        "item": {
          "id": "ec5bdd26-83f8-491a-98b7-d9cc7ed1c567",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6d7d3d5c-f17f-47a6-b0e3-9d8784820e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10123196-79f4-4b4f-a845-4d52a4076a0e",
        "cursor": {
          "ref": "f68ea2c5-2ce7-432b-9b81-590b7305d9dc",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "632eaf66-47cc-41c7-b901-363f3ef54594"
        },
        "item": {
          "id": "10123196-79f4-4b4f-a845-4d52a4076a0e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "467ba121-5038-4fc2-a9b4-998324bb57dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad4d661-fff6-4c3d-8092-ef3caa976c19",
        "cursor": {
          "ref": "9e47c482-619c-462b-8a75-c95bd0748099",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b2dbb574-da07-4690-a22a-88fd53bc5355"
        },
        "item": {
          "id": "3ad4d661-fff6-4c3d-8092-ef3caa976c19",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ea6b29ad-3262-4e62-8923-5d6848e1f4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e16ab6-b89e-419a-bdab-d8948e2db32c",
        "cursor": {
          "ref": "74950895-4c3f-43bf-9dc4-9fc89323646c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3c5624fa-8ef0-49dd-b4b6-b07a472cdeb2"
        },
        "item": {
          "id": "a3e16ab6-b89e-419a-bdab-d8948e2db32c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0ef7407f-e411-422d-a2d1-c7e1b04ecdb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883caf98-d0b9-4c70-9f4e-ca3232c7ad1e",
        "cursor": {
          "ref": "84d41423-3698-4bd0-9be7-e573b8089419",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d603566d-3fe6-4914-b569-a7ad7907ed05"
        },
        "item": {
          "id": "883caf98-d0b9-4c70-9f4e-ca3232c7ad1e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "895f2279-5cff-4335-bdbf-bd248fc465f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac39718-167e-4e16-878e-6018ff6281d5",
        "cursor": {
          "ref": "409d2ac0-1b2b-4da6-a591-ff5ea7cf287a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ec2be547-e728-4319-9a22-80145e1ef48c"
        },
        "item": {
          "id": "3ac39718-167e-4e16-878e-6018ff6281d5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ae5b2580-69e6-4e6f-be40-62b3b452c923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bd81d2-a449-43df-9b5e-d0b8865addcd",
        "cursor": {
          "ref": "c1f44620-7f59-4eeb-a44f-4d91fe2f0675",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c02cf152-ec35-4fc5-90e4-356c0e4f3ce8"
        },
        "item": {
          "id": "97bd81d2-a449-43df-9b5e-d0b8865addcd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4bacd9c1-59a5-41a3-b67a-8448edaf2973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7476857-04ef-4b02-bfa3-725d34d9b3cd",
        "cursor": {
          "ref": "efbb28f2-afe9-4a60-8bc4-0f9d76240dc3",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6fa4cf4b-e84d-4f1a-a7b2-9f53e800da01"
        },
        "item": {
          "id": "d7476857-04ef-4b02-bfa3-725d34d9b3cd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "eaeb23cf-d9b6-41cf-bdc8-1bdb455a090d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba2f86f-3bc2-4a88-8e7c-cac8d7c740d6",
        "cursor": {
          "ref": "64e17378-cc9c-41a6-9d43-9627dc8b6813",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3acea8d-6e20-4974-a972-1ac3b3f544e7"
        },
        "item": {
          "id": "2ba2f86f-3bc2-4a88-8e7c-cac8d7c740d6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "71c5b217-4d62-4eff-9dab-82fe0d691623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfda549-e56d-4f6a-af29-5aabffe65a73",
        "cursor": {
          "ref": "cfad969c-e0df-4da5-900c-c84e5dea2d47",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fe324e40-24da-49d9-8a20-d01634193d7e"
        },
        "item": {
          "id": "7dfda549-e56d-4f6a-af29-5aabffe65a73",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "132234f8-ded7-496f-8bf6-231063492f98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2248984-d796-4f68-98b2-55251883bd4b",
        "cursor": {
          "ref": "4b322b05-e527-459a-b96b-f2e993ae4394",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d985bbf1-cd1d-4e6b-84a4-1910a58a2553"
        },
        "item": {
          "id": "e2248984-d796-4f68-98b2-55251883bd4b",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5a93415c-1084-44b8-883a-fed5a543ca1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "35b2da81-c290-40de-a05b-32e7e2a9139f",
        "cursor": {
          "ref": "c609a0bf-86ce-40cb-bf4b-469f7ccd3081",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1bd43a42-dd29-4f6b-b984-9266b4ecd8cb"
        },
        "item": {
          "id": "35b2da81-c290-40de-a05b-32e7e2a9139f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "57c9b3b2-363b-4fa9-a18c-7cc8d40aa3f8",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "634d9fea-472c-4db2-9502-d6f4349d016f",
        "cursor": {
          "ref": "3e9e65f9-04a8-4d08-8619-b523ce731d5b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7f421d31-dd44-4113-9064-944d3da82db1"
        },
        "item": {
          "id": "634d9fea-472c-4db2-9502-d6f4349d016f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "83993b15-3819-4235-b6e1-6322e0e910b4",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b652c4-23d5-49df-afc3-4b44ed48bacf",
        "cursor": {
          "ref": "fade9301-63c7-4f83-bd39-fbec7d2da172",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e7de78d1-2293-4eae-a75a-ed3bd06213d1"
        },
        "item": {
          "id": "d2b652c4-23d5-49df-afc3-4b44ed48bacf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "96a63007-5700-4570-974d-d2b77ab4f22a",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea49eb1c-d0ef-4468-ba51-826d82d14fd0",
        "cursor": {
          "ref": "8877953c-b78a-49e0-8728-96df54c2eb36",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "626d869f-3ef2-474d-840c-f27e5ae8bc4c"
        },
        "item": {
          "id": "ea49eb1c-d0ef-4468-ba51-826d82d14fd0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "daf5f3a9-884f-4154-8032-c5b4bc25fed8",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f623e4-f680-4247-a35e-871dc816fe11",
        "cursor": {
          "ref": "cd39394b-6159-4ebf-87cc-00277f17db56",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "27ed846d-00e7-4ae0-b29e-6d1830bae073"
        },
        "item": {
          "id": "c3f623e4-f680-4247-a35e-871dc816fe11",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "453f9f7b-8108-4c81-8378-9ff4e4c0fa55",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-11T00:38:13.384Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-11T00:38:13.384Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a816a365-51a0-423e-9d78-e736819a0f11",
        "cursor": {
          "ref": "fd885d93-9bc3-4b7d-851b-421cf1f78767",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ae5332a5-6aed-4c13-8869-d445cce68dd6"
        },
        "item": {
          "id": "a816a365-51a0-423e-9d78-e736819a0f11",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "441887f4-57a8-4c68-a9a6-e8a93eeb9b69",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27f4732-867b-4f09-9ebb-15ca26da6de6",
        "cursor": {
          "ref": "218181c8-5e41-4ce0-9029-8d26fe322241",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "455529da-738c-42e4-bbf6-8449b364b118"
        },
        "item": {
          "id": "a27f4732-867b-4f09-9ebb-15ca26da6de6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9c74af02-5d48-44dd-8d0d-e063e5390946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4c2236-bf1b-4955-ab41-2914ad70eacd",
        "cursor": {
          "ref": "2d944000-ffca-4bce-a272-1535f494aebc",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "25b7aaf1-2ccd-4750-a4f0-c6e1a7083e1d"
        },
        "item": {
          "id": "da4c2236-bf1b-4955-ab41-2914ad70eacd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "acd07552-de18-49d4-91a8-19a5e9c3ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5ca893-f65f-4bbe-be15-95c3c81b725a",
        "cursor": {
          "ref": "11ab49e4-0383-4d20-90da-859099c4af69",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2661ea8-8186-4ba4-b874-371e3c120eec"
        },
        "item": {
          "id": "ec5ca893-f65f-4bbe-be15-95c3c81b725a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "49c4c3e0-841e-40b0-836b-abde353860bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8f1913-9324-499d-9d60-1177e624c6fc",
        "cursor": {
          "ref": "7670bc38-64c5-4a57-b7ef-f2a847c6a0d2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b86ae9b0-dc24-4f6d-8fe4-6c110e1bcade"
        },
        "item": {
          "id": "9f8f1913-9324-499d-9d60-1177e624c6fc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9f5c182b-6a66-4abd-8ae7-9f0f39a3925e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738306e1-04cf-42a1-97f6-8c90b0a2ce07",
        "cursor": {
          "ref": "2e256cad-d5ac-4403-a017-10ed903d5eed",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "80d792ce-227b-40fe-bc38-fb26f22bf62f"
        },
        "item": {
          "id": "738306e1-04cf-42a1-97f6-8c90b0a2ce07",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ed08472c-daea-4cc5-9624-73a075f77456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615f74c4-6c88-41bb-931c-1af31e9ba619",
        "cursor": {
          "ref": "b6ced15b-0a53-4452-96bc-4a74d426d1e2",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a5ebed1-5564-41c4-8bd6-bc6e0a48bdb7"
        },
        "item": {
          "id": "615f74c4-6c88-41bb-931c-1af31e9ba619",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3ef25228-1edc-49ae-87bc-672dc6b7e793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75c9f3c-c582-4fa8-862d-aa15b186ccdb",
        "cursor": {
          "ref": "c1e8e2d8-dcb6-412b-b09d-7c1ba5cf29d7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "27cba017-dfb5-4baa-9bc9-53c74db25ff3"
        },
        "item": {
          "id": "b75c9f3c-c582-4fa8-862d-aa15b186ccdb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "89498090-ce03-4610-a3c5-9c632b0214c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdab96b-2884-4dfb-bd8e-ecaa5f990ad9",
        "cursor": {
          "ref": "6c5f4fc1-9f32-4ff6-a219-fcc114badbd1",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "30942490-3468-41f8-bee0-116cdc83ad8b"
        },
        "item": {
          "id": "ecdab96b-2884-4dfb-bd8e-ecaa5f990ad9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "10327e65-2201-4332-aa38-80e39e295390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd47daa-f499-45b9-b3b8-f584ec88c980",
        "cursor": {
          "ref": "8dfbf916-5276-429c-ae2a-40590ef81145",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bdba6498-9288-4269-bb91-611cd815fd75"
        },
        "item": {
          "id": "7fd47daa-f499-45b9-b3b8-f584ec88c980",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5b24b513-2ed7-41a8-b05c-15db140fa93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ec1484-efd1-462e-a606-5ef7efd5b9f4",
        "cursor": {
          "ref": "ecbeab5a-e5bb-4f99-87d5-c62f92c31dd8",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "101e4ee9-0ca0-4a8b-b885-881b4ffcc15d"
        },
        "item": {
          "id": "58ec1484-efd1-462e-a606-5ef7efd5b9f4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "eeab99f4-8a3b-4844-a092-e97a19a1f1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f36202-41db-4b2e-abce-90b6cfe409fb",
        "cursor": {
          "ref": "4133a5aa-7318-48e9-bb69-3d2ebfc9e951",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc770b51-5a67-4208-92fd-dbd73734a965"
        },
        "item": {
          "id": "83f36202-41db-4b2e-abce-90b6cfe409fb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b66fd31f-3d04-45fe-877f-be12a7c6bc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30691d7f-01f8-47e8-949e-9d8543147912",
        "cursor": {
          "ref": "eae97113-8e7c-40c2-87a2-21586ac16f42",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0d82ee7b-d60e-4f4d-abb8-2c0e986597d7"
        },
        "item": {
          "id": "30691d7f-01f8-47e8-949e-9d8543147912",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0afa09fc-a08e-4be1-be67-8deb3fd8d645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e939fc-c3c3-4f3c-99d8-ca01ef0e53c0",
        "cursor": {
          "ref": "ace0f989-22d7-4379-a311-df23b483657e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5e041f81-fcef-43df-b345-9ceb9c160bfc"
        },
        "item": {
          "id": "33e939fc-c3c3-4f3c-99d8-ca01ef0e53c0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1ab44ec7-a265-4573-aa1b-18bb8b5985fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c094db47-6144-465e-a3a2-ee3430a6192d",
        "cursor": {
          "ref": "0bec1b63-554f-4b07-b4cd-ba6b9ff51e94",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d8930af0-95be-4527-8b18-0b3dbe759623"
        },
        "item": {
          "id": "c094db47-6144-465e-a3a2-ee3430a6192d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f0aa3de4-272e-49dd-bb1d-92ca2f091f9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ad877b4d-c67e-4533-90b4-2d1f0b7d4f69",
        "cursor": {
          "ref": "705c5729-738a-446f-a6cb-f78c4f5d76fb",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0029c710-8843-4cc6-9abf-ffef21d079f5"
        },
        "item": {
          "id": "ad877b4d-c67e-4533-90b4-2d1f0b7d4f69",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3f0a935a-3e96-4770-aded-78ebdda9b6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbee44d9-117a-4994-8154-faa3a28ca998",
        "cursor": {
          "ref": "165dbcb6-d88a-4fd6-bc9c-080ef213702d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "530228db-d07b-4bc5-b4b0-c597b3be9626"
        },
        "item": {
          "id": "cbee44d9-117a-4994-8154-faa3a28ca998",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "13398551-ed5a-4774-ac1d-61e3628adbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0989005f-849e-43ae-9eea-154e45c5b7df",
        "cursor": {
          "ref": "a9387009-c747-495d-9b0d-b219fb11e1b7",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2d189003-d14c-41db-af20-ed2d8ad70ab3"
        },
        "item": {
          "id": "0989005f-849e-43ae-9eea-154e45c5b7df",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dfb5afa1-eb28-4bd8-8111-d8ab670fb2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6edd85-5a2b-4363-b841-c6f715a7fe66",
        "cursor": {
          "ref": "c379d145-6e6c-4ec9-b7c2-c2e96543b302",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c3c165d2-a7c8-44f4-a641-ed1e30f68ac8"
        },
        "item": {
          "id": "8f6edd85-5a2b-4363-b841-c6f715a7fe66",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e1ff61fc-c09f-47fc-a421-4d2675de5a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2a99d7-a1f2-4cba-aed3-10d49d18a7c9",
        "cursor": {
          "ref": "14ef70f6-e067-49c3-9140-95ffa1e6aefe",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f1ae2f60-0ce1-4744-a65f-b01373fac782"
        },
        "item": {
          "id": "7e2a99d7-a1f2-4cba-aed3-10d49d18a7c9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a3f35b68-40aa-409d-bda2-ed20041cc75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b7c196-56b6-4530-a5e5-a021cb14b73a",
        "cursor": {
          "ref": "0ad8bbd5-4fc4-4ac9-8a64-77b904781e74",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8d535e08-2a6c-48a9-adc8-ef26a484d254"
        },
        "item": {
          "id": "52b7c196-56b6-4530-a5e5-a021cb14b73a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ed433cd5-926d-46b9-bc66-c9cc8b08051b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6918bcee-ac76-43fc-91d7-654de72d84aa",
        "cursor": {
          "ref": "c2bdcece-98d2-46e8-acd0-edf0c4bad17a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7dac619c-c355-4bf2-a5d3-298fe5bbc596"
        },
        "item": {
          "id": "6918bcee-ac76-43fc-91d7-654de72d84aa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5cb090b2-a72f-46f3-be03-2bf4edb44013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a60b7a-84b4-4d90-9796-dbb4651b80ec",
        "cursor": {
          "ref": "43d22411-f18d-4336-9278-c2333584ddf9",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "24803c5e-04a9-436e-8750-402dd5c2320a"
        },
        "item": {
          "id": "09a60b7a-84b4-4d90-9796-dbb4651b80ec",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a1ef4f27-b402-4151-8eaa-6fac66396103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7226fb19-9635-443b-a153-b25f6b808be4",
        "cursor": {
          "ref": "92d0f502-c879-4e61-b151-4394bdc21362",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7f41649d-1ccd-4ec1-bb9a-3dd106d8a18d"
        },
        "item": {
          "id": "7226fb19-9635-443b-a153-b25f6b808be4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "262b137a-64ac-422d-989b-c9a3232b9115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83dd368-af43-43f9-b0ca-f5a40932f97d",
        "cursor": {
          "ref": "00b43a87-0fa9-4a4f-8594-a67dd4830994",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "386c7f10-c4b3-4943-9717-5c7f97d1428a"
        },
        "item": {
          "id": "c83dd368-af43-43f9-b0ca-f5a40932f97d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b6dfa53f-1d7b-4c58-9e84-a26af22e8462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02d5c3b-7b46-4e2b-8722-0b2afcc83fb8",
        "cursor": {
          "ref": "6c23e924-cac9-4d06-9431-89cd4a680c98",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f9dca4ba-1f63-4e1a-8910-f5deb628ba1d"
        },
        "item": {
          "id": "c02d5c3b-7b46-4e2b-8722-0b2afcc83fb8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ca57a11c-4d82-4cd4-b35f-f7416d3d0a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506c379d-891d-4185-a096-acc416ba1265",
        "cursor": {
          "ref": "69be4bb9-be89-4cdd-a6d2-1b88513afed4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f83b9d05-b88b-4bad-ba5b-62fd443134f3"
        },
        "item": {
          "id": "506c379d-891d-4185-a096-acc416ba1265",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b302fa0e-da6c-4a66-a57f-e7a0ae102f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087a2571-0bf7-4a10-9aa0-267046f8397e",
        "cursor": {
          "ref": "00dcb67c-b5e5-4196-bcb1-88eb02c1f949",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4b326194-989e-4b7c-9f95-8638b1342cc3"
        },
        "item": {
          "id": "087a2571-0bf7-4a10-9aa0-267046f8397e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b4bac612-29cb-402b-a527-f597c6c0509c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fe5196-137e-41d3-930c-6b1b51303072",
        "cursor": {
          "ref": "b8ef0829-861e-494e-a32a-830be716012b",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ded2141b-6867-42db-be5b-2503f6146109"
        },
        "item": {
          "id": "89fe5196-137e-41d3-930c-6b1b51303072",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3b4b87a8-7d92-47d8-9987-f22a36be0fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8220636d-4e9a-4004-ad1b-1c4af9330575",
        "cursor": {
          "ref": "2e533456-c993-4d47-b245-656546c5c43d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b1ef91f2-ef92-497e-8820-88f4b09ccc97"
        },
        "item": {
          "id": "8220636d-4e9a-4004-ad1b-1c4af9330575",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5701efa1-2a0d-4635-bcbf-3136ac1b6358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87f9bbd-16a5-48ef-9b34-c485078bd99c",
        "cursor": {
          "ref": "c1ab5bc0-c861-4915-8ad1-80395305e9f1",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "34915a10-0412-4de9-82ea-09331de575a7"
        },
        "item": {
          "id": "d87f9bbd-16a5-48ef-9b34-c485078bd99c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8274376f-fc7c-4b1d-b14e-982a5fe3d408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b252c2-f7fc-4f00-8546-2a4676aefa3f",
        "cursor": {
          "ref": "e8ec95c1-9907-4c9d-8474-08d5bba0e891",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4c6e07c9-4d96-422f-b145-d34b7811ab4e"
        },
        "item": {
          "id": "33b252c2-f7fc-4f00-8546-2a4676aefa3f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "672226d0-4ffa-4b52-9a50-90328d9c3e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe92a7c0-3897-4b20-bc32-cc9eb9be37f4",
        "cursor": {
          "ref": "0500e5f4-b478-4bba-acd1-201b7c48f79d",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "033f0448-38df-4bf0-992a-22789e3c438e"
        },
        "item": {
          "id": "fe92a7c0-3897-4b20-bc32-cc9eb9be37f4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e32fb46d-dba8-4239-a859-31cdfa177505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3938abad-d5cf-4e79-9b37-4e793b2ffbfe",
        "cursor": {
          "ref": "b3c3c321-41ab-4af9-a990-dbe072d2c425",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "88bf0a0e-191c-48c1-b276-f89927f79d28"
        },
        "item": {
          "id": "3938abad-d5cf-4e79-9b37-4e793b2ffbfe",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "7d4d20b6-253c-4ef6-9920-63db2eb4dcdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab913df-a2ca-4ab7-82a1-fc4a4703ae6e",
        "cursor": {
          "ref": "8b015b7a-6577-4c9e-a634-2fb81c5a04d0",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f739dd7a-a49a-4cc0-ba59-d08abeb04a16"
        },
        "item": {
          "id": "eab913df-a2ca-4ab7-82a1-fc4a4703ae6e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "11466956-3aad-402b-b4a8-5b0aeb888e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be287b6a-1dd3-44ea-85c1-8ab59dd7f128",
        "cursor": {
          "ref": "6c90d09b-f4bf-47b1-9036-afc6aa52f1b0",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6d56718f-8f31-4dd6-ba78-d9123525d757"
        },
        "item": {
          "id": "be287b6a-1dd3-44ea-85c1-8ab59dd7f128",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d2c8576d-01b5-402d-8b4a-ab756b29dcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65508011-1465-4f47-ad23-02fb72f525d4",
        "cursor": {
          "ref": "9afc7be2-d25a-49a5-b928-641e51fdc97d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f5047579-192b-41ce-995b-73670387d7da"
        },
        "item": {
          "id": "65508011-1465-4f47-ad23-02fb72f525d4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "423023af-f1d2-4005-8c44-1ddc58ec8d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490be330-f57c-4500-806c-2459b6707db7",
        "cursor": {
          "ref": "f4fc45f9-558d-4363-8d86-88f63b4ccd2b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "09e4e7c0-bdaf-4699-86f1-0be025811364"
        },
        "item": {
          "id": "490be330-f57c-4500-806c-2459b6707db7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "11fc7101-98db-4706-b011-d51474b746df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d18000-9e32-417f-9d14-d77d5b1d9f1d",
        "cursor": {
          "ref": "23f01d6e-7d65-4a0e-87c2-f196e30991ad",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c536d65d-46fe-4c4c-a4bb-0d3600f4bdfd"
        },
        "item": {
          "id": "36d18000-9e32-417f-9d14-d77d5b1d9f1d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b1ab9154-33d6-4fa7-b808-defe8c0253a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85383559-0274-4963-903e-ab77f21a0af6",
        "cursor": {
          "ref": "0e818a0b-e9ed-4624-a1ac-80b8140782f9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8b3b6e20-79a8-41b1-829f-9586c56215b7"
        },
        "item": {
          "id": "85383559-0274-4963-903e-ab77f21a0af6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "379ce584-07aa-42b6-9966-101b5fdc71d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c0b621-2e08-4507-8350-8b82d2b6ed93",
        "cursor": {
          "ref": "c6353a68-32a2-4b95-b4fc-d7a1f35a081f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a4e6a34c-2919-482c-bf2d-fbcbb8b51871"
        },
        "item": {
          "id": "85c0b621-2e08-4507-8350-8b82d2b6ed93",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9f8ea69e-0e3e-4245-8aff-9073995a92e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d260c5-603c-4e24-99bb-f216fcb2faa4",
        "cursor": {
          "ref": "333aece0-e0b7-49d3-8c57-a9440fe3e000",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9c4d4a5d-1400-4262-bdc7-e2be9c40f5eb"
        },
        "item": {
          "id": "31d260c5-603c-4e24-99bb-f216fcb2faa4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "95cb81ee-90d0-4f65-9334-8a319093e297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d1a7f7-c1b8-460c-bd5a-500c6a0faab5",
        "cursor": {
          "ref": "f1f84ee6-1e97-4eb4-9e1a-0fb0195c245f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d0c0885e-84e4-4e7d-b011-35e74c26aef8"
        },
        "item": {
          "id": "65d1a7f7-c1b8-460c-bd5a-500c6a0faab5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0641e987-2e76-4cdf-acfb-9461c17f9667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447ef1eb-1bc0-41ce-8666-f4dbc729e830",
        "cursor": {
          "ref": "bfbc19f2-ab7b-4bdc-9dc1-a0cfa5dc7035",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b039b6cb-a452-45b4-92bb-9d272de5949a"
        },
        "item": {
          "id": "447ef1eb-1bc0-41ce-8666-f4dbc729e830",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "854c7eaa-6406-480d-a974-7ee8ca41dc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0d6c60-c0c5-4032-a70e-3fd529fba249",
        "cursor": {
          "ref": "2eabac90-9cff-4347-95b5-3d373736564c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fb3a200d-7228-4778-8fd8-770bd25bec6c"
        },
        "item": {
          "id": "8c0d6c60-c0c5-4032-a70e-3fd529fba249",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4e6b1e59-94b2-4920-bcf1-8fed09e0a2c8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "9ea9e555-2db7-4a33-8300-58eb4c5359a9",
        "cursor": {
          "ref": "41bea923-883b-4f06-8611-a2161599c36a",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "76c9b156-05cf-4141-a286-f27c077545a4"
        },
        "item": {
          "id": "9ea9e555-2db7-4a33-8300-58eb4c5359a9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9df1f6d4-a553-4c8a-85e4-922167254642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b701dc6f-09e4-4d07-b00f-8e1c6c4cc98e",
        "cursor": {
          "ref": "e66252d8-3c04-4a58-b604-43f2cc6cf450",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9da1854b-0db2-43dd-979e-bd205e55d037"
        },
        "item": {
          "id": "b701dc6f-09e4-4d07-b00f-8e1c6c4cc98e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "19651aeb-c7e5-41e5-a24c-0f608269c4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bce9e4a-d206-4213-a8eb-ddce2d99b0f0",
        "cursor": {
          "ref": "e96448a9-0e19-4533-a5d8-077d5109d5fb",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9cb76eb5-0096-4d84-b501-59cfd50d1deb"
        },
        "item": {
          "id": "6bce9e4a-d206-4213-a8eb-ddce2d99b0f0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7bbb5d34-5c12-4949-8f4b-436e5fcc3fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b9444c-eec0-4cbf-aecc-ad5d27a499b4",
        "cursor": {
          "ref": "9056b24c-f8ee-4c49-a751-f472e2faac14",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1f570772-42b6-4a0d-9748-d2b1e235b952"
        },
        "item": {
          "id": "f1b9444c-eec0-4cbf-aecc-ad5d27a499b4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d6b3ebbb-ddbd-4a15-b2f1-604f8df71156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a916c7-4864-46e5-8874-3de8368ed38d",
        "cursor": {
          "ref": "5f377123-f108-4e3f-9c0e-3434a2c49a4c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b9fc6ebc-50ad-4990-96ae-9a6a5df4e613"
        },
        "item": {
          "id": "f0a916c7-4864-46e5-8874-3de8368ed38d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9a503e68-96d8-43cd-b8ba-50750acf4211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815fa611-fbbf-43e3-9c65-6b94cf6b5a77",
        "cursor": {
          "ref": "37d1e269-bf3c-4c35-8e5b-519f69f408cc",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9bb66f3c-409f-4e57-9c26-499ab1c7be9b"
        },
        "item": {
          "id": "815fa611-fbbf-43e3-9c65-6b94cf6b5a77",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3021c33f-c0e3-4cfd-8c72-3fc00aad12ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d732a9-542f-4a50-a51c-30dc95b555c0",
        "cursor": {
          "ref": "891fa52d-59e5-4e74-bfe3-711fa9444d27",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "57ae754a-f5f0-4b26-8860-3dc9deb81be2"
        },
        "item": {
          "id": "04d732a9-542f-4a50-a51c-30dc95b555c0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bd3126c0-cd4f-4103-8768-fb1655fd73d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6400eb-57a1-4dc5-b505-6b3f7d5bc717",
        "cursor": {
          "ref": "06c11e94-7cb9-492a-9a30-e63d08e2b4ed",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f2d7e7e2-c946-4725-acba-77ac16588dc0"
        },
        "item": {
          "id": "7b6400eb-57a1-4dc5-b505-6b3f7d5bc717",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "706aff7b-2b92-4a88-9b63-cfeb354b442b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1e5dab-f33d-483c-a12c-00af09c23e7c",
        "cursor": {
          "ref": "0d661f5d-b359-4f54-8bc9-8fd6b30d9748",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2f11ee8b-9ff3-469f-b284-f6e391ed42bb"
        },
        "item": {
          "id": "ac1e5dab-f33d-483c-a12c-00af09c23e7c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dabe4d3a-349b-4007-a832-5197ccc1ef9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e480e8-cdf5-4c6b-8a0c-f27a236f7d25",
        "cursor": {
          "ref": "e403874d-31b4-4d4d-850d-2121016cb13a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f0c29c0f-c6b6-4d67-82f8-0d4e03c50457"
        },
        "item": {
          "id": "e8e480e8-cdf5-4c6b-8a0c-f27a236f7d25",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f17558fc-4b29-4c19-bd63-c5e598656649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0259d5f-0832-4cb6-a3f7-1bc9991e22d4",
        "cursor": {
          "ref": "6d7f4efb-8e30-43a4-a5c4-f35289a68691",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "daa550c8-3db4-43e9-8472-59ef9acecc02"
        },
        "item": {
          "id": "a0259d5f-0832-4cb6-a3f7-1bc9991e22d4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f62ef272-e041-4ede-aa31-52308ffae1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c22645-b611-4809-aa70-bcc5c51dd552",
        "cursor": {
          "ref": "c92770cf-933c-4899-8c61-0b8f4c571935",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "333c2a7e-d5ac-478a-b512-20900dd77d63"
        },
        "item": {
          "id": "27c22645-b611-4809-aa70-bcc5c51dd552",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cd378511-9baf-4d98-bcbe-2bb2acc0e91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7433c16f-71a8-42a9-85c6-6b05cecb6b14",
        "cursor": {
          "ref": "6dfacbe0-25f4-4898-9a53-19d3f9f1f30e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "297c7acb-7c40-47c5-8db6-f58fbcb44968"
        },
        "item": {
          "id": "7433c16f-71a8-42a9-85c6-6b05cecb6b14",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a5172529-fc8d-4ce7-aea1-329a94f95a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ef7676-a204-4ab0-959f-7dc7912e4057",
        "cursor": {
          "ref": "9923da1d-7041-4846-b30e-4c8833eae0af",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a0a5b004-af9f-4646-8167-07c5ef98f116"
        },
        "item": {
          "id": "75ef7676-a204-4ab0-959f-7dc7912e4057",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f84ba4d6-3f3a-4aaa-951d-128de7dcb17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c5f884-0188-45ef-bb6d-19ab844532db",
        "cursor": {
          "ref": "c6501d52-0f4c-4ba0-883c-58bfdee84bf7",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5c86912d-0874-46b4-bd23-0f8932166a6a"
        },
        "item": {
          "id": "38c5f884-0188-45ef-bb6d-19ab844532db",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fe41c613-ee73-4dfc-87ed-67c52544624b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3028c8bb-305f-4c27-824a-ee6960183760",
        "cursor": {
          "ref": "76198a26-fa10-412d-a21e-ddf17bd0ea30",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e54a3c65-ae73-4b90-bbbb-04a86f1ba80c"
        },
        "item": {
          "id": "3028c8bb-305f-4c27-824a-ee6960183760",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e2b3f742-54ae-4780-bf24-73081bffb359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fe3db5-0e70-4578-b5f9-1289e2483412",
        "cursor": {
          "ref": "d14b4979-41e0-4359-aeb1-d7e9e66dec4b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ab783f3f-ef1f-4a42-b902-b73874833978"
        },
        "item": {
          "id": "55fe3db5-0e70-4578-b5f9-1289e2483412",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "893f5e48-7770-4ff5-b435-c71568f6ea07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fd0f0b-2fab-4c2f-84ff-8afa9e46aaf0",
        "cursor": {
          "ref": "e36ae463-6c3e-4ca2-a8a5-1015b86f92b4",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0777d40b-8c09-499d-849d-d76e0a462f3c"
        },
        "item": {
          "id": "b3fd0f0b-2fab-4c2f-84ff-8afa9e46aaf0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d85bc936-95b8-4030-bba0-4f84532550be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f17469-c982-47b1-a9dd-7f824378ead0",
        "cursor": {
          "ref": "007b7046-b0aa-4c4d-95c3-a6946e079885",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c5b82f9d-5f96-4648-aea1-0d476900f3f5"
        },
        "item": {
          "id": "02f17469-c982-47b1-a9dd-7f824378ead0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b997e995-a981-4859-a859-70ef3f755904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2485ee-5139-4855-8d08-0ec76d492583",
        "cursor": {
          "ref": "8be639b5-66ff-46c8-8c53-d8db3826b589",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "26d8a44c-aa37-4173-be1b-3bc7a19f5c56"
        },
        "item": {
          "id": "9b2485ee-5139-4855-8d08-0ec76d492583",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "46f44ccc-73e1-4f43-ba5d-d5ca39398a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26b96aa-8812-47a4-adb1-ace39fbd88b5",
        "cursor": {
          "ref": "cd6ce971-3106-43d0-98d2-d4efd70ee55f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "19911d51-e651-4372-bebd-26ae6dbb4e18"
        },
        "item": {
          "id": "b26b96aa-8812-47a4-adb1-ace39fbd88b5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7bf1aea9-9a5e-4197-a391-2aa476ff379c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8285e16a-a539-43f7-8d3b-dfab88b16c86",
        "cursor": {
          "ref": "28bad3b0-c641-463d-9839-5b09d1b289e4",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7da384d7-0878-40dc-8329-8d75cbdf228b"
        },
        "item": {
          "id": "8285e16a-a539-43f7-8d3b-dfab88b16c86",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "50fd755e-e12b-4142-8419-950177e14124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3902c9-59f6-4f7c-9b19-5e978ad6de53",
        "cursor": {
          "ref": "9e6ae128-576d-48de-a6b6-5e41e580535b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f9ef609e-8dbf-465e-80c5-808dec0699ec"
        },
        "item": {
          "id": "de3902c9-59f6-4f7c-9b19-5e978ad6de53",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "55f4ea31-c44d-4420-bf87-11c688f950e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e3c360-789e-4c1f-8d87-5334ced9f2d2",
        "cursor": {
          "ref": "d433b932-d2b8-4acb-aa09-eb15eca5d86a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4b8c1e9c-459b-422e-91e1-a3210ae404d0"
        },
        "item": {
          "id": "10e3c360-789e-4c1f-8d87-5334ced9f2d2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ccbbf7ed-d7fd-4bad-9291-391595e0da63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af66cb17-9753-48b4-a395-cac2dd56fa24",
        "cursor": {
          "ref": "d3b4b94c-5503-4ed6-bffd-e808db99f2bf",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c2e97942-ddbf-42ef-89ec-e08c748bb4aa"
        },
        "item": {
          "id": "af66cb17-9753-48b4-a395-cac2dd56fa24",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a33b169a-de33-4dcc-9504-223bac20a363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93a911a-ea3d-4cb0-aac2-9e69f9bc8c21",
        "cursor": {
          "ref": "f76315b7-1534-4975-9af2-48e05dd31f14",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f64ba54b-e908-4fd5-a6dd-7e568232eb9a"
        },
        "item": {
          "id": "b93a911a-ea3d-4cb0-aac2-9e69f9bc8c21",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fe5fb669-5272-4586-819e-5fea8c741519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e777a7bb-62c4-4496-9c1e-42ac01093a49",
        "cursor": {
          "ref": "6467c168-a813-42ff-86f1-7c5b4953e0ba",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7c0d19f7-6e99-408d-90f1-dd3b2c44cbf6"
        },
        "item": {
          "id": "e777a7bb-62c4-4496-9c1e-42ac01093a49",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1a40f98c-eab1-49a1-9987-23ea3dcab8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b877fb97-2e59-4462-ae38-96587dd61501",
        "cursor": {
          "ref": "bb43f44a-4f8f-41a4-8e81-e05406e5fc16",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "436e75aa-2173-4951-bdbd-68e124e73adf"
        },
        "item": {
          "id": "b877fb97-2e59-4462-ae38-96587dd61501",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "32c2cb06-1c68-456a-afeb-3fb5a4b9d0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc56922-2c6e-4fff-a199-c2042b1b7863",
        "cursor": {
          "ref": "bb2963a4-2c50-4dce-ad7b-70d94cc2bbc8",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "025d7884-7c9e-408b-aa00-8ef41930f2a1"
        },
        "item": {
          "id": "4dc56922-2c6e-4fff-a199-c2042b1b7863",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "34e178d2-87c1-4630-be3a-1c565f580b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c24714-8a95-4c81-a1c0-fcce88a1e226",
        "cursor": {
          "ref": "009ff9c3-60ba-48e7-8553-6b66d74fa5ec",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5704e75b-1796-4162-bffa-2d54f3452adf"
        },
        "item": {
          "id": "02c24714-8a95-4c81-a1c0-fcce88a1e226",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "34c14c9e-0ad4-49af-8290-d7f28a0c1970",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f8d9828e-cf6d-4018-a412-72c4e900047a",
        "cursor": {
          "ref": "a4d7cfee-3c98-420a-b20e-9b422ff420bb",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c2460802-b11f-4cc6-b15e-a855e0d0f85d"
        },
        "item": {
          "id": "f8d9828e-cf6d-4018-a412-72c4e900047a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "13f2c35b-3be6-489d-88be-ad65bfd6d89f",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "7a955b6f-a2fd-4f6d-a4ef-a21e11b29805",
        "cursor": {
          "ref": "4d12d04c-6db9-47d1-bca9-901624ba9783",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b2a2f52d-46e5-4fbe-8200-1ec2eac85f3f"
        },
        "item": {
          "id": "7a955b6f-a2fd-4f6d-a4ef-a21e11b29805",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8fa0faf3-db1c-468a-acc6-b36ab1830c85",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3e3522e1-59de-4e73-a8ca-d67aa056c300",
        "cursor": {
          "ref": "8dc27291-4385-4b38-91cf-c41b53e71d6f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "02ea75cb-7044-4e24-86b2-343db1ca6e76"
        },
        "item": {
          "id": "3e3522e1-59de-4e73-a8ca-d67aa056c300",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a553ed0f-e6a6-4618-882c-afedb80403a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89b0de3-a9ed-4453-b651-f6fed7319e8d",
        "cursor": {
          "ref": "37894a04-8745-4aaf-b628-bec378d7636e",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "29cc6e38-e535-40f7-a5db-9432dc607898"
        },
        "item": {
          "id": "d89b0de3-a9ed-4453-b651-f6fed7319e8d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "747b5c93-f8cd-40f8-a786-d96fded94c2b",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "35e4c2d2-6a3d-4886-be0e-c82d3a30d838",
        "cursor": {
          "ref": "f124861a-41bf-4004-8d44-52154ef13a7e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "238ae3f4-b88f-46cd-95b8-fa48061fa978"
        },
        "item": {
          "id": "35e4c2d2-6a3d-4886-be0e-c82d3a30d838",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a8fbcecc-ef10-400d-9bae-6cad9b01672b",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b5cba1dc-43ad-4169-9f7a-1ade8d754275",
        "cursor": {
          "ref": "448aa4e9-ccad-48b6-a06f-5400cc12df5d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "49dccdd7-48e9-4b7b-ae91-bae4fa8b64ad"
        },
        "item": {
          "id": "b5cba1dc-43ad-4169-9f7a-1ade8d754275",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba0a7dd3-ab94-4086-a2c1-f601e0945373",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5b5e3ad0-44cb-4c50-8e31-327b7e5e7cd2",
        "cursor": {
          "ref": "478b9962-b306-4292-9a8f-32f6f9a7eed6",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "11b7d35d-b6d1-4492-975d-c65d32584583"
        },
        "item": {
          "id": "5b5e3ad0-44cb-4c50-8e31-327b7e5e7cd2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e1e9eda7-8377-4bfa-ab51-b1584c58a8fb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "929b7d35-de01-43c1-bc73-2cecf330569f",
        "cursor": {
          "ref": "82b44143-9900-4fa5-86dd-83182e1dc65d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0c081066-fad0-48e0-9c16-8cda63bd255b"
        },
        "item": {
          "id": "929b7d35-de01-43c1-bc73-2cecf330569f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f7662d19-c165-40a2-ba7c-94f5bf2513eb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e850866f-bd6f-4578-86ea-90b48c73b4d6",
        "cursor": {
          "ref": "9dc0eb43-85cc-4048-9330-8964542bfd38",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "10a30fcd-d115-4820-962e-f772a2ae98fd"
        },
        "item": {
          "id": "e850866f-bd6f-4578-86ea-90b48c73b4d6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a8ae6227-32c8-46e9-852b-4905824030f9",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ad176bad-58f9-4650-962d-7572bb962b02",
        "cursor": {
          "ref": "a02f6173-aee7-48e8-8b26-d75e95ffc8ab",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8f25e9bf-9656-43f0-a7ff-87f8797a6313"
        },
        "item": {
          "id": "ad176bad-58f9-4650-962d-7572bb962b02",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3fc1c953-6dad-4767-b738-da7a9690f339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3d083d-5b17-4ad3-a23a-bdb634f0811e",
        "cursor": {
          "ref": "e2f514ce-21ae-42b8-9506-2c49a2f45ee0",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "86b9ac33-6577-484c-b1f3-b1df3656f26c"
        },
        "item": {
          "id": "1b3d083d-5b17-4ad3-a23a-bdb634f0811e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e2c246aa-7acd-4d22-9c3f-350e5facb8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1dd642-f248-4baa-9635-ca44940d10f4",
        "cursor": {
          "ref": "94e720f0-6d3d-4610-8430-401ee7f5c6d8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b371537e-9987-43d1-8100-679d24237cae"
        },
        "item": {
          "id": "1c1dd642-f248-4baa-9635-ca44940d10f4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0a7ed9f7-ed81-4342-b79b-813e7d5b6c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85201f10-3dd8-4e11-bca5-0cd50ee93ec2",
        "cursor": {
          "ref": "a53b5616-ae29-4fc3-bb61-8397b5c1e32a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ff17a741-6275-4cd2-88ba-54bfecc2bb83"
        },
        "item": {
          "id": "85201f10-3dd8-4e11-bca5-0cd50ee93ec2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "933c4abe-0192-494a-9e24-fb4db1bea6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea1b43f-8443-4a00-a989-398272cb1c62",
        "cursor": {
          "ref": "106816b9-4bb4-4488-82b9-0e57f0e88dd7",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "319cbac5-43da-4983-908a-b142a3f50c46"
        },
        "item": {
          "id": "eea1b43f-8443-4a00-a989-398272cb1c62",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bc1d7301-2187-4b46-93a2-dd9d6f7ee117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2717023b-f2dc-46d2-941e-2dae5779f6c4",
        "cursor": {
          "ref": "46bf4982-c781-4331-ba5c-b9fa6f30e9c6",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9a4c4e17-76e5-4cb9-8728-8c05044d3549"
        },
        "item": {
          "id": "2717023b-f2dc-46d2-941e-2dae5779f6c4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7da330f3-f473-4676-b508-1ac5f5647f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77f2b50-7fc6-40c4-b01e-28a5d77a952d",
        "cursor": {
          "ref": "3ebe5152-f0c9-433c-bcbd-1636af15a7cd",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ed7bee5b-e539-495d-afc7-707720040b2d"
        },
        "item": {
          "id": "f77f2b50-7fc6-40c4-b01e-28a5d77a952d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a5ce7599-bd94-461a-8b02-6644b5ab1cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106334d7-3bee-41fa-bc10-163f9b16a013",
        "cursor": {
          "ref": "41789597-bb9a-4658-ba30-d7ba0c0ec72f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "78633e03-83d7-4b6d-ab91-58bfa681b72c"
        },
        "item": {
          "id": "106334d7-3bee-41fa-bc10-163f9b16a013",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2b26ade6-cb12-4642-bece-db1345de5a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a86cc41-36bf-4ce8-8d69-8b8dbe31b11f",
        "cursor": {
          "ref": "17034e6b-586a-46cd-80ca-d459ae53d76b",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e167a6fd-9a51-4daa-8d3a-a05f7c2fa3c8"
        },
        "item": {
          "id": "0a86cc41-36bf-4ce8-8d69-8b8dbe31b11f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5b1c93b0-dd06-4642-90e0-1abb487689ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb2e23d-76f2-4830-b84f-da6a746975d1",
        "cursor": {
          "ref": "db4d2905-9200-4c65-bc12-16715c0e4194",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a97afc90-1797-410e-addc-a65d6888dfb3"
        },
        "item": {
          "id": "9eb2e23d-76f2-4830-b84f-da6a746975d1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a9b369d1-409d-4797-adf4-2b758074967e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62660ac-d49b-4549-aca3-d87fb41b368c",
        "cursor": {
          "ref": "68df5b11-de2d-4456-8b23-08f02122079a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "178eef73-14c3-4e7a-be01-6a116e525778"
        },
        "item": {
          "id": "c62660ac-d49b-4549-aca3-d87fb41b368c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0a689418-4b97-43da-b6ed-ee97908b0d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6059b709-cf40-4421-a470-2e8c1201a5db",
        "cursor": {
          "ref": "240b968c-43e2-4d74-8ebf-cd951fa3c698",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "130da2f6-146b-4f1d-adc6-c8846591cc11"
        },
        "item": {
          "id": "6059b709-cf40-4421-a470-2e8c1201a5db",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f413fe16-50b4-41c4-83c1-4566419309e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b0579b3-c7e8-41f8-9409-a651dffe326b",
        "cursor": {
          "ref": "5b4f477e-dc93-4099-9b80-49b12cbe4929",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "85f8eb61-2cce-497e-a04f-03eb3b2e879f"
        },
        "item": {
          "id": "8b0579b3-c7e8-41f8-9409-a651dffe326b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "436bff38-3632-4d20-931d-abc7e4136991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7e8b1e-58e1-40d4-b239-7d82e6d08221",
        "cursor": {
          "ref": "f36d73ba-21ad-49be-b15a-b899e0887d9a",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "30d0c676-81cb-4b4e-adc2-8989df867885"
        },
        "item": {
          "id": "9f7e8b1e-58e1-40d4-b239-7d82e6d08221",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "32e6dcad-8ab2-40ad-8970-79e9714d2a09",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9bba4cd8-1451-42da-a8da-58d25ab7a1b2",
        "cursor": {
          "ref": "a833bec3-3481-4b45-9116-48c0a98105cc",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2d51a980-27a4-4dae-8645-0183433b0ac3"
        },
        "item": {
          "id": "9bba4cd8-1451-42da-a8da-58d25ab7a1b2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0fcfc036-c90a-486b-a603-9dd9bf90974d",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8fad090e-7d15-4837-a609-04b272a4b0f9",
        "cursor": {
          "ref": "3ec3ef11-ae50-4288-9704-a7f89a76b2eb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a26be841-f7a6-42cc-90c6-67e8c4d13f36"
        },
        "item": {
          "id": "8fad090e-7d15-4837-a609-04b272a4b0f9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0743f905-8001-46cf-b3c0-42c4d7b191c5",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "45a03f89-0b63-45be-82b9-933ad9635c2e",
        "cursor": {
          "ref": "72ea6b66-9349-4533-b65c-47e060c62e91",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9637e1b6-f488-475c-a858-3e5b8a252c44"
        },
        "item": {
          "id": "45a03f89-0b63-45be-82b9-933ad9635c2e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b2c3a05a-cebc-4b14-af4c-1806c178a1c2",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1549679d-7f09-4e9b-806e-10fc64284723",
        "cursor": {
          "ref": "4f7a576f-be4b-4a3b-8807-bc0eead4aa7d",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ce4a8bd9-3ad2-4414-8e1c-927867c0f065"
        },
        "item": {
          "id": "1549679d-7f09-4e9b-806e-10fc64284723",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "99ca6df7-8ffb-436b-8b36-5c543f5cd645",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "786bc4b4-49bf-4565-bb97-956b4f6f53f0",
        "cursor": {
          "ref": "cb01b243-5dc7-4df4-9e3c-459f00a26b10",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a28a60b-d8f0-4e6b-9c6c-019ab1b2bd7d"
        },
        "item": {
          "id": "786bc4b4-49bf-4565-bb97-956b4f6f53f0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e1629648-4b04-4e09-98b3-fd2b761bbe7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fee4cb6-387f-4244-ad89-a44dce2b441f",
        "cursor": {
          "ref": "8e6ce8da-bf7f-4765-8077-2c0fcafd0a8e",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d68e92b-100c-4706-9f63-c90c0026a5a9"
        },
        "item": {
          "id": "9fee4cb6-387f-4244-ad89-a44dce2b441f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4fa20c6f-3b3b-4ddc-a610-dbdfe179477b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b82844b-b378-401a-a898-6e1436fa129d",
        "cursor": {
          "ref": "dac02926-7de9-4482-8a16-2cf548ca7b5b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "918f3389-b4d0-4cd5-8acb-ad76dcc9b7b9"
        },
        "item": {
          "id": "5b82844b-b378-401a-a898-6e1436fa129d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a99c5d8-e6ef-40c0-a88b-4fe78ca1925a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb8b360-858d-4e98-9975-67203c016dbb",
        "cursor": {
          "ref": "c6ab54f6-97e3-4543-a541-902aa75ae7b5",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5f162516-21f4-4f42-b544-eff0c0454045"
        },
        "item": {
          "id": "1cb8b360-858d-4e98-9975-67203c016dbb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f9feae7c-e1d8-4ada-9be5-934d39510d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820942d7-fb47-4883-bd76-2458c688f28e",
        "cursor": {
          "ref": "6fd93534-2dc2-4ba4-ba8e-fde438bd41bc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "652746be-3da5-4d66-855e-a3a29c0a9ecc"
        },
        "item": {
          "id": "820942d7-fb47-4883-bd76-2458c688f28e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "212239c2-a62a-44f4-a088-9af2d767348a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368dbabc-feff-491f-bd4e-4d6dba013310",
        "cursor": {
          "ref": "d4971b25-bafd-4618-8bb2-16d714c8ef69",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d61807ab-8712-43ad-8590-f59cb5e8dfe3"
        },
        "item": {
          "id": "368dbabc-feff-491f-bd4e-4d6dba013310",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7212edad-a9ac-415d-b872-9eb4dc9036a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295aa6a6-1ca8-4b6a-8647-36b2a60526bb",
        "cursor": {
          "ref": "abde9b00-dd2b-4875-b3b0-742c6b710aeb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9ebf2c96-b8ea-4069-894d-3310d7fbb979"
        },
        "item": {
          "id": "295aa6a6-1ca8-4b6a-8647-36b2a60526bb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e61cf9c-8dab-4f55-8764-ac38cc533a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edda5372-b1fa-43eb-b8c0-662f92ffdf00",
        "cursor": {
          "ref": "fb2686e7-3aaf-466d-bea9-5116ea5bd8c0",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "eb1490e1-1db4-4772-915b-f9372d7258b0"
        },
        "item": {
          "id": "edda5372-b1fa-43eb-b8c0-662f92ffdf00",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6198dc56-50aa-4c0b-b262-b16a61aab6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08176a0d-6c07-4049-b894-da69c062f65c",
        "cursor": {
          "ref": "beb096d0-a7c9-4c93-9e9b-fa234fead3e1",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3a05ef22-c0a0-489d-b5c8-15c1f352e31e"
        },
        "item": {
          "id": "08176a0d-6c07-4049-b894-da69c062f65c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c6515408-0874-49c0-b711-6d7663dd7fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492874db-2143-4ee7-896d-1dc2b79247b4",
        "cursor": {
          "ref": "a52d370d-4636-45e9-be04-e77586d580ee",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "97032a0f-69fe-459e-9a3b-0a1eb44cfb3c"
        },
        "item": {
          "id": "492874db-2143-4ee7-896d-1dc2b79247b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9890be41-e5c7-4f83-bc05-de39882ed926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d43bcb1-3b62-40fb-ab1a-abdbcfc15a12",
        "cursor": {
          "ref": "c8a7d9d2-682b-4587-a6c9-7ac7b331098f",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1af69212-8bf4-4ac4-8638-fdd1c82ed43d"
        },
        "item": {
          "id": "9d43bcb1-3b62-40fb-ab1a-abdbcfc15a12",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0b44cdb0-bfa0-4902-b82b-9bdf4d4cbc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69932bf-54e6-411a-a986-a796c1f48d7e",
        "cursor": {
          "ref": "e5a2a819-887e-40bf-8255-1e7df5dcb719",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "182b3c23-0465-4d6b-b4ef-3ad419e05ea1"
        },
        "item": {
          "id": "a69932bf-54e6-411a-a986-a796c1f48d7e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "da66fda6-0a32-4f0b-a109-8039835562e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95edf77d-c0ef-48eb-96f8-30c740645373",
        "cursor": {
          "ref": "6e53df0a-6a8d-4816-9335-f67d79aa2f0f",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "75e61a0d-bf6b-4acc-8745-6a51d70bdc7e"
        },
        "item": {
          "id": "95edf77d-c0ef-48eb-96f8-30c740645373",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6a904417-1a6b-4cc6-8bb5-4c7ecc1d6097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782d5702-e35f-41d3-9496-6677c27674af",
        "cursor": {
          "ref": "38ce0022-654c-4b8f-b8ed-3653c2dc51de",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fadf24d7-c1f2-43b3-af05-74ec0bae70e9"
        },
        "item": {
          "id": "782d5702-e35f-41d3-9496-6677c27674af",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6f88263a-fba1-4901-b14e-c27a0cff33b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4d316c-b529-4e6f-8477-7e333c67a73f",
        "cursor": {
          "ref": "3951596c-49fb-45a6-96b0-f7c2513b509f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4fea92cf-1e9d-401d-a762-d8b82bab7058"
        },
        "item": {
          "id": "da4d316c-b529-4e6f-8477-7e333c67a73f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fe5e78ce-b419-4602-829c-ccbf8e420d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb5ddaf-a546-4574-92d3-ae3d028dbe62",
        "cursor": {
          "ref": "e57512c4-0e2b-436e-8c7e-fbfe41c2992a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a232b1ae-d99e-4017-b4a8-d799e82d9358"
        },
        "item": {
          "id": "5fb5ddaf-a546-4574-92d3-ae3d028dbe62",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4b9a5ca8-b3ad-4f17-b4e7-418991fe7a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ad63cc-d413-4e78-9d87-89b266c92e9f",
        "cursor": {
          "ref": "5838eff8-ffe5-4189-92d3-6f7c54856216",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "26b8b1bf-99fb-4fe3-b192-51c749793a44"
        },
        "item": {
          "id": "e3ad63cc-d413-4e78-9d87-89b266c92e9f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0aa4696b-7c9a-4eae-b21e-b2fe7fc341f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6aef79-c78e-44d3-9840-ad9b615b4a27",
        "cursor": {
          "ref": "3e64ab2e-7c37-4ee2-bb97-1f7a1fbc3868",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dc927b09-8447-469b-b169-5a3e6f14feff"
        },
        "item": {
          "id": "bb6aef79-c78e-44d3-9840-ad9b615b4a27",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "09362774-5820-4e64-8254-f5e365dd3db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b926aa88-d479-46e5-acf1-4e785e8e47ac",
        "cursor": {
          "ref": "fc1a3798-d076-442c-9387-98352009fedc",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9f6c82ad-d5e3-4c9a-b940-25445fd9e9cb"
        },
        "item": {
          "id": "b926aa88-d479-46e5-acf1-4e785e8e47ac",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6edea567-45aa-4367-84cf-dc26f7d6abea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f44a1d9-ba56-47e0-b8af-908abf9294d6",
        "cursor": {
          "ref": "08186f93-36c3-4396-b02b-bd04d47bd9f9",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "55230731-1a26-49ba-924d-1f07086e67eb"
        },
        "item": {
          "id": "5f44a1d9-ba56-47e0-b8af-908abf9294d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "033d9540-4bce-4e96-8e79-a6458ba0a5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08fabb1-4e6a-4908-8fe3-fda3f8f33398",
        "cursor": {
          "ref": "b948eefd-8d4a-430a-be6f-fb8713544775",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2dbceb14-9b6f-4319-9fe5-ad9c9517a1e9"
        },
        "item": {
          "id": "b08fabb1-4e6a-4908-8fe3-fda3f8f33398",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c4d6bd10-1828-4b6c-8abd-df74be5377a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f72aeba-ddb9-4477-bcd7-f14c8f4636f9",
        "cursor": {
          "ref": "5d3fddcd-13ea-4bf9-ab29-097069a0a92a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3f8541ec-16b8-41da-8fa4-e69019fdc405"
        },
        "item": {
          "id": "5f72aeba-ddb9-4477-bcd7-f14c8f4636f9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "db9df309-e9dc-43cc-a1be-ba13fe659f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33247b26-5fe3-413b-9586-49ee1bc05f42",
        "cursor": {
          "ref": "d0e2e3aa-c4c5-4e3d-a943-e75dc71a78d9",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9bc07c00-f19b-4733-ad15-d70d7018a46b"
        },
        "item": {
          "id": "33247b26-5fe3-413b-9586-49ee1bc05f42",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f50ce98d-3c32-43b6-8a0b-affa08db2bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b10805-2f47-4c7a-af84-2b611be8a04f",
        "cursor": {
          "ref": "867a42d7-9310-4e7c-b952-3461111e5489",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "13505f90-a9a0-4edb-83e6-dda9b496a4f1"
        },
        "item": {
          "id": "d1b10805-2f47-4c7a-af84-2b611be8a04f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f6ba49f4-0b48-4aeb-9485-38f7d815734d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8089d9b6-0f7b-46c6-81f8-ea2bb650c34b",
        "cursor": {
          "ref": "8b08fa03-fe23-4f6f-b01c-c23763a3bfd2",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a5d8c9b2-7128-4713-b92a-77f711593e93"
        },
        "item": {
          "id": "8089d9b6-0f7b-46c6-81f8-ea2bb650c34b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7d851daa-f6fb-4d71-bc07-8eb7095129d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce80474d-2753-49f3-8691-9fd2612e5b8d",
        "cursor": {
          "ref": "6ccdba4f-3b7e-47c0-8d50-60bce7b611d3",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a0a048db-2710-46f4-a287-c1e628a11b6e"
        },
        "item": {
          "id": "ce80474d-2753-49f3-8691-9fd2612e5b8d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c634610c-08f2-40ba-afe2-644adcc6ba57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc26649-f4f9-40be-a646-8b2715242f8a",
        "cursor": {
          "ref": "29b0af17-6a68-49a2-af85-646f2cd6a16c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "719f5580-0336-41c7-b406-29f401532b4d"
        },
        "item": {
          "id": "ccc26649-f4f9-40be-a646-8b2715242f8a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "389835ff-6c79-4e7e-a3da-dfcd5141df5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd9e745-68f4-4957-a0d2-33cac9bb6362",
        "cursor": {
          "ref": "f4c6706a-a935-4420-a1f3-07fda3348cf3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5b157e41-ae39-4f4a-9379-948e934f74f1"
        },
        "item": {
          "id": "abd9e745-68f4-4957-a0d2-33cac9bb6362",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a9c70d5b-26ab-44a3-9252-0322556b48e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e461f8eb-6e37-4a3e-9c6a-7efc958c2cb1",
        "cursor": {
          "ref": "546b81cf-cd5c-48f8-85d7-93e6020bb4fa",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "828d9c16-197d-4582-8457-c853d67a85c2"
        },
        "item": {
          "id": "e461f8eb-6e37-4a3e-9c6a-7efc958c2cb1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "026f24e2-1da0-4067-b051-56873f715701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6883a371-e52e-4ea6-943d-9abd3c4fbf8c",
        "cursor": {
          "ref": "ca534829-8eec-4979-a52d-7eb281658f15",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e454f02c-09e9-4f10-836c-c32e0a268d11"
        },
        "item": {
          "id": "6883a371-e52e-4ea6-943d-9abd3c4fbf8c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ef9dad18-7be4-4373-92d2-18ab4fc9eeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f0d0c0-70d8-401e-84ad-0979306105bb",
        "cursor": {
          "ref": "f2338931-b6c1-4b63-a2a8-6e240d33b748",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "203bb77f-e7e6-4acb-9971-784c9e567e8a"
        },
        "item": {
          "id": "87f0d0c0-70d8-401e-84ad-0979306105bb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "81f4de6b-a727-43e3-86b4-2336cf70b661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12367164-e11b-4cb9-a93d-21b98340c85d",
        "cursor": {
          "ref": "a33579a5-992d-48e4-8e62-d531ce74984f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "76ecaf97-bae8-4850-aa39-9592b6225890"
        },
        "item": {
          "id": "12367164-e11b-4cb9-a93d-21b98340c85d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "96b70506-cd14-4465-8eb2-7b657949a3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37daad34-4052-432d-b542-9d260e53f3b6",
        "cursor": {
          "ref": "05e96f09-1e0d-44fc-99bb-0f135a117714",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d227db37-0c43-4439-bef9-2f876b70c667"
        },
        "item": {
          "id": "37daad34-4052-432d-b542-9d260e53f3b6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6b0a35f1-96e3-431e-9791-9fc1a1dd917b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9056a1c-0278-4e64-ac08-4f4d28ebf101",
        "cursor": {
          "ref": "a18b0e45-6a3b-48d9-b666-1e1f541dad5e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ce5d23e1-3fbb-41f3-907b-f46d15e5a244"
        },
        "item": {
          "id": "d9056a1c-0278-4e64-ac08-4f4d28ebf101",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1bef76ea-cd64-4113-accc-5c1dfa19ecd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44db4624-14e5-4071-ae18-593da6b73cf1",
        "cursor": {
          "ref": "ee389218-fdeb-430d-b9f9-f994d9a3c97e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6bc5ac3c-3e87-45e8-a55e-56943407814d"
        },
        "item": {
          "id": "44db4624-14e5-4071-ae18-593da6b73cf1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "995c88fa-5c12-4689-a715-c8a3fb5f2e21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edde975-9bb3-4411-b8d8-26776646bf82",
        "cursor": {
          "ref": "b4d5370c-e70f-498d-b57b-db9ed2d1ceec",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7c724af1-afd1-4e8f-92ae-61d7d8af2d26"
        },
        "item": {
          "id": "0edde975-9bb3-4411-b8d8-26776646bf82",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "af8ea6fa-046d-490f-9d57-c8709704b481",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7a1ca7d6-b92b-4c6a-b555-384e31c571b1",
        "cursor": {
          "ref": "b3570a23-0e85-4db8-9893-ef2dc7271a3f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9a80e73b-5063-4f4f-8110-e16f3923cd7a"
        },
        "item": {
          "id": "7a1ca7d6-b92b-4c6a-b555-384e31c571b1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0a0b53ee-a426-4fc5-aa13-04334a980678",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b22df3-bf00-431a-bc40-11d011ecdc6b",
        "cursor": {
          "ref": "3324cb4c-6ef3-4b63-bf45-631f89d4005d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9cc992e2-3743-4fa0-8f27-1d7b646d4377"
        },
        "item": {
          "id": "99b22df3-bf00-431a-bc40-11d011ecdc6b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6e0387e6-75c5-4dbb-b5b5-54440b3c0b17",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "70122e28-cca1-4a4d-a0df-e726ab6e7f6c",
        "cursor": {
          "ref": "6189a581-5890-4586-8634-918fc3fb149d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b50e7354-3355-4b49-8cd9-eba80e1ef03a"
        },
        "item": {
          "id": "70122e28-cca1-4a4d-a0df-e726ab6e7f6c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f3880d31-d272-4d04-8556-92d45ac83332",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70122e28-cca1-4a4d-a0df-e726ab6e7f6c",
        "cursor": {
          "ref": "6189a581-5890-4586-8634-918fc3fb149d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b50e7354-3355-4b49-8cd9-eba80e1ef03a"
        },
        "item": {
          "id": "70122e28-cca1-4a4d-a0df-e726ab6e7f6c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f3880d31-d272-4d04-8556-92d45ac83332",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c93f67-0511-4746-ad94-d16c08e011d2",
        "cursor": {
          "ref": "bc5c9ae3-f0a5-44eb-b7b1-bf4bcd5b26b2",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6d6d17ea-0125-4d35-a6c2-e0d4f20f3fee"
        },
        "item": {
          "id": "17c93f67-0511-4746-ad94-d16c08e011d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4ec71131-55fe-481d-b70e-164aa2705410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22b088e-8f40-47a0-9a44-2c254193a974",
        "cursor": {
          "ref": "010a5c0e-3783-468e-bb5e-34cb6d28fde5",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "08d07300-fe14-4cd1-98b7-2f76b6680208"
        },
        "item": {
          "id": "e22b088e-8f40-47a0-9a44-2c254193a974",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ce894ec2-303a-4af5-805a-3658f5366e48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}