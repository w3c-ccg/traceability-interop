{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "bfae8375-8392-4c94-a555-d9f8d90dff63",
        "name": "Clear Cache",
        "item": [
          {
            "id": "19fdb756-472e-4cdf-92fd-6e151ddbaaad",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8dd3ed85-26ad-4e1c-9dba-5d990c744478",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "18968833-6683-4230-b500-073f83d0c899"
                }
              }
            ]
          },
          {
            "id": "ab4556f2-da48-44ef-99dd-ef1940629b70",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eacdbf6a-0a15-4c0f-99a4-75858a42e25e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d8bb91f-40a8-4a4c-9131-725edc7c7720"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a6783a87-6fa7-4c7d-8ae6-db4cf69043be",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1fdc0a6e-8097-4184-9ad0-addba1c99d70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77adc857-a846-4d4f-b753-7eb5f95a4b92",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05188fa3-ad9e-4bfb-9aec-086c5e27c81a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebd6c3d6-1d3a-47d0-bd71-8f3aebf2563e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54638b89-e243-47c7-b4fd-9acd8878a67f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d212635e-c15f-4856-acd7-03809012864d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4bbc7cd8-bb49-4574-bfcc-152012b4393e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1599f67f-5776-46aa-b1cc-629857ce924a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b2c2277-2cad-458c-be3e-d4075f491631",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7dc7bbd5-78ac-4824-8ff8-1f7a192a7c22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0aceb3e3-65a3-4d7f-a3db-340573fdfd8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ec4a62c-d21b-4f23-92c6-ab367939f4c1"
            }
          }
        ]
      },
      {
        "id": "df2d19f9-c34c-4e44-a08f-00f42decda20",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4690f958-cea1-4a2c-9bf3-d42d3cc81638",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb9e0ca0-0d88-4991-86ce-b00b29f5f3d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "faae6ec1-c455-486a-9cac-b63454cb2929",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba59d0-e333-4cbf-ab03-09faf6fd247a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b88e1fbd-1e61-45d2-a490-a9107b8232b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9ab83e-fe17-4232-9c91-4b5dea2e6d08",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f31f17d-a580-4f02-b7b0-dca0df19f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e6ab198-92ad-4ed6-8a27-df3d3bfc60e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f942be0f-4ca5-4eea-bfcb-c453e8f1105d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d7d52d-8780-450f-979b-2b2b1e0fb179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "703122b1-6138-473b-b549-01bc129c6f02"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "18298941-47b6-4e30-8def-8aa3a8c64be9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6a9a8ac-3883-4b0b-a2ed-b0e0518dc96c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b8db24-63d4-41da-bf35-509bc6940129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4751f6ec-044c-4c61-be4e-55c719ba4ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1e2cd0-4bb7-416e-8316-6a02f46591a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fb5b73-379b-4dbf-84cf-608e3fc60b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61aa8413-3ef9-41ed-b940-a1e499e9e1be",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6e6b8b-658b-4a72-b400-836af07a8056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba53f6b7-8cb6-4c56-aafb-a7759c16379f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e9539d-72a0-4afa-9cce-911b7de58ed6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "71e55cda-7508-4cbb-80b0-1cec7c6e999c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ceff814a-b4b1-47fd-a27a-c8c2ae0b00b3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c133c7f3-3e15-4d7c-b12e-57278704cdec",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7efa2f46-855a-4191-8ba7-a78bb256d9e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cbd775d9-3fca-40a4-879b-4dd3a2a19aa9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8495b6b1-e43d-405e-a1ff-3874be01e2bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "905986b9-25fb-489d-a0d1-c1fd46a4f06a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11f831d6-a249-4ad2-948d-49dfd1f71e50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a653763-a751-42ff-b623-e1263d834efb"
            }
          }
        ]
      },
      {
        "id": "6d5896c3-5561-45be-b47f-710d70953850",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd0150e4-edcb-4517-be25-0ff36ff50d5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b853da1a-7f3a-4e17-a74f-25467cd30082",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2f38af05-7eaa-45d3-97c1-1f519a13afd9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea063999-8810-430a-bc34-5f813e6145a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bf30a2-bcc6-4aca-bdfb-63854288318e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71387692-d9d4-4982-9e74-f5f0bc0e5be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "070445e4-21ea-445d-af50-8bb311938a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16bc2905-0917-4af1-9e9c-8c6ae0ff20f9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76be0c66-9574-4ce9-ba31-0e3c35493737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc871da-8115-4aff-9ec9-2f4b9c559e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368f0e13-86da-4b3d-b022-6356af716c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f87eb53b-92f7-4b3a-b9b5-3399a8ca4e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87053636-6ca5-4eb3-8626-dde961fb4b0b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbe0f73-1528-45f1-87ba-b45d3c6811f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76296062-96b9-41aa-a5b5-5eb03b555a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3c3254-e7d7-4b38-b3e3-f2711504d2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8982e839-5e96-428e-b934-fe6c15c8db1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2ff198-c650-4ce4-a36f-cbb15133f155",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9537dbb-202c-4949-bf74-da2dfdcf888d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ccd367-c97f-4573-acac-d4a9dfe1560e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11194f32-d7f6-4530-8244-253769ce83ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92e207ae-57ae-41f4-99ce-0c799bb372b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb31059-4e26-4d75-afc4-aca5016232cc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d303d4-84ef-4698-b524-d9ad17e33b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e35bb6-1fed-4338-9540-1a3d74eb3a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72d9fe9-4ca6-4f14-8fae-cb87b7f75941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b150383a-6861-4ef5-9bde-c33278fb550c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c49374-f540-4029-9841-600861d5e064",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf762c1-fb9e-4c15-b31e-8f76f23a5a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd0b311-56da-4053-8f6b-d6628a75036c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522e7ad0-8436-4946-b0c5-764d839d0c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77ca7b30-0d50-4577-b0cd-cd759084cd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e9ed56-8152-4868-8ac9-9cb87debb2c3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53210fb-4465-48d6-b4dc-fc22b0313609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a9d8a0-6d3c-46a6-82d0-7cf4644151b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d33195-7fc5-4c89-b3f5-d37f5e0f0883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90b11363-3f36-4624-a285-3115c4972c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdc9805-a03f-4499-b797-f0475d780381",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a180e5-cb24-402c-b956-76663fbb0970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e5f0ac-f880-423f-8f00-f345d1c10810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1abe51-289a-46d2-b166-5d2f4516f080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a376078-4afa-4268-ba7c-4adc1dcdda3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e74ddf-2ba8-4e10-a107-2cda4d2387b6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d865a899-e746-4600-a80d-ed722f65513b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fde894-43d7-4247-946f-58225e0f539f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2f85fe-121d-4a06-88bb-74cc9f5eb963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2415459-7c53-432d-90e8-a12283d99ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fdbddc-605f-4cc9-9c02-03ba46a8ef35",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3342c1-d3a2-4b7a-af74-08417ccdf33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713d8b1b-a197-46c8-99e8-0ad5a6740c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03b468a-7b47-4587-b7bc-77b56c1e80f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0758ea0-84b8-482c-8981-29c10ea18b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff37b44d-258b-4dca-9998-cfbe4cb10bb8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29411969-11f4-4596-817e-c9e677211837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4497136c-67f3-463b-97c7-f92272398c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca33279f-bad1-428c-969b-0c885259b267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df5da11d-6785-45a3-bba5-e36cbc42eb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8aeb7f-5545-4f20-bef9-be70e9d42fb8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4781f4f4-6288-4ffe-982a-854cb10d5e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdaad51a-db57-41ba-8ecc-7e09a1e271d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b23cf6fb-3a4e-4380-9430-6ab23a929f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dd3278b-f48b-439f-9eab-9157c2548f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f6f57b-f206-47d8-a5f2-73830c438039",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c5433f-c8f8-4149-87aa-c2610c60557e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6134d9cd-10a0-492e-ba7b-6932d6692171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9551d795-631c-485e-a9f3-4c182f5e80d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90981bf4-6b21-4ec7-82a1-967bf79e7133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb7ce41-53dd-4df4-8c42-d1e4de2f2b55",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a031d45-aa67-48e2-8a33-9892658aaa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f817e6b-cb1f-4032-af72-a1f619953a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a2df06-9338-44fa-aae2-7ee5c10a4c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4259973-fb29-4311-bd73-934f7eabb98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d925fd-aab9-4d81-81ab-496eeb129f04",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446d4ba0-5bf0-46ff-aae7-eab656c25353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886acef0-5375-4a85-931f-fe1888214110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "059c4f38-b351-490f-9404-b30472d2c070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd94b740-e86e-4203-8e75-671c6da2009b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376bfeba-83d7-4a9b-b5f7-2fd9ed506929",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e759f5-3bf0-4ce3-b9d9-f65f10117c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3d8c90-d84a-4f24-8d5d-7875899c5fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d927d8-d7db-4dc4-9e9e-7a9b71f723de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16a13336-70a7-4549-86e8-6d68662baa45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1381109-9c28-47be-9167-f5002751c6c9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8593436-bc51-4c16-96e4-1317e37fbff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bab0c30-f2c1-4eac-a5f3-f5999bf00819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c743e5e1-7a2c-48cf-b0db-1519a7e690b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "277edc74-c2e3-451e-81d2-c30d176ff1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fbd68f-48f8-4c7c-9173-7316840e048c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca68209-84a2-430e-980d-9acd02541d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f635c3f1-94e1-4621-ba31-e43bc418dd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fdb293-bb89-4aa3-82b3-42f0ad0b1e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dadd63d8-381a-4447-9012-1480b6f4fd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d137780e-52ba-4dc8-a49d-d0e97e4b3dc0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482b66d0-a179-462d-a292-2d776fa0f036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca1e58e-8984-4935-89f4-b11e0973c15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdbe386-8815-4f4f-aa20-6d28e9ab5d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e8a87ce-e4ec-49fc-9ccd-a2a2b5e2f193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc88bcb-24d7-4f95-ba5b-95393c2f6bd6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa1a550-6b74-44b6-839b-0bcdcec4aaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad997ce-f97c-445a-8e87-aaa9331aee84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05b32c9-4f0d-4fa5-af3c-45e5a98e126a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "142bdfe9-1476-4579-a35e-94850c8989d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598ee39d-e0d6-4e09-8523-d23db00ab640",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c8599c-433b-44b4-83a9-573fdc5d3619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e218c6-c7b7-450d-9e22-6b56e94cf494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b12e06d-b7ae-4e27-a149-036fa6795dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6becf424-3bf1-47fb-ba83-3064ce188273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61b81d4-d320-4e9f-82a1-43aa05120047",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee3e32b-aa4a-46e5-911d-17bd1d6bdd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09c73c4-e757-4e39-9efd-506b51fa93d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9a8f13-d799-4ba1-a7b3-00be4b2e7b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbf74e9-3347-4f13-b022-ba7bee850554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f8924b-5e0f-4a89-98cc-b4ffbc85a09e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e892a9d-ec67-4bca-852d-964e8e9dcfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3376859d-771e-4887-adde-6dace9a58cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ecbabc-72fe-41bc-87ea-afb208904ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5019886f-de2b-4a37-9f61-442dfee6f05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccec1c9a-509e-41d7-ab47-cb262e38cb27",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1dbc861-ff4d-4052-bff2-b738d84503e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da1f14a-f8ac-4252-86c5-9f3e6b912ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77389079-f252-413c-9332-2068e0ef5e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdccd12-77aa-4126-8285-c6fd4e67b7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535e8df9-43be-4dc2-927b-a820bb1ddb51",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5bb06b-42a8-414f-b69b-deb8bff7bd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4c72a3-e03a-4c0c-9070-46d60fbb8cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e18212f-bbb2-4fc0-aaf5-f8f5592287e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0633fc46-6d28-4513-8725-099a53a9bc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21d7171-e5df-4a3e-aa2d-988f6fbf9bdc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a29cc40-afdc-4bd7-9746-9d6845bb9c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d3a9cb-03e2-46c8-87b7-8630d5343ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360ee6e1-aa4c-4db6-b463-bb7a8c3e0c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf25b117-9785-46a2-80d2-19b760cb9a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a9c402-5449-4596-97dd-6787a399322d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6eb0f84-df01-4a6c-b89d-b5cb9dac3cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2de3687-bd74-416f-ae01-7b370acebb5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288364c4-b728-40dc-a9e3-62ad11a699cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ee1887-947f-4ac5-92e8-3229cb89c3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ad7df4-1153-4b6f-91c9-a974545f7bb3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50656b73-6fc0-4650-9dab-df8d6b4611be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bf03d8-0273-4cc3-b756-8348a69c25eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1517c3-9495-4364-9271-6b19d0fbe778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8053466-77c2-4cf0-8782-9fc4ce0df55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af31b4f6-6f50-4740-ac17-0d74520126bf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af72b8fe-0bea-43c8-9f4c-ea9ea69359b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b2c644-e4f3-45f1-99a4-cc2d0b3b7c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1fca9e-843b-42cf-9759-0ae72a9ebb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ded8cd94-09b8-4657-a4fe-10b8de3a900b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba9db13-4404-4c90-90dd-4291d4191ef7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2954b7ce-74af-4b00-99e2-c793a5bc0db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c891eba9-bee1-4aa8-b1e8-1f1e47854183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d8cdb1-5ddd-4460-9496-37f43549bacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "75fa2b30-bce1-46e5-a4ab-137171878960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b81709d-5c57-4480-bf53-dfaf0c99e377",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba941710-d681-4138-82f5-931eff952245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04dd78b-8d69-452a-8065-d835047e2c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b458adf-f378-4240-9425-f5f003bf502a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "340d8e81-40ed-4f38-a2b3-9e3946f50ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bb6d9c-9b60-4cc0-a5c6-7a7e40f63e41",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c142d6-9ca1-4e54-bf2d-f850e81b3c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17bc31c-4c0c-4d92-93c4-10ef078dda2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa3de06-175e-4bff-8a92-502b952a57e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb3a98a-fb39-47bb-bef7-86b747029a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd525a5-12b7-49c5-aa63-7a3f72e3f50f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eadaf40-f0ba-4917-b20c-888783f6e846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead74a65-4735-4ad0-89ba-9abbd7d1b243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534bb6c1-5629-43f9-859c-50ced48cc005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "321be3f0-9dbc-47e9-a2e0-10423d6cfb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58088428-9997-45a0-b39c-2ebf528060b2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477607c9-7dc9-4813-ba60-55783e2a373f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a346a2aa-01d8-4d6d-a136-be17cb4ef4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c1dd02-cc03-4361-845a-663b167de522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0fc42c-bf8a-4a53-892b-17eaf5b5d2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222a8ccc-2140-412e-9fd7-e3c03c8d16d4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7847af-f91e-4540-8163-fc0f7ec6e2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9312d100-8280-4578-a5f2-827065a9cb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96973bb5-2723-421d-8c72-67d0493bda62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fbed6b80-7e13-4217-9809-71acba12280d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7cc333-3dbe-4494-bc24-3fc304d067f9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdac8c03-3638-4f65-b894-285d6d96894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f75c0f7-129b-4005-8eeb-973ecf35189f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c3cb78-9cd3-48b9-accb-0adacb8ffb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4e540c-1a2d-403c-a26b-7fef9fc0122b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a844966-b89c-40d7-842f-8051e8bb53bf",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992cf70d-79d4-4515-8c9b-dc74b3df30c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8abe07c-9032-4715-9c3d-54d48ae9e269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d052348-8726-41d3-8a7c-c4008f69ca97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c58cb2c4-6818-4899-895b-7f2ef2d022f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f06be5a-5608-4641-88d3-0a4c38228db7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51af1be-eb84-4137-afcf-d198edf650de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d60eaf-147a-4115-bdfc-e7f25e362d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf8effb-6fc6-487d-b43a-c7bf01d764d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b9d2c2-8f0c-4974-9dbd-fb4f36be9759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163e22a8-dc88-4556-8fcb-e1c0a22789a2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5222113-1e8a-4650-acb0-04d5e3458abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1834865-c373-460d-9326-35f1f4893b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0201c4-9bf9-4ff7-ae62-532a0c49d381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61c0db22-4d0a-48b3-b856-e46e87c33518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813b19a0-a01b-46b4-87d2-a0f1e2f0d96b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6d04b7-16d0-43ce-bcb0-ffa847b25e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c687ec5b-f526-4710-b8a4-41a329820c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed40bcf4-1801-4f2e-a6be-99796ced380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee598a0-4a19-4373-a569-8d7bdef02c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fffd3f-e9a5-43f5-97c5-86f349890052",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deee6463-0ba2-4f0a-a042-6ce9bf28766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51729624-7dde-48f4-b7ea-2fe7bc4862bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047e438a-ea4f-4f8d-b77f-9aeb96813ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc25bef9-2d4d-460d-bf87-81af3376fa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a40f6b-b802-4c74-b8e5-f6f24ae6b531",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7214f8c6-16e2-4935-87c7-1b743f77ba4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e111ca-533b-4855-b13c-e61f44f537b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cdddda-d85c-4a1a-a101-ab637aaa997d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "740a7a29-4d25-4792-ba0e-767f60e84ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22474ada-10b6-4188-ae49-5b4ea4f55afb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab30ace-dd9a-43f9-9884-45424914869e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3b5747-fa9b-4968-b523-71947ba39fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d3b9a5-878d-4eaf-8ec1-b11e4be944f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c96e89d-dba1-4c6d-80a9-922ba51194d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4cfff3-f2bd-4625-8a7e-77b7b18e485a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82811eb-2e8c-4ed5-bf6d-2ae9726efdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a84e83-0a6d-42f7-a8d0-cc5b54e985aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caae3e3b-0efc-4c70-8643-97a8e54e386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7fc900-c944-4108-af57-2eb50facc044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3062081-cd40-476b-a1b9-4e0cc6348215",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df15c70e-35a2-4751-b4c5-9286f44a136a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12f93d2-0faf-4587-bd88-5f077fba82c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9d2133-0b37-4f07-971f-d55cb45c3aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7685da-fcbf-4544-bbd7-8a03ca8c3b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e907623d-bfe0-4c18-ab8e-2cc7a4a2c0c4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3190a83-e544-4a8e-9a2b-9d01e4bd10a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1820445c-a47d-45f7-9983-59721bdea0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186906d1-4964-4f19-bbcd-a47838c5b665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81a3e94b-3ed3-47ce-a8fb-376283ffd906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199ac3e7-efab-4cbb-aa45-afc526782ded",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a5ae17-fc0f-4992-86ae-6129119a48f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba6f6cb-2f5f-4d38-8fd2-77ff507d050b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b13555-c4c1-496d-9654-43a336e82631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "180468f6-36ee-40d4-a12e-c01cfa170240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28b711b-be2f-4016-96dc-0313d3b25e4f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028647de-7951-4b1b-8695-f70bad24bd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b2e4cb-4d98-4481-bcec-95296933b33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a20ba9f-6c0e-40b0-ab08-5554e5d78a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d42019b9-bd98-4e53-b783-a19b8e973307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7652fcd0-d40c-4392-8b0f-02768a9bd932",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1221e4f8-7c03-451d-bcac-31f2bb1b0325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fcebae-c245-48b2-95fd-43761387dcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6095643b-92fe-4bbf-a80f-dff3a0216ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37d5db02-03ea-4b9d-adbb-3ec33d9d7e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a29fa4-43d5-4c40-8d4c-a0a1de5dbf4b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9f9dff-0cfe-497a-8f86-3f2e43bbfac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51774bb-bfe3-4f42-8dbc-1e539c34edf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b6360f-f3ac-425c-8f27-9329cff4381d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaca082-1f28-45e7-af99-50bbca4a2dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367af7e7-ecf1-421a-91d6-7b0deb45051c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b2324b-e253-476a-82a4-279eaed5d0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9a9173-9023-4b5e-9bf3-7dbf1456444c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7557399d-a3b0-4dc3-88cb-0fa8de859f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3312595f-2bf8-41dc-9a16-1991006eb24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76275fd5-35d4-4518-b02d-8e6f3bc23b63",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0fff9f-9868-42ac-a39d-c0bf5b3cc095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4cc819-8920-4f38-8103-208ba48bc8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562826a7-0872-4b6b-a57f-c36d8a412c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c71490b7-b7d5-4e1b-a70d-008003082858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bb00a1-e55d-4a2b-a0e7-d370282a0dfb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7442983-14c1-43a6-9cf0-d9c7c5f2813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd7c745-7651-4711-b578-a7e7357ea400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7645dc-bccc-46bf-8845-89dedb093da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cdb0d4c-e046-48f5-8583-97da7f3a6901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94732b0b-ee36-420f-87a8-a3999b5a8064",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31ba789-9a29-498e-bbca-58b43f8d94ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313f22bd-9339-4ae9-a640-ef9ee8c85222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc75990-e04f-49ee-a3c5-f4357368c724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8508d09-75ce-4624-b517-83eb48a3535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c478cf2-02e9-461a-ac32-64fc9257356a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3389a205-a2ff-4ee3-b254-458f27b6baa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec47ed8-8be3-45b4-9075-64a617e110ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd823c30-b1f8-4c80-ad8e-6f14414cc571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e14991-5087-404f-a03c-db5892b300a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa14f921-ba99-4150-b89b-1d748b6b9be4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c791b911-6e10-47c2-82e6-a79d3b6e00ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd986929-08af-4837-a8b5-44fd441741b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12376af7-0a38-4883-a844-2c4b7aa2549d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ee34a0d2-85e0-40ea-b18e-7ffeb509c815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1931232-cf23-4a9a-a8b1-43c1abcd9208",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb45c360-4728-4a39-ba3e-39c982a10b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c023bff-f56d-44b8-88e6-031676d0243b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f18bb9-5bab-47e9-90eb-efa02b202456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed08d2d-b795-4b60-b899-b36ff4514fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea9cbd8-527f-456b-b7e9-5c290d47dcff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304fb772-89e5-451d-9547-f84b61269333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d529636-7e06-4217-b443-e7fdabc98de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3796673c-c515-457e-b978-9812308040ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0052cf8-d4e3-469b-9af6-542f45335a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f96cf7-2100-405f-ad17-d863e6d63f02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ca7f54-16f0-4012-8ba2-de1c8023aae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90470170-1ed6-45a0-810c-81f21af82148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49e4b7b-3798-48cf-80a5-33458b22edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d790ac41-77c0-44b4-9025-3017e1b378d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941b2637-ff3c-4f03-ab99-6bfbf0a42e0d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c000973b-7c2e-41fa-aec1-3f3feb37a2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206184cd-b382-4f45-8a9d-0a5f2ca62911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e285168-52c0-44be-873c-c21412815977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d48a2c-8cde-4b43-87ed-abc058ec6c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2487ae-5c1a-477a-a8a5-c270895316a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a71e4aa-7b77-4e0e-a4f1-009f74641d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e7a166e-c6d7-4336-a112-bf9ea1c0283a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea3df50-fce0-41b9-9bcd-b75d51096fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbb2c67-47ee-49a9-b942-f437130593dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472b43a1-1171-4b4d-afbe-c1c76460acd0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44f692b-4539-42bc-8530-b5bba8374620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eef49d8-17b7-4d35-b00c-9d9afef86fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db5a7f3-ad4d-4178-a6b2-e73f6f147b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe98f5d-0323-4f43-84d7-b9ecda4a6185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57a16b9-e554-4527-8da2-9494e068e8d0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b2c02d-7862-4141-a0af-ea8ae96b0591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d910e767-3ba5-4412-92bb-d5bf6af03b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27abefda-1c32-4aa4-badb-c2887922df00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "60481932-f50b-4ff0-8fa4-ed2c88fd2c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbeb5cd-9b28-4c01-8e4a-36e6c0f3e27c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faf2f43-b261-4d87-b916-56f4c7e85b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e815d412-a80b-4c0a-b591-5f3ab823f472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9323af3-ae0a-4d83-8c94-11e6735b34b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde7928f-10e5-493b-a669-2563b21ec4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b482c5c8-5fea-4025-9051-10a0b585bd0b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76733b28-57d6-445c-b6e9-dd30d34161a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5167c617-8dfd-4e22-b850-163966756832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042280ab-ff24-4d87-b228-00db65161fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84b1bb59-c30a-4f1b-a471-36c1b5e96ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c20cee0-8294-41c9-ab16-72c6e75af604",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba049c93-43a3-44d0-b7e0-88edcd1c2f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b622cc82-8a1a-49b3-9023-c99337f88410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b20833-4020-43db-b919-b1251a09f7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec48c4d-5665-4c46-af01-da5abd5bdc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de633cc-c7c7-432e-8615-05d0f5af2eaf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f621ceb-2959-4124-9aba-55a2c2440806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a658e56b-da19-43fc-9369-2c040e53ec70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8e5884-ae2d-44b8-9274-9cf862e59c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb8da3e-2803-4587-bd8b-db66acc4f6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e928a3b1-b50b-4a86-93d2-64824d714724",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5169c157-a99e-4135-a867-e963fa7307f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328af2a1-2f30-4103-b017-111f608ec45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af3891b-9607-43c4-ae1c-89ea63cd1ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d058ac9-c232-4790-963e-49cb7edbca32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a961365-4981-464f-914e-5bf08d7f1dcd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1feb1e-7016-4898-aa81-2b3f838be63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a50c29-e684-47a6-9eac-fbfd626e4622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29322694-a501-4303-ab46-5bbdf6cec0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e71e5631-9932-404a-840f-012785dd59f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7010f1c1-0cc3-4625-94a3-923d701beffb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc26b18-1191-484f-97c2-98467ef6436e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114e7cc4-2fe9-437f-8a08-0639a24bf064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc72fd7b-588b-4813-8a52-3f8df99fb5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d24a3449-f62b-4842-9785-729ed949729e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4922e59-bf46-4e72-9844-9196f573a448",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003ca609-4dae-4f6f-8041-8f798fb7a5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1e438e-d161-4cb2-985d-6bb2c3ecdc97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7a33d7-e6b3-4f1c-8ef3-ec5261c22acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a14c980b-cacf-493a-a75d-9570c4688d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d44af7c-135d-4c47-9ad8-3aff76dcd385",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade79dcf-6835-4af2-ad46-f670c07a3aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bb9305-04f8-4a65-b344-5cfe0eeb0792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a530ca21-f574-483f-a7e1-6df4dfb9f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8f4dc5-be32-4ce0-bc53-c89309b72c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f96d03-3e09-4cbb-95be-adf651ac3030",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fb0def-cd69-4ea5-af98-4c74fafe19cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53964aa8-1567-47b4-9212-f89c47980834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d54361-633c-4801-9c92-a2587eb580ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea29dce1-978b-4410-91f7-7bb0d722bec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe1c311-3422-414c-965a-99527d4ebbc0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aec2cc9-88ab-4e61-93a2-af23f45942a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ec9ee1-f9d3-452c-b23c-25969b7a9f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5166973d-4257-4b72-87fe-c889bbad4859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1440f019-8c16-4f5d-a323-3bdc99e2b2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c40cc46-7839-4152-9b71-e63f8a5b5371",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50165bc4-9036-44cb-9f3f-22d4d6ab3c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13462c53-9d25-4320-af63-a8ec6cc61b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84887523-ce1a-4fcc-9e21-3530e7e4a9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fdde87-f03c-4482-ad8b-a03c36c8f0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb50bb6-21a0-40a6-9b60-ff93c24c3fc1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527f8414-b002-4fa5-b635-85fb2117bfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37e22ed-2517-4567-ac30-51109851be2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b87090-28a9-468f-a75c-10092c4708be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef1bab1-484b-4a59-b426-5456129814cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb60730f-ba2f-41ef-a5f7-72f7ea2d6178",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f227c4-8379-4ae6-a97f-5e88e05f3c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1b8f02-d0f8-4716-841c-1daa36f96e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d91612-4b38-4ac3-a358-03faced196b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd7a1d4-a4f0-41a2-9f9e-034ec0ef54ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f719664-7dfb-421a-8b98-613b519e57d1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fe001e-937f-4ef4-98ac-19fc2a1b8702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4396b87-39e5-4388-91db-73964536ce93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d520a5a5-31ab-4f8f-9d6f-5db823f7382e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a55b9b78-5ed6-4fb7-b324-d0bc1056b416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9de194-1883-47cb-bd04-d006c9bd684c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eff9eb-8869-4a42-a9ec-2d3118cca62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67d691b-b051-4c20-bbfd-b1ce8c42d72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb74f1b5-5c3a-498a-b68c-614a457ef2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d62b58e3-9f15-463f-b552-00d9029c8ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f09506-2cef-4583-940d-ba33f6cb99ae",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaef6ae7-a773-40c0-8cb2-e39f85545726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8366aa-a2f5-4e95-abc7-cb0dd9d8bc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2defcfe7-bdc5-47fe-8c8e-cf1a012a7f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a42cf47-991f-490a-9f8d-695dd60d4582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7841aa2d-6f19-4ad7-b7ab-cfb9258f764b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f697b4-c882-4001-a5de-764250e78e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1bea08c-09e2-4044-89cc-903621ab730f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854eb5f8-f09c-493d-b6e2-41fa1ac8205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "71f14475-8e14-446f-aa1f-8b4aea4f64cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7d4305-ef94-4b80-894a-62c2deef4289",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74cfc4d-6b1e-4406-825e-c8c96b1fdfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26cd68df-e766-4fb4-b426-83837401e200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499c23f6-20a2-45ee-b136-5fa5fce8d1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb6c7fe-23e5-476b-877d-ed7f5a612f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1ed78a-b46b-423d-8f6e-f17e39a5eb6e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a54c95-7a6b-4f0f-a937-112c772dd94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97b05ea-ae02-4725-a4e1-82b53ef0122d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d812b6-efcf-4310-a3be-f7c2a9bcfd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bde9df11-e53f-4cdb-bcc9-db74720d3a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8895d178-8f95-44e0-82b1-d1d530f1e30c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8579a1ec-8aa5-4f3c-9f7c-9a14b1b39cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe323cdb-c450-424b-9cbe-c1123e24cddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e58cd3c-2bfd-4f68-9fbd-463022a661a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be210d8-876e-409d-86cb-d6aeb628f158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6824d9e8-747e-4af7-ba69-b9e19e0ca0ce",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c1811b-5acc-4589-b222-4d028695c1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f06e8a-0556-43c2-aa94-7a9d1e4091e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1120db1-9176-46fd-b4fa-603803d7a035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3be03ea-33b2-4ecd-a4ab-cff2f6e221f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f9523c-163c-4066-a4f7-52b8a90fa084",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb44a5e1-0720-4f8a-a697-71892761a028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6b04a2-91dc-40c0-8d1c-833085ae00cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36feded-0c20-46f8-96cb-272bdd10ac72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "964c4064-9d24-427b-8314-b29141babaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbfbc42-f468-40b4-9ac7-ad8f655991c4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c750a3a-21df-41f3-96cf-9653c388b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a72bfa-e7aa-4180-8e68-39be0c877d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8496db6-12da-4fc6-9034-4901a97c742c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "400f56e5-de07-4e64-a558-886b50bda74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b6bb5-b839-4710-adc9-7a06c84763f8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b13d6c8-2e3d-44db-930b-b2ea3458bd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee39f752-8ac1-440e-9527-2ace20dd1704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb899d55-4636-4f0d-9e7e-94a2e1a9d74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "581dde60-ddc1-40d7-8e68-0b84de0b4920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d75e3de-85a4-4e3a-b9b7-e257ca4c948d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57fc140d-e8c0-4874-be45-73d6596591c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7698e6aa-04e2-464d-a56f-6890945f4352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7d06ce-5853-4793-9c9c-db1a1c34b918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e9f1c1f-81ed-4c9c-a481-48fb7c934aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f301b198-529d-4d19-83b9-6963021009e6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a492c4a9-9244-4d45-925e-f204fed47eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6564f709-5776-42a4-8ee0-295c09c81e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68685777-f8ee-49bc-a647-bfbcf49409a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c43d48c5-4b19-4796-8130-b20e41aaf4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e386f4a0-3779-4051-a52b-fed6761582d7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c27d3a4-db35-4da9-8ecb-9662dec3175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86f4702-35f1-4381-9865-9076e37be7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a66cbd-82bd-489f-9f6c-0c8b7bc0209f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef02ee55-219f-4974-89ff-ab53c030bb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d3f185-2cc5-448f-b11e-7dfea167b5ea",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2b29fc-46f5-4397-8344-2356ec440b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "244e3111-c12c-41ea-bbf2-70060c85cac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197721b2-deb6-439d-82ea-1046f82d8d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d70a96-1219-414b-9124-393dab195c03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5916af94-6dd4-410b-a1c2-6777e75ead93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d5a6875-f86a-4e79-ab8c-c274bc1b9e54",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c7646c-e70e-4c76-8aa2-693d433cae89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbc2b6e0-7138-426f-9e28-ddf45cdc8bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa95933f-e5b4-481a-ac0f-c74114a2543d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90172f28-2335-419a-8289-a523588419f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214c273d-21cb-40ed-b16d-39f93cea3cb4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32c96a2-1439-4032-a2e9-1a291ccead3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63d0ddb7-76ab-43b1-a252-75dca3b3e1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5e724e-a87c-4848-a4b7-2d9cbc160394",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2dc7d2-2037-4ce0-a04e-ef54bc34d926"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6066a59-473d-43d5-9c49-88e31ce81a15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fc25ddb-4b68-41a5-a8a6-3419f902529e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d5a13fb-ff30-49ff-8fec-a755fbfb1837",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dcf6405-0f9f-4982-82c6-6e873eca39f4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28ecdcea-18f7-46f1-8e0e-417972f3b51c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3f80e50-4d39-4637-bc5f-08787a2589af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "49c94a9d-0058-4dec-b3a8-422b71acbac8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9cc3b919-269f-45d2-804a-281c57b2b028"
                }
              }
            ]
          },
          {
            "id": "1599651d-fe8b-42fc-bd58-8d9241532ef2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "35c04700-a25e-467d-b467-76db8898bb8e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bd19b1b-cf08-4c68-8c56-276c74149265",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "752d0b29-9142-408f-846b-a78f0fc5ca9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bb4fc2a-f6f8-45d4-9c55-d3452d92af02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c5b7872-099c-4910-9773-3d78ed6ae798"
                    }
                  }
                ]
              },
              {
                "id": "017f558b-b334-4759-be6c-c26ab4b7c6dd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbb3c18e-20b6-4996-8916-cee748972eb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35e73b40-78ac-4cc5-ac0b-e51100fc881c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e6b9c25-25b1-42e2-b768-908536a8fccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ba547641-d0fc-40ec-89fa-4fcc41e32847"
                    }
                  }
                ]
              },
              {
                "id": "a2506e41-6acc-446c-89f4-24c575bce6aa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc3d4d0c-4cfd-41a3-bed1-7e6d4e4fc8b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98c32cc7-2f33-42dc-b120-ec2d9047b612"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0c2ce3a-8b8f-42bb-aead-d84dde41588b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5129f60e-a426-4300-850b-d4b366b75ba8"
                    }
                  }
                ]
              },
              {
                "id": "a8945fa0-cc12-4d76-ab03-65dfe7b38812",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bb5e1e6-ba37-41f5-ae7a-53dd4e916ad1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5f0b410-3072-4b7b-9e73-9a8f69150e60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae2c9f49-4349-459e-a0d3-d95d0e2b1560",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4c0d4fe6-0fde-4a1d-9ae5-823fea8d0d04"
                    }
                  }
                ]
              },
              {
                "id": "555fcc2b-06e2-4cc2-ace4-1b584957808b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bccbea24-07f2-43f5-abe3-dbde3422f2d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bb3d113-960a-4544-ba78-5e9b4c85de0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fcd21b4-8501-4697-9b9f-139ec297cc29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7bb40021-4d10-4c23-8912-fb812db7c7ca"
                    }
                  }
                ]
              },
              {
                "id": "d31302d0-3f66-4626-b92d-11dbcbd947fd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57cc5e7b-85a2-4006-b1dd-cfd571186ab7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58cc7ec7-40db-4ea7-a54a-634db6fd36e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97a2142e-9293-4388-b863-cffe6c6a4511",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8f2ec7e0-bf90-4555-8d06-3c28d9d1c63d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2313b661-37a9-4484-898b-b5ad1279d335",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f20b7ea-387a-4430-b301-664f8b55bc00"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d93243e6-44b5-4cca-8f19-7328b8b93234",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f03e9ee-492f-4b03-bd47-e3085b808666"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "904676ed-8adf-4be0-813a-0c86776d51de",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ec173ef0-bf27-4348-a13a-c85483dd9f90"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91866197-2dd6-49fe-a38e-d82a4e30ef5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6017c45d-cbb2-4026-b6d6-5e7b3f1f8742"
            }
          }
        ]
      },
      {
        "id": "07fb10ff-1601-4a0f-9c1a-a432e6155992",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b5127e0f-d607-4c8b-b28d-fecd635dd25a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79893c9b-fdbb-4db5-983b-2cc7aef2e096",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "606de752-c9c4-46a5-95d8-3dcdb4893520",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7704f235-1ab7-469c-81ed-334fd5e10039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695129f6-e489-4cff-bfd1-002b51f56c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e1bccd-da80-4419-acc7-2a94629d4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e3beb2-3157-4f51-a746-59286ed15012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118357c5-d4a1-458b-a341-2bacc43db5f3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2762ed3-8678-4a84-b76d-02956034d91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3ac467-34da-465d-a948-21013db6f41c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7f79b0-6fae-45d4-99e5-30adde737bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c36251-93e6-4e46-8a5e-d2d40b67edf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abc3f31-8734-44f3-a679-c024cedb3954",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78be4ad-e520-4598-af77-ced935a37c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2428a85-57b7-42ae-856b-7d69200b5f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70a579c-c884-47d5-adea-c2160e9a9a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "959bc397-a41b-411e-ad14-c30429ee010a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee495703-d3e9-4c9c-b8ad-d5bc235e3313",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8238f2-9af6-4222-b9b9-e5d5e08b65c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8290ebf-e5aa-4447-b186-2d48588cf508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1ae3e7-0e7f-4a58-91bb-6bc445c94069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92f01a90-2cc5-4727-94db-56ed1e16789f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561e3294-b58d-49a3-8129-1dafeb020c9b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f261f7-f618-4e9f-a16f-e02d8e5691e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da19a377-e350-4bda-968d-af9bf356f3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9beedbdc-8f7b-4480-a76c-b97272dbb6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f53da161-4f40-456a-82a5-d837218e57ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea189fa-11d8-4892-a54a-cf9fff2e36ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b32bed-d1b1-431a-ae3c-e6bb2369a58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c46af2-97ed-49d8-a92b-8e23d0a582fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706e4a4a-d68f-4945-bb98-fb035e3f0038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3de470f3-0ce3-4977-8a55-0734138e25d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b083b9-beee-4159-b13f-7a29300a70f0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6a5931-36e3-45de-8be4-e29e86bb0e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b105a4-a52a-4230-8806-7e08365a97b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a23dcd-9e00-4626-b999-038e9ee6f4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e39ede8f-df3a-41ad-afe2-4e8a715100f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efffd754-b854-4d90-8da3-868fe2fd41d1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c65c67-4a85-4f66-9912-d6000cece6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80d41f3-77fc-48b8-ac3f-375119f10651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b64f46-4d3a-4477-b434-4b1e7a4b2149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7adeb3d6-8228-481f-9987-90ff96137f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ec795b-f929-403d-8653-bab33fe605f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd37c145-189e-4286-b2aa-c93de8f38ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc08fc84-0934-4d0d-99b5-23bc0a53bd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92d1745-0edd-4273-82a8-45f29a4e49d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ca1e50-c401-490e-b12e-0101144c091b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae39134-9ac1-4197-9010-4dbd6850a675",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dac9a49-3603-4313-a064-ff42912487c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd5e974-6791-426f-af4e-3d38ba0b2b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d1ef62-135e-48fe-bd71-18166f655cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0b9d5c-859a-4d5a-8734-5d115a5c66be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea09370f-e8f8-44ed-88e0-e47b903ee8d7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e684fe-d375-4057-9044-d0003ab920a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2139d3fe-7b00-4d0a-a197-12d4aa1c998a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb94685-73f7-41df-b14b-6d4b3ba54ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe4638a-2381-4ddf-9794-790b336ac0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8351d872-732c-4762-b9ab-71586b180a66",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ca4032-747d-45f0-b048-9d5e5dde02d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1422223f-c061-4cb9-b318-7f3cf45487c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9609cc67-5ba0-46ab-a91e-04e93b4f0523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "010d9573-1a94-446b-86ec-363f4dcf3b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2097a82b-8e7e-46eb-9679-776fac601500",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8910ba43-7808-4228-b176-3d747a67a226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3cbc0a8-1a34-49e5-9346-c1a07518a345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fb3a9d-0fb2-4e7e-ac22-5090a62d3837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13acfd69-362c-46c3-8c1b-87e714fe3144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859cd5c1-08f0-4f11-9d80-694e61293dd4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff81bc6-dc19-4ca3-92c2-8f526c3a9e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed2a698f-0512-4632-bd14-ae6cfda08e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47429997-6bb9-4035-9f70-d66002707357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6adb85-ba6b-4d1b-aa99-2d7d1f32a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0ed688-ce0b-4ed5-9a42-da47645bc3c9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80b9bc3-fd98-4ec2-9ec2-6f12ee475e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57be57db-b7a5-4308-9449-27907dd0f10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dfb2f1-16a6-4769-bc06-099ff69c8bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cd59a6-c8f2-44cb-bd2f-17b5ebad343e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a0129c-f958-4b7b-bdca-66efb577510c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399e077d-a35a-4366-8da4-ceb188651b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3a8d19-105e-411e-a945-57ade1937d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93d0ade-bed2-4ab5-90d6-a2f883a382dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd3be62-e447-4da4-8cc1-e97bbfbe4e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f02e00-b31a-49a6-93e0-f614e32e0a2e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acf683c-8e58-465f-a9bf-04b0d9b89fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d98e400-6579-4d02-a121-74cb47f3e13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e9a608-9a92-4f8c-9892-78b779e618ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bad236ae-c8a6-4c12-b047-82e63951f917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f87e0a-3bd1-4be2-af33-6f1f86e5f15d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1bf242-a58b-4723-8606-8d7a12c663d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bf515f-4b5b-47e1-b5ff-16dbae40a143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72e7868-380d-416d-8792-dee18bacb621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1005d7-5f58-4cf9-8e68-ff298595d407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5379d712-6ed2-49bc-8538-f38893db3709",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b118b4d8-60b1-4d83-8f39-9aa4659e92c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb87e5ff-1c42-4326-ac16-6497c2c51f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b4064e-399d-4521-9b68-b70bbb16342b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db327097-fb5f-43af-b638-865c9e26c000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6c6148-0c6b-4a5a-9e11-ce5f0593ed57",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80507a3d-5b32-4bd6-92d0-7509c9bebd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb41e80c-4400-44fa-8701-7632b7b46948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06ff111-5e96-44bc-8a05-3bc133b24e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba244d3-a56f-45b8-b6e2-57d4af59e056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6d60f7-3f6f-43a2-a2ed-b483f94173ce",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0b751e-f590-4dac-b9ba-1ffa8089eeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cab612-4257-4271-a301-9731094e7d53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b077b545-aabb-4e64-a81c-52f0f2965589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "826add70-22ad-4172-9a94-d81dcdafa88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef753d7-3181-49bb-a0da-fbfecb91f1fa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da03a2a1-0eda-4a00-93ba-4e2b9ba6e62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8d7d8e-a6e6-432b-9fc1-a2cb0aaa1aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a3ad7d-e6e5-4101-ab0b-25a7008cbb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d51f94a-e1b8-464a-a9fa-913a91435470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f5bedf-0a94-425e-ae1b-1b1a35b675ed",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3fc23b-aca9-4a80-92de-4b57afb091ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f5ba6d-610c-4c2b-9e1a-b73bbe197989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1b1e86-74f1-4b27-a1df-a789eda6e4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbafe023-3e73-4f12-b378-30710ec83f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d200be2-5956-4865-a834-e90b07ae6f3b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb449bae-d04e-410b-9abf-d47394e3d3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d4ca73-82eb-4517-9b47-46759f846b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaa570a-852a-40ff-a6ce-fbed3993d801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58f335e0-68b2-4b8b-a9c0-484953a3b1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c96fc6-c881-46e3-94ba-2ddff0bf6ed0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8629ca8a-d543-4262-9448-c8860fa4c500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257fa189-a477-43c9-b61d-0fb91fd8db6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673ca322-447d-4564-a356-633c8b9ffbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfaa7802-25d2-4ecd-9b9b-1c099d447354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008364a7-57f8-45b4-b27c-2bf7c98971f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b845066-7acc-4d57-8f46-b0fa1a127372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd1aed8-6052-4429-b378-d9d5d0263274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d4d589-d369-4acb-874f-4ad3d6c35e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb3ee41-5d43-43cb-817d-8a950c6a987f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af2d1b7-09b3-43e1-8469-ed7da71e41f5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b4f986-8b0f-490a-8998-8021b3fc8456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefb6913-5757-4f3a-8e6a-368583d16798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92dbbe48-adeb-4382-9b30-03e18f35ecfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ec40f2-1c52-426b-8f82-1a8ba118c3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e491f83c-ba33-4f3a-8e8d-c3c7d2135d06",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624478d0-267a-4a67-bb38-f74873929a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76090942-26c2-4a08-bd4d-dd6b6e5f1810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c16c749-b05e-4e29-a1b9-603cb9176829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "312e53eb-c9aa-4f1f-ac8f-920bdef09847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acce172-af6c-44fd-b0cc-e3600674dcac",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d39bc0b-e01d-4836-8d32-a4342b4b58d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca39bc1-091b-4e6b-b9cc-e083abf65e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be6dc50-9a8d-4455-beb1-d8024d55ff35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca63ae0e-e6d4-4e15-8788-5def06f3850b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af620904-eb5c-4037-910d-727309ac64fb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0b6511-4e6f-4444-8ce5-d988c7d4f24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edcff6d2-60db-441f-845d-98123c4d3769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da6aba7-a129-4813-83b5-a50a2ac25231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73f16325-8ca0-493b-8353-0a803b0e381c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bd3912-6e4a-4d2b-bc12-f10a8ed7712f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0628d20b-598d-4f49-869f-243ff7c14c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c26e0f6-ff39-4113-b96d-11ac38afff31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee9058a-10ea-44d6-92c7-d9f8f4700203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a751d13b-54b3-43b9-b3cb-9929ac8e912d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc99674-9298-4ff8-b4a2-f06223c94c67",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c43280-89dc-4136-bab1-bc80b715acd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "854ccd3c-fd08-4b7e-a3c4-712231a6b686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a520da01-003e-4a58-b22c-63a682574c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c864dc7-73c0-4a04-80ca-d2c15c7b1011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0663ecc7-2d2a-4e26-a25b-8414f6437197",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73943c65-a0be-4ff7-889f-d3915c04d9fb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a5d6e4-db59-415a-9a80-075f0eee9ae5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "70f78a56-e5df-4ec6-a246-6ccea6bd5c20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4216ade7-c34c-4264-9e0b-f6c7f5a5d9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3f4211a-6838-4df7-b903-431a3c08adae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a4a35b-78fd-4116-8bd1-7d1cb523721e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab84963-ae2f-4017-9d48-c61e6d011f55",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6126e51f-a827-49df-a677-93235b686369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d44e6a-1c11-4296-99a6-55e3b2f5ff7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63e34f2b-238d-4b20-be47-c7fddbfab757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42b5b56b-fd39-4300-8927-c18c7b523db5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a60fc037-549b-4da6-8287-540d15af376f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c80de6a-9a8e-43ad-84d9-deb5a39b8430",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57a30765-a2ff-436a-8bfc-d4a6a8281215"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91df13c5-a3d8-425b-8051-ea52c0079581",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db9798be-78de-43f1-9e12-e1f927947f28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6f7c360-c82a-41bc-a0ef-2629740add55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7258bca-a575-4ebb-99e2-5a5769b4af4a"
            }
          }
        ]
      },
      {
        "id": "02ca0c54-8a57-4430-b02c-6fbd53e39fb3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7096cdd2-6ee4-4ae7-82de-aabf4c5ad07c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "668b9d24-54ab-4854-a9ed-6ef0b2668d86",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e1dbd9e7-c458-4e0a-84e3-8c5980f083c6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406c1606-5fd8-483e-b964-e80c6be9b629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780278b0-f1f1-49e6-b1e1-77bafdacec6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cbced9-886f-4b03-8399-e0fb58c58054",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce91e00d-3869-476d-8ba3-f434717965ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46496f6b-3abb-4372-8b87-004b6af01eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09aca2dd-935a-4c9e-8696-2bdd7d17caaa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb8ddc7-e983-4957-bfaf-892cf6ff0aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8338694-52db-4ede-b030-bdc078632a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6826fc-4ef2-4d87-a731-d45cd7dc0a19",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1494b7d-02f6-4868-888e-df105255cb7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b88478-df47-4adc-a980-f3bd7412fa60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1311e73-7193-4fa4-bf15-e3b79492fc4b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb1c6b2-5ab0-48f4-8bd7-68c7ef08077a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c588227-9ec7-4ac7-8a84-64dce4c68f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f27ee9e-9012-4121-8938-dc13265a33b9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a21b3a-924c-4da1-a0a3-d0dff3591edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a92891-61a5-410a-a851-7b91a3b7fa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3432ef-0188-4d93-989f-fe7d0ea883c6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9772d5-d187-4d46-ad11-ef1e029ac4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c5137b-c366-4984-b2cb-a3575a0b5880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e614e71d-df7e-4aa4-931e-49f6949b4aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df2a0fd-df15-4777-bbcc-238e9a0db9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d9d12b-3ec2-430d-832b-e784d3af459f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380ba813-cc48-4615-b581-d13b7a2690df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ee6945-639e-4722-8a33-83f43a06a84c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "940eeedc-9ff2-4680-ab26-306a8d99bb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee11510-ff5e-497d-a8d5-efbc700bbd71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003b99e4-6dcf-466b-8c81-296bc0cde120",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3160795a-5618-44b8-af97-e35ee6e5a7e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e1b7319-afe8-4a13-b470-6a48401ec1b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc6f3f3-0903-4fe1-ab20-62dcba470b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4a8196-1d0d-428d-97ea-9707423f0fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b795da8a-a03a-4a56-889e-36109c1e1e14",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492f715f-e44d-45a3-b58f-ab8990cec2a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcc215ca-a345-432f-aa81-d31fa0318a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0719331-e70a-4783-b7f2-0bc07ac5fccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2204e885-baa8-4900-b592-8db775bae656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee9507e-01f8-4373-a278-cfdc458b3606",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ab0458-a4de-49ad-ac40-b239da7bcc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d8c1f5-bf46-45f9-aec7-3e2b2c211cbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a47d4d-27db-4db3-8e3a-cf9ebcf9a4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80321db-4fa5-4ea5-9081-9f9b0f790f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643323c5-0e23-48f2-9341-2c193aa0c86d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156cb69e-0ffb-444d-96c5-a05255408231",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4053897-3c4d-4a28-8ddb-df1a8230071f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ac9d9d-bfbd-4dcf-8bf0-fe4184302af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe06e6b-0aa7-45d6-a083-86e6a108a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fffc521-d1fa-4403-9d61-e5ac6b8ab116",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b11a7ed-df01-468b-86b8-4fadcf9386a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3608ab84-0f18-44c4-a8af-0afdbcc907f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87a8454-3d72-42a4-9ee3-b4a3f2cc6189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb8dcab-da44-490a-9f31-ff7042bc9830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56675d1-fc9b-4ccf-bd92-06234a750a46",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d99204-61a1-4262-95e3-8e5625d95a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47535773-5b9d-420f-9ec7-0735ada5aa33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8b29bc-6a48-496f-b4ce-acd9ec74530a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f19e90a-dc86-4eb2-a534-e3b44a225784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d22ee83-df09-4bcf-bb5d-66828ebb26df",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bf7621-cdce-47ed-9ab2-b6f46a3e1048",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4ec8417-fe30-4af4-951c-5fac028e0ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dac1398-77dc-46de-93b0-364cc785d031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06c506c-c1a0-4bf0-8220-5cdb7f8ee3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a08807-a596-4b9f-8d68-dca922e15051",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b21ede-4833-41e6-a5b5-030600d6c9b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef321be4-28e5-4bed-9f6b-2d50f797315c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c18d970-e4b4-41fb-b9fa-c1366096bbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c228ae-76f4-4743-b1a2-f66e8348fe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0abc08-4730-41e0-b91e-5103da2e0700",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b1b04a-fb6b-48a9-b317-51d115060191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b7790e-6213-47a2-9617-b4b0d0913af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d253993d-44d5-4754-9c20-cbdbaa8d8516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a71b52c-5f98-44f2-8b4d-dd5253a7e837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca987e3d-0cbf-4e6d-a222-9235eb042c4e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6ccf37-a7b3-4532-997a-6b1cf9c7ee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caccb70-c435-4dd1-9482-cdcf0e41fe3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bcef6d-a431-4245-9f7d-9dfe6bd1aa50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f2d130-74ff-49fa-a3a4-eeb773e60f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef9016c-9a98-494a-aeef-7d92336769ec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeaacb25-710d-41db-921d-76971d8e3745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8e86d5-c7ed-43ad-8462-34a3ae1502a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1ceba0-472e-41d2-a2f2-469dda18b34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03e379f-028a-498a-88d9-768612547ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97465ff2-e236-4b81-a6d9-1447a528a7c1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee762d90-222d-42b2-9979-2b171c248c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473f3bca-2cfe-47d6-997e-719c144e3925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293d822f-100c-4612-885f-9944971176a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ab05e8-747a-41db-9fd2-810a44419322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629964fd-15db-40e8-bbf9-4e2cbc82376f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5babc0e-f127-4f7a-b74c-c81ed04b3100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2a818a-456e-4329-87bc-db997c6e05bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e27fdb4-da0b-47df-8ceb-7805fe4fd822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca57a1a-f9ba-465a-8fbd-da8d81ca0134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c585a29-f9b4-4a90-afe9-643c8a6f866d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a524224-ee0c-4d9e-a0f5-fbead9a64eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beeefdb2-ff24-4dd7-938a-23caca8c5662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8b87f2-e058-445e-bd71-69ad0c5ba2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a6196c-ce63-4d41-a10d-b4a88b387239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf36ef9c-51bc-4bb2-8d07-edbb2b26f075",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1353c85c-b789-42ff-aa61-f3332c12e711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6057fc-6435-47b4-8d60-c085498f2396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd9a07c-483e-4277-a8ed-95d05adff542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd2e6b9-6eea-4cce-9c21-e000ffd49f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84cc609-138a-476b-bc44-6ab5bbca25ee",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0297e0d7-68d1-42d2-a485-7af8a43ce0ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24d5e37b-c0f4-451a-82d8-2664341d89d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10696ef9-6392-43ca-abc5-86c80f9e3af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b38d4cd-1f18-40e4-b027-2b94257cc36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a90471-5fdf-488a-8667-2121f94084bf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37304ef1-a502-4d10-bfc8-d31576e3ff43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ee1cfcc-56db-4ee8-adb6-c5f942404ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb3028a-5c8e-4a3e-ad84-05630130f76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743f3fdf-b3e6-457e-98db-ba5d8d2276ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2279871e-4101-4be3-a3aa-f6c27b9dd4e5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaafc523-2eaf-4dfd-83a3-40d33e1e0f6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf54d65-9945-46b2-95f4-9b597570b402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3839fe-fc9a-4849-a0df-2d8b77d19b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2732b04e-9cd3-4c8f-a97d-de3e2e9aa511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7531cf17-30f7-4a76-b5c5-23a6c7d7adf8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97ce25a-042a-43b0-b545-1cf672fd23ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e187e3-6c33-4eed-a4a1-9f720fb1fa1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b148490-a5a2-45b5-bc96-7e38e2bc9f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd619c77-5363-4846-ab70-653aa42b64af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec59adf1-04ba-4230-b486-8ee8e7ba1bdf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f133eea9-f683-4d75-91e7-2a722b7b9a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99a5116-25f6-4ae0-8e36-28378849970c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e1bc74-8e58-4cf4-bc24-d20f404accf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cf99e7-d95d-40a5-8741-18f85d74ff39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27acc3d-5521-4823-9939-d9019c7a3755",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e3112d-3e5f-4aed-919e-98770ff627d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70c8a506-e283-45e8-aa67-a6cc149c0a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a9140a-0291-421c-9b6d-b30bf4899fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0840265-c448-4f3e-a419-5d47cf01fcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e2d897-b119-4f55-aa72-c5a79cbdd835",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dca2d02-3cbe-4d57-91e2-5e3aafb6b437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecb3fad-b86b-437e-b940-1d73a2bf8f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebe98d0-86ee-400b-a2fa-54a290ba07e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5cc9208-1d3b-4719-b9cf-90a340ef6957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fe8a82-9aa6-4d14-b9d5-4638267d35b9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e2f07a-f5c5-479c-bd06-f36957b00b9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf2eeea-1361-4c92-88dc-40b0f18d60f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0ea215-c319-4fff-89c7-149962e05682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb097c7-185c-4f17-a473-ab3114aff6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e49cf1-3de3-44dd-8982-b7e9dec9e53f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f78a60-14fb-4d32-adaa-47e12e352412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97a3c9c4-8c96-4ed9-ac35-e5061f9c0cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc20c6a-51ae-4836-8db1-e9e625d97119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac60c1f3-10ff-4ac1-afb2-3430082ad627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0dbd3e-ecbf-4314-a229-181b67f8c446",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b16b31-bbc5-4be9-832c-3dcea3a13bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03552fda-36d3-4db5-a028-f26632af6bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4c0d15-a693-4830-bfd9-d64eb387e237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e719d8-fd4c-407e-8e31-60c48e28e61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e902ffd-37fe-4b6d-a50b-711a7036588e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3d7a96-1407-48ee-8c11-ff0639ce4aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0f41baf-821e-4430-aed0-910b589a84aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f424df3-9b30-4a16-ad92-02e05ef60541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b85ea5-ac31-4831-9746-c06ff518c0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9a5a66-4b8c-4249-86c9-4197ef10bc8e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bed33f4-cdd3-44bf-bd0f-093db9bc05d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd5e3f9-36de-4b35-b149-f6a6d2359845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dbb275-9155-476b-a99b-ec76ef1d54b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c23aca-0531-4636-85da-4f4b2803b03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e137235-ec3a-4f9c-9590-14d0daee21e7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf98763-86c9-4038-b536-23ff1ade4a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346cffec-9917-42e2-b0ff-0a84f103c79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8edf48-e59e-41c5-a2d3-036629a547f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785c5f94-c0c0-4862-bd6e-f5a8ddfa83d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172a3d26-eeea-41b1-9d1c-8eebf3873173",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e821f2-beef-4328-bd43-aa96d60836f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6009eb00-32cc-4ba9-9803-28495f304957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ac2467-93f3-4eea-a9a8-5a2a687465a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6621c1-b423-4934-a923-e6b759c88c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218af75d-346a-475c-9433-4c151d4e8a34",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19e192e-0b1b-4286-8cc5-b1875d00ac52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8f0af3-b873-4718-8501-ec592f66d210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859cd16e-70a7-4a62-8c4b-82bea9c69443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9f4b5a-180a-4ffe-bfde-138c84c7f5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291c0847-e5f8-47fd-a6ba-b66ebb0f63fc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205ede54-c36e-45f5-b601-4f272ccd54ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5456a264-32b1-41f3-b0a4-793c09d09d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0772c7e6-dbe0-49e9-90ec-b85ce63a56f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3045bbd-e4ac-4456-af3e-60af031d50ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d254b4ec-9cd0-41bf-8879-da4132c5f2f0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a380a6-9dfd-43b0-a9f3-d23c371fdec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0079cd-4b4a-463f-981e-a73038c8ab41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cc9cdd-c4df-4aab-894e-4f3d02f79665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1c2a4b-edc9-42dc-a771-0d383664e001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32cbf90-84b3-42de-94e4-39261712fc35",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f95f33-f5b6-4410-8377-d57bca367cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9b064d6-71aa-459e-bc8e-3f937c58c0c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c0de89-11a4-483e-97da-469827b29703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74767a7d-45a0-40c4-9363-625f86aff3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56891273-04fd-4882-a80b-4fed7f19c70b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6738ddf-8aae-4332-9f6d-947de51edb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d50dbfc-1e61-462f-b14e-d83131bedb60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f5f744-9aae-4300-b7f6-d4fc18ce2914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415901ff-718d-4a0f-ba6e-bf8900e9b26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05eb5b4-5817-4cbb-8930-311e03937f45",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aa7656-c8b3-4329-b689-0e229899b2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af1cbcd-b017-44df-b07b-ff75ff4a5ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d8fa05-0445-4bed-91c7-0cf1f9868861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be79dbb-5c1f-47b6-8488-12a3493cad04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45d7285-cb4c-4c8e-beaa-4a189cc5b57e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897fdc2a-2e0d-4785-b57f-d7e434b378ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086be1f5-1a38-4d71-bd60-a6cd2ce0a742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77aa789-e775-447d-befd-15aec1beb6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11747f16-f17e-48a1-99b5-1e0730882b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb8b0df-5689-41a9-981e-ff39c616c234",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d1f80b-1474-4fae-b471-44983a21f820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2c1d69-ba12-4aa5-b4cb-953e9660c7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd073fc1-b79a-4df0-a94b-bd47f1865f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9533e8-9c7d-4a62-b983-e652116ed2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d390a36-964b-49f9-936f-fc48da799373",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ea7cb0-d831-4085-ba8d-53b65cd0b9a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1542081b-777f-4a3d-b976-de347c6c16eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed81bd7-bbd2-44cc-a299-4bfada218096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9c9fcd-a90e-49a6-a14e-422f5d2441e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92cdb22-5ab7-4510-a78c-ca8c6c4fc8eb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195ac805-864c-4270-bc2d-4cc3b45ace5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180b3ac0-f94c-4efb-af9b-318c22a6e568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146826c3-29ca-454b-99f3-159c3ceb025d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dda678f-afb9-4f05-9db3-4cce9a2d4378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f820408b-0a5b-41e9-b2bd-38b4c97f9d9d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5997ee-12be-4b8e-af23-68a6604ef941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1519ff-31ff-4487-9cce-b1a92322006b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4116a28-558f-4c56-821b-78dbe55f4f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8994eff4-68fe-46c7-af46-6b2c8d3e9d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e56bc79-fc7d-429f-8e9b-f7dbd29f8ae6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c495d09-236a-4060-9e47-53cd60b59373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce963067-f2c0-4109-a53e-c6e35f9942bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787368b3-60a1-4423-a094-8e4d0a7d3c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce36d1e-f8f8-4b1b-a7c0-bcaefd194fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bceacf-e2ff-42b6-86c1-0adc8f41bc37",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85dd0a0f-75a2-44f4-95f5-fade13d192c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c623f6a-17bf-4f0e-8109-439a3912fcab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07492fb0-a991-41e7-8676-3b917e63fdd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3055790d-385e-493e-9a98-c6d43ad9fde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa2ec22-9e7e-4f91-afd8-4e6379be8f08",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ab9187-d1d7-4e2f-9b33-11c680dd6462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1491fd49-2316-408c-bfa1-90d8f1e027d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c69c34-8326-407c-88e7-a491f8bb5b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651d798a-2aef-4926-880b-519c05b4b7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ddb455-4947-4622-9155-dcce8708566c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5000b07d-ac68-4529-900d-b7cb9f588e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49be454a-4e48-44a4-87e5-9465d7d54c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c169cbaa-f144-490c-833c-cfde7448ec10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a546058a-eba5-4b8a-8f50-3e26e6873411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af488d59-e7c0-4f67-9fd1-1d43d5de4953",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8185071-82e5-4541-b74a-ee06a88795cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1c2b49-53b4-442e-bb92-87a571ab7b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707d7139-1fa0-40ed-9b38-7f9602d2e961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4553ca-eb9d-4b7b-a4f9-5e6ecd5760e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621a53aa-8eaf-45a2-b462-5bbf4f365377",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083611b1-a605-4a8a-8ccd-d83e16fd113c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d7ce6c-030e-4d36-afd8-72b676207b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa3e355-9951-4c04-980e-502a3a6e4862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ce691a-20c9-4d46-becb-abf168a15bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3437094d-25c5-4b42-aa98-7bb5963e670c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a092c80f-76d2-4ca2-ab13-dfe7be40635f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4ab5ae-a93d-4f44-a3ca-5b35f26a25c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7d9293-55e1-4f32-a92a-8630bb45383d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae07113e-fd7a-4b5f-8c7b-609b17321135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca98efa-f49f-420a-bb64-b366555f733c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4588b797-1b2a-4443-8f42-2c4e3be20037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098d4148-791f-4d32-9e71-c727affe6e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbfa959-7668-4241-af6c-723eed065fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f283b6c7-81cc-4d61-a328-7f44f497a464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cec4262-2182-4288-badc-10e0661f4386",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18803578-1c04-437b-87d5-9c5e3e1f766c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "685d7810-26b6-4b96-b5a2-01d6fa218bc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8f672e-f663-412c-8018-d7fb5b74b79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67197221-f608-4575-8495-a07202336789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee2fc7c-9e00-42aa-b7bc-9bd41de97184",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359b7d26-cf64-4ac6-b1d3-e294cf78d8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29450ec8-2291-478a-9c06-a86da4f41ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03815fa-9bb7-4c9e-a3e3-fe317c7a0e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b95aae0-1a4d-4355-afcc-e2506c12dd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc9dc37-433b-46ba-956e-d0d91da3aa2b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a94e03-32ec-4bca-8f55-e6545a5b6bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a4082b-151a-489c-973e-a59323c284d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc4509c-69a9-4d86-a80c-022c77289284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba280f51-0d0b-43a6-95e5-e27e65050893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba346b99-e295-4802-a904-44ba7992e717",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7769af2-bd68-40d7-9da8-d6cb99b262f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3232c27-06be-4b70-ab5f-7abb73c83533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59729ea4-5e63-44d0-93a2-83e04b67b9a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a67eb1-c2e6-4e9e-bfa4-1c661346b14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2c6876-72a2-400f-9d0e-f2b373427bde",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856035fa-a1b1-4076-a125-3a4958728c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a1b92c-6c9e-498e-b0f0-f48f4b58b34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99c972c-836a-4822-a60e-d458a066256a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d235885-5447-4292-b181-b0bf0d7999ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc273e66-4cf5-4f6c-996a-ed15578e9a06",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae570626-c7bc-49e7-8ad6-30214eaef30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1818cad8-1a72-4252-8813-b8fd2dbaec48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a46977-cb29-4ae5-b0f4-88cbfa8befdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f409ed70-fbbc-458c-803b-9e2f9013566c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e551c276-0572-40d0-ac02-3dcdfa1cd489",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf38d55-fc48-4263-91e1-0c5ff7c5c6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c57a442-d48a-4c68-b85b-50af39aeed67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "095b4a1b-527b-4747-aef6-93c988157922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cc5a30-4c96-4eab-8879-f8e1fd6c39f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d59f27e-52e6-4e7c-8719-061d02773bea",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ff5994-2df5-4c4e-8653-0dbaaca8a156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdbd1768-3e22-4370-b3e1-22aa98115494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37fce1e-2d9e-4764-969c-1dd219f1dd0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d62565-1ac7-4588-9c0c-2739c70b0c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83665bf9-2d3d-4baf-8bf2-82e307807885",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86108725-3b82-46f7-a2d6-7b6b346903f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c304c0f2-0349-4c92-a7d2-98b74b817366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16007f22-64e8-4ea4-9347-92b49f433ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266a89e6-6e1d-4f8d-a2ad-667cb7abc6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cb7d95-a615-44fd-928a-b8b5e27c3cfe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a607be-33d1-4afe-82b4-23a7c8adc691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f73e419-89b1-4c6b-9e53-b6b09b85fc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "668334d9-68fd-4fd9-b12e-d1fb0bded5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e66a82-3e01-494e-9163-8241a80effe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa26f327-87b9-4ed2-b534-986685ed2862",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dd80d6-e1eb-456c-b876-f7951521231a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3437b268-d0e7-40de-8c02-c7cd4f7e2bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c15417f-2777-462c-a0ff-cea56af8f09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005057b0-aeee-48de-b582-b9e41d7aa510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54701853-16ad-421e-add6-574494787038",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af70c1b-b4fa-49fb-a294-365e126582ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06584c2-a81e-4327-a42d-cb6cc35db060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd45765-0f9b-4362-8c8c-e70d346bbe8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2938e622-3c17-4e6e-928e-ae6433659cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389a4b0b-545b-49d7-9f20-ee2a43496288",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2a2f78-288c-46af-b8ae-1acb3d5fb251",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5783e0dc-d6ea-407c-ad6b-dc4df9c6ddf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2eb48cf-abb6-4565-ae6b-70ba1b5c7554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287e882d-030f-4c58-88e6-042673cd3454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcb0fc3-d288-4b15-9293-addbe4a2ec42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857fba85-ad45-4a07-8b10-b235baaf933e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9add8764-0457-469b-aa0a-daaa627390de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ec52b1-c8e7-4afa-bd4b-5e0960364955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960b42fd-cf94-4e4d-b217-c2935c6c9a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32da437f-9d1f-4c02-a8a0-d0a27cf2fdfb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d1b6ec-32df-456f-95bb-ed7a60c67aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dce8fc0-bb4f-4ef1-8e90-c475991cdb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "985ca2a6-5448-4714-a93f-1d78692bb0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a46fa2-10d8-4b63-9209-d5341b40232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe52591-5410-46c4-ab85-12f77b9c88cc",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e00dddf-c8a7-40b4-abc9-acf22f38c927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2968b762-1bf6-4b3d-8bcb-c10d1accd400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "331b5e9e-dbd0-4296-8286-0f2628a1e881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577a3428-7bc2-4c11-858c-ae7b94b602ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2189bc-c7e2-4a1e-b989-c6e04a283a8f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d26bf9-d39d-4960-afb8-0e0d65bf70ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0d295e7-075d-43e3-b185-2450b9474c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30053849-a02a-45fa-af05-67f334ac4fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b27ec8-1a6e-4eb8-baba-fb6e5f637799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fd7579-d80d-4b73-a039-3c6128fe579e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2d9dde-2a42-4f52-a8f1-0fe32f7640df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5af9c0c-6434-4b61-a201-83557b63d396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ab0916-aaca-43aa-a4ec-b955813aeb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc03624-9b05-4fc4-90c4-f727c3ab0a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00761d8c-0fcc-4a50-919a-837bb98f6a1f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c302e34e-ba12-42c4-a297-e49d9aea05d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe824ed0-ee7d-4133-b01c-9d17177a51fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee567acf-8b0b-46b2-8d91-45b9d5256a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fdf2c3-f99c-45f6-b087-fbce040ece39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a1801e-a5ce-460a-942b-16681ac3af46",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f1ea82-ec18-4bc8-b31d-9e083b1f4615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53eef4f1-4fff-4b48-b192-a2379a6129ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078002c3-df34-4c19-b6d4-76e082bcd607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43262aeb-ede2-451d-843b-b30ef5c750cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d472e42b-ac99-4d0a-8623-84758a9ef70d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7014aaf-02e6-44dd-9c41-dac466aeb47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01b2431f-dcbd-4b1f-8117-b4eeabb8f9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9979b14f-8b5e-4257-8b44-f3a4279ff143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3505011f-34b4-4a2c-b565-053be8207e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640c46f5-46ec-4dc5-9275-be8ec5b11794",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcc07e5-beb9-475e-a8d6-b7f323a98e5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e85fb4-19e7-4632-835a-a417e60603b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2780cb0-0078-4173-952b-12b3c4e340c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ee33e5-1520-4b33-acf4-c46768651b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9e209c-aaf6-4902-9fd6-33dc276b74d3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a2be61-44eb-48b2-a872-50af8bb369ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f4186c-8da9-4456-bf61-e1ff8538ac6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03ea180-1f04-47fc-8a0f-71b74e63027b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff23457-6773-48af-b5b4-6b60ef3c05ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705ee468-1d98-40f8-ac04-2b11733b902a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1a6096-e9c8-44c8-84a9-54f9a5dde37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7584a23f-e55f-48e3-8be9-79460f726b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96cef3ab-4563-469a-ac86-dce6dac3526c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824d4fa0-06c3-4154-8b73-1c2913ba1241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40fbb0b9-de80-4e64-8757-44a05f533a6c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff50bd11-47c9-4af3-9d34-fcd1e5b4e8ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dba1cf35-62d4-4fd8-beca-6eb7d43319e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5746e8-ffb2-4104-95ae-557e7dcc236d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13b4c4a-8939-4213-b7fb-3b7dad9fd3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918a150e-b7e6-4627-9c38-d2fa20a9d68a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07c9d7e-c3aa-4225-9045-421013b90f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd780a90-de56-4a9a-8cd0-afad531c1769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5270df-d964-4236-a624-7f820703fa57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c98897-766f-4562-94f5-2402fdad2342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7fee54-a94b-4a30-815a-b90b0a95ad13",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f98637-b726-41dc-a853-901f486499f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48dda181-93ed-4f6a-9d31-f9147df46546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f3502d-f9fc-4ae5-83ac-ee32cd1756bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6decb162-d770-4577-862f-0e60e209d4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ddb3ba-b978-4190-bbf9-cd526141e5d4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bfd510-20cb-453f-9b21-48c690002d8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99914940-2831-41ba-84af-5c6e6a2256f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c5acea-15a0-4264-befe-e9af3dbfce63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fa15e3-c816-4eb4-be70-fe9f0816a928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ee013a-fdd9-4c1a-a313-8a772b619706",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8ef92d-378b-4bc7-a24e-e3b2cc85b074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d9b2837-5838-4d68-8076-9efd01a56031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5915dc-2e5b-4865-9e39-60cdfdd095d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0e3967-3834-4c5b-8d35-e10a830bf3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dde58b-57e7-4cc7-9b4e-718dec0985fc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb70eba-e399-4775-b6e2-6653f0f1ea24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55f3e590-42a2-4ddc-bc99-9e447540b79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea99a963-ca3d-4929-b676-778089c528d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f363bb4-45e9-4154-b7c8-29de1a6a40bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0503d2f-5db0-4cc1-ab36-ab5dcc3e15bf",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b62018e-ee73-4288-b3f5-d1bc846786cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed17c19-8462-4333-9684-e3eea88e6397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c89a2ab-6f2c-4e58-9797-7e7deff8246f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ad81423-4c36-4fc4-a100-090d840359ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1f250d-1a27-4eb2-84a4-ea4f96fc4984",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea6c36f-778a-43e4-85fe-71b1672a3815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4551fa8-0935-4622-9df5-11936325e43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4901142d-7600-4fdc-ab51-7e73f8aaa39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90bb125-08eb-4a6d-b7c2-9abb7ac379a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ebba38-bd2b-4431-9ebd-30e2c8809bbf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fe0d05-f02b-4d1f-b9b8-c91c59d5fc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62fc8f92-fe83-4270-b9c4-ee92f439f2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a88a71d-8cf1-4f19-b4aa-653bc886eeeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d016d67-3599-4121-a414-8f24835d59a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ab7691-870c-4381-89ac-7129794de2c0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248a4309-c4ea-46ac-828f-33673bdbd8d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d32332ae-1945-45d4-abde-352414892adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298f03e1-7d8d-4ff2-99db-cba6c210941c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c81179-faf8-4de5-bd0e-21e9df38d6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e632007-9e11-4403-8d59-10d1a82bcd5f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc62848-65e6-423e-96c3-423151d09ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81a8727-2b96-4d90-8c0a-08dc936389dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511f3980-9b09-4c5f-8065-c71fc1c87106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3f717d-cd5f-4df6-818e-ab365d531c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe9b639-6146-4caf-bd40-e4aee7a09b40",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd07d2fc-0b12-4583-bbd1-3446be9da8c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b857643a-2088-4293-a87a-181662ec91b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b40f6-d11c-4330-abe4-2b4496a9fcd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d77dcf-637b-4993-8b98-5dbab72275e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63133ee3-7c56-420b-8492-25dcf9c5a2e0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf1015e-4ec5-4c01-a995-d0a665796a63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd67f000-3a02-4c25-a8da-770f85d48f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c567bea1-82ca-4f5c-bb23-483f2d6dab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb4d6f5-bd5a-46df-8e26-9c8a84e31562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eef3028-09a4-4c2a-b4ea-d2a80de504ca",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234ba344-08ed-4b2b-bf79-d2cafacd054d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a710b4b-1cd3-47b9-a79c-e23ec253efdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b711c9-ff72-4116-b95f-1b777867cc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8cc1bc-aa0e-4ce1-af0d-48654d2ab59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd80601-f05d-420b-8140-ba42b7de1400",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a220a89-8db6-4a31-b209-50edcec6519d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "838e0a2a-4dc5-4323-a0ff-4d6f5c6faf18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d34ac30-221d-4364-ab97-0bb1132cfbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd70edbe-c9b0-4490-b3a1-cd5c55e1edeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c68e63-dd47-46a8-8d36-ef122c3ebe8e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86083043-2406-4a25-b211-1d90fc54dedc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9fb2b55-a742-4bdd-b58f-4ebb08ecfc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "896e5241-f7fa-4e89-8641-1b9fc342ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c522c6f5-a94a-48d1-b50e-9b674cd7581a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba7d61f-1dea-4b9c-b919-feffd200e19f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0f42c2-4cb3-4fcf-a2f1-4142a929e479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03bc81b2-905e-43be-9f2c-0b4ef7e4d438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7bfafe-5303-416e-8e1d-5cf4a2f80645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f98536e-772e-4534-84af-8ce0c4799cde"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bca19ddf-6bab-4b30-b2a2-001bfc95057c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dc183ab-f361-4f1f-8bd6-bd0dbbaab49e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63fbefa7-10c6-4baa-83c2-e160aa516c0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8580bb22-173c-49d2-be23-f43adf6c1919"
                    }
                  }
                ]
              },
              {
                "id": "b3071f35-8c16-4fd5-ba61-541f561c4c5e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3887114-19d5-4102-96f3-87e4fcbc2aa4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86327857-4448-4638-9cc0-bbd4d8d38e17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1e66c60c-b056-4877-9a9d-7c8a1e48babf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bc72f9-05d1-4304-84c8-fa5735ca7382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2877c6c8-d369-4568-879b-22fe7e385633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f83761-0ed0-4051-8227-a2d069695187",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33522d70-4048-496c-9117-2a9bb34f425f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f2081861-8507-4b94-96da-9f9586e7feba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ac08c5-f851-4f1f-8331-8e0465fbcc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f59cf723-c538-4c07-b0a0-daa681d2c6df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b9ac943-b081-4d83-8cc1-5bf725121920",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49245f5f-c698-48a1-bbef-6c48dfba39e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f8bf5d6-3f92-4315-b8d1-e5722aac3faa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a3a3bb2-3ce2-4582-8d3c-f077f9cb7103"
                    }
                  }
                ]
              },
              {
                "id": "96fcda13-6513-4c3c-bfdb-02ef7fd03183",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a55570ad-80e7-4a5d-bf39-075227e36843",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958906f2-8baa-44b6-b036-71f55486aba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f1260c8c-09af-4b70-8c91-206bfc701938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21511ea-bca1-4307-86f8-6e5fb1f9e5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5737c9-7a9d-4aaa-aa76-5f660d107736"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "07fcbedd-42b0-4e91-8c7c-be8c1cafa216",
            "name": "Positive Testing",
            "item": [
              {
                "id": "654cf4db-894f-4ee7-af3b-915467d5fe69",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f328f80b-0a5b-4a59-b58a-acc197bd637e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8a7e13e6-df06-4493-8047-54b076167f15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0130b016-01ed-42de-8ba0-28f505341d2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "595b5a69-5418-46dd-958c-d53e39cbb4c6"
                    }
                  }
                ]
              },
              {
                "id": "5406c203-8780-428d-a3d4-032b2e9cb653",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2122c23-a600-48f7-84ec-258cbd3ca3ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "52e54ef7-7fd5-45f5-b11c-d7a62f3e2c30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a03e1b7-fc3c-44f3-8a78-89b876e420a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91ae5c46-3b8e-4b29-88d1-e6a9bf9bc1ca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e04f6227-27c3-4558-9bb3-233de818abac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cd64a9a4-f32d-4cf1-90e9-2ed04e7cfddb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5dd8b19b-9f20-4c17-af58-30f0ced08fac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "384099f3-7b9f-464c-b57b-c727743d9b0d"
            }
          }
        ]
      },
      {
        "id": "4b7228ce-8103-498f-8382-15e852034f62",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4f234d50-9712-4f1c-ad15-4c3b74749269",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56ce14ed-f01b-42e3-a17c-73f331fcf613",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17be31da-1a0c-434d-8c44-06659d0f2f1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dbb65586-3273-466d-a01a-3e78ce8c3be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b31f58d-0aed-4384-a210-d016d5532b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59189ccb-6e49-43e7-974d-e9d8f20a74d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702c20e0-3a38-4b61-9551-9b1e8f8a7c3d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42eb744-46a2-4ead-a121-27e62ced06e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3687a292-94dd-4702-8f28-f46a92fe41a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a44e4ba-5af1-4ae6-8dd5-77ee9fe6b538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c72d164-72f2-4055-a340-d2544fb2a79d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cada3a18-7825-4d71-abbf-cb7f38f1271e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edcc5d4d-84bd-447e-93c7-8d87e685f51e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08140a03-da18-4871-81c5-e730e4acf51f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5fc2fd1-7d4f-4e32-b6f7-9aec2257039e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f1947c2-94c5-4d01-a0ac-02578dc09211",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "702fb4e0-f425-4259-b92b-49769c0eb1e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83b7aa82-576e-4d32-975c-368165aefb24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db2e144b-7070-4662-8dc9-7e169772083e"
            }
          }
        ]
      },
      {
        "id": "38c458b1-8ec7-4e66-963d-2672aabc4455",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49c7cbc7-b5c8-46a9-b3fa-b918df5047cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95dcee83-421f-49fa-b14e-6fea52127063",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3a4e2d1-c9f3-4b4c-8930-e69d381d8c80",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae78d12-0abd-48ce-b08f-ae3f224e51f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4daa387c-7d6e-40c7-8918-e682cc03bc19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8e7951-2900-4c19-ab06-569dbd561db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b7d974d-b6c4-4f1e-9f68-d67668a7578d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e4ccda-a349-4c55-a337-71820b5a4b24",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e285ee46-494a-4cce-abf8-0f2fa5cbcd69",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d04ba6-abac-4b21-9c86-360f94a311e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "992023f3-bb9b-4bd9-b77d-166db311bf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c12bd9b-871f-4606-a8a9-4b035d8df0be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "271bb64a-3bf9-4ea1-b653-a2f84284744c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f81b8f5-b1db-4922-9b33-0e229a4d4e44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc9f5673-7ad4-493c-a5de-799d0a1ea8ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99a40fb8-2c2e-4647-8fe9-1556339b4226"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2750c88b-5e9d-4adf-ae35-649726480ad2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b1b85a0e-f1b2-4a9c-a307-9415943bd99c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c25ad295-f0dc-4bfe-8c49-d48308a902af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca97aa5b-eda0-4e39-9e22-6d7af79d005f"
            }
          }
        ]
      },
      {
        "id": "6fdf384f-4f47-46cb-843d-fce15e44ebc7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "73a443bc-613c-4abf-9265-1408da4fbed4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afb6525f-bdd0-4cf4-b7ac-6a631c97eb94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b40c2aea-0515-4577-a7d8-e58d1434b43b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7cea95-9d1c-43dd-8419-1254f35db5a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f89a40c-fe2d-4cc3-ae69-ea562c59f88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c114886-dad6-4fd2-8667-6bb5a821627a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "459b5718-436e-40d5-a3ae-566d84f4bd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e788e38-7ce4-47bd-957b-10b6456f1c44",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b32d988-c02b-4dc5-ab73-6580fcb7b3ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "996cee8a-812d-4002-a5b2-61f2cd4565b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5767dd5c-1b58-4815-8986-c4a990da30c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a54b8db4-2be5-4083-a4ae-7875aa688d99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99e6210c-1860-4fac-bba6-7d951763dcd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ccc6ab9-3e18-4720-9e88-b7a0bfac9b89"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40fea400-e37f-4a7c-80d8-8a1c981bcba6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c09774d8-bbd3-4890-b9f6-90bde412af2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cee7f70-ce8d-490b-9330-554b1020f6da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f9a93c1f-14c1-4c08-a4fe-53114d15a9ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec7652c2-8bc7-4607-9c48-708eb65b0866",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "396431b6-fb72-4d98-abe0-27e316c3f85f"
            }
          }
        ]
      },
      {
        "id": "15f05551-4da5-4f9d-af9f-d559e2540800",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff6d0f00-d011-440c-a103-67760630c9b6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9452459-a7f2-4a3c-9682-5d3849b5a38c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2d92f727-5e22-4d6a-a0c3-86b95c68bcf5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c50dc53f-e972-4bec-a879-437e1ed89fa6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "247dbf7c-8a57-4e6e-80b0-0c2ab2f4a639",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 320.0769230769231,
      "responseMin": 14,
      "responseMax": 10003,
      "responseSd": 1048.3634397360227,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683506179214,
      "completed": 1683506275425
    },
    "executions": [
      {
        "id": "19fdb756-472e-4cdf-92fd-6e151ddbaaad",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ddd27f0-600d-43f3-b5ec-f72f3278b1d0",
          "httpRequestId": "2e537b31-7474-4598-b347-b54e1e42a25b"
        },
        "item": {
          "id": "19fdb756-472e-4cdf-92fd-6e151ddbaaad",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9b0b4d50-b196-4c39-8012-57c201061421",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 0
        }
      },
      {
        "id": "ab4556f2-da48-44ef-99dd-ef1940629b70",
        "cursor": {
          "ref": "a20f0f2b-ef22-4ade-bd1c-cb14c0aef10b",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a454e4c1-b0c4-45c9-b368-d1b8c1367caf"
        },
        "item": {
          "id": "ab4556f2-da48-44ef-99dd-ef1940629b70",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0158e63-1cc0-4188-97ac-7d3d2f11b67f",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "77adc857-a846-4d4f-b753-7eb5f95a4b92",
        "cursor": {
          "ref": "63a9d521-6263-4ccf-bb61-3d82f4f3f664",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "dfab7233-2c75-4cb6-9294-e492296e8583"
        },
        "item": {
          "id": "77adc857-a846-4d4f-b753-7eb5f95a4b92",
          "name": "did_json"
        },
        "response": {
          "id": "13939505-90b9-411a-a01c-c997b3290642",
          "status": "OK",
          "code": 200,
          "responseTime": 499,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faae6ec1-c455-486a-9cac-b63454cb2929",
        "cursor": {
          "ref": "be2c054e-e250-4830-8788-30a16eeefffb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "656589a8-1470-4b28-8e42-cd21d718dfb7"
        },
        "item": {
          "id": "faae6ec1-c455-486a-9cac-b63454cb2929",
          "name": "did:invalid"
        },
        "response": {
          "id": "65e5a8ad-86f6-45f6-8f6c-17b9cab1779b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 866,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "faae6ec1-c455-486a-9cac-b63454cb2929",
        "cursor": {
          "ref": "be2c054e-e250-4830-8788-30a16eeefffb",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "656589a8-1470-4b28-8e42-cd21d718dfb7"
        },
        "item": {
          "id": "faae6ec1-c455-486a-9cac-b63454cb2929",
          "name": "did:invalid"
        },
        "response": {
          "id": "65e5a8ad-86f6-45f6-8f6c-17b9cab1779b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 866,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "be9ab83e-fe17-4232-9c91-4b5dea2e6d08",
        "cursor": {
          "ref": "f97da3f0-08f1-4709-8bc9-3c2ef72cb916",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "48f90119-9dd5-4703-bf53-24cb08a06ea4"
        },
        "item": {
          "id": "be9ab83e-fe17-4232-9c91-4b5dea2e6d08",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "04bd7279-d3ef-4284-8a14-e0d706529eef",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f942be0f-4ca5-4eea-bfcb-c453e8f1105d",
        "cursor": {
          "ref": "60a8a254-f297-4dde-81a3-752116b0520d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3e13d7f9-1f3e-4b42-aee9-3bce88598480"
        },
        "item": {
          "id": "f942be0f-4ca5-4eea-bfcb-c453e8f1105d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d9d93712-9f19-4ba8-9bdf-2c95a9ce91f9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a9a8ac-3883-4b0b-a2ed-b0e0518dc96c",
        "cursor": {
          "ref": "62d807b4-932d-48d2-b131-5577ca5b8302",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "79c8da5d-6b2b-4155-8688-90b4a800319b"
        },
        "item": {
          "id": "f6a9a8ac-3883-4b0b-a2ed-b0e0518dc96c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "da2f0615-5594-44ae-abe4-0ac1abbf5eb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "61aa8413-3ef9-41ed-b940-a1e499e9e1be",
        "cursor": {
          "ref": "90835773-0c57-4da9-8ff4-f92dcdb78ef7",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0a73c1b1-9b78-4089-8b3d-f6240caa6bb3"
        },
        "item": {
          "id": "61aa8413-3ef9-41ed-b940-a1e499e9e1be",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "83d81ec3-dad7-4c3e-b35a-f9d1be47d502",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "61aa8413-3ef9-41ed-b940-a1e499e9e1be",
        "cursor": {
          "ref": "90835773-0c57-4da9-8ff4-f92dcdb78ef7",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0a73c1b1-9b78-4089-8b3d-f6240caa6bb3"
        },
        "item": {
          "id": "61aa8413-3ef9-41ed-b940-a1e499e9e1be",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "83d81ec3-dad7-4c3e-b35a-f9d1be47d502",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c133c7f3-3e15-4d7c-b12e-57278704cdec",
        "cursor": {
          "ref": "101c2f98-7d18-45f9-8e26-b8a45c7a8081",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "334c849f-7fc6-4fae-b2cf-f2f47c045a0c"
        },
        "item": {
          "id": "c133c7f3-3e15-4d7c-b12e-57278704cdec",
          "name": "identifiers"
        },
        "response": {
          "id": "e07276dc-1a20-4d4c-9e67-8a54393fcfc5",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f38af05-7eaa-45d3-97c1-1f519a13afd9",
        "cursor": {
          "ref": "74e12c37-0d19-4310-88c6-df1b2318ccce",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5248f5ea-0f90-4d36-b3fd-69d0e3a43cd4"
        },
        "item": {
          "id": "2f38af05-7eaa-45d3-97c1-1f519a13afd9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a4880dc-20a5-479f-96e1-9adb30b3418a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f38af05-7eaa-45d3-97c1-1f519a13afd9",
        "cursor": {
          "ref": "74e12c37-0d19-4310-88c6-df1b2318ccce",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5248f5ea-0f90-4d36-b3fd-69d0e3a43cd4"
        },
        "item": {
          "id": "2f38af05-7eaa-45d3-97c1-1f519a13afd9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2a4880dc-20a5-479f-96e1-9adb30b3418a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16bc2905-0917-4af1-9e9c-8c6ae0ff20f9",
        "cursor": {
          "ref": "f62a6bcf-a26e-415c-8593-5293f21b1bcf",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f21ea69b-e4ea-4d19-871d-2556977ea722"
        },
        "item": {
          "id": "16bc2905-0917-4af1-9e9c-8c6ae0ff20f9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "648804b9-46c6-4e5e-adf6-ef85074db169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87053636-6ca5-4eb3-8626-dde961fb4b0b",
        "cursor": {
          "ref": "b82cf052-5330-40db-916b-dc7da3b46121",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7f7c8359-fb8e-42b5-8f69-4f8034f749f0"
        },
        "item": {
          "id": "87053636-6ca5-4eb3-8626-dde961fb4b0b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8182769c-4ae3-4fd7-b629-f9690c02cc1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2ff198-c650-4ce4-a36f-cbb15133f155",
        "cursor": {
          "ref": "d1f14bb8-435e-4733-997a-adca1297854f",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b5002ed6-1114-4013-becd-cd1676ff392a"
        },
        "item": {
          "id": "9f2ff198-c650-4ce4-a36f-cbb15133f155",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "02f0e3ab-49b4-46a2-85ab-4eb2e488a884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb31059-4e26-4d75-afc4-aca5016232cc",
        "cursor": {
          "ref": "6c0ccd3e-9da8-466c-8f10-be7af7e762e9",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ebee37d8-843d-4617-a8d3-c62766c3e032"
        },
        "item": {
          "id": "3cb31059-4e26-4d75-afc4-aca5016232cc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "84e883d2-4598-4faf-9ce9-93b854183e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c49374-f540-4029-9841-600861d5e064",
        "cursor": {
          "ref": "40e377d8-ee13-4b6c-8763-53e5f84fbc66",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "445c8c83-5e1f-4d68-bc52-62d1d869457b"
        },
        "item": {
          "id": "e3c49374-f540-4029-9841-600861d5e064",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d27a1cb9-1474-45fb-8111-91c9dd5eb70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e9ed56-8152-4868-8ac9-9cb87debb2c3",
        "cursor": {
          "ref": "edbd230c-b678-4795-aa20-2fc96f18524b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2259e966-b558-469c-9bb2-ab77e42cd8f9"
        },
        "item": {
          "id": "67e9ed56-8152-4868-8ac9-9cb87debb2c3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "437360b1-ead6-4bd6-88a4-9b55ebb4ddfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdc9805-a03f-4499-b797-f0475d780381",
        "cursor": {
          "ref": "3c045033-f022-4614-9271-605dd6a981ae",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e1265d4f-f5bb-43f1-827e-597a6ed7e12a"
        },
        "item": {
          "id": "9cdc9805-a03f-4499-b797-f0475d780381",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "74dd682f-f5dc-4576-92c3-8333396ec236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e74ddf-2ba8-4e10-a107-2cda4d2387b6",
        "cursor": {
          "ref": "5eaddead-11e2-4aa8-baae-61fc8e722928",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8040a524-ac7e-4faf-bbfa-e4b313806085"
        },
        "item": {
          "id": "88e74ddf-2ba8-4e10-a107-2cda4d2387b6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a919c96a-715a-4ed4-a32f-26d122149c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fdbddc-605f-4cc9-9c02-03ba46a8ef35",
        "cursor": {
          "ref": "1c4bdcfd-c86c-4f25-9c36-9e52a8a8c341",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bef63581-4e51-467e-943a-1c6611f2e802"
        },
        "item": {
          "id": "42fdbddc-605f-4cc9-9c02-03ba46a8ef35",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5e8aa79a-2930-4796-961e-64e5fe129a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff37b44d-258b-4dca-9998-cfbe4cb10bb8",
        "cursor": {
          "ref": "e9dab2d2-6b91-460c-a585-2c512e366e85",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ce7abac5-f0ea-42c4-8012-07c7f0fdc163"
        },
        "item": {
          "id": "ff37b44d-258b-4dca-9998-cfbe4cb10bb8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "da8a8b58-325c-4440-bc4e-4b7c2ad23b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8aeb7f-5545-4f20-bef9-be70e9d42fb8",
        "cursor": {
          "ref": "7ad695b9-11b1-496c-a582-ffc6be60a872",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4f4c67ee-6998-4bd7-b133-621778029943"
        },
        "item": {
          "id": "7f8aeb7f-5545-4f20-bef9-be70e9d42fb8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "35e4c23f-8631-411b-9606-ce6de112ebdb",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "01f6f57b-f206-47d8-a5f2-73830c438039",
        "cursor": {
          "ref": "927a5fbb-9add-4f1b-8c09-7292de4efc47",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1d0e960a-939b-4f35-bcca-08910c64008c"
        },
        "item": {
          "id": "01f6f57b-f206-47d8-a5f2-73830c438039",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b9c7238b-d06d-44c7-aaa3-9f73309a3c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb7ce41-53dd-4df4-8c42-d1e4de2f2b55",
        "cursor": {
          "ref": "98b426ca-273a-43c2-9e9e-5f4d5b3e221d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b0b5b53c-7598-4683-b60e-d28e03aec85d"
        },
        "item": {
          "id": "efb7ce41-53dd-4df4-8c42-d1e4de2f2b55",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6e2f1726-a237-4882-9c56-f3ed2da9147b",
          "status": "Created",
          "code": 201,
          "responseTime": 6800,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "72d925fd-aab9-4d81-81ab-496eeb129f04",
        "cursor": {
          "ref": "e8ca2e4f-ad8b-4094-af5f-110dff40afc5",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "72d220e6-27a9-4f49-9828-6eb9de3ac0b9"
        },
        "item": {
          "id": "72d925fd-aab9-4d81-81ab-496eeb129f04",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2e2c8e18-998e-497a-9ffc-d6770d0156d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376bfeba-83d7-4a9b-b5f7-2fd9ed506929",
        "cursor": {
          "ref": "93325632-9d0f-4417-b8a8-689f40939606",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4f347678-b1d9-4448-a163-776df08bd0dc"
        },
        "item": {
          "id": "376bfeba-83d7-4a9b-b5f7-2fd9ed506929",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6916e4d5-79de-4e06-a64c-e145c12b924f",
          "status": "Created",
          "code": 201,
          "responseTime": 5559,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a1381109-9c28-47be-9167-f5002751c6c9",
        "cursor": {
          "ref": "6d478ecc-5b5c-46d3-95e7-7345f9874d4c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b386721a-7ef3-48fe-a5be-9b06d3d6d5f5"
        },
        "item": {
          "id": "a1381109-9c28-47be-9167-f5002751c6c9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c14c9b41-86e8-413d-913f-640831308b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fbd68f-48f8-4c7c-9173-7316840e048c",
        "cursor": {
          "ref": "a18cb9a8-d536-4f25-99d4-04c0f6dbff1d",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "33be7b26-299c-4497-b979-a74ff43a7dad"
        },
        "item": {
          "id": "45fbd68f-48f8-4c7c-9173-7316840e048c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "70244660-ddc6-4da6-9fea-bf237cb170dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d137780e-52ba-4dc8-a49d-d0e97e4b3dc0",
        "cursor": {
          "ref": "a784dce1-788d-44fb-8a62-a1014cae1be4",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f32e92a1-cbb1-462f-973d-1354ffaafdaf"
        },
        "item": {
          "id": "d137780e-52ba-4dc8-a49d-d0e97e4b3dc0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c9e3fcf6-6b8f-4278-b3fa-97f3392f2996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc88bcb-24d7-4f95-ba5b-95393c2f6bd6",
        "cursor": {
          "ref": "9fdf6015-b59c-4a68-8845-d1a191090cd4",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4e5565ed-2622-43fa-8266-08f6ef2a5bcb"
        },
        "item": {
          "id": "ddc88bcb-24d7-4f95-ba5b-95393c2f6bd6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a02e4b9f-7ebe-4af2-b6d5-700b859bdfd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598ee39d-e0d6-4e09-8523-d23db00ab640",
        "cursor": {
          "ref": "43f20391-d7d5-445d-8fd3-5d761764fffe",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9d715c79-1176-4027-b9a2-39c8bc68e0be"
        },
        "item": {
          "id": "598ee39d-e0d6-4e09-8523-d23db00ab640",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0dbbefd1-7d98-4557-acfe-d7b8906c7a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61b81d4-d320-4e9f-82a1-43aa05120047",
        "cursor": {
          "ref": "56c5c6c5-1740-4a0a-9278-cee2f728d86f",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "52de18c9-601e-4382-8a3f-a4a50584acfe"
        },
        "item": {
          "id": "f61b81d4-d320-4e9f-82a1-43aa05120047",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cb5327cc-6cdb-495f-9b58-e87d2c6001b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f8924b-5e0f-4a89-98cc-b4ffbc85a09e",
        "cursor": {
          "ref": "c7938d89-ae2f-43b5-af1a-80094b817976",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "290f5270-5468-4a6d-8e0e-9f5326080b1a"
        },
        "item": {
          "id": "01f8924b-5e0f-4a89-98cc-b4ffbc85a09e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "67bbb6fb-0c32-4086-8219-28d9ad72d52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 904,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccec1c9a-509e-41d7-ab47-cb262e38cb27",
        "cursor": {
          "ref": "ffc4099e-c3fd-4f2f-917d-35e57dbe0f85",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "17a58487-3d18-4731-8acc-6e6c7fe4105b"
        },
        "item": {
          "id": "ccec1c9a-509e-41d7-ab47-cb262e38cb27",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8199f492-3b9f-4afe-85ac-f8285be3c43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535e8df9-43be-4dc2-927b-a820bb1ddb51",
        "cursor": {
          "ref": "507ab9ae-e609-4a9a-93c6-88299a3689b6",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f00cf451-53d5-4112-8f3c-b842d62f8069"
        },
        "item": {
          "id": "535e8df9-43be-4dc2-927b-a820bb1ddb51",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7aa25cbb-ca66-401b-a1c4-b2ad6778f56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21d7171-e5df-4a3e-aa2d-988f6fbf9bdc",
        "cursor": {
          "ref": "7783e6fc-de5d-4dc2-8add-897408f804ed",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e4d86ab2-c7eb-48b0-9817-3c6c95106403"
        },
        "item": {
          "id": "d21d7171-e5df-4a3e-aa2d-988f6fbf9bdc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "740fd386-e442-4587-b6da-5101ea8dea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a9c402-5449-4596-97dd-6787a399322d",
        "cursor": {
          "ref": "bed6800c-3ba8-4b44-abfb-c89f0f7dd3fa",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8d5cbfc7-e3d6-4e7f-9524-3dda54c96a81"
        },
        "item": {
          "id": "97a9c402-5449-4596-97dd-6787a399322d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "62740f2a-963a-4184-b01b-4221056838a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ad7df4-1153-4b6f-91c9-a974545f7bb3",
        "cursor": {
          "ref": "62019ad1-4379-4feb-9c06-8671a72f5b46",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "01493bf7-ee3c-4027-a58d-1e0af164bb2c"
        },
        "item": {
          "id": "e2ad7df4-1153-4b6f-91c9-a974545f7bb3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "85f368e2-4666-443a-983a-b0f76de431a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af31b4f6-6f50-4740-ac17-0d74520126bf",
        "cursor": {
          "ref": "b6747341-4482-4354-8051-435f3c195016",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7b96cdfc-2a22-4d11-bcc9-2f0bb3f74e75"
        },
        "item": {
          "id": "af31b4f6-6f50-4740-ac17-0d74520126bf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a96d3437-732a-4cda-bea6-1e2abf7059c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba9db13-4404-4c90-90dd-4291d4191ef7",
        "cursor": {
          "ref": "43ee455a-9192-4730-9ad8-16c755c316dc",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "aebe58e6-d125-4918-bec6-647196356fbe"
        },
        "item": {
          "id": "0ba9db13-4404-4c90-90dd-4291d4191ef7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "45ae1651-1f98-43b3-8c7c-782b3d93658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b81709d-5c57-4480-bf53-dfaf0c99e377",
        "cursor": {
          "ref": "0da8932e-1a44-431d-b597-437c8e9cbe37",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "028e8fc9-802a-44ff-a75d-7440d18e3c3d"
        },
        "item": {
          "id": "1b81709d-5c57-4480-bf53-dfaf0c99e377",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c9888155-557c-40c7-b799-d3fa4fde72dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bb6d9c-9b60-4cc0-a5c6-7a7e40f63e41",
        "cursor": {
          "ref": "4fef5e63-c99c-4666-912e-b10a838e9e64",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9aadc63d-f4b0-4c11-8640-40b49bf16775"
        },
        "item": {
          "id": "41bb6d9c-9b60-4cc0-a5c6-7a7e40f63e41",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "aa65273a-8588-4722-88e5-50e8eb3db07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd525a5-12b7-49c5-aa63-7a3f72e3f50f",
        "cursor": {
          "ref": "ef73fc55-c720-42c2-86d8-dc594849f4fe",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "34e0327b-9e42-43b6-abf9-1b90356158d7"
        },
        "item": {
          "id": "8dd525a5-12b7-49c5-aa63-7a3f72e3f50f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4ce3591e-4d0d-4e24-b026-534cd201c957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58088428-9997-45a0-b39c-2ebf528060b2",
        "cursor": {
          "ref": "8700b28e-89c5-4823-8871-1fadc1d89395",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "28fee467-23d0-4dab-81c2-ff0788de8ff9"
        },
        "item": {
          "id": "58088428-9997-45a0-b39c-2ebf528060b2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "72fce06e-6267-4d17-a5b5-095a2253dfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222a8ccc-2140-412e-9fd7-e3c03c8d16d4",
        "cursor": {
          "ref": "5862c7aa-a596-4261-bfc5-0daa87f3d27a",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9bec151c-e836-4862-b69e-372e7b028b27"
        },
        "item": {
          "id": "222a8ccc-2140-412e-9fd7-e3c03c8d16d4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ab2cdff1-3d97-4c52-80c7-592aae531b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 2604,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7f7cc333-3dbe-4494-bc24-3fc304d067f9",
        "cursor": {
          "ref": "d7a6e656-e4f3-40a3-8e11-d055a111dfea",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9dcc696b-3154-40f4-bbef-b8bd3ff05782"
        },
        "item": {
          "id": "7f7cc333-3dbe-4494-bc24-3fc304d067f9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d3700de2-a064-4aaa-a9f6-143574669bd1",
          "status": "Created",
          "code": 201,
          "responseTime": 2362,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0a844966-b89c-40d7-842f-8051e8bb53bf",
        "cursor": {
          "ref": "53ec53e2-4949-4bd1-a5c8-6c187b4f7549",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f3ce99b5-a2a1-4bc0-8aaf-91609d31fc3d"
        },
        "item": {
          "id": "0a844966-b89c-40d7-842f-8051e8bb53bf",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6a5b25a1-34b3-48d3-8b11-08d743733cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f06be5a-5608-4641-88d3-0a4c38228db7",
        "cursor": {
          "ref": "69aeccf4-1aa1-4793-9502-e0f30464be73",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0cd034a7-dc30-4beb-9150-5f9fc485a507"
        },
        "item": {
          "id": "6f06be5a-5608-4641-88d3-0a4c38228db7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fdd5cca9-4938-45f4-81ec-9551041ec41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163e22a8-dc88-4556-8fcb-e1c0a22789a2",
        "cursor": {
          "ref": "b858dfd6-8f70-4f3d-8ac3-835bb3fca9e3",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bae9b4fd-44fb-4a57-acc0-d60f2bac4daf"
        },
        "item": {
          "id": "163e22a8-dc88-4556-8fcb-e1c0a22789a2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f9923340-34ec-42c8-8c82-b40814e4387c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813b19a0-a01b-46b4-87d2-a0f1e2f0d96b",
        "cursor": {
          "ref": "4b7d2a9d-0e11-4127-aa21-be0e28a11025",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "59b94c22-f569-4747-a235-8f8d94098cd2"
        },
        "item": {
          "id": "813b19a0-a01b-46b4-87d2-a0f1e2f0d96b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "df77d9ef-0dac-45c7-a617-d91808affa04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fffd3f-e9a5-43f5-97c5-86f349890052",
        "cursor": {
          "ref": "8a2c4fff-0cd8-4cb0-9605-0b3ac4a7cf5b",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e5e87cef-a1d3-4c7a-8d13-fca47ae11933"
        },
        "item": {
          "id": "66fffd3f-e9a5-43f5-97c5-86f349890052",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fcb88f09-6362-402b-9ab0-f901ae3fa1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a40f6b-b802-4c74-b8e5-f6f24ae6b531",
        "cursor": {
          "ref": "60eb763b-e3be-4050-a71d-67e912417fee",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "22e25c22-cdab-4b4c-92e5-90cc4602b559"
        },
        "item": {
          "id": "60a40f6b-b802-4c74-b8e5-f6f24ae6b531",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ad6766ef-6823-4509-bbf3-55920241fa09",
          "status": "Created",
          "code": 201,
          "responseTime": 2463,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "22474ada-10b6-4188-ae49-5b4ea4f55afb",
        "cursor": {
          "ref": "d8e47e69-df76-4c4f-a8bd-7d2ddbbe9c4e",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f6de3830-4031-42b1-8ba2-5ace3f8c3ce7"
        },
        "item": {
          "id": "22474ada-10b6-4188-ae49-5b4ea4f55afb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f558ff7d-1cbc-4fa7-b010-9861316679c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2541,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0b4cfff3-f2bd-4625-8a7e-77b7b18e485a",
        "cursor": {
          "ref": "40186ceb-02ed-493c-a21b-a2624132ed84",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4cdab201-14f6-4948-9c8d-882e0c6a8601"
        },
        "item": {
          "id": "0b4cfff3-f2bd-4625-8a7e-77b7b18e485a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "71d4a08f-e5bb-4212-aaf6-08bb320bea97",
          "status": "Created",
          "code": 201,
          "responseTime": 2394,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b3062081-cd40-476b-a1b9-4e0cc6348215",
        "cursor": {
          "ref": "e994c675-63b6-490a-9a78-c2bb4d8c236d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cf86fd30-9edc-451d-b2fa-96531264f9d2"
        },
        "item": {
          "id": "b3062081-cd40-476b-a1b9-4e0cc6348215",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "10e6f50c-7c2c-49e4-a970-6eed1e5984fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e907623d-bfe0-4c18-ab8e-2cc7a4a2c0c4",
        "cursor": {
          "ref": "5b7f11bd-e660-4f51-9381-7b98dc2ed86c",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fbdb104f-5960-4454-ad1c-d67824e0887d"
        },
        "item": {
          "id": "e907623d-bfe0-4c18-ab8e-2cc7a4a2c0c4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ac8a66e4-629c-4481-aa3b-f635a3a25669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199ac3e7-efab-4cbb-aa45-afc526782ded",
        "cursor": {
          "ref": "8e192c2f-0770-4c38-b141-86268ccd33db",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "af7a5080-2f05-4982-8fe4-9c739db46ae6"
        },
        "item": {
          "id": "199ac3e7-efab-4cbb-aa45-afc526782ded",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1d920de9-d96f-4eff-b034-90dcfea41757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b711b-be2f-4016-96dc-0313d3b25e4f",
        "cursor": {
          "ref": "e52f38bb-49be-407c-88b5-13ee901106b1",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "06b0fefc-9b62-4bf5-b9cc-98c99a3cefb5"
        },
        "item": {
          "id": "d28b711b-be2f-4016-96dc-0313d3b25e4f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6564d4b7-8cab-45ab-be32-efb5bc9abbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7652fcd0-d40c-4392-8b0f-02768a9bd932",
        "cursor": {
          "ref": "a98084ec-5fc8-4326-8bd6-a86e962480c2",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1fa0cee7-8f2c-4f57-87a5-9c1b9416f2df"
        },
        "item": {
          "id": "7652fcd0-d40c-4392-8b0f-02768a9bd932",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f1c3441-297a-46ea-90b8-65376aced8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a29fa4-43d5-4c40-8d4c-a0a1de5dbf4b",
        "cursor": {
          "ref": "f368d1b3-ef03-4d79-82ff-e442988877e7",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "13354033-589f-491a-9edd-a4ea7cffd0f4"
        },
        "item": {
          "id": "89a29fa4-43d5-4c40-8d4c-a0a1de5dbf4b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f058752b-cf1c-4b17-991c-0141b487b93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367af7e7-ecf1-421a-91d6-7b0deb45051c",
        "cursor": {
          "ref": "6473eea6-cb79-4402-84ec-14dd084177bf",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "016b8215-910d-49b5-8cb7-6ea83be31155"
        },
        "item": {
          "id": "367af7e7-ecf1-421a-91d6-7b0deb45051c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "204e4794-27d8-4c55-abeb-218a413c51b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76275fd5-35d4-4518-b02d-8e6f3bc23b63",
        "cursor": {
          "ref": "1a395380-0f0e-4473-85f5-f2f8ad77c8e9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fa5aca96-aeb9-4b35-b9d2-d6c71f45d0a5"
        },
        "item": {
          "id": "76275fd5-35d4-4518-b02d-8e6f3bc23b63",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "23169931-2773-4ea5-834d-b76f42791bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bb00a1-e55d-4a2b-a0e7-d370282a0dfb",
        "cursor": {
          "ref": "2be93844-80cf-40ed-ae63-39656dbee75a",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "64a904e4-921c-4781-a526-3ba2a4096fe7"
        },
        "item": {
          "id": "81bb00a1-e55d-4a2b-a0e7-d370282a0dfb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f8d60ddc-69f6-4f01-9208-9e25532c01eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94732b0b-ee36-420f-87a8-a3999b5a8064",
        "cursor": {
          "ref": "b0bf87c4-38ec-40d3-aae8-81f763b6aa82",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d83f1a90-976f-4bb6-a8df-e89653626d5a"
        },
        "item": {
          "id": "94732b0b-ee36-420f-87a8-a3999b5a8064",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "161b93f8-fd1e-429c-9cff-a6099249adba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c478cf2-02e9-461a-ac32-64fc9257356a",
        "cursor": {
          "ref": "cae73272-2fe5-482c-a62f-84b9aa307bf8",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f1206284-ca3d-4892-84b2-cef92397a9fa"
        },
        "item": {
          "id": "3c478cf2-02e9-461a-ac32-64fc9257356a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c39ce871-2e98-4121-ab67-211f08ad6441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa14f921-ba99-4150-b89b-1d748b6b9be4",
        "cursor": {
          "ref": "8309a9e2-4952-4853-8c63-785f94fcbc9f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "25bffe54-acd5-4510-9ad9-16f50da27560"
        },
        "item": {
          "id": "aa14f921-ba99-4150-b89b-1d748b6b9be4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "651da3c9-1484-45a4-912b-118b8ac3dbe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1931232-cf23-4a9a-a8b1-43c1abcd9208",
        "cursor": {
          "ref": "bf1ffc68-2b0d-4edc-8c1b-403f2b25e422",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6d8a66f6-3a89-44ca-a86d-a188551d9b93"
        },
        "item": {
          "id": "d1931232-cf23-4a9a-a8b1-43c1abcd9208",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f93dfe84-d494-48b6-b9d3-91425928158f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea9cbd8-527f-456b-b7e9-5c290d47dcff",
        "cursor": {
          "ref": "1470b2d6-0750-40b3-b188-14dd9935b1d8",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c1ecf354-68a0-4345-8d36-237e59d2c0bc"
        },
        "item": {
          "id": "0ea9cbd8-527f-456b-b7e9-5c290d47dcff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e2fa4249-7326-4337-aae0-110b7dafee5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f96cf7-2100-405f-ad17-d863e6d63f02",
        "cursor": {
          "ref": "92ed950a-1c57-42b9-874c-a73ea372ddfa",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9085407a-5c37-42e4-ae9f-8991ed7b81b9"
        },
        "item": {
          "id": "d1f96cf7-2100-405f-ad17-d863e6d63f02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "018dbaf4-424e-49ea-bfda-00f234b99b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "941b2637-ff3c-4f03-ab99-6bfbf0a42e0d",
        "cursor": {
          "ref": "d12709e6-1907-46c3-89ce-10c6b88c2ec8",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c173d75c-7575-4984-8c75-12db248f985c"
        },
        "item": {
          "id": "941b2637-ff3c-4f03-ab99-6bfbf0a42e0d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b9e816d-e6c3-4b92-bfba-1a1c5931a21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2487ae-5c1a-477a-a8a5-c270895316a5",
        "cursor": {
          "ref": "469b72bc-5844-4fee-9585-b3c9c43aeea1",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d2923546-59fc-4c97-98c4-2b5bcf0b52d5"
        },
        "item": {
          "id": "ee2487ae-5c1a-477a-a8a5-c270895316a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "038e98a3-230f-4791-90d6-c02cf3330e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472b43a1-1171-4b4d-afbe-c1c76460acd0",
        "cursor": {
          "ref": "0365da43-6020-48cf-8849-6ea1be8a7b43",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "65db265d-5b02-4bbd-aef3-81e1d41751ee"
        },
        "item": {
          "id": "472b43a1-1171-4b4d-afbe-c1c76460acd0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1443d68c-42de-4344-8056-6b60a74d0612",
          "status": "Created",
          "code": 201,
          "responseTime": 2640,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f57a16b9-e554-4527-8da2-9494e068e8d0",
        "cursor": {
          "ref": "4ab5aa02-d418-4cba-93b3-38337e159964",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "651d4ed9-37dd-4d2a-822c-c33216484d5b"
        },
        "item": {
          "id": "f57a16b9-e554-4527-8da2-9494e068e8d0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb08ffbe-d291-416d-abb5-879bc77e3900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbeb5cd-9b28-4c01-8e4a-36e6c0f3e27c",
        "cursor": {
          "ref": "37bf0150-debe-4e4b-89d4-ce243a48ee64",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "52aa5d82-2af5-4b99-a401-f045fe4e803d"
        },
        "item": {
          "id": "cfbeb5cd-9b28-4c01-8e4a-36e6c0f3e27c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9a73842f-3cfa-49bf-b171-c6784ab82b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b482c5c8-5fea-4025-9051-10a0b585bd0b",
        "cursor": {
          "ref": "2f335ba1-6fc3-40c7-8367-94e2e0a5567f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e5f1f89d-ab18-4e28-91e7-439f0e21968e"
        },
        "item": {
          "id": "b482c5c8-5fea-4025-9051-10a0b585bd0b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bed994f5-4e54-42c8-94ab-c2d8397592ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c20cee0-8294-41c9-ab16-72c6e75af604",
        "cursor": {
          "ref": "83574dde-c109-433d-bc37-2bdf44cd5a9d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6680f30f-bcc9-4bd9-b9b9-00f03cc5e597"
        },
        "item": {
          "id": "1c20cee0-8294-41c9-ab16-72c6e75af604",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2f447a68-e02a-4188-90f0-76f8f1e8efe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de633cc-c7c7-432e-8615-05d0f5af2eaf",
        "cursor": {
          "ref": "ce2ea174-09bc-4935-aa1f-b6fee334269a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a70144d2-3967-4247-8be5-91df74de4cc8"
        },
        "item": {
          "id": "8de633cc-c7c7-432e-8615-05d0f5af2eaf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "462825d8-77a1-4ae6-b56e-6c289b6106de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e928a3b1-b50b-4a86-93d2-64824d714724",
        "cursor": {
          "ref": "de82f11b-1120-43b8-a7c8-4cb9b2dd49a2",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f6b6ba0d-160f-4509-9b2c-27379bd421fa"
        },
        "item": {
          "id": "e928a3b1-b50b-4a86-93d2-64824d714724",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f628fe6d-a82b-496d-aeaa-bc16b41988a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a961365-4981-464f-914e-5bf08d7f1dcd",
        "cursor": {
          "ref": "75655649-d40d-4b3a-8a38-8d663daaddbb",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0067577c-ce1d-45bb-9512-2f0d66359f60"
        },
        "item": {
          "id": "0a961365-4981-464f-914e-5bf08d7f1dcd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "19627409-a7e4-444f-ad5c-5f79744d5578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7010f1c1-0cc3-4625-94a3-923d701beffb",
        "cursor": {
          "ref": "6eea17df-b685-4ad4-a201-50b5619b2c58",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "29d8116c-d027-404d-8939-bdefaf2796ad"
        },
        "item": {
          "id": "7010f1c1-0cc3-4625-94a3-923d701beffb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a7d6a0a1-e9f1-4701-8770-50e8ce6941dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4922e59-bf46-4e72-9844-9196f573a448",
        "cursor": {
          "ref": "06298fd6-733b-4d37-9d7b-9810d03262c7",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a267584a-92d8-419c-8785-57ff81ab158e"
        },
        "item": {
          "id": "e4922e59-bf46-4e72-9844-9196f573a448",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8d4c812b-dfe5-4500-a9c4-10b33fd5f22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d44af7c-135d-4c47-9ad8-3aff76dcd385",
        "cursor": {
          "ref": "28f5b530-b96a-43e4-82eb-230efe01a843",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9085e7ad-44b7-4f9e-919d-e51c9f697811"
        },
        "item": {
          "id": "9d44af7c-135d-4c47-9ad8-3aff76dcd385",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c9c10dfb-ada5-4a19-9fa4-f16e617f24c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f96d03-3e09-4cbb-95be-adf651ac3030",
        "cursor": {
          "ref": "c5041d09-6f43-4c5d-bfc1-1dd5fce3199a",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8a3fbe19-932f-4d39-909d-b12cd4941f9d"
        },
        "item": {
          "id": "19f96d03-3e09-4cbb-95be-adf651ac3030",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7946f234-3625-42a7-91f4-d87fd50ac0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe1c311-3422-414c-965a-99527d4ebbc0",
        "cursor": {
          "ref": "c9e16aa5-4c62-47a0-9171-958841e40b67",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "630c7832-33ca-4eb8-93f0-eb624a8f5480"
        },
        "item": {
          "id": "dfe1c311-3422-414c-965a-99527d4ebbc0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4eacffe2-86c0-4b61-9114-8797c143625f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c40cc46-7839-4152-9b71-e63f8a5b5371",
        "cursor": {
          "ref": "58fe983f-92ce-463f-8a4b-dc0cc13ec2be",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ce5aa742-de22-4b5c-a5a3-747ccd6df813"
        },
        "item": {
          "id": "7c40cc46-7839-4152-9b71-e63f8a5b5371",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c41e3e20-173f-4797-8f6d-8fb80e870b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb50bb6-21a0-40a6-9b60-ff93c24c3fc1",
        "cursor": {
          "ref": "95e546b1-afaf-4fe3-989d-0db0019e5d86",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bb576db9-6d51-46c2-a338-6ff9068907a7"
        },
        "item": {
          "id": "3cb50bb6-21a0-40a6-9b60-ff93c24c3fc1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8538126-2820-44ae-8cd7-bef695b80321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb60730f-ba2f-41ef-a5f7-72f7ea2d6178",
        "cursor": {
          "ref": "671e4ccc-0eaf-4787-bd26-7463b0b8ecfb",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "69c92f7a-54ca-4eea-ac32-e04025f518f2"
        },
        "item": {
          "id": "cb60730f-ba2f-41ef-a5f7-72f7ea2d6178",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e23afc2a-ff91-4a11-81db-65fe9486d4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f719664-7dfb-421a-8b98-613b519e57d1",
        "cursor": {
          "ref": "b4dcc902-73ce-4738-b429-6bbfe6a1e5f9",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "040ae1f1-6bb1-4e7e-b599-c24120f4fd54"
        },
        "item": {
          "id": "4f719664-7dfb-421a-8b98-613b519e57d1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f982a875-0f92-4cfb-b11b-b25ab819632d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9de194-1883-47cb-bd04-d006c9bd684c",
        "cursor": {
          "ref": "a7ef51b6-9634-4642-a85d-83b2a65dd181",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8280bb4b-8300-487b-94e8-ace16170aabd"
        },
        "item": {
          "id": "2b9de194-1883-47cb-bd04-d006c9bd684c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4b04d270-5107-43dd-ac77-352368a70da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f09506-2cef-4583-940d-ba33f6cb99ae",
        "cursor": {
          "ref": "1a18432e-d27b-45a5-b059-cfb7617a5d80",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3660d303-0a5c-4cb6-8377-0823202897d5"
        },
        "item": {
          "id": "65f09506-2cef-4583-940d-ba33f6cb99ae",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a9162d0e-b7b7-4726-abb0-df1c959a0ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7841aa2d-6f19-4ad7-b7ab-cfb9258f764b",
        "cursor": {
          "ref": "e2dfc8e0-3bf5-4fde-a3e6-90937eadcb4c",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ce9f5d0e-8da2-460e-a823-614b9aad8c55"
        },
        "item": {
          "id": "7841aa2d-6f19-4ad7-b7ab-cfb9258f764b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "27355d26-ddf0-49c6-b37f-ab6a2352014c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7d4305-ef94-4b80-894a-62c2deef4289",
        "cursor": {
          "ref": "218d57da-1d81-40e4-acd1-3df08bb3b0f5",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a3435afb-87d1-4190-bf9c-e980a5662bb0"
        },
        "item": {
          "id": "0d7d4305-ef94-4b80-894a-62c2deef4289",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "35ac6283-efa0-4eca-ad77-994700654b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ed78a-b46b-423d-8f6e-f17e39a5eb6e",
        "cursor": {
          "ref": "b5b94678-ef8c-4248-83dd-316756a65990",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "59cba1e4-e2c8-429c-979a-1b89317755bb"
        },
        "item": {
          "id": "4f1ed78a-b46b-423d-8f6e-f17e39a5eb6e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5fe6d00a-700d-4f4d-b857-c405483db355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8895d178-8f95-44e0-82b1-d1d530f1e30c",
        "cursor": {
          "ref": "78d4fa6c-e8c4-4bb1-a092-6ccaf656a014",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7e46bd63-431d-4225-995a-9689a238f64d"
        },
        "item": {
          "id": "8895d178-8f95-44e0-82b1-d1d530f1e30c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7a079bca-c8b5-446a-9682-64f2c3c0a2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6824d9e8-747e-4af7-ba69-b9e19e0ca0ce",
        "cursor": {
          "ref": "5275e354-5dbb-43f8-bb58-94b96cf8b7e0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "042667f7-806b-427c-ba78-edeb8ee6adee"
        },
        "item": {
          "id": "6824d9e8-747e-4af7-ba69-b9e19e0ca0ce",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d82fe412-5b54-4213-89b1-3b61c44829ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f9523c-163c-4066-a4f7-52b8a90fa084",
        "cursor": {
          "ref": "b9992304-91c8-461d-ad6e-49fee45cfa0c",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "306ccebf-8e00-428c-92a5-b5d812abdfde"
        },
        "item": {
          "id": "58f9523c-163c-4066-a4f7-52b8a90fa084",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a4a98e98-a581-41f1-b2a3-a802e8b1382a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbfbc42-f468-40b4-9ac7-ad8f655991c4",
        "cursor": {
          "ref": "a38fac6e-01b2-4842-b5be-df2026aec71c",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f52d691c-d810-46d7-ba61-512025cdd4f7"
        },
        "item": {
          "id": "bdbfbc42-f468-40b4-9ac7-ad8f655991c4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b056fcbb-b394-4dde-b493-dea323788e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75b6bb5-b839-4710-adc9-7a06c84763f8",
        "cursor": {
          "ref": "bb819a0b-f777-4e41-8545-97f77b9d0397",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e41b8b4e-9034-4325-869b-9d76bc99ae4f"
        },
        "item": {
          "id": "d75b6bb5-b839-4710-adc9-7a06c84763f8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "62d9c384-fc1d-43c1-b1d3-44943088d41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d75e3de-85a4-4e3a-b9b7-e257ca4c948d",
        "cursor": {
          "ref": "3070f40d-b344-4a02-ab4d-d956f1610ed9",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ba541e24-13ae-450c-a3a6-2650d907e113"
        },
        "item": {
          "id": "4d75e3de-85a4-4e3a-b9b7-e257ca4c948d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ae6ba4c7-2e18-464f-976a-e973d93c3711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f301b198-529d-4d19-83b9-6963021009e6",
        "cursor": {
          "ref": "f7969f8e-287b-47db-8d7b-36cc424298e3",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9a566d79-e6e4-4420-af20-900b295f0abd"
        },
        "item": {
          "id": "f301b198-529d-4d19-83b9-6963021009e6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2c57035c-4170-4fc1-870e-370d5779dce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e386f4a0-3779-4051-a52b-fed6761582d7",
        "cursor": {
          "ref": "a541c30a-8d70-4531-97cd-6eca7b3f6deb",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "da75ea7c-0d30-4ba6-ad64-d91246e0c415"
        },
        "item": {
          "id": "e386f4a0-3779-4051-a52b-fed6761582d7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5d33a14e-c6ea-4d2b-8146-95022e91604d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d3f185-2cc5-448f-b11e-7dfea167b5ea",
        "cursor": {
          "ref": "f1e75fa3-e3a0-425a-a940-5fd0d9d914c9",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "15ae8ccc-75d1-4d12-9d87-65b0c33af047"
        },
        "item": {
          "id": "55d3f185-2cc5-448f-b11e-7dfea167b5ea",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c27f9f67-af8a-49e3-90d3-19a54632fee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5a6875-f86a-4e79-ab8c-c274bc1b9e54",
        "cursor": {
          "ref": "b59810ce-5973-4143-a03e-eec1bdfc53ec",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "79858a79-124f-44a0-870a-96c660e7b882"
        },
        "item": {
          "id": "1d5a6875-f86a-4e79-ab8c-c274bc1b9e54",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5e486b0f-964a-427d-83cc-e5906c9a6eba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "214c273d-21cb-40ed-b16d-39f93cea3cb4",
        "cursor": {
          "ref": "cb2142c6-d086-4fd2-9a0c-76628c673342",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "27650ff2-c799-4f28-89d4-5148e90dffaf"
        },
        "item": {
          "id": "214c273d-21cb-40ed-b16d-39f93cea3cb4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e3b78404-709f-4f68-96f6-885ae046428b",
          "status": "Created",
          "code": 201,
          "responseTime": 2408,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "35c04700-a25e-467d-b467-76db8898bb8e",
        "cursor": {
          "ref": "21d649dd-b309-441d-ac90-fbef167928fa",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d8e67cbc-5cc2-49fd-a217-d6cf3d6e3a9c"
        },
        "item": {
          "id": "35c04700-a25e-467d-b467-76db8898bb8e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "da94b3fc-ad40-444c-805d-85c12a2e8381",
          "status": "Created",
          "code": 201,
          "responseTime": 3370,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "017f558b-b334-4759-be6c-c26ab4b7c6dd",
        "cursor": {
          "ref": "f4aba6f9-515a-4cb7-a15f-12c5e444df89",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "77faef51-6441-4fe3-be83-ccf7ae5d7594"
        },
        "item": {
          "id": "017f558b-b334-4759-be6c-c26ab4b7c6dd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3b579b1d-b356-4543-a0a2-b6959a22bd3a",
          "status": "Created",
          "code": 201,
          "responseTime": 5851,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2506e41-6acc-446c-89f4-24c575bce6aa",
        "cursor": {
          "ref": "3b878073-ca39-4d3e-a018-9f8b97efb5e2",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "816d2315-f1af-41ea-8ed0-3784cb76d39e"
        },
        "item": {
          "id": "a2506e41-6acc-446c-89f4-24c575bce6aa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a3d1d919-1cf6-4bba-a0c6-970351794c12",
          "status": "Created",
          "code": 201,
          "responseTime": 10003,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8945fa0-cc12-4d76-ab03-65dfe7b38812",
        "cursor": {
          "ref": "69594af4-9a63-41ff-a95c-bbebff1a36b7",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bdffe72f-4d05-4232-a9f4-f6ec362a86f8"
        },
        "item": {
          "id": "a8945fa0-cc12-4d76-ab03-65dfe7b38812",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a72a2a7a-e35c-4f97-abe9-f3fb52392cb7",
          "status": "Created",
          "code": 201,
          "responseTime": 3309,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "555fcc2b-06e2-4cc2-ace4-1b584957808b",
        "cursor": {
          "ref": "d075a1f0-54de-49e0-945d-fd68ba5735e7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "41f80cec-7f2d-4082-bf65-e0dbe2ec8c61"
        },
        "item": {
          "id": "555fcc2b-06e2-4cc2-ace4-1b584957808b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c3a0ebeb-fabd-40aa-8823-925dc0626c4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2747,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-08T00:37:28Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-08T00:37:28Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "d31302d0-3f66-4626-b92d-11dbcbd947fd",
        "cursor": {
          "ref": "8b577879-1df4-4b8d-ac5e-f59f8f2a644d",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "af468520-9311-4a2e-bb7d-bef0cb933ebd"
        },
        "item": {
          "id": "d31302d0-3f66-4626-b92d-11dbcbd947fd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "807b1a52-a0d6-4177-a18c-6b92b6c5c0c5",
          "status": "Created",
          "code": 201,
          "responseTime": 2596,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606de752-c9c4-46a5-95d8-3dcdb4893520",
        "cursor": {
          "ref": "b718d670-00c4-4c5b-b36f-fb023ff86bae",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6813eed9-89ba-483d-9d63-7a1f46a2916b"
        },
        "item": {
          "id": "606de752-c9c4-46a5-95d8-3dcdb4893520",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "395b54c4-b0a3-4d1e-b3d0-50aecc6af8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606de752-c9c4-46a5-95d8-3dcdb4893520",
        "cursor": {
          "ref": "b718d670-00c4-4c5b-b36f-fb023ff86bae",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6813eed9-89ba-483d-9d63-7a1f46a2916b"
        },
        "item": {
          "id": "606de752-c9c4-46a5-95d8-3dcdb4893520",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "395b54c4-b0a3-4d1e-b3d0-50aecc6af8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118357c5-d4a1-458b-a341-2bacc43db5f3",
        "cursor": {
          "ref": "c724ee19-2d69-4fa9-ba5d-738bf784fc9d",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ca723f66-dfec-4acb-a7b1-0c05f5fecb64"
        },
        "item": {
          "id": "118357c5-d4a1-458b-a341-2bacc43db5f3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3bcc0b83-b9b9-4fdc-83dd-9c1b67b6f0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abc3f31-8734-44f3-a679-c024cedb3954",
        "cursor": {
          "ref": "58ad7da3-3bfc-4416-b1a0-b43e04c776c6",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "592a72b8-b6c4-4e28-830d-6566e0f30788"
        },
        "item": {
          "id": "1abc3f31-8734-44f3-a679-c024cedb3954",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9eee9427-fdc9-4bfe-8891-e6bca1c40ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee495703-d3e9-4c9c-b8ad-d5bc235e3313",
        "cursor": {
          "ref": "314cbe8e-f653-4ee5-9197-ad1cb108c21c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f65e0fca-75e9-4b60-8292-e75b66a2b870"
        },
        "item": {
          "id": "ee495703-d3e9-4c9c-b8ad-d5bc235e3313",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5d0fcd63-10d8-4939-819c-13cbe46c0d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561e3294-b58d-49a3-8129-1dafeb020c9b",
        "cursor": {
          "ref": "405257ec-f9cc-4a18-88e5-757296fcebe6",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4bf4b35d-c284-45ee-adc5-e10e79f6cccd"
        },
        "item": {
          "id": "561e3294-b58d-49a3-8129-1dafeb020c9b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "baf1509e-be41-4124-9bed-161b0f201414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea189fa-11d8-4892-a54a-cf9fff2e36ac",
        "cursor": {
          "ref": "73ff4000-c9a3-4611-9c4a-7d48d52df52c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b6a60769-fdc5-4bf1-b4ba-979b71d6602f"
        },
        "item": {
          "id": "7ea189fa-11d8-4892-a54a-cf9fff2e36ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "575bec14-3828-4c26-afa3-d3072af36664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b083b9-beee-4159-b13f-7a29300a70f0",
        "cursor": {
          "ref": "f44b0ccf-aeea-4bd4-9718-1a8bd4e68f72",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b2f86a8a-6fa5-4db0-8da2-ac88a066c0e0"
        },
        "item": {
          "id": "25b083b9-beee-4159-b13f-7a29300a70f0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8c0d7589-3a3b-4032-aee7-5ec3ea09c281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efffd754-b854-4d90-8da3-868fe2fd41d1",
        "cursor": {
          "ref": "c40b0df4-4db0-46d8-87b1-29846352d49d",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8b369b8f-ca0f-44b9-b07f-f5349c7d3e13"
        },
        "item": {
          "id": "efffd754-b854-4d90-8da3-868fe2fd41d1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5e105305-4985-4bb4-83c1-c68a9fcfaadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ec795b-f929-403d-8653-bab33fe605f5",
        "cursor": {
          "ref": "75b92554-e826-440a-9b1b-92592523644a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2b44d5e0-c679-4c3d-8f79-39934ca4fbe7"
        },
        "item": {
          "id": "98ec795b-f929-403d-8653-bab33fe605f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a9ed7ae8-14ad-48d0-b82c-7499eff093ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae39134-9ac1-4197-9010-4dbd6850a675",
        "cursor": {
          "ref": "8f063b35-b718-4b02-847c-3e7afb8e23bc",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "85e3380a-9ede-4555-ad50-1d5ec436a8f8"
        },
        "item": {
          "id": "1ae39134-9ac1-4197-9010-4dbd6850a675",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d492295-c3ae-47f1-87e8-497248e91004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea09370f-e8f8-44ed-88e0-e47b903ee8d7",
        "cursor": {
          "ref": "33c4c8da-efca-485a-ae48-10f53131c678",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e0d97260-f26b-4f41-aa05-d884e2bb69d6"
        },
        "item": {
          "id": "ea09370f-e8f8-44ed-88e0-e47b903ee8d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f2c83aa8-5c8d-4faf-aec3-a11b81421880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8351d872-732c-4762-b9ab-71586b180a66",
        "cursor": {
          "ref": "c11c1086-c45c-4ca8-8626-1d38f16c3aae",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "68ab31a9-1e43-4dcc-a972-47343b54952b"
        },
        "item": {
          "id": "8351d872-732c-4762-b9ab-71586b180a66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1aeb5b1f-8b84-427e-af68-4831f073805b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2097a82b-8e7e-46eb-9679-776fac601500",
        "cursor": {
          "ref": "5a9b0f15-e71c-4b28-af6b-cf4f805ff431",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8336831b-550e-4ec8-bc69-0b2223fd9121"
        },
        "item": {
          "id": "2097a82b-8e7e-46eb-9679-776fac601500",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c00a5dd4-2aa8-4b81-95d1-e3c97ab62299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859cd5c1-08f0-4f11-9d80-694e61293dd4",
        "cursor": {
          "ref": "4a21fbb7-21c0-4625-a709-c6726fd5db6d",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8be9f0a6-298d-4c7a-83ec-7e7f7b3d823c"
        },
        "item": {
          "id": "859cd5c1-08f0-4f11-9d80-694e61293dd4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e053cdd1-0775-4fcb-8c84-051ee581215f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0ed688-ce0b-4ed5-9a42-da47645bc3c9",
        "cursor": {
          "ref": "acd2571c-f68a-4df7-a4eb-8c04f3ea8d8d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fc91b7e3-10c4-4a5f-96bb-b5cf684eb7d8"
        },
        "item": {
          "id": "9d0ed688-ce0b-4ed5-9a42-da47645bc3c9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "826d884a-9fb0-4d32-b784-06248446348a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a0129c-f958-4b7b-bdca-66efb577510c",
        "cursor": {
          "ref": "a0b91031-e9e9-4c0c-83cf-9d5313eb9170",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a5383438-ab97-4892-94d7-4d02b06006a8"
        },
        "item": {
          "id": "e7a0129c-f958-4b7b-bdca-66efb577510c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d812a1d1-47f1-4a05-a163-0e7ca1b5df74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f02e00-b31a-49a6-93e0-f614e32e0a2e",
        "cursor": {
          "ref": "b91cef6d-8c37-4d7e-973d-bd3fd9dd03a0",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7b4c786c-5f77-40cb-90cd-b19132b6d045"
        },
        "item": {
          "id": "09f02e00-b31a-49a6-93e0-f614e32e0a2e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "08e3e4ea-6932-4c77-b0e2-eda5f239b4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f87e0a-3bd1-4be2-af33-6f1f86e5f15d",
        "cursor": {
          "ref": "fa16a62e-4e9d-48e1-b735-b3db7ca920f5",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8f78f24d-85e4-4e2c-a71c-06c3ddcbc922"
        },
        "item": {
          "id": "14f87e0a-3bd1-4be2-af33-6f1f86e5f15d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7f4f0921-d9f6-4259-b80d-7876927500fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5379d712-6ed2-49bc-8538-f38893db3709",
        "cursor": {
          "ref": "2a1f4b82-b0d9-429b-90d9-97963f884f76",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9d3186ec-6b6a-4dd1-b380-c7274c799c85"
        },
        "item": {
          "id": "5379d712-6ed2-49bc-8538-f38893db3709",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e1468ed7-111d-4bb8-a7cf-b8e02799dd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6c6148-0c6b-4a5a-9e11-ce5f0593ed57",
        "cursor": {
          "ref": "48c75dd5-d3bf-443a-9f8e-11b4830d664b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "18e8e5e0-aa03-48e1-814f-152a3a5cd843"
        },
        "item": {
          "id": "6f6c6148-0c6b-4a5a-9e11-ce5f0593ed57",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0746ae59-d4ec-4827-b3cb-f253286848df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6d60f7-3f6f-43a2-a2ed-b483f94173ce",
        "cursor": {
          "ref": "460ba2e1-fbc4-411d-aca6-cd50dbbc5b61",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "893be259-5ca6-4a36-b5fa-e596c31b1e91"
        },
        "item": {
          "id": "eb6d60f7-3f6f-43a2-a2ed-b483f94173ce",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8d3be1af-a182-407a-ad7a-539d25d3c2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef753d7-3181-49bb-a0da-fbfecb91f1fa",
        "cursor": {
          "ref": "7636d9d6-f068-41ce-8233-0a14ee3f30fb",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4164d0b-d74b-4e59-b05d-4c54584d2900"
        },
        "item": {
          "id": "5ef753d7-3181-49bb-a0da-fbfecb91f1fa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "db0e26bc-6e81-4b7b-97d9-5dcc4dd1e5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f5bedf-0a94-425e-ae1b-1b1a35b675ed",
        "cursor": {
          "ref": "48f7cfe6-4308-4496-a14e-296225f71bfe",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c6226176-debd-4d8e-9ad6-72354095db84"
        },
        "item": {
          "id": "16f5bedf-0a94-425e-ae1b-1b1a35b675ed",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f270e6f7-31ed-47bc-bf8d-0a000c2ce690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d200be2-5956-4865-a834-e90b07ae6f3b",
        "cursor": {
          "ref": "31b8fb2e-642b-4d88-bdc2-8c66f61cac70",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9c2586ed-5a27-4c44-adbe-f516cc3a92a3"
        },
        "item": {
          "id": "3d200be2-5956-4865-a834-e90b07ae6f3b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cf9fbbad-d1e3-4fda-a0aa-6489e09b71a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c96fc6-c881-46e3-94ba-2ddff0bf6ed0",
        "cursor": {
          "ref": "f6b3817b-efb4-4dd0-b059-fe9a2bdc2673",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6066aa06-65b6-40e1-a333-324ca4dbb307"
        },
        "item": {
          "id": "b7c96fc6-c881-46e3-94ba-2ddff0bf6ed0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f13e8edc-dc14-44bb-886f-827e5034c2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008364a7-57f8-45b4-b27c-2bf7c98971f8",
        "cursor": {
          "ref": "0181610a-00e3-430e-bfee-cf8d70faecf2",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bd310c19-772f-4390-afb1-e4825475b1fe"
        },
        "item": {
          "id": "008364a7-57f8-45b4-b27c-2bf7c98971f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "54c16237-0a7d-4880-8c8b-9de51b2d090d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af2d1b7-09b3-43e1-8469-ed7da71e41f5",
        "cursor": {
          "ref": "0a26f2d6-e1cf-489d-b0f5-b09b9ce5991c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d9086217-d998-41c3-b74f-cc59a301f110"
        },
        "item": {
          "id": "6af2d1b7-09b3-43e1-8469-ed7da71e41f5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a8054891-26e5-41cc-a855-3d0d886c194f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e491f83c-ba33-4f3a-8e8d-c3c7d2135d06",
        "cursor": {
          "ref": "8429e687-9599-4126-9f91-8ea49d3f66fb",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "597cb75c-ea2e-43a1-a4ca-f401b3d703c0"
        },
        "item": {
          "id": "e491f83c-ba33-4f3a-8e8d-c3c7d2135d06",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "83b7868b-5c2e-4f1c-99aa-a92847d9919f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acce172-af6c-44fd-b0cc-e3600674dcac",
        "cursor": {
          "ref": "a7981390-3bbd-49eb-b534-162c8a23cef8",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d40c9df3-35b1-4828-b181-997a0b870c60"
        },
        "item": {
          "id": "3acce172-af6c-44fd-b0cc-e3600674dcac",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b9fc2267-7672-4ef4-8580-10652171a640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af620904-eb5c-4037-910d-727309ac64fb",
        "cursor": {
          "ref": "20c079e9-0d00-453a-900b-08009c9159d3",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "885918cc-bf47-4b9b-9115-491fc4dd9f76"
        },
        "item": {
          "id": "af620904-eb5c-4037-910d-727309ac64fb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2e28fa49-e6ab-476e-8685-3e5c7b9cbcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bd3912-6e4a-4d2b-bc12-f10a8ed7712f",
        "cursor": {
          "ref": "0ccd9290-7c78-4cd8-aa98-ee82bf1961a5",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a623e8f4-edca-48d3-adec-ac14dfe835d0"
        },
        "item": {
          "id": "01bd3912-6e4a-4d2b-bc12-f10a8ed7712f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8181f2da-0a3c-4e5b-9cd0-6821bc43c0d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc99674-9298-4ff8-b4a2-f06223c94c67",
        "cursor": {
          "ref": "cabae724-7673-488e-ad09-cf6d1e0cce20",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f8c9a6d2-d07f-4bff-b363-230d34059637"
        },
        "item": {
          "id": "4bc99674-9298-4ff8-b4a2-f06223c94c67",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fffea055-469c-4a34-9f6f-012156302adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73943c65-a0be-4ff7-889f-d3915c04d9fb",
        "cursor": {
          "ref": "2359d024-565b-4ec4-8e9c-c08c6fc4ba58",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "03fc13f5-f5a4-449e-9b05-2a27bf79ac57"
        },
        "item": {
          "id": "73943c65-a0be-4ff7-889f-d3915c04d9fb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "335adb4f-1909-4ac3-bfe5-0f5a9ebedae9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "81a4a35b-78fd-4116-8bd1-7d1cb523721e",
        "cursor": {
          "ref": "0fff2ec5-51c7-4116-a171-1c5eb73c1fbb",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "21ba088a-ed3f-4ab2-8f0e-e9e7c6e189f7"
        },
        "item": {
          "id": "81a4a35b-78fd-4116-8bd1-7d1cb523721e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8765c88a-d7c8-4459-a6c9-52297f555d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e1dbd9e7-c458-4e0a-84e3-8c5980f083c6",
        "cursor": {
          "ref": "da9b1b79-0a6f-4030-8b8c-29291f4fe11c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4030dace-d3e3-4c49-b51b-e87dd7e960ea"
        },
        "item": {
          "id": "e1dbd9e7-c458-4e0a-84e3-8c5980f083c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "44e42414-575b-483c-a10d-44d2fcfbb25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1dbd9e7-c458-4e0a-84e3-8c5980f083c6",
        "cursor": {
          "ref": "da9b1b79-0a6f-4030-8b8c-29291f4fe11c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4030dace-d3e3-4c49-b51b-e87dd7e960ea"
        },
        "item": {
          "id": "e1dbd9e7-c458-4e0a-84e3-8c5980f083c6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "44e42414-575b-483c-a10d-44d2fcfbb25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cbced9-886f-4b03-8399-e0fb58c58054",
        "cursor": {
          "ref": "6fd98a1d-f16b-4d87-9a36-53b24bc9fc9c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d67d26c7-c793-4fdc-b5b5-a080647f7211"
        },
        "item": {
          "id": "e1cbced9-886f-4b03-8399-e0fb58c58054",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "88cc1f4c-ade9-4450-82eb-4ee08642479c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09aca2dd-935a-4c9e-8696-2bdd7d17caaa",
        "cursor": {
          "ref": "fa598ecc-afb9-43c3-a5fe-50d737da8711",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a28c7b9a-c5c9-4fec-8815-30306389f912"
        },
        "item": {
          "id": "09aca2dd-935a-4c9e-8696-2bdd7d17caaa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "61b668af-4ed9-47a5-a4f4-62d701f3cca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6826fc-4ef2-4d87-a731-d45cd7dc0a19",
        "cursor": {
          "ref": "758acafc-6cfb-40b6-931e-2ff7f4e79c29",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7a882ba5-9ce0-4947-8444-f66e2c9d2b9c"
        },
        "item": {
          "id": "dd6826fc-4ef2-4d87-a731-d45cd7dc0a19",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c8568df8-b0ae-4ad0-a115-52af1466fa99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1311e73-7193-4fa4-bf15-e3b79492fc4b",
        "cursor": {
          "ref": "2b8f81aa-d5e3-46d4-9d35-5293dfb4dd0e",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2b1d6a70-bd6c-401c-a282-c4b3c08fc149"
        },
        "item": {
          "id": "e1311e73-7193-4fa4-bf15-e3b79492fc4b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fb5819be-a449-4d68-a1b6-26666f4af2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f27ee9e-9012-4121-8938-dc13265a33b9",
        "cursor": {
          "ref": "fac1fa74-32d8-4042-b38b-9ae1d7a3783e",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e81d8840-3fae-4c6e-9b8a-c67dcfb5280c"
        },
        "item": {
          "id": "2f27ee9e-9012-4121-8938-dc13265a33b9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6dc2e014-e5c9-4225-9c5d-559987946840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3432ef-0188-4d93-989f-fe7d0ea883c6",
        "cursor": {
          "ref": "3ffadca3-c33a-45e3-a448-fde325c48a03",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "de493647-3b59-4b04-81a7-6b65dbbb3c91"
        },
        "item": {
          "id": "fb3432ef-0188-4d93-989f-fe7d0ea883c6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d6baf148-939b-4316-912a-fede775ff037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d9d12b-3ec2-430d-832b-e784d3af459f",
        "cursor": {
          "ref": "3ba20ddb-98b5-45e5-ac55-a6d3dc603596",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c40a12a-7e1e-481f-8da9-0f24d46c3104"
        },
        "item": {
          "id": "58d9d12b-3ec2-430d-832b-e784d3af459f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b12fc94e-eaba-43c5-ae22-5dfae1e6bde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003b99e4-6dcf-466b-8c81-296bc0cde120",
        "cursor": {
          "ref": "01e11257-afe2-4887-b5ba-ecfccb449b34",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4c5f5fa5-60d4-40ea-8db2-2c3cf38e0fc2"
        },
        "item": {
          "id": "003b99e4-6dcf-466b-8c81-296bc0cde120",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b37bfb52-f302-47cb-8964-362d703f246b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b795da8a-a03a-4a56-889e-36109c1e1e14",
        "cursor": {
          "ref": "443cbbdf-fcdb-44a3-b18f-4fe46009d288",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1df3fc08-ce60-44e9-84ce-0b7116b9ec62"
        },
        "item": {
          "id": "b795da8a-a03a-4a56-889e-36109c1e1e14",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4b4ee5ac-2eb8-4f0b-b670-372b41ca7578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee9507e-01f8-4373-a278-cfdc458b3606",
        "cursor": {
          "ref": "02b1e6ea-c87f-497b-84b6-bc34ce1b3bd2",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "10fb151b-c73f-4805-9cc9-f26412742110"
        },
        "item": {
          "id": "bee9507e-01f8-4373-a278-cfdc458b3606",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9dbbf375-da0b-4cf1-b033-851a7074c9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643323c5-0e23-48f2-9341-2c193aa0c86d",
        "cursor": {
          "ref": "21c0f527-3eaa-4a6f-9595-942dd6d67802",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0209eb4b-67f1-4844-819d-b0664d984e9b"
        },
        "item": {
          "id": "643323c5-0e23-48f2-9341-2c193aa0c86d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "edb195ca-8cfc-4703-b9e5-6c02f5f25b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fffc521-d1fa-4403-9d61-e5ac6b8ab116",
        "cursor": {
          "ref": "4791c508-b8c7-4fb7-943f-ae18816a2209",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "769ef0c9-370f-4b7b-b830-a912022dee73"
        },
        "item": {
          "id": "5fffc521-d1fa-4403-9d61-e5ac6b8ab116",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5a8879d0-1ee0-4716-ba9a-4aa1027b8eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56675d1-fc9b-4ccf-bd92-06234a750a46",
        "cursor": {
          "ref": "03e9a19c-17c9-4b3c-8186-1ec66e131d4f",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5cb744a3-e961-4e3d-91d0-0e696b6c57da"
        },
        "item": {
          "id": "b56675d1-fc9b-4ccf-bd92-06234a750a46",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7eb95ac5-a219-4396-817d-17cbe1806ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d22ee83-df09-4bcf-bb5d-66828ebb26df",
        "cursor": {
          "ref": "657b69e5-ca8e-46c5-985c-13e6fcad51cf",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "981bb3d2-3077-4067-b83d-e251246c5956"
        },
        "item": {
          "id": "9d22ee83-df09-4bcf-bb5d-66828ebb26df",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dcb6d62a-7d5d-4d18-9589-3f2ef8766012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a08807-a596-4b9f-8d68-dca922e15051",
        "cursor": {
          "ref": "46791ccd-0eca-4425-808b-995bcb7c4c94",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "29970419-25a5-43aa-bd2e-2fd7385778d2"
        },
        "item": {
          "id": "e4a08807-a596-4b9f-8d68-dca922e15051",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eb6f2d7d-90a5-4113-9089-bd52249275fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0abc08-4730-41e0-b91e-5103da2e0700",
        "cursor": {
          "ref": "338537ed-e9bf-4059-895d-2598baa87440",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1dab26c9-961f-4712-b3ee-0f0efeab0927"
        },
        "item": {
          "id": "2f0abc08-4730-41e0-b91e-5103da2e0700",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9d757e39-90cc-4166-a098-2b2b4b32ea41",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ca987e3d-0cbf-4e6d-a222-9235eb042c4e",
        "cursor": {
          "ref": "987c0c4e-2309-41ff-b8e5-6df37ae36aef",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "abc80772-398e-4519-95ce-b81a8e3ad6d8"
        },
        "item": {
          "id": "ca987e3d-0cbf-4e6d-a222-9235eb042c4e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6ba8a990-2ce2-4a4b-b582-79855eb820e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef9016c-9a98-494a-aeef-7d92336769ec",
        "cursor": {
          "ref": "61e024ec-50b5-45c5-b437-3dfa7925a9e6",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "13206e23-3cb7-4023-be6f-178fc5354fba"
        },
        "item": {
          "id": "aef9016c-9a98-494a-aeef-7d92336769ec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "780516d5-ff8a-439a-9c89-6da3fa312a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97465ff2-e236-4b81-a6d9-1447a528a7c1",
        "cursor": {
          "ref": "78e06f5e-2155-4dfe-a66b-ca86b7f1fc89",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9b585d2d-f789-4436-af9c-6378c8200bb8"
        },
        "item": {
          "id": "97465ff2-e236-4b81-a6d9-1447a528a7c1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0e6fc080-bcc3-4ae6-9044-12262f7a4d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629964fd-15db-40e8-bbf9-4e2cbc82376f",
        "cursor": {
          "ref": "a4c06da6-7c7f-41d6-96f6-5d6d3f2c7c38",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "757bea21-1672-4d6b-8ae6-72e26a3f77d7"
        },
        "item": {
          "id": "629964fd-15db-40e8-bbf9-4e2cbc82376f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4b23ebd3-30d3-4122-808f-519de7c520a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c585a29-f9b4-4a90-afe9-643c8a6f866d",
        "cursor": {
          "ref": "49351a82-a569-4885-8d52-7b0b5f9c60d0",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c5c70f77-0a62-48d6-8bb6-ba5304425485"
        },
        "item": {
          "id": "7c585a29-f9b4-4a90-afe9-643c8a6f866d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e6ea4ec5-3377-483f-956b-dceb32011fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf36ef9c-51bc-4bb2-8d07-edbb2b26f075",
        "cursor": {
          "ref": "01fa2c2c-906b-4860-850c-ebc6a318bee2",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "71090cf0-ab23-40b0-9e5b-64e72c5fe0dd"
        },
        "item": {
          "id": "bf36ef9c-51bc-4bb2-8d07-edbb2b26f075",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "89c26057-4e7a-4518-aace-1da88e76da32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84cc609-138a-476b-bc44-6ab5bbca25ee",
        "cursor": {
          "ref": "1d3cf171-ed3b-4017-aad7-02ef05b291f2",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1bb687a2-4d9c-470d-b6fd-991b94e306f3"
        },
        "item": {
          "id": "e84cc609-138a-476b-bc44-6ab5bbca25ee",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "eefafb9d-8143-4f15-981f-102d66f5fd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a90471-5fdf-488a-8667-2121f94084bf",
        "cursor": {
          "ref": "7e7d382f-d959-4a29-921a-e0dd00db1bfe",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "66d3497e-8a52-46f3-82ab-23866d661d53"
        },
        "item": {
          "id": "05a90471-5fdf-488a-8667-2121f94084bf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7d7f4462-c245-4280-9922-fa2070e4a402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2279871e-4101-4be3-a3aa-f6c27b9dd4e5",
        "cursor": {
          "ref": "f37cb050-bc4c-4e40-90f8-3d9ff021d30a",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ded1ecc0-f588-4fe1-90c7-c5a9b52a0a6f"
        },
        "item": {
          "id": "2279871e-4101-4be3-a3aa-f6c27b9dd4e5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "99766d42-0da9-43d6-826c-6c6dc14ee52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7531cf17-30f7-4a76-b5c5-23a6c7d7adf8",
        "cursor": {
          "ref": "760dca7d-d45a-4b08-8da5-fbae5794153c",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fa59b0e5-1c48-414a-bbbb-9fef70cea454"
        },
        "item": {
          "id": "7531cf17-30f7-4a76-b5c5-23a6c7d7adf8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ec5be4b2-3c75-42f7-a552-8df4f8ab9218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec59adf1-04ba-4230-b486-8ee8e7ba1bdf",
        "cursor": {
          "ref": "b775cef8-dad5-4a84-97d5-5fbac30465f0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "58878b2a-35f4-4ee6-88aa-350d0430e4af"
        },
        "item": {
          "id": "ec59adf1-04ba-4230-b486-8ee8e7ba1bdf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "21f39b57-0049-4865-b250-b7017b7f51c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27acc3d-5521-4823-9939-d9019c7a3755",
        "cursor": {
          "ref": "0424d5fd-a9f9-4280-aa83-bc947def0cb2",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2cf8fa81-a1f4-4fcc-8ab7-7b505f14fef9"
        },
        "item": {
          "id": "a27acc3d-5521-4823-9939-d9019c7a3755",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7dee929e-1e7c-4030-970c-a37dab81bfea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e2d897-b119-4f55-aa72-c5a79cbdd835",
        "cursor": {
          "ref": "3120e000-811b-42a0-ab88-1fad154ee5b8",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cf5620d6-c89b-4a3a-8a8a-190e680abe42"
        },
        "item": {
          "id": "51e2d897-b119-4f55-aa72-c5a79cbdd835",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "25d0601a-10d2-4565-bce8-b76d81b3619c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fe8a82-9aa6-4d14-b9d5-4638267d35b9",
        "cursor": {
          "ref": "24946165-bcdd-4dcd-8a30-caacad86c62c",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f9053b65-66ee-4f02-b14f-e2bab8c3e34a"
        },
        "item": {
          "id": "a2fe8a82-9aa6-4d14-b9d5-4638267d35b9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3fb55923-409a-4783-93ef-16ae377e9727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e49cf1-3de3-44dd-8982-b7e9dec9e53f",
        "cursor": {
          "ref": "3fb540b2-ae8f-4b92-8424-ddf7604fcf8e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d19c8c21-b038-4c79-8892-62fd21b3bd02"
        },
        "item": {
          "id": "f4e49cf1-3de3-44dd-8982-b7e9dec9e53f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5fe25643-d15b-44b7-ac57-77ccab64c4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0dbd3e-ecbf-4314-a229-181b67f8c446",
        "cursor": {
          "ref": "8d35f09c-6632-4fa5-8727-78f49aa82138",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d2dbf979-c91a-4b1c-9c6a-8d59767cf181"
        },
        "item": {
          "id": "2b0dbd3e-ecbf-4314-a229-181b67f8c446",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "24ced21d-5514-4bc8-a687-82cf686d2044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e902ffd-37fe-4b6d-a50b-711a7036588e",
        "cursor": {
          "ref": "bddee72b-3dee-4b2d-a8ed-6bf3fe883aa5",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b5fbebff-5270-42ed-8cff-ab0f9a75190e"
        },
        "item": {
          "id": "0e902ffd-37fe-4b6d-a50b-711a7036588e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9c20904b-1425-4b9f-9b58-5384615dc306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9a5a66-4b8c-4249-86c9-4197ef10bc8e",
        "cursor": {
          "ref": "f9f1e4a6-3cd0-4260-bd76-92c4a1dec13d",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "98099849-d5a2-4250-a067-26a93301d375"
        },
        "item": {
          "id": "cb9a5a66-4b8c-4249-86c9-4197ef10bc8e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "433482cd-0e60-4aa1-812a-f3f5f60ed2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e137235-ec3a-4f9c-9590-14d0daee21e7",
        "cursor": {
          "ref": "edd168e6-52d0-4e1f-a285-978c7dbaed63",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eff5fa36-a38f-418b-80e7-3cbc3685034a"
        },
        "item": {
          "id": "3e137235-ec3a-4f9c-9590-14d0daee21e7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "be1f7a4e-928b-45cc-afb3-252263996795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172a3d26-eeea-41b1-9d1c-8eebf3873173",
        "cursor": {
          "ref": "e93fceef-6385-441a-9014-bb920a58c1d3",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c0f78528-5441-4da3-af4c-e7be5c07d5fe"
        },
        "item": {
          "id": "172a3d26-eeea-41b1-9d1c-8eebf3873173",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ff4db728-5621-449d-bd3c-667013dd8660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218af75d-346a-475c-9433-4c151d4e8a34",
        "cursor": {
          "ref": "70882846-ee38-48bf-8f9f-f783cd851577",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f4459df7-68bd-4da1-93a3-65cc168051d8"
        },
        "item": {
          "id": "218af75d-346a-475c-9433-4c151d4e8a34",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ae00dc70-0fec-4030-9a45-8d9f62f6120b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291c0847-e5f8-47fd-a6ba-b66ebb0f63fc",
        "cursor": {
          "ref": "613f641f-bbe5-4a27-b0b4-e759e50ac2ff",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "902bc652-f0ff-4793-8f49-c66aa987f084"
        },
        "item": {
          "id": "291c0847-e5f8-47fd-a6ba-b66ebb0f63fc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "80bf38dd-bd5e-4ebe-a239-c2b049efe09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d254b4ec-9cd0-41bf-8879-da4132c5f2f0",
        "cursor": {
          "ref": "80c2c58f-d931-4f34-bf77-de5dc8f1d325",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9282f27b-a314-44ec-aa3f-83e77c4d9bc2"
        },
        "item": {
          "id": "d254b4ec-9cd0-41bf-8879-da4132c5f2f0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ced8ce50-4063-467b-8f85-651f68d9d821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32cbf90-84b3-42de-94e4-39261712fc35",
        "cursor": {
          "ref": "a15ef62c-9375-4f0d-8251-cba6ebc89d29",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7d0c6e57-3f0c-40d5-aacc-e3518edfcbc9"
        },
        "item": {
          "id": "b32cbf90-84b3-42de-94e4-39261712fc35",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "91f824a2-7a30-46db-b389-06e390b26273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56891273-04fd-4882-a80b-4fed7f19c70b",
        "cursor": {
          "ref": "51f9d88c-f5a9-4b20-b1b2-08545bc1ef6c",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7ba53574-af68-46b4-b889-255535760fa4"
        },
        "item": {
          "id": "56891273-04fd-4882-a80b-4fed7f19c70b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5cf2b0e2-a95f-4a84-bb6b-3f8b5c1a256a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05eb5b4-5817-4cbb-8930-311e03937f45",
        "cursor": {
          "ref": "104a47df-8682-45b8-a329-c17d57e32ec6",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1c790e41-f991-455a-bc74-dcc85fd789d2"
        },
        "item": {
          "id": "e05eb5b4-5817-4cbb-8930-311e03937f45",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9c15e567-9f6a-45b0-8c0e-2cd2cefe0235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45d7285-cb4c-4c8e-beaa-4a189cc5b57e",
        "cursor": {
          "ref": "201c96d5-4139-4a90-a299-7be7c7e8b0d0",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "93974784-ebd4-4d0b-b138-85c6f79bf4ec"
        },
        "item": {
          "id": "b45d7285-cb4c-4c8e-beaa-4a189cc5b57e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2ef84d18-b55c-4912-aff1-727b4392a52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb8b0df-5689-41a9-981e-ff39c616c234",
        "cursor": {
          "ref": "734acf6d-301a-4c70-bd4d-4e9271be7085",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f949aff6-528d-47ab-9fe2-386073fbe7b6"
        },
        "item": {
          "id": "efb8b0df-5689-41a9-981e-ff39c616c234",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f8f9c085-8992-4e60-902b-a0414ef75bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d390a36-964b-49f9-936f-fc48da799373",
        "cursor": {
          "ref": "03ba17d1-2015-44e7-bcdb-3c38d9fb268e",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "074ce05d-333d-4f23-a304-a9f8d832ddc0"
        },
        "item": {
          "id": "5d390a36-964b-49f9-936f-fc48da799373",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c2e2170c-28fd-49da-9777-7215d08677b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92cdb22-5ab7-4510-a78c-ca8c6c4fc8eb",
        "cursor": {
          "ref": "f8431751-26ab-44b6-b6e3-a99eb615b160",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c893ec61-a6b4-478d-88e7-705a6184d4bd"
        },
        "item": {
          "id": "c92cdb22-5ab7-4510-a78c-ca8c6c4fc8eb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4a33c424-2806-4140-98a1-fee3e3cb2234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f820408b-0a5b-41e9-b2bd-38b4c97f9d9d",
        "cursor": {
          "ref": "8410ee87-cf3f-4847-a4ca-54fd66fea87a",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "12593117-c646-46a2-a635-a12383d87282"
        },
        "item": {
          "id": "f820408b-0a5b-41e9-b2bd-38b4c97f9d9d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "27756ac1-364d-479e-8841-274cdd0dace3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e56bc79-fc7d-429f-8e9b-f7dbd29f8ae6",
        "cursor": {
          "ref": "a5487f5c-90ef-4a50-8879-442b5ff0e079",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "409f272b-8cfc-44b7-85f1-614090795eb6"
        },
        "item": {
          "id": "6e56bc79-fc7d-429f-8e9b-f7dbd29f8ae6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3523c14a-9422-4249-9c5a-6b5d509c899c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bceacf-e2ff-42b6-86c1-0adc8f41bc37",
        "cursor": {
          "ref": "26bcf11f-4605-4d5a-8ec7-570dfa3365f6",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "74259a27-332a-418c-95b3-2625c0394afb"
        },
        "item": {
          "id": "b5bceacf-e2ff-42b6-86c1-0adc8f41bc37",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "afdc0fd4-bd2a-404c-9c98-43127644527e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa2ec22-9e7e-4f91-afd8-4e6379be8f08",
        "cursor": {
          "ref": "b3e42b92-afcf-419b-93b7-768ab4606d99",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3aed5065-f9d7-4d60-bbdb-f8528821864f"
        },
        "item": {
          "id": "9fa2ec22-9e7e-4f91-afd8-4e6379be8f08",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6f660f7f-8db5-4521-b693-8aa4c0955e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ddb455-4947-4622-9155-dcce8708566c",
        "cursor": {
          "ref": "a293190e-f20c-4d14-979c-99e5603b4f3a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ccea46cb-fd61-4bf5-9ded-85ccd3415721"
        },
        "item": {
          "id": "62ddb455-4947-4622-9155-dcce8708566c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b8126e1b-5d2e-491d-bf13-daa7f4caf02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af488d59-e7c0-4f67-9fd1-1d43d5de4953",
        "cursor": {
          "ref": "af7a8e78-d8a5-4162-9d66-a7e3d96e9a6b",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6c69796c-d686-43ef-a131-f51c2922072f"
        },
        "item": {
          "id": "af488d59-e7c0-4f67-9fd1-1d43d5de4953",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "58d04292-3c35-4e98-a761-2ca9bb583458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621a53aa-8eaf-45a2-b462-5bbf4f365377",
        "cursor": {
          "ref": "1978b385-8909-4cd0-88f7-c1c32481cbe6",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "75ca752b-7122-4e28-ac55-fa6d64068e71"
        },
        "item": {
          "id": "621a53aa-8eaf-45a2-b462-5bbf4f365377",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a5108423-2d9f-4029-a012-fe5a3f789fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3437094d-25c5-4b42-aa98-7bb5963e670c",
        "cursor": {
          "ref": "2edb3c5f-c8ab-4623-be56-e2f421f202ea",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e4cd9188-6f75-47ae-ab2f-4f9c201b9e97"
        },
        "item": {
          "id": "3437094d-25c5-4b42-aa98-7bb5963e670c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "296181be-70e3-47af-906a-ff5a60ff70e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca98efa-f49f-420a-bb64-b366555f733c",
        "cursor": {
          "ref": "dd1044ac-76ad-4e62-a61a-317789683fb3",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "23211bfd-5f95-4e02-8a38-bc666e0c0aea"
        },
        "item": {
          "id": "8ca98efa-f49f-420a-bb64-b366555f733c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "640424d1-df07-43dc-99e4-65893e2f55d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cec4262-2182-4288-badc-10e0661f4386",
        "cursor": {
          "ref": "08458579-4581-4aab-8e3d-737aa9fae818",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "16130fcd-01e4-4523-b630-5b1db93137a9"
        },
        "item": {
          "id": "5cec4262-2182-4288-badc-10e0661f4386",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "51194b7d-4b6c-4da2-bd75-dfc7aa652f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee2fc7c-9e00-42aa-b7bc-9bd41de97184",
        "cursor": {
          "ref": "a9559ef2-82dd-43b8-8dc3-a64b6a953267",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2abc0d54-a7b5-4ed0-98aa-c2081fe165e1"
        },
        "item": {
          "id": "1ee2fc7c-9e00-42aa-b7bc-9bd41de97184",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fe0b582b-117f-47f2-95e8-a219b73081a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc9dc37-433b-46ba-956e-d0d91da3aa2b",
        "cursor": {
          "ref": "230e1026-7d17-442f-90e0-76b89234fe9d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "26ca16b3-d2ca-4d29-8ac4-12fbd6f948a2"
        },
        "item": {
          "id": "ccc9dc37-433b-46ba-956e-d0d91da3aa2b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a522598b-0b12-4884-b311-0e5a71f3b6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba346b99-e295-4802-a904-44ba7992e717",
        "cursor": {
          "ref": "a78cd5e1-ee65-435a-a117-61f44c69819f",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c43c12e1-a500-4a2c-8344-b89d92bc2e22"
        },
        "item": {
          "id": "ba346b99-e295-4802-a904-44ba7992e717",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0ddab552-9e7d-4ba5-876f-15c635eae67d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2c6876-72a2-400f-9d0e-f2b373427bde",
        "cursor": {
          "ref": "38548ff3-0beb-4e4a-9169-da124706c387",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "662c4162-7c70-43cb-b2f3-fab602e66b27"
        },
        "item": {
          "id": "ff2c6876-72a2-400f-9d0e-f2b373427bde",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "355bbd86-a939-447c-9d61-7aee9d30bcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc273e66-4cf5-4f6c-996a-ed15578e9a06",
        "cursor": {
          "ref": "a9113093-e2ff-43c8-9fc2-3c584c84497b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f5d67228-8c59-4130-9162-6545212d6545"
        },
        "item": {
          "id": "fc273e66-4cf5-4f6c-996a-ed15578e9a06",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5545e70b-783a-4010-b373-c5097e104dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e551c276-0572-40d0-ac02-3dcdfa1cd489",
        "cursor": {
          "ref": "57d31c39-5ac4-4afc-8105-5975a0c60d08",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "bb44866e-feed-4647-97a5-8f2fcf0c9437"
        },
        "item": {
          "id": "e551c276-0572-40d0-ac02-3dcdfa1cd489",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "acdb45e0-fe7c-4225-bb58-6351f1ff7ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d59f27e-52e6-4e7c-8719-061d02773bea",
        "cursor": {
          "ref": "d5bf281a-b699-4c12-a647-5572983b806f",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c99d81d9-fb50-4f25-b8cc-5ebba5b9e53d"
        },
        "item": {
          "id": "3d59f27e-52e6-4e7c-8719-061d02773bea",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "43405795-0a10-4e7a-864d-24cdd42d0640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83665bf9-2d3d-4baf-8bf2-82e307807885",
        "cursor": {
          "ref": "87f0eb0d-32d7-4305-a99b-f729685e7193",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "abe75bf7-96f2-4cb2-8e92-180c5aa54c56"
        },
        "item": {
          "id": "83665bf9-2d3d-4baf-8bf2-82e307807885",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d9cd8386-e9a0-4425-9546-ac721ed70c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cb7d95-a615-44fd-928a-b8b5e27c3cfe",
        "cursor": {
          "ref": "ab2b53bb-876e-4798-93b8-61a43e26e3f7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2f04494d-8110-49ad-8945-0e40d1f3e3f9"
        },
        "item": {
          "id": "f1cb7d95-a615-44fd-928a-b8b5e27c3cfe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bb0371d7-648e-4ea1-93eb-0eaa12c12ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa26f327-87b9-4ed2-b534-986685ed2862",
        "cursor": {
          "ref": "9d10e681-5612-42b4-9e60-d20d60c0504f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "48e4a8e3-c776-4b16-8d86-0027af6b1309"
        },
        "item": {
          "id": "aa26f327-87b9-4ed2-b534-986685ed2862",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "acaaaae1-6838-4c9f-ad38-8e9399dd0358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54701853-16ad-421e-add6-574494787038",
        "cursor": {
          "ref": "275fcdbb-e1f2-4c5e-b77e-ae06c42058a8",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fa27b1a0-05a1-46d6-a067-0a89d00854b9"
        },
        "item": {
          "id": "54701853-16ad-421e-add6-574494787038",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a88acc31-8264-42bb-a55c-bd5a759e2118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389a4b0b-545b-49d7-9f20-ee2a43496288",
        "cursor": {
          "ref": "0e0dcbaf-4f0b-4d92-a285-1eb30321d384",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "51c347d4-4883-40b7-b89a-e9db2ed6004f"
        },
        "item": {
          "id": "389a4b0b-545b-49d7-9f20-ee2a43496288",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "310550fd-607e-41f4-bbae-f5f2e3e84e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcb0fc3-d288-4b15-9293-addbe4a2ec42",
        "cursor": {
          "ref": "2fb5bfe5-035d-4d76-a556-05b8f50fcc12",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "18078b80-2b24-4812-9437-6f45121cad2e"
        },
        "item": {
          "id": "cbcb0fc3-d288-4b15-9293-addbe4a2ec42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "99013a75-32af-4e10-8b02-f4746b9373fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32da437f-9d1f-4c02-a8a0-d0a27cf2fdfb",
        "cursor": {
          "ref": "852ca224-d0d9-43ec-846a-a897e05470e4",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "569eee99-e096-40a5-affe-825a4ece441c"
        },
        "item": {
          "id": "32da437f-9d1f-4c02-a8a0-d0a27cf2fdfb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f4d26a6e-b83e-4d16-acfd-24227534f48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe52591-5410-46c4-ab85-12f77b9c88cc",
        "cursor": {
          "ref": "58f68dab-4fb0-4ebd-8893-a1238c72dd3b",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c12f0adf-6caf-4661-96ba-2785d44829e8"
        },
        "item": {
          "id": "dbe52591-5410-46c4-ab85-12f77b9c88cc",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2d31dec0-822a-461b-b00b-184a4fab2590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2189bc-c7e2-4a1e-b989-c6e04a283a8f",
        "cursor": {
          "ref": "8acc6935-386b-4bad-9708-7f0677af92da",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "72336773-9df2-4a6f-9b86-94b929a2e1c8"
        },
        "item": {
          "id": "aa2189bc-c7e2-4a1e-b989-c6e04a283a8f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "870636c9-919c-4245-9d40-53184b854259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fd7579-d80d-4b73-a039-3c6128fe579e",
        "cursor": {
          "ref": "c3830d91-ac19-434d-b836-c6d2594d7d02",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b6aad1a0-4b63-457e-9931-6d284b3036ef"
        },
        "item": {
          "id": "b9fd7579-d80d-4b73-a039-3c6128fe579e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4e2e0500-c9d7-45fe-9685-26ff8bc3a8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00761d8c-0fcc-4a50-919a-837bb98f6a1f",
        "cursor": {
          "ref": "b6f2b130-e52b-4f3a-8f07-8e0af4fe6647",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0496f384-0ea1-44ab-a808-405228c88550"
        },
        "item": {
          "id": "00761d8c-0fcc-4a50-919a-837bb98f6a1f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8325de64-0013-4a9b-8312-d6351f79aada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a1801e-a5ce-460a-942b-16681ac3af46",
        "cursor": {
          "ref": "62ca6b50-c0f4-4caa-a484-d200fced758f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a37bbe7b-4de1-4516-b1c3-758fb2bd6f25"
        },
        "item": {
          "id": "e3a1801e-a5ce-460a-942b-16681ac3af46",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "eb254a00-ccc4-4351-9cf5-94710a0d605b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d472e42b-ac99-4d0a-8623-84758a9ef70d",
        "cursor": {
          "ref": "16e39e28-efd7-4ea3-83f7-b5a066cc49d8",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "167b6fb1-440c-46cd-ae82-cea6c12758a9"
        },
        "item": {
          "id": "d472e42b-ac99-4d0a-8623-84758a9ef70d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5a32fcb0-c43b-48aa-9aa8-6b023dfd675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640c46f5-46ec-4dc5-9275-be8ec5b11794",
        "cursor": {
          "ref": "5969436c-08af-44af-b4e7-d47c43f259d0",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fe621100-a760-456a-9641-8cf4a1fd3228"
        },
        "item": {
          "id": "640c46f5-46ec-4dc5-9275-be8ec5b11794",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4945909a-2240-4718-af78-e50157b385c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9e209c-aaf6-4902-9fd6-33dc276b74d3",
        "cursor": {
          "ref": "b86449e3-74e5-42d2-8d95-35ae1d743d4b",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "132df942-44f9-4e1c-84f0-a3a102945658"
        },
        "item": {
          "id": "2d9e209c-aaf6-4902-9fd6-33dc276b74d3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2d12fe8c-4cdc-4d23-a159-9a785d63e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705ee468-1d98-40f8-ac04-2b11733b902a",
        "cursor": {
          "ref": "f9a8e054-7ad9-4624-859a-64739e319c13",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4ccadfc4-6310-4322-904d-646992d6603d"
        },
        "item": {
          "id": "705ee468-1d98-40f8-ac04-2b11733b902a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "98ac3ce2-45f3-4139-ad40-3c5d99c45025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fbb0b9-de80-4e64-8757-44a05f533a6c",
        "cursor": {
          "ref": "eb243d97-1bfd-41c6-8b76-12862bc255f2",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5b1f0802-1a5e-4fbf-ac59-2c6af285a661"
        },
        "item": {
          "id": "40fbb0b9-de80-4e64-8757-44a05f533a6c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3eb2924c-8746-4079-9878-87577edbf53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918a150e-b7e6-4627-9c38-d2fa20a9d68a",
        "cursor": {
          "ref": "3a6dfb67-a963-49bb-9c1c-b4ae2d922498",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "734566fe-3c25-4cc9-9ac0-2052f44a6054"
        },
        "item": {
          "id": "918a150e-b7e6-4627-9c38-d2fa20a9d68a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f7b9042c-cef3-484e-911e-450b5dc1bc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7fee54-a94b-4a30-815a-b90b0a95ad13",
        "cursor": {
          "ref": "6d5ac2c0-b3bb-4aa2-baac-db7d86aefaab",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2fda2f1d-074a-4868-bcf2-15c16dd35056"
        },
        "item": {
          "id": "4f7fee54-a94b-4a30-815a-b90b0a95ad13",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "113347f2-17e3-4936-ab26-1e32070f99a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ddb3ba-b978-4190-bbf9-cd526141e5d4",
        "cursor": {
          "ref": "988a54a1-a7d4-46e1-b7d5-7aca3d5134a8",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cd6f0aca-0ceb-4ea7-8639-70cb872840f5"
        },
        "item": {
          "id": "58ddb3ba-b978-4190-bbf9-cd526141e5d4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "00ac60da-25c6-4275-8d2f-6ba678111928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ee013a-fdd9-4c1a-a313-8a772b619706",
        "cursor": {
          "ref": "bc435129-63d4-4ac8-9bef-fd76f606f5c3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2eb4dd6d-dde7-4b8f-874c-ff587fbf8a29"
        },
        "item": {
          "id": "03ee013a-fdd9-4c1a-a313-8a772b619706",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "84e8a9f9-427a-4b98-bc3c-af868ecead30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25dde58b-57e7-4cc7-9b4e-718dec0985fc",
        "cursor": {
          "ref": "48704f76-f783-40e2-8af3-657579076077",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9b7c19a4-5851-4de8-a762-d4363133ed59"
        },
        "item": {
          "id": "25dde58b-57e7-4cc7-9b4e-718dec0985fc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cdf85a07-3d1a-4e24-b7cb-6f700a241135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0503d2f-5db0-4cc1-ab36-ab5dcc3e15bf",
        "cursor": {
          "ref": "0593f639-41ce-4f67-a6b1-8c40c5d078be",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "37ca38af-4289-4aa1-9b20-0cb04fc188a4"
        },
        "item": {
          "id": "a0503d2f-5db0-4cc1-ab36-ab5dcc3e15bf",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a082860c-dcee-4ea7-a529-87fc62aa05eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1f250d-1a27-4eb2-84a4-ea4f96fc4984",
        "cursor": {
          "ref": "f5dd5515-40b5-4265-aae5-3c5448e36268",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ad7238ba-b894-460d-b37e-f3b0379772e1"
        },
        "item": {
          "id": "da1f250d-1a27-4eb2-84a4-ea4f96fc4984",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6f872f6f-df4e-4521-87af-79cb4a8a6c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ebba38-bd2b-4431-9ebd-30e2c8809bbf",
        "cursor": {
          "ref": "fb4e2348-7a25-4ec5-9d02-f1706df1b89a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a0159656-618a-4a06-a85a-4dca7cf304de"
        },
        "item": {
          "id": "05ebba38-bd2b-4431-9ebd-30e2c8809bbf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0a8bb5ca-2e8c-451b-907b-063fad66e3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ab7691-870c-4381-89ac-7129794de2c0",
        "cursor": {
          "ref": "f034d1c9-7abe-4771-900f-75f2c60b3c7e",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a769d198-3f23-4f21-a957-1055b91ae620"
        },
        "item": {
          "id": "e5ab7691-870c-4381-89ac-7129794de2c0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5ed2441f-f8f0-4f8d-a285-4d6b0ad99ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e632007-9e11-4403-8d59-10d1a82bcd5f",
        "cursor": {
          "ref": "c7e472d9-3f89-4ff2-8466-1bb580e0ee3f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d391423f-c393-41ba-ab44-c1453ace9d4f"
        },
        "item": {
          "id": "5e632007-9e11-4403-8d59-10d1a82bcd5f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8dcc1df6-3cca-4e96-bb27-6584949ea4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe9b639-6146-4caf-bd40-e4aee7a09b40",
        "cursor": {
          "ref": "5be65558-3f96-4560-8fff-d35e6f257591",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "66abc360-7ca1-4885-b796-90ee995d4503"
        },
        "item": {
          "id": "bbe9b639-6146-4caf-bd40-e4aee7a09b40",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff3f5513-2d31-4be9-befe-724c1e112183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63133ee3-7c56-420b-8492-25dcf9c5a2e0",
        "cursor": {
          "ref": "b505c07f-4c7e-47e3-8606-6f946a866b92",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6621ed81-a277-4898-8f3a-2840eff9112f"
        },
        "item": {
          "id": "63133ee3-7c56-420b-8492-25dcf9c5a2e0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3ccc6ecc-32d8-49cd-879d-31dbc53ab335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eef3028-09a4-4c2a-b4ea-d2a80de504ca",
        "cursor": {
          "ref": "bcc7280d-5922-463b-9b2a-a9f6446e8b8a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1b9fbe99-61f2-4c01-bd34-becbaa317cac"
        },
        "item": {
          "id": "5eef3028-09a4-4c2a-b4ea-d2a80de504ca",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f2d57757-a620-40d3-bde3-c59c0aea07f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd80601-f05d-420b-8140-ba42b7de1400",
        "cursor": {
          "ref": "1c2380ed-e84d-4835-b5cc-a2395ad7e431",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3c0f8361-1148-4284-9afb-03274287a9ea"
        },
        "item": {
          "id": "ecd80601-f05d-420b-8140-ba42b7de1400",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fc06e316-f43b-4c4c-a33e-003b77d0a444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c68e63-dd47-46a8-8d36-ef122c3ebe8e",
        "cursor": {
          "ref": "683377f5-47d5-4957-baf0-587a7d2a5ec9",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d881b209-9970-4b07-a5f2-3a5709326265"
        },
        "item": {
          "id": "96c68e63-dd47-46a8-8d36-ef122c3ebe8e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3d683ef-fb87-486f-b95f-6e2aaeefc1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba7d61f-1dea-4b9c-b919-feffd200e19f",
        "cursor": {
          "ref": "609a19c8-a38f-49e3-8c1d-e4ed4a571f39",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "029b7d23-e04b-4f8f-8574-3d020a1e5ac2"
        },
        "item": {
          "id": "aba7d61f-1dea-4b9c-b919-feffd200e19f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7a838024-f32f-4321-91ab-6aab33c3884a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3887114-19d5-4102-96f3-87e4fcbc2aa4",
        "cursor": {
          "ref": "aaa555dd-a561-4595-9714-f35fcfc25cbf",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5b490deb-f0f2-4fc7-a431-6fb2246ff096"
        },
        "item": {
          "id": "f3887114-19d5-4102-96f3-87e4fcbc2aa4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2968a4e1-2eaf-4444-8ad2-3c37a2a5698f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f9f83761-0ed0-4051-8227-a2d069695187",
        "cursor": {
          "ref": "dad960af-cab2-411c-8407-dbb0d96762e1",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ec66281d-a198-4e33-826e-7abb9a6ef80b"
        },
        "item": {
          "id": "f9f83761-0ed0-4051-8227-a2d069695187",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c432c0bf-d42e-4dfa-8900-d8a0d8dcbee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a55570ad-80e7-4a5d-bf39-075227e36843",
        "cursor": {
          "ref": "723ebb91-fad1-4169-8c6a-26a18aaa8d34",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e172f223-30e9-4f22-b898-ecdf2e34515c"
        },
        "item": {
          "id": "a55570ad-80e7-4a5d-bf39-075227e36843",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e6e253b8-d97b-466f-af38-9e51b2f96837",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "654cf4db-894f-4ee7-af3b-915467d5fe69",
        "cursor": {
          "ref": "0dc9edf2-8557-46d4-93f1-c01cdd320bc5",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b4642309-2725-4cd8-9b18-cd33cb8d6cd3"
        },
        "item": {
          "id": "654cf4db-894f-4ee7-af3b-915467d5fe69",
          "name": "credentials_verify"
        },
        "response": {
          "id": "34460e3e-80e7-44dd-9457-c4baf867a54c",
          "status": "OK",
          "code": 200,
          "responseTime": 2301,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5406c203-8780-428d-a3d4-032b2e9cb653",
        "cursor": {
          "ref": "7f3d2141-a36b-4607-8a58-0a9ca8f62aa3",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "13861b83-6650-4917-86d6-9b9f0878a682"
        },
        "item": {
          "id": "5406c203-8780-428d-a3d4-032b2e9cb653",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "85951eee-e400-423a-afe4-5957b9bc2d2f",
          "status": "OK",
          "code": 200,
          "responseTime": 2654,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
        "cursor": {
          "ref": "dd254162-8b9f-429e-a7ec-9e0b088cab28",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8ba52e8-a44b-4381-9def-873d48670d97"
        },
        "item": {
          "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19261a1d-7fa0-4030-9524-01611aa836a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
        "cursor": {
          "ref": "dd254162-8b9f-429e-a7ec-9e0b088cab28",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8ba52e8-a44b-4381-9def-873d48670d97"
        },
        "item": {
          "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19261a1d-7fa0-4030-9524-01611aa836a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
        "cursor": {
          "ref": "dd254162-8b9f-429e-a7ec-9e0b088cab28",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8ba52e8-a44b-4381-9def-873d48670d97"
        },
        "item": {
          "id": "92b2e05f-44b1-4bd5-b413-94cc86ae804a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "19261a1d-7fa0-4030-9524-01611aa836a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "702c20e0-3a38-4b61-9551-9b1e8f8a7c3d",
        "cursor": {
          "ref": "da91ef28-9d33-428a-a8cc-52e9dd68b40a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c3bec07d-fc03-4d7b-a671-48bce88d35b1"
        },
        "item": {
          "id": "702c20e0-3a38-4b61-9551-9b1e8f8a7c3d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f9b28c7b-21d5-4a42-b717-e50cfede4aa8",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c3a4e2d1-c9f3-4b4c-8930-e69d381d8c80",
        "cursor": {
          "ref": "4ec61ce5-6f33-45d1-9297-c747b7c9c1f3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ddb84f2-7dc2-498e-9758-7bee32a6f4a6"
        },
        "item": {
          "id": "c3a4e2d1-c9f3-4b4c-8930-e69d381d8c80",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1a3065d4-03c5-407a-af20-41f151146213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c3a4e2d1-c9f3-4b4c-8930-e69d381d8c80",
        "cursor": {
          "ref": "4ec61ce5-6f33-45d1-9297-c747b7c9c1f3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9ddb84f2-7dc2-498e-9758-7bee32a6f4a6"
        },
        "item": {
          "id": "c3a4e2d1-c9f3-4b4c-8930-e69d381d8c80",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1a3065d4-03c5-407a-af20-41f151146213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "92e4ccda-a349-4c55-a337-71820b5a4b24",
        "cursor": {
          "ref": "d5c06cdb-31a9-4add-8d54-346112fa78d4",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0fa93caf-4471-486b-9407-fb88887c7214"
        },
        "item": {
          "id": "92e4ccda-a349-4c55-a337-71820b5a4b24",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "27512177-6439-49d6-bcc1-301ca6ab6c9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 162,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b40c2aea-0515-4577-a7d8-e58d1434b43b",
        "cursor": {
          "ref": "3450688f-3b26-463f-b81b-799c09b01482",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bc7d2a32-e3c3-4cb5-acb0-1380f67fa76e"
        },
        "item": {
          "id": "b40c2aea-0515-4577-a7d8-e58d1434b43b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9193c933-9b11-4ea9-9493-09e4a74f2772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b40c2aea-0515-4577-a7d8-e58d1434b43b",
        "cursor": {
          "ref": "3450688f-3b26-463f-b81b-799c09b01482",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "bc7d2a32-e3c3-4cb5-acb0-1380f67fa76e"
        },
        "item": {
          "id": "b40c2aea-0515-4577-a7d8-e58d1434b43b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9193c933-9b11-4ea9-9493-09e4a74f2772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4e788e38-7ce4-47bd-957b-10b6456f1c44",
        "cursor": {
          "ref": "b05e9b01-4066-4e19-9dca-3a1923c999ec",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b6c2884a-6d75-4596-940b-4be7651a6531"
        },
        "item": {
          "id": "4e788e38-7ce4-47bd-957b-10b6456f1c44",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "a7af200a-68fa-40d2-9eba-bc7616a0bd7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}