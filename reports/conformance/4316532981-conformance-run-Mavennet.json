{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "58f8612b-e17e-4577-ad9a-c5e3f9466afc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1b659aa0-d850-4989-b509-356654cceda6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c56c27d5-6988-4bda-b828-386abf538151",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0375f0c2-1fb8-4656-840f-ebdf7daf4a1d"
                }
              }
            ]
          },
          {
            "id": "a6c5554f-f8c0-4dc6-879e-1b8188aee88c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f395ced1-6223-42a9-a9fb-a1c6f85a9e39",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9aa90d6d-d142-4592-92ff-2f54355b5c6e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "82ab9b01-14f5-4e97-b4aa-fb05b7aca5dd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6b65ac2e-318a-4a49-acef-4ac10afd56d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6412bf29-88aa-4a62-b8bc-0c44f8cde752",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caac0ed5-caad-47ba-b996-603cfaf8d48f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f959f213-1ecc-43a2-8e03-61e31c31f866"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15154078-3124-4e16-b38c-dc05552f59ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5516909f-da8f-46c1-b0da-f87930226290"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae247977-d009-405d-a7a8-a467900ccfad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9f1e8b6b-666b-48ab-8d43-aa8570b25bc4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "589825cc-7233-48c6-81e4-3624b12d16ed",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f1eb8e5c-cc5b-46cf-8e9b-c8f786569331"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5b321af-aeac-49a7-a071-eeff3fc7257f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0b879b6-8fdb-4ae3-a419-8f779b6c921d"
            }
          }
        ]
      },
      {
        "id": "f346195e-89a5-4ab5-9bc9-bfed9dd5b050",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5e58033e-df78-4661-afd9-c2efb8546ef8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24bf693b-8d9f-4d69-b0fc-7e2ca889d381",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "89ea7396-4ab6-4025-a298-2fdf96853518",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053bf084-cd5c-4177-992f-efdef640681e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea5eb1d-88d3-45a9-b38a-11177bfae3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913bdb4c-12aa-4184-8dff-29daa616fbb0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214b29b4-034d-4827-aa4c-05f5c57829ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ea33020-f675-4866-bf05-adc13966e2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa23ed97-1054-4c38-a327-3612c505eeb2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac43714e-ded6-4832-ad80-678ad3fd1ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "389c8a89-61fe-4251-aba1-cc097e7dfd6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4cee9579-fcc1-4cdf-81ea-7ce87063c992",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cec2804c-59bf-4e3d-a538-4c20aec5f4e6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21e38c9-5585-4baf-8c13-ece6cf1d634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37f02513-a3ba-4590-8dd2-18c95fcc52e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad56928-7808-4652-81e9-4bf59fd4388b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db14649-7e73-4619-b7e4-947c35e7f7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58fbcf2-2664-4356-94a4-354741d002c2",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19a76f5-bcc9-40b0-b9e8-5ddbc5505d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa93caae-efee-4d81-b471-257f41144106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0353fa-0ead-4da2-9082-13f65ebd0ea7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "168ae260-04da-42d8-99fa-a77b622a63f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bfb3d566-c0db-4ca7-8bed-486d88e8a28e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "472aa817-87a9-4a20-9007-c4285d4c6c6d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3567ed3f-4fc2-4606-b3f6-95ee83c03744",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b6209845-2a87-4386-9118-40a8a040be11"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5387914-ad95-4b84-a0bd-81a04961e2cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "09ddd8f7-b379-4240-bcef-5736f1898723"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac00d966-2746-4193-a096-9b99ddc95193",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94c10c23-cf93-4dca-9ceb-00112b017299"
            }
          }
        ]
      },
      {
        "id": "2096e87b-cf3f-48dd-8d1c-3d511794624d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "71121aeb-0db0-4338-b0b3-8ca9f60a2c25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39a8b171-53fd-43c7-9a8f-d22a21cbb831",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "24cff132-413b-4a20-8c1e-b685edde1e4b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56842c58-8ea0-4510-abbd-00fd4f003a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1676f1b3-6183-43bf-955c-6ef94cfb6efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df18225-1f6d-4580-9ad8-50dd447e1a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c596c32b-2870-4201-a28e-0daad39f9dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be90819-8431-4d7c-953e-1ad60ccaba9a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd69ee82-b283-4595-b69e-ecf4e22884ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054f53f4-bf14-4f64-a411-322cc9d44ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7889467-32e3-47f4-82ff-7716e8cc7310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a99a1c0c-6721-4c03-b860-13be9e160046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fbc788-c407-45fb-ba0a-95daf431fe9a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f359100-90d0-4ffc-a59d-c623013e9572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa97954-c0b4-4217-a087-85642d5fba5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d892ae-6772-49cb-9d73-ad35e8a6ad6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78ccaf80-9400-4f96-b52b-81479dd5a3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978202b3-64f4-48eb-ad73-2fa03bb5a133",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0d52e0-57dd-4847-884f-a1012204c098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cc40e0-d551-4a57-acab-eee65e7d9130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccf9e22-8e3a-42fe-85fd-8c30ac7a8723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e68b1414-9423-49c4-970f-84382bad1c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bf8deb-0349-401d-b22f-dec1dc44b347",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2febb5ab-1ea4-4a10-88c8-f03c49c81150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9b2af1-0b4e-4216-86bb-0a2dbe8371b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d5d008-99f9-4fd8-b1a0-5c51a1e4d54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79b8f2cd-c57e-4693-a142-bc233acec1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8dda8c-2003-48fc-8f8e-54869a8f5da0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b8e552-6edf-4fe7-8fcc-a07d758dd1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1669335d-4dcc-4fe8-b96d-913227746b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753fe18e-9ee6-40e2-a94d-f97fc1bc5578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "746cfe85-c7fb-44bd-9e56-530b633847e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc655b8-b156-4db5-b15a-82beca2ccbe2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abe19b5-c417-49c7-a8b2-199a2ba9d8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27853136-8cf1-4cc3-8d5d-34f998fb14cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44368791-3fab-43cf-b9d1-4ac180fd5a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea5b408a-97e5-4e6e-80d6-2bcf6b63598a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc13062d-de2b-4cc0-b7b3-cdf754042dce",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae425d2-70c2-4d16-85c0-4113d9aa0d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ac3869-df77-4851-b9f3-e85c905ab6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628ad3e8-22ea-450d-8e9d-47c48f559c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85aa1ec7-2de9-42df-9008-17919220449e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee419d97-2ca9-43bb-a945-6157badb6d49",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dee2fa-9371-4fc4-9821-bb6953b0e0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a45c0ee-23cb-4dbd-bae1-c210f2260b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f19155b-686b-4de6-8900-76405ffc197c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e428968f-3f95-4860-966a-509a775ad662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f436423-9b2d-4caf-8f2b-8f983a9a30e2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cf6e76-348a-4c76-957d-72806e13217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411bb0ae-e5ed-443b-848e-86479e17c314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e94e579-a975-442f-90bc-428a147dffa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0475add8-72f8-46d1-b71b-ad280a395a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379347cd-77d8-412c-921c-704f2018a0a2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c51149-575c-47a6-acdd-cd8b2ddab6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d0addb-dc66-4290-aab2-849b12cb43dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41821e2c-3fdd-4feb-b56b-4399345446d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8228e831-878c-4055-8a50-da1b23f57878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2accee-8b02-4c3c-b37b-f3d3aa70fbfd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfec983-b035-4109-9718-cede32a1f716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a68726-9f3e-4cc2-b003-0b745eb19a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30eb91f8-3869-430d-9c8d-ba04b860f478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66447da7-ec84-428b-a513-826878a1d2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adb42c9-9577-4c1d-b169-653c879a291e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667512e8-c909-4656-b1e0-cea9acf8a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2786977-d7c3-4615-87f4-150e4700bba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7361506-ea5d-42f2-9c12-f9c7abbe35d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0543ac4f-4920-42a5-acbc-9eda8a633eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aa6687-e393-4c0d-b753-32edf4705e4a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d87c4b-d90e-4dbe-81af-c4b161c69b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc61d94b-c71e-4011-9512-05a5fd4a1458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec49537b-a28b-49f3-aad2-65008699738a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac3379b8-dd62-4dc4-a5ed-5e5774874e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e2a2b0-b6b3-4ce9-bf85-06412fa793bf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d055c35-3ea4-47a3-ab32-c42da1b1e972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d08a76-a4c8-4433-ada9-e489f82c923e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf7d89f-5d79-4792-83d1-b3e0b5584794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd917b02-c33b-4cc9-94fe-9f6a9d8972b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b212dc-ca5e-4ab9-8fb8-300043feaf41",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec0d83c-c676-4bd0-96a3-2ddfd4e26a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76fd3e21-5a89-4fab-9292-8fd5fe5ccce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304436ae-81c6-41fd-8f9a-0e3b80d910ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95c80478-b196-488c-95bb-8eb5510050a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d730ca5-5c45-487a-84a6-1d858b506257",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d03c764-165c-4262-a99c-e30a597997b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc07799-aca2-4b92-9d05-fc7ca9b9c732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dee6b9-2db4-4599-84e0-caa831e8b8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b25e4bb-3865-45f7-a0af-98424deade44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8cdc09-7465-40a3-9fcb-fdeab867f8c3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179a1829-30b0-4216-9661-712347372dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2637a85a-5506-485e-b0d9-7b7a070847ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6dbc7c-5513-4009-8716-cc44a69f71f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07220c6-d386-4db7-bcc0-e67f0a2c7b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2da96ef-af18-4cf6-8114-e2bad3b36bed",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582b1c7d-b216-4a50-9210-dfd08427036d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2f8d1b-b118-4a4c-83bf-8c106034ac07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab728cb-1b53-4e58-bdd1-87f781e91d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9414e3b2-95bb-4811-b242-a7568c2615c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a53727-fe49-42b6-9def-40a60cfa676a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f66146-730e-4c90-97c3-4ea49b6f0758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e2ad7e-0d7e-4135-b54f-674ae82a3970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333b6504-a960-4078-979c-14e9f9da0044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60cbf570-7bfd-44a7-afd3-160f639844c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7196d45b-0ea8-4724-874c-c4c37398a642",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f67516f-9a36-49bd-9d5b-d238ed4281af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9daf074c-579c-4248-b3c5-db02c1914644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a682cd9-4816-45a1-a90e-2b389a3d2194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45710f42-a103-4067-8b23-b5718002526f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33eab9d-8713-45a9-be1c-45897762922f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ba1b76-bc2c-4ddb-9f7a-acdd3ba9a501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47829a76-ac69-4902-a536-d63f93e412b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f557edd3-65f8-444e-a54f-92e62a2b29e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f57d91c1-1381-4307-9db5-1365df968c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7784613-098f-4e9d-91a4-c34d404983fe",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8662ecc8-4001-4bf3-a6c0-bf4b3ededd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ab1899-6d56-4f21-b982-9679b4469518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15ae78c-a28f-49d7-8d94-04b05c54c979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0770283f-24d2-4188-995e-cdd0a6914708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dd601b-a892-4be4-91a9-0b5b1a1954d5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56c1eba-4718-4980-975c-fd4a9aaa0e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0107e22-c4be-45ec-88f0-bbbf14d7973a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48979b1-ef54-4342-9cae-04100bc54e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "78acb016-8024-4482-9103-d8c10741275d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c887a3a-6b69-42b1-bb2a-ad42fe32d313",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd922459-aecd-415c-b8db-210b0b36bdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5ac434-717d-4d22-9b39-83423401dd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b5dd6c-d369-4dda-b16b-74151a665f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45e1f66-8f19-407f-bae0-4ea83b90ef07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e497c5b5-5047-4e8e-a444-615db5f385b7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ba7505-8263-4f4b-90b5-9a9296417a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e260ced3-9817-4b51-96ad-eb64705e5c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0e9b1f-8942-4ca6-aad9-afb7df6bc39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "359b7c6b-cb53-437d-9975-46c69f45424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4380b6b2-be42-4a2f-bc61-50ed53be148f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dc79fa-5cc6-4ee2-9607-443c491a9a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf28615e-e203-4411-bf9d-3675dfb35699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580832d7-7bc5-466d-a65d-e5fa708c76b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df2e163b-4412-4d41-b28b-3a498e27b3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e7c7d4-64b0-495c-bbd6-b1bf5725f8db",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f516b800-37aa-414e-80bc-99deeb224aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4e3ab0-1b4b-4fe4-ab7e-bf84180d5b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12649c2-c2d0-4561-8b2e-07a2d12188bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "479bbe7d-b1de-43d9-8b21-3985e2afc287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0efe07-3ab3-4468-b0d4-a898aa7e6914",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321d5307-1af7-493c-8921-650d42255b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f772b5f-770c-4f61-9e7c-e988c2d32826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352e4b03-bae8-4280-bc21-7d8ffc0ce17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "49022f8c-2a9a-4713-a752-d8b974b014ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971e032d-c03a-4a8b-9240-87d776ab8341",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c412f254-cf86-411b-a83e-484317f43e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0cf17c-e350-4f24-831c-64cfa947de1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa68204-c62a-4381-aedc-e3fbc9e210a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b4c45d6-1527-4a54-8aa5-74055104de29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee62996-ed53-4b12-b584-9b889177b4cf",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6bf0b6-13e5-4a45-a1a3-8a6909226fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6167516f-88a7-46fd-8660-164f4bc2e0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10da7b32-3f74-4cc7-bf67-75d9dba8e6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "721a79dc-5daa-4afc-a62e-104ec620cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7c2555-01f6-4058-af95-2ee9378106ac",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05ab350-26ab-4692-9db7-60048c4ecf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748955b1-2a71-4d0f-8627-8eb3ad957c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a300d1b-7afc-4884-b85f-f788d2e97f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da8594b-5b0c-4949-8483-2b93b33a1bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f5f91d-761d-4660-932f-fc7afeda2939",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676540a9-2ffe-46be-8349-b6f272fe8479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da90040b-708b-4043-8cda-a356b98e831b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3e0705-86f1-4830-9d19-c69f000dc4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "affad186-cafb-49dc-8eda-7dec5786c698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c76f2dd-df44-4160-956d-9fb679c9b188",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e54d2a8-7b72-4eed-94f6-6ab0e08b9f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70aa386-e5fa-4bec-bd8e-57ad13815519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8507646-e82f-4ccb-83ac-e9fac75ab8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35617545-b406-4d3a-906f-340dfb348356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a571f5-1f99-48bd-ba0a-c08b3275b001",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52645a0-488d-4532-b663-d906c6b3d406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730eab33-2e93-4358-8524-fbcab929c767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68e9252-aaed-4fb2-83d8-7c4a082714b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab085a2-9617-4aa5-973c-56ddcfcb539f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69ffc5b-a9b1-44bb-9691-143f98039425",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5751c8-ad51-4b08-9215-e4259f1f2833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a43b9352-7145-4dd1-951c-a155d83c5ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7c3505-38de-4ace-8e0d-769489c036d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f94b6d6-45e1-4e98-84bf-7a284e7717c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1716bec4-8eb1-4c4c-9671-9e1dcd5a6417",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cdcea6-4169-40fe-8f52-f9d7a1c874d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c54bed-c72b-4c67-b81c-18d35c1eccfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aac7c4-e4d8-4301-b6c5-79bfbcf7607f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23de6cff-e171-4adf-8ed2-e17c46dbdcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2cb885-dbaa-4818-8919-e9d18ba29620",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946f0211-5282-4d48-94f3-3bb2b54b8b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512c191b-0922-40ad-a01a-abf98a1465db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12214e9-2015-433b-9bbd-5e94eb6d1867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "97464db4-352e-414f-8860-cd9bf78a5d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c746795-456b-4679-bfb2-91642c5c04ef",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5012c8f4-9574-464f-a856-f56301c320aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a831196b-5fde-468f-9a76-537e296d2a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c10bda4-2a7b-41c8-bc4c-0f5590d16d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3f6220-7669-40b4-8cb8-54a85f1acd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87ac23f-6041-4815-b7ff-15e1c7ee4daf",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6287ceae-75fc-437c-bff7-ac49ad9cd287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd99dcfb-3084-4d2c-bc60-995b7084b254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d02b2e2-6bd1-4120-ae67-43a204016fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1fcf5a-aade-4196-9d79-73b9f43956c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc6bc5f-a8b0-47d4-a37b-dfd45bb94054",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac451590-27e4-4917-b98a-2a217a63394b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888e82f8-608a-4a24-9f8b-ad7caee8ef37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2890b8dc-b5c1-4b8b-96b6-4ca390cfc02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3274168c-4f08-474e-a98b-431a2099ef4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd62f72-53d6-40fb-96f7-80282c40f27c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b36fb6c-f9f2-4f7d-b07e-13a8cd19a9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04052d7f-7f4a-4308-bcfa-fac1494e3967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34f5ddc-986a-498d-b57b-9cddb3eacbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "67802cee-860d-4f00-a00b-2ea83c3608d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6322f87-8698-42e9-8828-28943dd1f197",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8411f826-28e0-44eb-93ed-b36101789130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e28b47a-16dc-426f-83db-d621d166e8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ad1ebc-829d-4c0f-a0fa-2b7e9397d5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb28cce-639c-4e45-9877-ac6fd9ec28be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c296243-cc29-49d1-a333-d9e5b457c2fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c184a2-2473-4dd3-8aa3-3ed0f94f49bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da063b96-241e-4c59-8770-f8d8d9fea71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb2f85c-c43c-4b68-a809-4d3c9d319d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d83f89e-bd5d-48b1-8e6b-df9a911e2612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730f6988-3588-4cf6-8232-60f4c6b9809e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35cf0d84-c46d-4fc1-9ab7-7e22cc8b5d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336655d1-39e4-4a7d-9ce8-5ccae39f81a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c04dc5-91fc-42b5-85db-7225651edbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f927cb1d-f231-4fa5-aaa3-40ba7f0ca053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d930b0-20ff-44e3-b838-4b38d83eda5f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6671ef4b-8236-4099-88f5-e1db0817ddd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1887ada8-e97f-4d9c-966d-b3b4beed2e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8607712-af82-4187-a8dd-f5bcaba589b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a731e70-fd6a-4056-bd3e-34ecd544eac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08573775-a3dd-4c90-ba8a-46bac189bdb3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06919f9-922c-4784-b77f-bfbcbaa7a442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c57c15-5b15-4396-a8b2-7f482af39d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0240a3-d3fa-48f7-86ee-6852d2d3d2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8490099-d8c8-48fb-b798-19da847cf502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65311147-2459-4a67-9994-e9182ab1ff67",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc8dea2-a46e-4f13-a446-0eaca9dadcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68783b4e-ad58-42af-b01c-e5d68670eff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ddaf65d-a84e-445f-9a9a-5730d7e7d066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eef3de7-f9e5-43e4-82c3-0aded1ac6a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51626d3-5456-41f2-9783-9155e2c91655",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a20837-8e25-4087-b2fe-b677fd8bdecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5dcdc0-9734-4bf3-a000-874f0cdd365f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7820dbdf-2813-4852-b518-859b70b6a285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9ae8cc-bc00-4c88-ab63-cd23ac1bccf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589715ff-1488-4cdc-90c1-4e3031547a72",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b40c58-ed7b-43a0-a4e5-43488b949847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28791ae-6c19-4f69-bffd-05f63d5b31c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da57a617-535a-499c-b1ec-b6a43ba453ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b543d4-abc1-4fce-8469-2181761a6e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16448e4-e1ec-4d29-aacd-3cacc886d49a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cac68ce-3bbf-49ca-ad4e-293e5c31d611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98cf0225-1d9c-4e6b-9e4a-341aed79a600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0166f31-4a74-477a-b300-9033ed54e837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fea8cab-5511-4449-831c-4ebfb5bb812a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a069a6d1-4bcb-426d-9d9f-c393b3f9da42",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4052c7-ba43-4edd-ba20-c03c637d4ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0c6fe1-b6d4-4c57-abdc-625541025b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e77cfa1-dd2b-428f-b0a5-167e81e7f218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d528f97-23f7-4776-bfab-91f3b7de0e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49754c79-62ca-4970-9a57-21633b216593",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fbaa07-9d99-44f8-adf2-bd60d2a31ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f107b0b-34c8-428e-91c3-cbee9658ad1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f10eae-9054-4e5b-92a8-fa215a8829f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f109a4-15eb-4d27-b51c-3893a49dc86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbb1576-e5d8-41b0-b2e6-01f69f75f118",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff49cb4e-2d9f-4e14-a373-3ee2cf99886d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74e55a0-aaf9-4171-87ae-f3e0190fb8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75326501-6fbd-4949-bcc6-bfaadea5e507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d22d32-8249-498c-b657-a74171d79c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958b5c7d-403c-4069-9b90-58198448a17d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c06336-d046-4eff-8358-847f62161a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12aeb0cb-2468-4560-9dc6-726119177aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8460130-6d4e-4200-a78b-203637820be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a34f11-cfc8-46d8-a951-82842918b798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e490bd-1e47-4b7c-9b0d-b287f98731d4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb42ddd-3031-4282-909c-75392f03d2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36cf5c6-440d-4ed6-a3a2-3e0d1e4bf9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275e9e87-b391-4974-8524-c176df1f934f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5e78eae2-a8f1-4102-abea-338fd71b0b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446ece21-0182-46fe-a8fb-a4d9fdba6024",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e8bd1c-6150-479d-9f22-6edad4a5df07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7230f72c-3a1c-40c7-a679-67f78a93daf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7d86d5-739e-4b26-b62d-18bd9ec3a087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8d4f04-63ca-4d16-abd8-4cecbf2c03a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251ddf33-52f8-45a5-93bb-7151961a48cb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0023d58-bf97-41ed-a27a-240e5d0e75d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1948de76-8031-4a87-b330-759c0cb3715f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6be8a8b-7265-488b-98d9-84360423ba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41319fce-9589-4584-860d-cc539f021fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277bc98f-1e6d-45a5-a97b-15000082b3e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cba8395-8dfc-4ec9-8d0f-8b4a670cd10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e727594-ef2b-463f-832d-d14a29eb7d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bd9c89-f89d-4167-bba3-11ec35ed68e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1853a35-13ff-42af-b15e-3a105f2a3b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58718ed0-d588-46bd-8386-37bf87f98937",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c8f404-05cb-4cfc-80a6-209cf3ee29e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf6c20d-56bb-4cfc-a4b0-fcab04207a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540d462e-8a19-4151-8e35-36fbe461c1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff15c751-de0b-4edb-bf87-a904b7c30e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9af9a87-f1a7-4891-b050-677e311103e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad05377-6d8d-48c5-8ff5-60e62e472151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89fc1e3-f934-48eb-8d5e-8adc6fb0819c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6cd256-4d91-4d5d-b3e7-613ba527a9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4f550a-b311-4325-bdee-793b6f9a584e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfe675d-cc96-4621-82e4-1cfc79915d5d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bc896b-53ab-441f-a104-95db22950b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb81c13-6555-4a24-a6d7-2f73d352bc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264bf5f6-8eb8-45e7-af9d-003bb662861d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1dcbba-fbff-43f4-9457-f290264ad1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdc288f-482d-4836-bbcc-f3751f292871",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "604b60fe-e068-43b8-8e84-06676fd5a7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b768e51-b7eb-412b-b228-5557d167af3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ced9e8-f64e-4c70-b635-6820fbe1a66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d11d8dc-f203-4636-8767-66e5edee6db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93477682-915f-498c-8d3e-7351b73b835e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f345586-e7d6-42fc-b45a-20b4a7e2fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f4567d-c90e-4436-82a8-8604963ebd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ca330c-26a3-4884-9c03-4355c8abb33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69edfca5-74de-497d-a6d8-946c75d6f7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6279092-4cd1-4668-a62b-db80c8886dce",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55d60b2-2669-4ea1-8de3-4651ae810fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae0bf98-b352-4e40-9660-a58ea0b7abfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7000ae7c-1103-4c49-9f65-4e5079fed96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05a0a9b2-0040-4044-9f96-5e583b75acc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebf7107-8883-4366-958b-d602002b004b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b1d680-eee5-46ce-94dd-d021864a1ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b6bd28-322a-4f20-9114-bc73667bc76f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e5267f-21f0-42c5-a986-d2164fe56b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63183cd8-bbd1-4427-98f0-5ae45daeee53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652edab1-9d71-4188-871d-fb2884d73f49",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bebdc63-98bc-45be-89b3-bcbebdb6e1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaf831b-4ebf-4523-a527-fcd53d8c0cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9949ec7-d3b5-4bf4-854d-6dd771f5eb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01bd9b8d-b070-4fcc-abd6-cffea1316ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6377b5-e868-4b08-bf99-2a418b40f1ab",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a757d172-73f1-40bc-884b-e3d7cb3fb6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dec757b-2161-4c7e-950c-4d36e43b44ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0986a9-fda2-4745-a117-4628c68c36dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d51be5b-594e-4e18-af2b-2dd320ba730f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea82df2-5e6d-49be-af59-e99ab5c0e9a2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15bd530-612c-482c-944a-53fd980e0cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ee4195-fe04-4aa1-ba54-39fa5f2fd8d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e47ee7-aae4-4d16-9c78-cc02f7461cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "68049e84-eb73-407f-837e-eba13441bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12da44c6-8d80-4b6b-9f28-9eb1c82368ef",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dddca1-5182-4327-b7c0-24741c434d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a5b913-e849-4d69-8dbe-f4535fdcccf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7553726a-1299-4e39-8cc5-d4f4b24ef1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "964d3645-3375-4fc1-97e5-b2a54c1a879f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a555f7e1-144d-41b4-8bfc-6f09c93bc59f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d4a1d8-afe1-45b0-aea0-07f66101fbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e0472d-5e3d-4747-b70f-7ae46f5d6a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f79054-001e-42c7-9cf8-83acf15cc5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01535a85-18c7-4e6d-a952-45d603b103cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e4764a-020c-47d0-b5bc-5d1fc681bf6b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6200418-e918-4cca-8f97-945ccd1405a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bb461b-74de-459c-9124-e86290361e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cc028c-081e-439f-8f34-82582616e1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d84f460-fd0b-43a6-af33-ce2d0ae16610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd18453d-5358-4623-acb3-91e413152e24",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a343a5c-949f-4695-be87-ca4d85d79173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce52f96-d8cb-4435-958b-13868974f243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84623087-b778-4e3c-8601-c5c9bc69ce80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dba633ee-5ea0-4d12-911c-c6e5a37fede6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad8ce59-acb2-4efa-b1d8-817ffc432713",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a91b727-3ff3-442d-bb01-d064542caf50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015ff2fc-9704-42b4-855b-58e06a0fc776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5de5b8-5fcf-418a-9452-4d080ec8e7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4292a707-1941-4e8b-811a-fae0b9e9862a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc11ec4-f161-4776-ab2d-dab3b292f366",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c181759-2f8c-4bda-b243-8b8ad4373f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264d2d41-afa8-42af-9c5d-0fe31c8372e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab055f8-955b-49be-9fb5-176c7864484e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a23648c-7d97-4bed-b936-9311c51f2266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0374eb99-ee7f-47dd-837b-eae976df7abf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bbcb5a-0c61-451d-88b8-c070383d2d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8a5eff-89b1-41f5-a04d-6347478c9d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fccb4c-ecfe-4b96-8969-466412bbdb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4db56e74-490d-4359-9964-4669b40df535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b1488c-9d53-4cda-9dae-98e2d7301b3a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892a25e-0f59-4565-9f19-b6d4511ce1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b840665-987b-42a7-89ac-a03f00c5c611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b383633-dd59-4f6d-98b8-6d294021b29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "780e9910-ffa8-43eb-995d-fc60b32b353b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6914e8-5c32-484c-b27c-a7c59e2d4c0a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637e063a-7381-46a3-a6a2-19fdf164c0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3363ea3e-42f5-4734-a037-8f12b2d5c6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d51104a-f63f-4d1d-91db-2390a520af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f06154-e572-480d-a883-d67e22961da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44cf121-dcaa-4d6d-b7db-299d42aadf76",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7557d4-aa29-4f0c-9baa-ea55110ad9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628a23ee-af4c-4237-bfbd-296a2c0528e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1c6ee9-e2aa-47d9-ad53-740bed3f4ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7293a6a0-ce5e-4cf5-a955-ce510b8084b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292dddeb-7506-4448-81dc-dfad64563c9c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8f4d34-f1b8-4dcc-88b0-1ea3182bc179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9601693-5316-4fb6-bcb5-0f9076029dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce66d328-b343-4ebb-9fd6-d011f3234058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "314d57ce-6fb4-4654-96b2-6347aa909348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4154783f-e943-4749-90bc-97861375e7a0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff0ca4a-1ece-4846-94b2-cbac6cd00e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6475e16-63e5-4c66-b32f-4059be3e57e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d57628-ec88-41db-a63c-e817d74ef402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f7adbd-2ad6-4db9-a347-a8820dab305a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43589772-0f09-4b96-853b-e5334e9a122c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01a7e4d-89ee-41e2-8be3-896d06a9add9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488ff1f1-ee73-4f9e-b7a3-68e927519a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44d3944-2b62-48d7-bae9-cb6e0fbade55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b6ed4e-2a98-4332-a698-4ee666191015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fb59f7-a21d-494a-b5d9-58354d0d0ac2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2de844-7e98-4e78-b8b6-9b7525742e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ab7897-94a0-4836-bef8-0e6d15aad47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0f5b7c-3711-4f4a-bf98-247f7f28fe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb5784c-d2e9-4c15-9b3d-c9ea71c020e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71917f5-467d-4353-be83-a0775a9adc79",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583927d7-3984-41e2-9621-73f13f9abd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c286a854-9d1e-4b8d-be71-f2cd8d564b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08338ed-404b-483c-9d5c-c5115f1ef79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75057226-0f31-4b40-b063-35ccde0478ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773d5e34-810c-4a26-8334-aa36006bd9b6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6467ff9-87c2-49ff-8a35-5c75f2ebeb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7756df-eefb-4c69-a3a4-a75bb22298d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709eb7bb-1d9f-4ee6-be7e-e00aaeb1064d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25f273fb-7c95-41ed-b400-be0e64ba5b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1e4d7e-c2f8-444b-abe2-863c1f0e148a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d185b7a-a638-4b93-9fac-74de50271d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f90855-6529-4001-89a5-6e5ad418a2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba75ea09-668f-46e6-8fe6-d12aec7212cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16230c1f-6484-47b9-9d8d-b631f697f68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c701c8-d8f4-4a80-b032-28998762c970",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c56845-3f5e-4df2-99be-b04341337da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b2f394-dc2b-49e4-8ec2-776ea1ee257d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8874b62-0958-4a58-8e90-b611b4de776c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c5fb91-85de-4526-ba13-ec021cc5dd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1b3727-04d1-46cd-b1d5-75031c930f24",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c1aec-ca83-400f-830d-43f2ba0894a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d8c958-b006-4806-8e43-cce041eed7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c60696-d790-481b-a5f6-cd2920523842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ac9df7a-4a51-49f2-93f2-361451af7093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81edc3a9-3e26-47a7-a6a5-6c9227611fd3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85acf3bc-3171-464f-93fa-91925917c5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b15c71-c7c0-4a84-944a-2820296c7555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2466dac9-951e-45c3-9d5c-1c86495810e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "019b3e7a-fb09-4f7f-b348-269f9b8aca7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ae82b2-b760-4fc0-a33f-3b4bc4fc3253",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88e68bc-c9ec-4be7-9207-bbe5f4bfab78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3868ef52-2b2e-4629-ae2d-c583e059e065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc236472-d89d-4e5f-b15e-1d6f786c52b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cac4a32-515a-4c6b-8623-79146d1b05b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb36d67b-378f-417e-ae76-0589a76fc866",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea9db30-f848-471a-82e6-47805decb275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1a3781-8c08-4009-9654-ac1ef4d234a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc6cb8b-2823-4323-9c45-2042e9176fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "096ca4ed-10d5-4bca-afd8-dae8c3cabc36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71870263-664d-4423-a770-5d8429381473",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2414d0-b0aa-422a-bde4-504e66f7bed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3bc16762-929f-4dbf-be21-02cbc0162fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83eb7bf4-e65c-473d-aae8-b37eef7da193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec9c2ca9-b7e8-41ef-8b6e-f123d7f45bb4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e68f53f-da5f-44d2-a2e9-f2889994e03d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d682723f-6cc5-4e7d-9ba8-702b841bbf4c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c663330b-ab68-4d21-a8bd-894c29a479b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7b753cd-232a-49d2-a42c-0902dc3702f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d64ea4-0cea-41c6-b6d1-1d0ae847fe67",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c026ed56-7c3b-4fe5-8131-a46f2f6547a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b726c65-7677-4f34-bc9b-9aa0d34d8094",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30e5a1a-3887-4e4f-b800-49a61e0f6b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73432680-4be7-4082-b9dc-96e5dbda7f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141a583a-c658-401b-9302-063aea9859ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f87b6a03-7619-4096-a66d-220452ac7713"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4fa31f6-7c62-4156-88f7-eae4af303c58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "189afe63-f492-443e-ba8b-114d33af038a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6c4413e-0204-4f7d-a708-8c3c4cda65c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0a5c722-c369-4e04-a15c-2f3b7f41eba8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "906ef7ec-29b9-4eb4-9aae-bda088cc5d8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df341336-725e-47ea-a2e5-60804ed97b2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "459f4fa5-a19d-4fda-8adc-f32eb4dbd354",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b28aeb87-fe44-4429-896c-cae3c5b2d704"
                }
              }
            ]
          },
          {
            "id": "c166a3a1-a7c9-4c32-9e3a-374b85573cef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "415f6514-f010-4f0b-b268-43cfc261acee",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a760474-2d4b-4475-bce7-b9fc81a59dea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b0e1930-babc-4a80-9094-c6e1a6eebded"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfd76e8f-ec79-44f0-a49b-dbca8d531785",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44206e7f-9a16-4c89-825e-8581f60047a1"
                    }
                  }
                ]
              },
              {
                "id": "aa0af1ab-f057-46ce-8efc-f52c298b60be",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19359b6d-ec4b-4a55-88d4-5e7c0ece4b5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e52ed53-d61e-412f-989d-8a9c35ad209c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "350f6177-2c90-4523-9b40-a210517cff3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa32ef6f-6409-4e0e-8c2e-3dbd989cbd84"
                    }
                  }
                ]
              },
              {
                "id": "f99720ee-ebfa-4852-9d67-b406414929f5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "845be64a-1cd2-4acc-93b0-1c986b7e6c92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b8182ad-f019-4d18-aa52-1881c01db334"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f927054-e7a6-427a-bd31-ed61c87d4953",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "43f62504-5864-4ea6-8aac-0268b7522042"
                    }
                  }
                ]
              },
              {
                "id": "21d406e7-92b0-4896-b6b8-fe3ec47888d6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37659d65-41c4-4442-9729-d825a06d0bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4ad380d-4c2b-42aa-9373-cf236e943b22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b16aa2df-066c-47bd-93a6-9e4b9238b7e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "79bea076-1169-417b-ad56-3d74fce49ee4"
                    }
                  }
                ]
              },
              {
                "id": "41f4eb09-4716-4ef6-b7c5-6a9178765efb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2df7412-62ea-45cb-95df-9cfc6eaeacb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25b3c966-5f53-404b-bc2e-b87fd288e6f2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "160ea6a8-d3a9-4240-906d-caaa5925f19d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25bf371b-d1e0-4cda-be54-c7caedd48033"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fe48a19-7aa5-4b9a-93dc-dba573bb0621",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cc635fb5-0c40-4e4b-b68a-6a16ea4f0fcb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "530fb33d-6527-4bb6-97f6-02a66682952d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44631101-cf84-43e3-90e6-e75db11824f3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ba800ff-8212-415e-894b-6a959528a08f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a9267447-1b01-4d38-b077-f454d51c0364"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d739707-254a-4b5a-8949-331df90e49e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab4cb72b-0f6f-469c-8a8c-ee0ab6b21a08"
            }
          }
        ]
      },
      {
        "id": "71e44537-b093-4f17-bc20-bdf7c5328bbf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8444757f-0455-4fec-8649-c74722436710",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ba4ab4d-c390-4d33-8cd3-6690bcce0d56",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53c234ac-7796-40c4-8aa9-077d1a4cc5b7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0585c92-42a9-4e30-b049-606e0669a713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae5b29e-11fb-4c3c-9fc2-d2a72c615f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4c565d-386b-4032-bf9f-b00d6282e447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d676797a-40b7-4242-9cf1-09c5925cee2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdefbf42-960a-42f5-a076-2672418e578b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e12f091-e11f-4360-a749-e85aa8620944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559dcee5-0a0a-4cc9-b7c7-c4f1a64d4e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cf8347-4d52-4fc9-984e-2c2f099c68ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "124701e3-04a7-4496-b830-eb537e0d21e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2bda564-c67e-4b19-be02-4f8f971c30ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b695ddc9-255a-499f-970c-fea7bce39994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d62d511-f100-4323-8542-13a202891440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f766ed-2786-4063-a3bc-0936845cb856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be94b00-6331-4079-9562-33784262ebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e6abf8-2906-4e28-990e-be4483941ed2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b29027-eb6a-4af0-8e3b-de2b47f0273c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d61b622-84d5-498a-a16f-e537e8dd3ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81b4ef-ef36-416b-9928-4281bbe4056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7819ac-66f0-40ac-ad99-401407fff5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf4551f-70c5-42ed-8867-73bb47db40ab",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e86447-25e8-4bea-8043-95aa3d25443c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d5c479-b3c4-436a-b6cb-2ead18d4d773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38008a2-8aa2-477c-a036-3bf578664f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad1c49bc-f64c-48b2-9abc-2c956a9a41e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95c59fe-96cf-4426-bedc-db45c61ed94e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeed1ba8-e252-462f-a016-5eac294ed671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6d654d-9fd4-4517-9421-2f2c5eb83e1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cf41b7-ec6f-4b13-acfd-608938cad52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b307650-393b-49fb-aa12-191db4e6f20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cc7703-cd51-450e-91b1-0f545d53101e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838b4fd5-6ce9-4ac2-b022-71782ec90a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684dd405-0ef5-42d8-b9e8-91af1805d785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbafa249-a41b-42d9-9abd-4173d1f658ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a60dcb49-3b98-4ce6-a783-7edacfec4231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f473540-8964-476f-a094-4edb77e74f3d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe15035-b3b5-4734-8909-6e0b81c31068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac9de36-903b-4f64-ad01-bc2dcfff01e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6980e8b3-d898-4bea-8eae-c1f6f5fa9fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "519430e4-7bc8-45d2-9c9f-a7aa4673aa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48413c8-5f02-43e5-a653-780e52e3e9df",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e532e87-c993-4f57-ac62-45dbf3263bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7b9dac-83be-4f35-a7fd-915c08488b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc8eeb1-87f0-4612-ac50-d9f783452cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3053442-0869-467f-9441-8abe66524764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8abb37-ca8c-4c98-b609-f59afd86e970",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82a35d1-443c-44b7-a08a-c6767a2231d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552d96bb-9cb8-46a9-840f-9a5107b4146d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c05f42-4f17-4433-b996-b0da42d3a821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0787992-c6fc-4e10-99fd-3951228fab58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf377c3e-cf5b-4b4e-82d0-aa04fc253519",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73edfbe-936e-4c46-bc16-fae79ccb3948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5f4105-b0f1-4272-871e-b959c985bf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb656ee4-20d0-440e-b8aa-5aac0fc19695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "db80576b-c431-46e7-9f20-5aaea29db4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f7a07f-f12d-420b-bf5c-e05e46b94122",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848f358d-26b1-4e9d-9143-ae6cddfdda61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ebf519-e382-48fc-93cf-3c48725082e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c579d283-70df-409b-8918-83252cd8f85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4beaccb-499b-42be-a631-060f7984814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58b7fa9-0a29-49f3-8178-5a13a086c15e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4772c16f-a061-4d63-8aa5-968040529ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d90fa2-e65e-455f-b885-a5c5699e74d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857a04a1-89ce-4af6-8f0d-455ee61555f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e26e3c-64c8-4f9c-abbe-e23f13025b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bd30ed-73ea-4fb9-b5d6-47875cd7239c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad03a4b4-97c6-4f0f-af6c-5aee95751a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4101550-6be3-44b5-bc0a-b8867a5cbc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b610900f-a570-49b4-b04c-145c65d4e675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4336278-6b03-46ad-a443-f302e1f28450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75dc4fec-58be-4084-811d-64f94593ccb2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabb5331-6b92-4bde-97ea-311b8ff22a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faa950b-221c-4ece-b63d-9d004d31b4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9cc3ee-5a6e-4190-a692-86933a7b617e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc25946-b088-4959-87a1-0140e71ee713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f14f633-ed60-43f5-9840-5baf96fcdd10",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ad0cc8-ef4a-4a74-b870-7970820f742f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb50562-30aa-4392-8a3e-85340f43412e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b59b3bc-4b14-47ac-ba2a-4bb92f78ebdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbc9f84-8487-4616-896a-15c8ee6c1003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec1542-a892-4f7c-9052-5933fd83d494",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c79ec9-c13f-4340-becc-a818cb554acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823b2aff-ae70-48ba-92bb-107379bf81fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1123249f-36c6-4c9e-88f4-10d56fa10de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b904234-ea34-4ceb-be95-49644e6f862b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846d0c8e-e767-4b25-a206-0b4b95fc8ee3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1038a511-6414-466f-a6ca-12e49a726d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49527832-20c3-465a-943b-111f1c3aabea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19337fd-ad1b-496a-9fc6-0d7e5aee0420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "501a8461-0126-41d5-adc3-f7abedd82272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9c5d27-6734-4910-9f3d-8eee8cfc2bee",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c39e8b9-cafa-4618-aab9-c4b38dcec87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f086c5f3-a140-44c5-925b-e434e3abc498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5592bf48-dca8-4833-bf2f-9e60626bd157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "672733d0-6e9f-44e8-9b9e-b4a6aa1b7da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ea8b07-3dbd-4f94-bd4b-2b275a95161a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab09e7bf-dd9b-4f8f-9cca-0b5a3eadd747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45233fb4-202f-44f9-8b89-911ee0268ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac0de7f-1a75-4dba-8c75-a467800df69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "662dec65-cd2b-4c53-bb79-030d5a62e44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffa04a1-35f1-4413-8228-4ab277e25d82",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d5f41f-05ea-45ba-a12d-b11ecb92ef37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69de9bf4-8db2-486b-842b-bfe1b8ac2842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2cbd7e-78cd-409a-a536-13ee9ac12399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "195f0950-ed92-482c-ae99-608e01216e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d3cc53-d131-472e-a9ae-04d67c3048be",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7524f78b-b9f8-4f56-9d58-1c90e1966c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5497763e-097c-4385-b5d4-a82dd9300548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44fe35a-1ac3-4756-b2be-3bf77f3226ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1db7830-7b63-4764-a1a5-f01054e8b9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6499b042-7073-45cb-998c-87a9b2066c2a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1829f7fe-f8ab-4390-bd4c-a887b0f5cbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d295be22-a6d4-4959-8ffe-bea7b0b8f2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0c4698-d82b-4e2d-849e-e4d6e0c27f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36e86d9c-64dd-4c1c-9636-235f03e264b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89b39a0-b5b2-4613-abb2-267b9178a329",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d8cbe4-5aaa-400f-8536-abc3fa11ee2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb5db8f-7c22-4b1b-91e1-284066f41480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907c3370-de37-4f2d-8a47-a3feaed628a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01ffb319-6be9-4631-a2b0-04107ee54634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7a64a7-950b-40e3-9bd2-a96e7f3378b8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645edc2d-fac1-49d7-b1c1-dcf367636aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e7c948-184d-49f3-ba6e-9dd7fbe1768c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c958768b-3da6-436d-8bf0-b9b913466b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dee509e0-9fff-40e2-9daf-6739e6db05c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b3f88d-b0be-46f2-af83-a4547bb77cca",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a298c0f9-f85d-4d13-801f-f7afa8306879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f902f1fa-c158-4583-855e-9011c696f7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34343662-a2cc-47c8-9fd1-b6212c894328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046f497e-805d-4382-8748-902482c31aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3734e526-96a5-42c2-9b0a-04b767dc1099",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395801b8-3ba7-42bf-bce1-dbd1e591e848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af4e7ac-2cbd-427c-8e8b-6045e01a3669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2b27c6-632e-48e9-af83-1b44810c3217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f089f9-d8e3-48ff-9341-d15679f8eced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd5da1d-3add-4611-8b3c-2b6054908a26",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f600037-f395-4568-83f2-088206f399af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584c2adb-5cb4-4cea-b3d6-a9a69356e086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09802933-d89f-4796-9c5d-121cf2c772dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6da43ff-f884-4fe6-aa94-f7a0c5824b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e564593-da7a-4094-9de9-b40a063e72f5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588f284d-b4b9-4703-8dd6-f4935cb5d9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aac1c3b-d368-4e58-9316-4357dc8e459d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c1f304-bb9c-46f0-9515-1f0cb64159d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61a18ed7-15c1-4483-855e-499a77a5ed90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60bd70c-6aa2-46c5-b5b8-e1ceff9a745b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e243f4ca-c22f-463d-a482-76121b14f71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d444bf9-ccc6-43ed-9e94-6ea4259af83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946ecdb6-adf0-4981-a411-bc4bf3def62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb7459b-f89d-44e0-8418-3d8dae4a6166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47789b35-4875-4364-af54-71a7f1000361",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4d9a8b-722d-42aa-b167-d6459872bf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aa60deb-31f2-4c08-8203-037bc3e353b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a98d42-cf25-478d-a98c-525b5ef48808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6b328a-3fb7-423a-929a-3d0d3900c9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab24bca9-64ae-41e0-b724-eeedd4f21288",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07288351-a69a-484b-9ddd-2ed4e8262acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45c25a7-5d06-451f-9055-785e39d88e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579f6802-e691-4127-a226-42309679fe5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc1870cf-37e6-4b64-bfc4-a889ea995dac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e24ce29c-b90e-48be-94aa-035ab354b0ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc98c9cf-bef4-417b-8ada-592a271e39a0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ca63f9-2796-46de-a85e-2b7ed05d981a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "429420dd-7704-4d15-b026-8f8f1e404a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10811f32-4375-4aef-bac1-1c659fac993a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0de51948-03b0-4e6f-9699-25f84b5c088c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52db3edd-0c03-4e19-95dc-a619941275cc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0709e0-2a9d-4d8f-803e-1d747dc7edbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "30cac3ab-f792-4102-ba17-4abe70274e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0987467e-0c4d-4e6c-ac6b-70c8e8fd0151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6823135-a5c9-4dac-85cf-c8870450d983"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd05b405-058c-4a9d-ba51-219b44abcca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85a5d035-3f32-407f-bf83-cf31685ab218"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c5b86b6-540a-4850-bfa6-c2ddfd1eea3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8749ad08-afb8-42fc-89d6-e19cc8f1d4cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d85195ac-ae5d-458a-97a3-869b3cf71f2a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b66b37bf-46f4-42e0-b7cc-3fb919dd7aa3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e021c0c4-b07d-45cb-8b0f-e0bdd7c7e2d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22e6702f-0241-476d-9d05-38d4d41052e9"
            }
          }
        ]
      },
      {
        "id": "4d5b6793-f962-4a32-a2eb-fed0d545dd9f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f1d71d74-d2fb-490b-b04f-e72df191b400",
            "name": "Negative Testing",
            "item": [
              {
                "id": "548df6f9-7a1f-486a-be30-acaa658edcd5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4c5c8e6-6b74-42cb-9f94-3deb464209d2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4b663d-3482-47c5-bf80-46655ed388dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5ab373-cc09-4780-a8f6-7d5acc1d0964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8467da-d914-46f0-a8ac-f52fbf1b6cd1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b84c478-fe36-4b62-9f08-770cfba3c853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13931024-e17f-46ab-ae3e-e9a818af4787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ed5572-f3b5-42aa-83ea-c4dcae77a97b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788c8480-0da0-4671-a760-cf9ceb7bf121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4330001a-a3ef-43c9-8276-8b72f66a9ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e596e7b-5d9f-4213-9b07-ba2c7905ccaa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543bbc52-992c-477d-b622-b6f06c919d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2eb742e-8f09-4724-8d40-0880404f930f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a9d161-1ecd-4b07-bcd5-d4e6ad93cc0c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5922fd-64ac-4f80-97b6-4f400a97c4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b15722c-0a3b-4475-8f55-aa54a7d0c65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7993e80b-bb26-4ad4-963d-05e415113445",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22549c6-f6ba-4c15-8831-be1dcf99e4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167ac8da-bffa-4243-926f-fb19c22f61f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c375c9-3365-4285-bf9b-b010ff2df2cc",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e02af1c-1111-4f47-ae04-529a8f9475d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5037fb97-cf08-4525-a068-9fe35ab8c7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9139769f-7dd5-467e-9551-9b64dff22d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067e85f9-98fc-4755-8ea7-75274bb5b310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8ed4bf-22b9-4be1-b0f6-4c53e8b32649",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ed0a79-9a9f-45ea-87ed-be0804b24690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f15fde9-201a-468c-ae10-aff9da50eb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c29ad2-b671-4ce7-a3de-92f619cb021d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ddcf43-a644-48d8-b407-7d2591100330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d8377f-cf58-4a8b-bffd-dbce26618f3a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbae5a2-f5cc-41ef-b19d-9b1ce4e0ebf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a9a1d3-9c88-4e95-9fd8-0d12c0787518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8807837d-6f33-4dd7-81c3-cf1e7b14a649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f07edc7-2717-4968-b503-94fcfa75a99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857cc1d4-8122-42f6-b601-3809f252096c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ec3d7e-b0f2-4428-bf77-feed488b76af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be137c3-9833-43ad-8e65-c5864b1f224f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a206592-31fe-4d23-a207-d672ed3394c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbf509e-3d9c-4d48-a738-749b0060c6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a90c6c-029f-481e-b4fc-dbefe41c559f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93f9366-9045-41b7-b41d-7de0dbd0eef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d99627-4e19-4c2d-831c-1a2ccefe0d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e95384f-ca08-4164-ac70-1f9a1c4ac5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4677358d-5c48-432a-882c-7f67d6ddd1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f70194-1b26-448f-860c-211c032f84fc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e45599-3209-4f14-b25f-0a91744bcc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b94658-8c75-42e7-9e74-e431e16057f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328dd70a-162e-4b29-a629-10c107f4965c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e17ace-1a95-492b-bdc2-8470a18aac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4351bb3-2b38-4b30-9734-a88adf2fd6e5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf07fb03-7176-4e5d-9a4e-6c79d1c23c1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd5f414c-d95b-411a-964b-36159a96dfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a540d310-21b3-4dc0-8e13-f0616e3695e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50766926-3930-483a-a03a-a2f786380b76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3505ca-dc3c-46e0-a627-0a3251efc2d3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a426dd-b6f8-4807-9534-15e92603e84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1028d8dc-62c3-4e66-89ef-009ff9e12bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f3131b-2cf6-4c51-a79f-ec0db6f4ac26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311dd556-d39e-41db-9548-763b576c0957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fa88be-efd0-4d24-9a20-7770c4378b47",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d175528-3c66-41b0-b3a5-e56f507642ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1c366b-82d8-41fb-8b26-af1daa7f7ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c2c98d-9a97-49fd-ac10-6734bd1c3af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612c98b0-9d28-477f-94ca-81daefea480c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6375831b-b61d-446f-b0fa-596fbaf5b174",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3548fb21-aeb1-4282-b62b-5189a8f533b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a841765-8845-4f21-a5d0-00684da7b8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6b8b93-2761-41a0-8456-a80f11df1b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b070d43-b916-4873-8589-ad6ba47d178a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275b6c6c-7411-49ac-ac7a-00274c937b2c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af0e6c7-3d98-4cb7-b0e6-82b15ba133d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0cd055-c76b-4fc8-adb3-815845177d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3515e2df-5643-4da0-bd28-d4704ec7f23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f7354e-9692-4776-b8da-2837927b745e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934b986f-b8f0-47b0-973d-ba45b937fb68",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b43397-34fb-434a-b040-4355e2f8b465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40d0a26-03d2-4aa5-90a2-b2b7eaa76845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eb108c-2bbf-48ab-9166-f06ef2d1ab15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fe4b6c-dab6-4b48-98e4-541750fe339b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900803d2-88c9-4f87-b84f-ce66dd2ab507",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83043e9-cbd9-456a-9178-1a769b2ce449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a02d1c-55be-48b4-84ae-c8665fd294a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ee243d-4fa1-47ff-8111-52d1d089646a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4603b58b-653f-4fb5-87bf-3cce89a07416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6eab15c-43ba-43af-aa5d-7034d9bc2efb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9561e585-005e-42ff-83d5-7ef28366cfa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9491da5e-a9df-4ca2-a1d1-ed1d6842d640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d98eda65-c415-4fce-a8ca-5517d5d3a67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4cd1b1-fbe4-4c09-a904-25a1d037fb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a0b00d-5b5e-4706-a6c8-708b613a1dce",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf5bd89-77e7-4769-947d-2aedcaa7b511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adee952f-9b51-4462-abc2-f0d231bf2a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75d59fc-1f1f-4819-9cec-12b9379a4f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29164fd8-981c-4a37-a4e1-804bd8e52d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2a12f9-f97b-458d-a1d5-e1b96e4f2477",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2354dad-ca6c-4bc4-b7de-e3a3deeebfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13f8891-cfac-43be-abef-0a52d8c6bbe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f70499a-e44b-4cff-a7f9-84aacac0207f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e5a511-b3e2-41a8-864f-b4463cc1df8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adad5146-63a4-4b07-a80c-ec86657f68ce",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11faece6-f812-4854-afe7-87b0690de925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ff09a1-18d6-4bd1-be0d-e1f181df9d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e65648a-d66d-41be-a484-501dabf66cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55441554-0682-4b1c-ae9f-ae628c9fe39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48466e58-b3b8-4649-91c6-30862046652b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da0d9f1-73c4-4885-abf2-ce1d8d91a332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a56a82-70f9-45f8-bed9-3823b7f5f72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "716d301e-1645-4207-9c3a-0df341201a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe59959-2556-4512-8940-7f9c34c85f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8556b551-5795-4721-bbed-cdfa9317269b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5325605a-e0c4-4bd6-9823-aa0b1e4eb682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6770fe22-5784-4949-bcd4-79b01a9c55d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615befce-aebe-4a4e-98cd-828ac3cdb88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9ff621-7aa1-4483-b289-13b094d145bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edb9ce7-784f-401e-98cc-5b39e025d78b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8104ca2e-6596-44b7-8e45-71342526aad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c521234a-adcd-4ccb-af33-f9c6530c6db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396f95f6-3c45-4003-9c4a-5cfebfda72d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c541da2-6599-4fa1-9969-b68cc60070f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4423444-4b3c-4c73-a71f-e0ebb5f6eb86",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949a7964-3709-401d-9771-0e23e5fb9b55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ec00c81-ca69-415e-a7fd-0cda0b3fb41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dec8908-cf39-4c29-922e-791b31637dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8acca84-e2e5-4585-accb-80ea1cb8c9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cffebe2-e86e-4f33-953e-fdd25a55aff0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e777c65-4784-48eb-bb41-df76d5886a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3275bd12-645f-4429-8683-77d99b129220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3845a15-ff5a-4e0b-a3a7-8cbe1d16571f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e876e157-197e-483f-8671-222e339aee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63f15e4-9808-499e-a9d9-a1687443871e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e2b897-d319-4602-a7c6-bb65c8651e8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a191540d-01f9-4cb2-b7c8-52681ab47ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a58498-5de1-45c2-921d-d330c36989a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281fbac9-0b74-4179-af2b-7550519f14a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d069c3-8ba0-447e-ae6b-8743b38d6745",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc1b1fa-b8f2-421d-a7b8-2d232aa550cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cc68b39-1a0c-41aa-ac1f-306e27ea31a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d6aa52-dbee-4353-b5e4-40415e60f8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cface03-8225-4621-a895-db21c00024de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0ed774-4562-4857-9280-00c1bc510b92",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dff6812-17b4-4435-8194-60bb26e869bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9c2aeb-874d-447d-88c8-bfa154b68fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4440a3fa-4327-4120-bd90-b823a273cb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0bffea-18a5-42da-8fc0-27eb688dba41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4468ca-6721-4ff4-b7da-d2b61d44ae53",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a6ab85-e944-47d7-8868-1e4404953623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ffcdb50-e4df-4a7d-b3fb-6498894d3a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7265cf8-17a3-422f-b44a-ed43f86fed08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7ced6c3-4717-4c7b-846d-ca60d7f1c8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c33123d-1938-4dbf-81d2-6abaee36d5d8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b84d05-a586-4cf2-b1ea-96e2e146f4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41713153-cbe6-4dd1-a06d-9c160049159f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87ceed7-f9b1-47e7-a3d5-241ba9e3d8b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd4c9e2-97b8-4ed7-8b40-394504b4f821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29380b4c-d451-4b65-bf68-86ea9192cf14",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ab6eb7-4643-42fb-9ed7-aaf74c808d7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a19ed27b-40dd-42b2-9a33-c6605f82c68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4f6bfe-3765-4fdb-8212-c5de9b2044c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed46848c-c98b-4133-8ac7-a6162419b8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91c534d-e0dd-43c7-9845-47491e81dcb1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd63d37c-db27-49c4-862f-4804c1a39159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7cea8c0-7a96-40d6-a0f6-cd50acc4325e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5139ed55-3d50-4c0f-9e24-8879b4be3bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4340cfe-bb36-4e47-88e5-8055766f8dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9af9b9-f033-4d9b-8fb5-a9c18869144d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f323fbd4-0c4d-4865-a547-f2796bf7145a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502874a3-035d-41bf-a2f8-b140b1d3d3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d86867-bea3-4f28-be8c-2f0534ad3355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740ffda8-3233-4c4f-8581-cfb18ec1aa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a0ca4b-66b6-4405-be6c-cfae114f3429",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e66b563-1fd0-4602-ae4d-4433adcd5ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a862c6be-8d3b-49f7-b817-07d6ea241116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8271cd68-d363-40c3-ab5d-b17d8b097222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4d055a-b85a-44b2-ac40-d8aa281a96a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4e4e88-6ae3-4a3d-bfee-a9cd324e6de9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d607dc6a-ac30-425c-bd4c-b8ba1df5b511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6498df0-1e59-45e4-9295-b0a9d5be7536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703bc88a-0ecf-4a9a-869c-4bb4be301575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a57fbf-9205-4e58-ac08-d0a739f284af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53dc17e5-48c2-4fc6-9aad-a9271c267322",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956eb104-90e5-4ee1-95c4-ae1804ec9c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf9684f-496e-409e-a0a3-4bb2ab441849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5b7a38-6380-4ac8-88ca-7c90737640b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e4afc7-ad07-491e-a682-f710eac5edce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f34a24-aebd-4c75-b97b-2c01204ffda7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0744a73e-25e0-485c-a4d5-14236a07685a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "390f92c5-8717-4617-b49d-c029faf8d1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca31f6e-2bb9-47d8-85db-ccd81bc29924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d245e446-37ad-4866-8c92-77d79d906cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5cc9f-bc12-4efa-8cd7-ea2c5c57f89d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f1990e-d44d-469f-9a3d-d5d1bceb0fca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0510863-7654-4ecf-8d29-0c5568a270b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6dd0f8-c249-4027-969a-623b50f17c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fc1880-6a0c-45fe-ac16-4062a6324ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e490c9-f5c2-46d8-8d35-c9d55cf0c4dd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719d06f6-5ecd-4c12-95f4-310f6c32cdff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1f973c-39ba-400b-9cd0-22f878266890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a48a589-220a-403a-aa6b-39dac14fee73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edee260-fc68-4c55-8895-a1591999d562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07c1bfb-f0fc-4bc2-819a-551d68ba2598",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deaea73-7ea3-48e8-b841-c99683d848c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c476c4-28ff-46d7-874f-948c52c4ab8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92cec3a-0fc0-4018-84bc-ff54a558f925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d5386b-59fc-4e28-b754-b1aafb83a1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224236cd-4b98-4d8f-9f25-236de5e1d560",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67931a9-4967-44de-8a3b-631690b38127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4489ae72-ad0a-47e6-9a6b-d162d33737df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fd4d12-caf9-47fa-8c17-7a8b1c9c3133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698a2301-1d49-4b6c-958c-f88628f15d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8252afb-b86e-41a2-ae91-64cd7e7657f1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3966558b-c6c6-4490-859b-1a9f39e4e4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ceff61-1bc8-48e0-bde5-d52f604d9f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8a5e47-042a-4a9d-9fc2-e039c6d71c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6991b3de-cbfb-4b5f-89b6-02d4b61a745b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297f4e2a-5852-4c59-ad6b-590d9f218421",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edccdb15-68e3-4c7a-9d16-13e9216d53cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69947da1-c7cd-4afe-8e32-5606d2182ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c804a78-6db7-4fb9-b6fa-dc688ec8b230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9ff68a-7ac1-455f-aaab-6ea39bae7c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b45b2f7-a308-4b01-bd16-6e0357a64694",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fed3ce-092f-4820-921a-109f09126ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75734d22-d1a2-4fc3-94e0-fda3f9301e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e666b2ab-8581-41c1-99b3-2f34a334f1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142e7a8e-7131-4be7-be19-131815519275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbb7f82-0b53-47f9-9e7e-02deebbb5dd9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f372e469-0ce5-4fbe-a562-ff8c8f2a09b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d28258a-2fe7-4d98-8317-f354392faaec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86995b90-cf8e-402d-8308-64925481b6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed924f2-c881-481e-a781-c14cdc746d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d65482-7c66-472c-b8b7-b6f55775e093",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9122822-73c2-47c3-8952-130812775263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d254dd12-582c-4dc5-b427-0ec6046e52fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054f0606-72f7-413f-be65-e6811f507dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8236aa-63ea-463f-b928-193d2b1a5d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bd16dc-74cc-4d52-bc70-465a4aa8efbf",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d248396c-4e24-488e-bdf8-efbb26e0f3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28e7ec3-2539-4198-abfe-2a19552b4ac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c50e2f-4755-4849-9883-606abe9ab819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f5f180-f679-49a0-9a50-502657cd5ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51a2532-9893-4e9c-877f-416c53d1749e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01f8763-562c-45b3-8a86-f3af78e531ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c534d0e-3f37-439e-8f73-85e110df2f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec69620-b6b3-46b9-908e-97ab0ee51da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448ecf37-d7ff-4e35-ab2a-67ea4ed367b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164d75c9-ac3f-4592-ac91-5c413f692eff",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445f2f21-6ddd-4bd8-bd54-d19c3da69857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4021e71-cdc7-4644-be00-cd4e83b7713d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77edaca2-9579-4b30-ab11-5533d5751a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d55d2c5-cd1b-4c87-acc8-a3d403044c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e6118c-6240-43cd-88d5-a2c54570f33e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bba452-4863-4024-bc13-0b84cd600845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fe1f6e-f4e6-4a21-b6b4-94d259dc74ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e144b652-710b-4107-8dcb-eb2ca208ea3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d49aab-4a6b-4851-b027-0ed9d17343e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8236110-cbf5-47b7-9523-6efafe94f210",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08c179f-61bf-4c8f-9c4f-6eb1d189684a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1eaf2d1-8595-4688-92bf-67e79755423c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7639cc36-11d7-44a4-9d65-fd755081832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d952c5a-9495-4453-b59f-c2c7fc407b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdd5554-2c6c-41bc-bf24-ec773ed682ae",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcde72ba-5a5c-4f91-99d5-1bbe4819e87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5fc7ef-01ac-421d-a828-184083a16711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de170bbb-09d3-431d-b9f0-ac9a3efd4cc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c82187d-18f4-4123-9755-e980a6e50609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ed615c-2553-41a6-b123-d8625aab6882",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6012f7d4-1765-4651-9fc0-7852e92d559b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ca6b9b-250c-41c2-b1fc-583fd1cd8ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d03b60-4c7f-41e0-aa94-85ec9843a17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498d044f-b344-49c2-ab50-f0bbcedbda1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8780c1-8c40-416f-b910-653ac3f92851",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a98f83-99c8-4d99-a9ba-08d496363c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32fe3a8-e9a3-4959-be64-fd17ea6970c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fd183d-8395-4693-92f7-594f6c63b959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc2b6f76-1fac-4455-b968-c872133b08b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de252ea0-c1cb-49cd-85db-fcf954cd2f09",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd25c8b-1917-4b90-87a1-72efc371ec66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1006d2-f8ba-4c4d-bccd-1093c0a1360c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd98b02f-d12f-4caa-93af-07a887a9c75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02fd57ff-a965-42f6-a7e7-a365d924b4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed13321-d3d1-4ef4-bbb9-8d4ca5caa604",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c10772-f564-45da-863c-2f18b39ce5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c650fa-046a-4513-87b8-005db4991e53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80df14b-6414-42b2-b2b1-41f8e76d2126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26179351-b932-4c7a-a4a4-d9114b193632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f3df14-303d-4454-ac23-f29d4de24037",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e12a82c-0808-4a4e-b907-1b260a2b1314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6211c7ca-76c2-4ab2-aa9c-64548d39dfef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29be82ee-7626-4c75-ab77-d700f0c903f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8454a4-3b6e-467f-bda8-db9564513b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc5580b-828f-422c-9b74-15bc3a4b383f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f05575-b8b4-4b73-97d1-97ccf159883c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a65750c-2855-4efe-9daa-ea819e2760f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c1ad62-1080-4e8e-9139-7102c80f980d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41443832-e070-482a-a934-6c28145cd3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968b5103-d8e1-409d-91cd-620692460234",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdb965a-9c08-447b-b185-e324878801cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4a95d0-db2a-4ce0-ba16-7d39c19a5329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cee2a94-c38c-4012-a4d6-6a31843071a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a001fbd1-0b16-4373-8935-aedbfd769c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225aacfa-f651-4aa7-8ea3-78f2437392d0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3049cc6f-e998-4378-b1e4-4db4741d4b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57fc965-193a-4ad5-90d5-656333d09ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca210d97-d948-4aab-a4c1-beb1b55ca79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469fa76e-e167-4acf-b72f-1b07abb47275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b691ce4c-66ef-4efd-82b7-b6091cb61b4b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ed5ce8-591d-4048-892d-d7fb1aea0304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bd14fe-3684-4529-b919-aac9e8cf0ed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a418eb17-473d-488e-a0a2-f6f2bcbbd86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "badadd60-44cb-47cd-b1cb-9c22a7fe3610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8a57c6-12e6-409a-b452-0af85b03997d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7119f2a-166d-4db5-a755-40668779e484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd5e8ba8-1db4-4510-9e6e-9d03e8678e57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75da0f82-d496-45ae-a8af-a9a5430925ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dad26c-c648-47b6-b677-755bd3f624aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8d7d43-9b2a-48ce-aca1-b53d3a0a3d9f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e401c13-bb75-4ec0-917e-cf89de55b8c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c4a734-06ec-41a3-9a29-879f0c5ee35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b476e87-bf31-499e-8a1b-e93802c648ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811fc3f8-8b85-453c-a1c7-5be599c4ea99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede184c6-f27a-4231-9fa3-f5042950a58a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2f70b7-5025-4a50-802d-ecea784f2eb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d70bdd6-eb5d-4ab8-b715-d5f56903a9eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743952eb-27da-4bc3-b1dc-27b3010b3756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af60fc21-a2be-4b70-93fa-d6fe26b7cee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ee0425-2d7e-4622-b8c7-6068abc0f53b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81e8b74-651b-455a-81db-c9472c6e49ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ac0122-8b52-4219-90a2-25994de9c00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdbae1d-d589-45de-b95d-744354623ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364aa838-207c-47e2-8b22-070a4c10d9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7678893-c5d9-4325-8b0e-0fba12a2fba1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd6a9d5-cc73-41ea-86ec-a5d7d2718379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ebabae4-fe4c-43da-b006-9e64fc7b2230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6268b6f8-3f3a-41db-8e12-a50a804dd480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c99929-241e-41ce-af43-62597e603f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a83a7b7-e31f-4075-99f6-9a358111c49d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5df150-5e84-4637-a136-3ffbb250f651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54fcc997-edd9-45f1-8cb6-87f3cad09f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5112e4-14b7-4eed-9679-4264d6e38e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa963fce-80d0-444a-88be-1727d8c54da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fd8c66-f903-4845-8195-1597237be4a8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3028acd7-025b-4016-a3ae-65edca8b6103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "141ab990-ce64-4bce-8319-ff4a82bff106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdab96c6-faa0-446c-b181-55d42e5530eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef621386-50c3-4b11-8c1e-ef8fe7f5a171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6afde9-4861-4b4a-9358-c865d156164e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e122ad-78ad-4aaa-b0b9-09e8f3cc66ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3006e818-7f8f-49e3-9efd-fccf1d92082f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc78ee96-9803-4275-8226-b9f0c86d26f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f44711b-5e05-4456-a79c-3e1556b2a5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9060c8fd-177d-47af-b276-8638701f6f46",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065140d5-9eb0-412c-ade8-11447e991690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49eff0a3-bf8d-4fbf-9c35-5bf57b95e302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0302cc-8dce-485d-ac13-a3da6e221f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3056a726-0591-488c-bb61-1e591e2c5517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df08eb16-5758-47c7-8e73-20e81ae7c0ae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcb51d9-a259-470d-8c51-346912781c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78116e6a-d752-4aed-9bff-343b5f88b4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327116b9-e568-4bac-ad0f-c846c1d1de8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7d0b58-8182-4092-9077-f2acd6f6d340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f63f6e-3c76-4775-89ba-81c7d46d7f8f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12433c1-8855-4268-8fde-d37bc1d6da65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1241217b-e2cd-4768-997a-b8ccc1865f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9d8681-77c1-4a7c-9d5c-987b0c0100e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76118271-65f3-4240-baf6-a3996da759e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9988ed03-518d-4ac6-8507-207b10ebe6c2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7457bb90-6672-4de0-b06e-b302c6f81040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69f6f5cf-f3a1-446e-bf49-839d1f777bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac072c17-af3d-412b-858f-c1a14bd03eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601d86b1-b4c3-4895-893d-8edc5a58f9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f6063d-bce3-40ff-a12d-04ca912731d6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259bad6c-66ec-4caf-9dbd-9dbf61040d7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37b6594b-925f-4445-8b81-e635561fa8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f034631e-4848-4627-8ba1-cdbd9bb90a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca45d46-dc1d-4d09-8f64-314967401122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4dd97b-2a32-4199-a84f-2b7e6a59a6c6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1f6bb4-7c47-4ffa-be35-df53115311c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749f3259-a97f-4e21-9552-7fc6f3208422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c66229ab-7145-44c0-8260-f1cf177dfac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba940256-4a34-4b4c-a1f2-6b15a1ec5c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d2f98c-ea28-4930-b8cd-9c7da2bbe756",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1910717-ca6c-4555-b073-91a404ce3072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e681b25d-2557-476e-8ffb-96da6649e807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be929f9-8565-4021-8e7d-60a979471aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b63047-2c6f-45db-84bf-0f2dfed596e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ff0357-c629-4b43-844b-a0f8a405f5a2",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c2522c-1a6e-4e5e-b922-79e775cb5ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9377c1e5-e72d-4107-a7e5-23b494ceacbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48003734-a44a-48d1-8307-d17b2d361bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be48468a-6202-4754-bd94-bb799e29993d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dedba6-2d0d-4195-950e-a7a2ce7d2c1b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c00b55-404a-4869-b4d1-6a4647aa2a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a906043-7303-4e3e-aedb-fd9fcb484e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09efa736-3a1f-48d2-af5e-ed6369b26e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d63459-f9e7-41dc-8c43-47093f9a611e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923d2fb9-b771-4cc3-91a8-8f420e0b31b9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6b0771-6422-45b7-8ce3-3c04b8269844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b6fca5-b16e-4c85-abd7-e96f151fa961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ab9723-b219-48d9-9c58-769b5c43e7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0260ef13-3f20-4245-a894-d12544f849f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73aea4ff-f2e3-4171-b582-b9f144adb090",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a60c7b7-5710-4d4f-b67b-fe5ebc205e9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "910b98d2-b82c-4833-91c6-7804e87dbe53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef311d0-3fb6-408d-8041-c6099da3d488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5236ee0f-096c-4ed8-b563-e8dfa5a353f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77e3e51-bea7-47c5-b748-df2e9a442b89",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b527d2-5fcc-4830-aad2-c3d723b8cb95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3175182-4d69-4e0c-bb37-09d2c9b06621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c64e22-5d52-4cde-b4af-e85ae6cd8ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70f0b69-504f-4400-a208-a18d2bdd91e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac91faf8-4cac-4e1c-811a-8e1dbf06e57e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c46f6bc-d1a7-4f84-b98d-55b9a1334bcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bbcfb11-561c-463b-acce-696f27f28e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59b114c-ed3f-494c-9ce5-cc0912243b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c897637-dbaa-47ed-a1d5-e742022a8dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b21162-5584-4451-812a-47bb61d0271f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabd535d-7e0d-4fe0-9e0c-64fbddddae5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a86f4f-67c5-4918-a894-0ecf4e7dc061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf06ac61-386d-4681-b2d0-0874f85f332e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccba5ba9-fb14-489d-9bc4-beb6412d3246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80633e66-c387-4499-8e77-a4d3bb3be0e4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d91ac0-8a2f-42c9-9043-74749db8f627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7110a61-1e13-4d0c-9732-92107a8eb039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4839487b-f988-471d-8a73-4640292eee38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee067655-f04e-4336-954b-a54e8dfa1ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bf4ef5-14a6-4fb1-b513-260c5e710462",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd068e5-d5eb-4be4-933d-5a7acee038fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "204cd8ef-4a56-4851-9259-94f25a876287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9d287d-4a12-4bf5-ba01-dbc218daae77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bec312-d5ab-4adc-93b1-ffb9fcafcebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be40489c-146b-43f1-85b6-7d6cd535f3ea",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdc8717-6162-42a5-bf05-79643b2e88bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd9c25de-3290-4416-861d-bddfbc83a483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1428c-4403-49ee-91d3-b978db46bdaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73852854-13a6-4be7-9c94-ed7a687003ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f00cefe-33a6-4c13-a56e-df5ce8889718",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626dcefd-0275-41e5-a0e4-864170aec30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfdbab25-e58e-48d9-a859-07b3fb16f638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae2c45f-c9da-4aa8-af27-2ca341dcd651",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0131c75-90f0-46b8-8eba-bfe7c3c5160b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a42d63-77c8-41f9-81ab-8a1734e573c2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d927e8c9-c9ff-4f79-9db4-54e6a1eb9d94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f5dadc-c733-4790-8734-381d424d5988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e14e40-6b27-477f-8877-edf70bb62cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dda1f59-66a6-46e5-8496-f5329bf831e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0fa0f5-7fa3-4f72-9cbc-00a883123968",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfb87ae-64d9-4dbc-84b7-737f3339f00a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a90033-719e-433b-84c9-b0aa4c0e57d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d62109-fc7b-470a-89c4-cbf8a9c95354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dea0c0e-8bae-4c23-b831-49cb588d6ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7cc4b7-9457-403e-9acf-0e13b9b1359a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2649926d-d61e-4433-9222-3a09c54ecb48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d374803-98c3-433d-9da0-d71676aaa53d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb081e80-63e7-425b-8fcf-b84d3d2f0dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1a78d2-1e62-411f-804f-59cc7bf9da29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22f3817-2c05-40f2-b759-91038294ed93",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62164b8e-8267-45ad-bca3-8eaed0caf20c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a59c28f-d28b-475a-ad95-efb264c4a3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6512570-9b8a-4a7a-b4e8-d9981247cb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5333fdc1-a3be-4a58-9819-5d90cfb2939c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c0fa9d-bee8-4ab6-9a08-09c8eb141259",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02b8d17-75e6-416a-99c0-7701f41e65ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cdb2386-1ac6-46b3-9cd3-87329f716ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d59ef1-3149-49fc-a2ff-33b4dce6c67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebea7664-377a-409f-a85a-0fdfc59ccdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf202851-dafe-4373-a1c0-18b05ef9979b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffe5241-b883-4805-b659-cefef9577472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a855604e-a143-423f-9c62-3f0902d758d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8966c34d-9a35-4973-9bbb-fa0483f79cc2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16cccd0-a055-48b0-9c3c-9a7607078d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaf2525-3098-42eb-a597-a466c0ec882e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b60dd70-5837-4e87-ae5e-1ac56bf4b227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8254aff-3da6-4b20-bd09-21d4374d7ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "755201a0-19e5-4d56-b0ee-26948ab96d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4e94cc-0e15-4e6e-bc9f-0b10cb37a3fa"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d7f22d3-a117-402f-955a-054a7daebec5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95880513-2a8c-4ccf-bece-c69c59ca920e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54b12a70-c529-48d3-aa91-8cd46c121e71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35dbbae4-6aa5-4e3c-8554-b0b24119258b"
                    }
                  }
                ]
              },
              {
                "id": "f8764bd6-e5e9-4733-83c3-6be5c3a27e29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4cd2ebc8-f4f7-4782-ad10-70a1a9ea7300",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de0dd7f-d32a-452d-92f8-172923f39540",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d7d74909-8210-4d5d-b554-74acbcf352f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c43b0ea-270c-486a-92cb-13deec3f9126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "259bceed-328a-44df-9843-7d36f2fc7c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3b6871-a8ba-41d1-a627-ba5c979f8258",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6293565-bf0f-415f-b81c-4ca7bc94e53c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8132c699-a7ba-4c59-a9b6-4d432ebabb8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5fc8f6-f7c4-43ef-99c5-16cc90600295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81b1da99-645d-41ed-931b-79588fee15ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40d6a4c1-b346-46ec-989e-e0ee20ff6439",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75b95d2b-56bf-40eb-8deb-1f59e1858fb8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f2ce8ef-05ad-48cc-a989-45f802bddc84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c72f41ee-0f9c-473e-9ea1-d2de9ef72b8a"
                    }
                  }
                ]
              },
              {
                "id": "524a161c-dd3c-4fc1-bc8e-0067e4ffbe90",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "01b18785-6b73-427f-a821-885320a62824",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36835fec-1c49-4017-af2b-4f2d37c1bfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "24c417d7-4d94-47d5-a075-38d0aacbe6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05bca29b-c215-475b-b8a9-e7ed1d14beba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0c69b1-cfaa-471e-a4d5-f1b0443403dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e7f491f1-2651-4e18-8a86-9ec787f0d04d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb4848f8-da31-40b9-8318-333081efd5f0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "930ecc10-5a1d-4b67-83b4-57c4fc5b659b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eb5ef9a1-727d-44c4-acd9-f920a381aa64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6942835e-c4ea-43fa-a5cd-e6d07de49fde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "334ee420-1224-42df-a1e1-49f3d0fd1c20"
                    }
                  }
                ]
              },
              {
                "id": "93c46e06-cc6c-497c-946b-6f980ec76596",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "549c77fb-999c-458f-8780-239c47a5b08b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "32b32ef8-87ed-4308-a607-fd6856b45878"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd0af0d7-0a6f-4a18-98a0-2f93b4349140",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f2f161b-9e3b-4339-960f-181cc6fb0e0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "938a3ccb-9c30-458c-806b-8b6c020cbf19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5375d6b8-2507-49b7-8403-a51af7b99756"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cde8cadd-f719-495f-a96d-2dc82a2da88a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67377b25-dc2d-428c-aa7a-f24468644df2"
            }
          }
        ]
      },
      {
        "id": "c5b5d6b2-c984-4ef3-9c30-564278bf8b22",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "680d5bea-4981-41a0-aa9e-0bd41a85a986",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8fcba65-bbf5-4e84-842f-908c0be11840",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75115efa-2378-47e4-86c9-265ffd7f879c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a2a9460b-b085-4e5d-8aaa-8583eb18c8e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2384b66-ef38-4556-a5c2-767bea3e55f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2826794c-279c-4546-a9d7-6875953e1aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c7bae-f625-4173-bff3-5187b9eb3448",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b87b3d8-e4ce-4490-a6ee-5e8021d28563",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd876a45-fae8-4a3e-b636-4f2207f14e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40816a48-de9b-45c5-b925-fa35c21c2720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f37beba-14a6-4600-b2ed-c7c33df3f7b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa8b3bd9-a599-4551-87bf-6f4f392429dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a95fd9df-f8ac-4f63-b7a1-984da444c8eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0465615d-d203-44a6-bf14-0c9799ebebbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebdead53-a07f-4690-804e-7620e179e4e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffe2a85d-8a1a-4a84-bb2d-b10e3f8d2a4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c788f281-e155-42df-82a2-49ef634792bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3dce6cc-e001-4e7a-b3f6-6850cf59b650",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37d5679c-958f-4856-b28c-a88869c80f95"
            }
          }
        ]
      },
      {
        "id": "ea7b41b3-66a8-4f02-b504-e79cd3cb6455",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b4a0aa19-9f69-4233-a260-939994abb0a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "796144ff-d72d-4f83-a44a-daf9265ec371",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ced6ed4d-ce5a-42e2-81e6-e543b4d9086b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cbcf6d-3d2b-4d60-a25f-07decb29a94b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afc8cc4e-78d5-40b7-8107-9aad9448b961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f3adab-6e75-48de-8c2d-443d6a6498ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "612557a6-bcf8-4733-8fcf-1cc3f3d476df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf2f07f-8973-4b30-88d1-bcdcfef0e540",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc274c4-e76e-4d8f-a86e-10af2addc58b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ccf8a8cb-a56d-4384-b179-7f027dc28011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a211261-fa8b-4827-a36e-dba6a896d6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b42424df-ffb3-47c4-97e2-47a0ab111f91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d276da2d-66d6-43e1-954f-dcacdce3d311",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd05ce8a-4245-4d96-aa41-a04c0a584b89"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95079bd1-fec8-4fdc-b213-f39d759fc151",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a0bace2-3dff-40a5-81fe-3be0420db88b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9858a17-26e0-4346-b717-084146717594",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "06488cbe-0063-47a3-bed3-41b2c88e6b18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c37182dd-50b2-4134-b071-6f5769388a4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0d16aa5-acf1-4abd-aa07-cf2845d5167b"
            }
          }
        ]
      },
      {
        "id": "157ae58f-534c-48f4-b59c-ff15b36a176e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "235b52c2-a1f6-4356-9c4a-38d4e73882a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "654d4d61-0816-4bf2-92e9-9902cd408d29",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa8e6d3b-5a40-479d-b9c2-9cf9557ad745",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fb46d9-bbc0-4ee6-bbff-f7eeee761f8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93517261-4912-411b-ae8f-4601296fd459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b836a2ee-69a7-4ab8-9fff-e0699dbdae0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a400f016-c682-448e-b57d-2547ab64f73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6315f3-44df-4c99-80f9-64919c477216",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd9587a-3ac0-4131-9f3f-664667455b89",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "12952829-ea33-4914-90f7-3ee475ca8efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565bde91-b6b2-4f07-b890-e3fb50caf62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c7c269e-0ae3-4842-b7c9-59513ccf39bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb2f53e3-0760-4d00-88c9-0ea38545ecd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "572996d9-ee43-4a9b-aa42-7772e7116085"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "876b9365-df90-4e6c-9189-9fd8e22db35b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b27898c5-73b7-4742-ad8d-08663b45457d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b259ec24-85f5-4276-b51f-46b15c6bc7d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4e71fb7-6a8d-4fc1-9017-df2a7cb8a456"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "441f4fb6-4ccc-4665-96b9-4f9ba8e8e75f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "571c2150-02f7-41c9-8fc9-5215ac4fd069"
            }
          }
        ]
      },
      {
        "id": "cc1cf35a-c19d-48e9-9944-2b3e9b422d49",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3feb9a7f-b732-4659-852c-43518998a7fe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "808f4049-669d-4ad0-824e-6b48b144fb4f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ebb35e94-c8fb-41a6-bc72-0ce356eadfa5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcc48558-ed94-419f-b296-1ac19f053fd3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8708f8a-ad60-49ce-8a51-f93da93c23aa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 291
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1443.027027027027,
      "responseMin": 38,
      "responseMax": 11328,
      "responseSd": 2938.6310452520142,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677777458817,
      "completed": 1677777844133
    },
    "executions": [
      {
        "id": "1b659aa0-d850-4989-b509-356654cceda6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3c488235-5c11-4a1e-ba69-7a85e87531f4",
          "httpRequestId": "6c45c083-6d03-4aba-8157-93a7aa11422e"
        },
        "item": {
          "id": "1b659aa0-d850-4989-b509-356654cceda6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "746f496a-9f78-463b-8263-7c29eac8428e",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 0
        }
      },
      {
        "id": "a6c5554f-f8c0-4dc6-879e-1b8188aee88c",
        "cursor": {
          "ref": "86a09f68-50f7-474c-8f9d-8baf1e0b62b6",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c1d5d585-4509-4acd-b540-905652ac200d"
        },
        "item": {
          "id": "a6c5554f-f8c0-4dc6-879e-1b8188aee88c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9e77ab10-8e4c-44cf-8cc7-004ad407cd1c",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 0
        }
      },
      {
        "id": "6412bf29-88aa-4a62-b8bc-0c44f8cde752",
        "cursor": {
          "ref": "b069119f-a35f-4c30-8521-bbd3b2344249",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "73bbd51c-8efb-4391-bac8-59610208b115"
        },
        "item": {
          "id": "6412bf29-88aa-4a62-b8bc-0c44f8cde752",
          "name": "did_json"
        },
        "response": {
          "id": "73d5a941-1f12-4b7c-9eed-0ffefb33ffa0",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ea7396-4ab6-4025-a298-2fdf96853518",
        "cursor": {
          "ref": "9e301474-b208-4a9d-b6b3-bbd513a8d7d9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52f1b44a-e063-460d-a91b-493772a328e5"
        },
        "item": {
          "id": "89ea7396-4ab6-4025-a298-2fdf96853518",
          "name": "did:invalid"
        },
        "response": {
          "id": "e4c84ac7-f1b5-481a-91ad-55f5e5c6a47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ea7396-4ab6-4025-a298-2fdf96853518",
        "cursor": {
          "ref": "9e301474-b208-4a9d-b6b3-bbd513a8d7d9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "52f1b44a-e063-460d-a91b-493772a328e5"
        },
        "item": {
          "id": "89ea7396-4ab6-4025-a298-2fdf96853518",
          "name": "did:invalid"
        },
        "response": {
          "id": "e4c84ac7-f1b5-481a-91ad-55f5e5c6a47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913bdb4c-12aa-4184-8dff-29daa616fbb0",
        "cursor": {
          "ref": "4e9cb315-7bea-440a-9331-868b1e1585bf",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "78b22ad7-7921-4024-9a03-e110bd5aec38"
        },
        "item": {
          "id": "913bdb4c-12aa-4184-8dff-29daa616fbb0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d55c8ee4-fd89-4e1d-82e1-92ef10104a44",
          "status": "Not Found",
          "code": 404,
          "responseTime": 151,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa23ed97-1054-4c38-a327-3612c505eeb2",
        "cursor": {
          "ref": "f03671fe-b202-4ade-89a8-27e912a81ad2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d987eada-8982-4d28-809c-ffec62580ba1"
        },
        "item": {
          "id": "aa23ed97-1054-4c38-a327-3612c505eeb2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8f8ee2d7-ca76-427a-bacc-0f7bb0560abf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec2804c-59bf-4e3d-a538-4c20aec5f4e6",
        "cursor": {
          "ref": "641a5a78-5873-4f9b-998e-476165c94be4",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cb57021d-9a67-47d5-b525-40bc40c41524"
        },
        "item": {
          "id": "cec2804c-59bf-4e3d-a538-4c20aec5f4e6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bea90633-bd3d-4bb6-9282-a39116e5f01b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58fbcf2-2664-4356-94a4-354741d002c2",
        "cursor": {
          "ref": "572b0c67-9768-4f87-a742-f5acb04f1439",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1af6306b-6fd1-4ef7-bacc-cb343e78f01e"
        },
        "item": {
          "id": "d58fbcf2-2664-4356-94a4-354741d002c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cf96dab4-96d2-4bda-9def-fdba6ed58837",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d58fbcf2-2664-4356-94a4-354741d002c2",
        "cursor": {
          "ref": "572b0c67-9768-4f87-a742-f5acb04f1439",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1af6306b-6fd1-4ef7-bacc-cb343e78f01e"
        },
        "item": {
          "id": "d58fbcf2-2664-4356-94a4-354741d002c2",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "cf96dab4-96d2-4bda-9def-fdba6ed58837",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "472aa817-87a9-4a20-9007-c4285d4c6c6d",
        "cursor": {
          "ref": "eee2bef6-e055-4a5d-a7bc-fc094f7f073e",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f7f1f7ab-5e26-4046-bdad-fb497eed5d98"
        },
        "item": {
          "id": "472aa817-87a9-4a20-9007-c4285d4c6c6d",
          "name": "identifiers"
        },
        "response": {
          "id": "6eb95df4-e3d9-4469-b91c-9793f78084f9",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cff132-413b-4a20-8c1e-b685edde1e4b",
        "cursor": {
          "ref": "3b16b788-fada-4d69-9111-e2f394c58430",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a390d5d4-ad1b-44f6-bff9-ec596319a582"
        },
        "item": {
          "id": "24cff132-413b-4a20-8c1e-b685edde1e4b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd6e7774-f78c-4bac-bcd1-6b97f151d000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "24cff132-413b-4a20-8c1e-b685edde1e4b",
        "cursor": {
          "ref": "3b16b788-fada-4d69-9111-e2f394c58430",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a390d5d4-ad1b-44f6-bff9-ec596319a582"
        },
        "item": {
          "id": "24cff132-413b-4a20-8c1e-b685edde1e4b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd6e7774-f78c-4bac-bcd1-6b97f151d000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4be90819-8431-4d7c-953e-1ad60ccaba9a",
        "cursor": {
          "ref": "d3767a99-1dbe-4c91-8ae8-52068c609ca8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a48e3a62-32c4-419d-a974-e57c9b224822"
        },
        "item": {
          "id": "4be90819-8431-4d7c-953e-1ad60ccaba9a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "95d2472f-5dad-4a86-96f1-d8437cd593e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "14fbc788-c407-45fb-ba0a-95daf431fe9a",
        "cursor": {
          "ref": "b692171d-2aba-4d81-8500-a4ed780edeac",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "94c073fc-5b32-4dc2-848e-80141b4c9aed"
        },
        "item": {
          "id": "14fbc788-c407-45fb-ba0a-95daf431fe9a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "40592a18-407f-4f16-8bc3-5d22447eb114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "978202b3-64f4-48eb-ad73-2fa03bb5a133",
        "cursor": {
          "ref": "2ac9de7d-68d3-4358-907c-56ce90e0954f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4c06fe79-ae36-4f4d-9fcd-366fa32121d6"
        },
        "item": {
          "id": "978202b3-64f4-48eb-ad73-2fa03bb5a133",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "914ebc90-4ae0-4c38-a945-96c5629305c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "20bf8deb-0349-401d-b22f-dec1dc44b347",
        "cursor": {
          "ref": "a7f5d7c8-545c-4fd0-9a52-025f397067f6",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b8123a03-6f1e-4ba0-ac50-672dbc5e393a"
        },
        "item": {
          "id": "20bf8deb-0349-401d-b22f-dec1dc44b347",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "85fd38fa-b822-4342-bbe3-5e97649563a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "dd8dda8c-2003-48fc-8f8e-54869a8f5da0",
        "cursor": {
          "ref": "6a658bb5-0877-4484-af85-502b97dc210e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "af7cffa9-5f7a-435f-9f4c-75433c6616a2"
        },
        "item": {
          "id": "dd8dda8c-2003-48fc-8f8e-54869a8f5da0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "af34bb60-bf11-428a-a252-4a2a6f57b8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "dfc655b8-b156-4db5-b15a-82beca2ccbe2",
        "cursor": {
          "ref": "7cf8fce2-787e-4c87-822e-b3da89b19fb1",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "af823711-d4ea-414d-a7f9-103f24fde4b6"
        },
        "item": {
          "id": "dfc655b8-b156-4db5-b15a-82beca2ccbe2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6bff3880-b4d1-415b-bc77-606c42437596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cc13062d-de2b-4cc0-b7b3-cdf754042dce",
        "cursor": {
          "ref": "52551d3f-b92f-4bba-ac72-e742d64bcb13",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a937909-5a7a-47d2-b4f5-7bdbf920e519"
        },
        "item": {
          "id": "cc13062d-de2b-4cc0-b7b3-cdf754042dce",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7db7ebef-0d27-4a98-99f3-2817eb87770c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ee419d97-2ca9-43bb-a945-6157badb6d49",
        "cursor": {
          "ref": "800d0452-2dcd-4820-b0f7-3dd070b15009",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5dcc72b2-2d9d-4dd3-afab-474a28a92a16"
        },
        "item": {
          "id": "ee419d97-2ca9-43bb-a945-6157badb6d49",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de75c5f0-f281-4bca-8e36-b55ca7444820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "6f436423-9b2d-4caf-8f2b-8f983a9a30e2",
        "cursor": {
          "ref": "b5f31cde-dbe7-485e-b891-6ed1e9aa24c4",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c3affadb-a2f7-4fa9-8921-93f3b9a53986"
        },
        "item": {
          "id": "6f436423-9b2d-4caf-8f2b-8f983a9a30e2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d02f147b-2de5-408d-b42f-34820aca3a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "379347cd-77d8-412c-921c-704f2018a0a2",
        "cursor": {
          "ref": "e59ad2e8-e6ad-4847-9638-aa9043251884",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b259670b-2459-4087-acb2-eeb2aa2103b6"
        },
        "item": {
          "id": "379347cd-77d8-412c-921c-704f2018a0a2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "02ce855b-3f00-491d-bc79-d00f85993185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "dc2accee-8b02-4c3c-b37b-f3d3aa70fbfd",
        "cursor": {
          "ref": "dfdd2dd5-c017-4a43-a337-a30a574b0aa6",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7e3cbb26-01d1-43e9-8fb7-fe693d028ca1"
        },
        "item": {
          "id": "dc2accee-8b02-4c3c-b37b-f3d3aa70fbfd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "86f46711-e4cb-4535-9962-f2bbc1d73b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "6adb42c9-9577-4c1d-b169-653c879a291e",
        "cursor": {
          "ref": "00c9dae3-77bd-4de7-baf9-dd100462a916",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6a9c997a-16c8-4b80-a3af-48176510937b"
        },
        "item": {
          "id": "6adb42c9-9577-4c1d-b169-653c879a291e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "72606541-4d96-4b51-8899-c550c09f6444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a3aa6687-e393-4c0d-b753-32edf4705e4a",
        "cursor": {
          "ref": "47b39ea8-4bfa-4ca6-a0bb-1f48a4c45b71",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0ed91ddb-80b5-4520-82ab-71229121a72e"
        },
        "item": {
          "id": "a3aa6687-e393-4c0d-b753-32edf4705e4a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "275c4c42-61f2-4ea6-974f-b29271f76796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "82e2a2b0-b6b3-4ce9-bf85-06412fa793bf",
        "cursor": {
          "ref": "afab9f5e-f138-4156-bf9f-30c4aaeb7294",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e08c406f-a28e-4b2a-97d7-b2f2e4b91674"
        },
        "item": {
          "id": "82e2a2b0-b6b3-4ce9-bf85-06412fa793bf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dbba032d-d7d8-4c87-9b36-4ef7c8f1dda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "78b212dc-ca5e-4ab9-8fb8-300043feaf41",
        "cursor": {
          "ref": "5a4b0d0e-8782-44e2-b286-0fbae5d4d2d1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1cede458-ae05-4f6a-8e3a-62778243acda"
        },
        "item": {
          "id": "78b212dc-ca5e-4ab9-8fb8-300043feaf41",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "40b1c657-23cb-472c-bf68-eea8d29770c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3d730ca5-5c45-487a-84a6-1d858b506257",
        "cursor": {
          "ref": "440ddd32-9572-4c8d-b703-9a8502ae67cc",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b5bda851-95d7-413d-b803-731e3e85514f"
        },
        "item": {
          "id": "3d730ca5-5c45-487a-84a6-1d858b506257",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bffa0556-3f80-47a9-88fa-0ae3a072fcc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "0b8cdc09-7465-40a3-9fcb-fdeab867f8c3",
        "cursor": {
          "ref": "c8988942-6b7f-4e9a-abe9-cd044b0fa28e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b511b170-bc4c-4b0b-8138-7cc987765632"
        },
        "item": {
          "id": "0b8cdc09-7465-40a3-9fcb-fdeab867f8c3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "67201b22-9f6c-4c13-84aa-386b526b403a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b2da96ef-af18-4cf6-8114-e2bad3b36bed",
        "cursor": {
          "ref": "408a333f-661d-4cc2-a94d-19659533680a",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3b24eb65-0c9b-4ce1-bfcf-fdba3dfe15ff"
        },
        "item": {
          "id": "b2da96ef-af18-4cf6-8114-e2bad3b36bed",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "24a083b6-a6f9-4fda-8935-812f9513859f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "16a53727-fe49-42b6-9def-40a60cfa676a",
        "cursor": {
          "ref": "acbbd7ad-35d9-4c0b-bb37-7c663ede91d7",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aa4a0b23-07de-4cd0-a680-bd3b8572b994"
        },
        "item": {
          "id": "16a53727-fe49-42b6-9def-40a60cfa676a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2659b11b-1314-4203-814c-26e69fb665f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7196d45b-0ea8-4724-874c-c4c37398a642",
        "cursor": {
          "ref": "92f085c8-d942-4fcb-9ce3-ccce46bb2b03",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5df9542a-164b-4536-abd4-5bb3a83e30b2"
        },
        "item": {
          "id": "7196d45b-0ea8-4724-874c-c4c37398a642",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7d9dd195-ac4a-46a1-a43e-8a6c2547448e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a33eab9d-8713-45a9-be1c-45897762922f",
        "cursor": {
          "ref": "a13e0802-66bc-4d5b-9048-f5ec58b28354",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da029372-d927-4ca3-86c2-497756d6265b"
        },
        "item": {
          "id": "a33eab9d-8713-45a9-be1c-45897762922f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6e58bb48-2cbf-4c31-803d-abbf7443d426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "d7784613-098f-4e9d-91a4-c34d404983fe",
        "cursor": {
          "ref": "efc0e627-8037-4123-b455-ab2e4e827f85",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aa5d9978-0b19-4c77-9fb7-8516d740bfc0"
        },
        "item": {
          "id": "d7784613-098f-4e9d-91a4-c34d404983fe",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f17f7cb0-14ed-40d8-84ce-b3c90b0eb9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "a5dd601b-a892-4be4-91a9-0b5b1a1954d5",
        "cursor": {
          "ref": "9ba878f3-4484-43da-8011-fd1054654d76",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b5ccd772-19de-4918-b249-49e6736f085a"
        },
        "item": {
          "id": "a5dd601b-a892-4be4-91a9-0b5b1a1954d5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "922820f7-ba8c-46ac-8ea6-7d1633403a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "5c887a3a-6b69-42b1-bb2a-ad42fe32d313",
        "cursor": {
          "ref": "c0c7f60d-1ac5-434f-9c70-8c8e95360660",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8f091d81-38bc-4b5d-8673-aa50308e6dde"
        },
        "item": {
          "id": "5c887a3a-6b69-42b1-bb2a-ad42fe32d313",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a48356cb-a9e0-4122-a031-a50da4649d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7023,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e497c5b5-5047-4e8e-a444-615db5f385b7",
        "cursor": {
          "ref": "07198b80-5230-424c-a816-e4586285f02c",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f05cfce5-b83f-4694-8029-f70d9b54c5a6"
        },
        "item": {
          "id": "e497c5b5-5047-4e8e-a444-615db5f385b7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "384fe347-c103-4314-991a-cf91098e57d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7056,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "4380b6b2-be42-4a2f-bc61-50ed53be148f",
        "cursor": {
          "ref": "7f9c5db3-df27-41bb-bd69-5fc435714687",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cda956bc-81fb-48e8-83fa-3389bb2afe66"
        },
        "item": {
          "id": "4380b6b2-be42-4a2f-bc61-50ed53be148f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4da76edd-caed-4a9a-a182-9a149428d273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4760,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "40e7c7d4-64b0-495c-bbd6-b1bf5725f8db",
        "cursor": {
          "ref": "823d8947-4726-4c73-8c77-570a1d589452",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "539df72e-41c4-4a8a-b98b-f0358aa29b34"
        },
        "item": {
          "id": "40e7c7d4-64b0-495c-bbd6-b1bf5725f8db",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "13152940-12dc-42ca-8490-3a9c4cf630d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6455,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cb0efe07-3ab3-4468-b0d4-a898aa7e6914",
        "cursor": {
          "ref": "bca58c74-64a5-4b2c-bedf-6fea0f1a6357",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c0644e61-244a-468e-83ed-dca7e2d80794"
        },
        "item": {
          "id": "cb0efe07-3ab3-4468-b0d4-a898aa7e6914",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "39e95298-90ed-45a7-8f1e-282d235e99b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4270,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "971e032d-c03a-4a8b-9240-87d776ab8341",
        "cursor": {
          "ref": "587fe70d-fd81-487b-b18b-97537b39b9b2",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9278cac0-3a15-4ae6-b25a-17a4b158cd8d"
        },
        "item": {
          "id": "971e032d-c03a-4a8b-9240-87d776ab8341",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a3c5ccc7-eadd-4040-96e9-8d76b6b8dc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "bee62996-ed53-4b12-b584-9b889177b4cf",
        "cursor": {
          "ref": "1a3d6830-d178-47ef-bca6-e5cbd93d1d0b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4dcf5841-5909-4463-984f-dba948394765"
        },
        "item": {
          "id": "bee62996-ed53-4b12-b584-9b889177b4cf",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74b30b9b-365f-4372-a765-0cefb60b2440",
          "status": "Created",
          "code": 201,
          "responseTime": 6153,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ee7c2555-01f6-4058-af95-2ee9378106ac",
        "cursor": {
          "ref": "6474b381-8d2b-46f6-8cf7-8c5100281439",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "759cafec-6840-4f7d-846c-0b7c4a5bb344"
        },
        "item": {
          "id": "ee7c2555-01f6-4058-af95-2ee9378106ac",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "09b3a561-4221-4e7d-a29e-13455057ad53",
          "status": "Created",
          "code": 201,
          "responseTime": 6334,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d6f5f91d-761d-4660-932f-fc7afeda2939",
        "cursor": {
          "ref": "c1a4bf65-de2f-4e2d-a3da-86bcd9c62c65",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "723e3548-ef78-4eaa-aa40-f91da8222e65"
        },
        "item": {
          "id": "d6f5f91d-761d-4660-932f-fc7afeda2939",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dfbf2415-4594-481a-b14c-f74be13ba510",
          "status": "Created",
          "code": 201,
          "responseTime": 4540,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3c76f2dd-df44-4160-956d-9fb679c9b188",
        "cursor": {
          "ref": "7eacdd66-d258-46cc-8856-02bc73e7c8c7",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c6b88fd2-3b53-45c7-a153-6b88fd2dc230"
        },
        "item": {
          "id": "3c76f2dd-df44-4160-956d-9fb679c9b188",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "17ecd82c-5411-4bd0-bff9-53c5218e4b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e8a571f5-1f99-48bd-ba0a-c08b3275b001",
        "cursor": {
          "ref": "e4308236-b92a-4297-ba03-2418396462ed",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "395bf9a4-6998-4115-b03f-e33a6a4b6bd6"
        },
        "item": {
          "id": "e8a571f5-1f99-48bd-ba0a-c08b3275b001",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d605e2df-55f4-4989-a544-c248d2a45849",
          "status": "Created",
          "code": 201,
          "responseTime": 6397,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b69ffc5b-a9b1-44bb-9691-143f98039425",
        "cursor": {
          "ref": "654304f4-936b-47a1-8a1e-6920bf87f69b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8a947775-ec86-4841-af42-13d19987c676"
        },
        "item": {
          "id": "b69ffc5b-a9b1-44bb-9691-143f98039425",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2a3bcca8-6a3d-450a-85a2-09fc9cd0f274",
          "status": "Created",
          "code": 201,
          "responseTime": 4533,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1716bec4-8eb1-4c4c-9671-9e1dcd5a6417",
        "cursor": {
          "ref": "c36c25ae-d248-4dd2-b691-2a2f8d3f30f4",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ea035c50-4dad-4d9a-b284-d1f31d36e82d"
        },
        "item": {
          "id": "1716bec4-8eb1-4c4c-9671-9e1dcd5a6417",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2593d4b2-f0e7-4c88-b750-c3634e4feb4c",
          "status": "Created",
          "code": 201,
          "responseTime": 6356,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4a2cb885-dbaa-4818-8919-e9d18ba29620",
        "cursor": {
          "ref": "c9a6d96e-7c81-4ba3-baf3-8bbcc2721c43",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6b5f7ebf-b0ad-4754-96c3-789f33e11c39"
        },
        "item": {
          "id": "4a2cb885-dbaa-4818-8919-e9d18ba29620",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7e28a33a-5117-43ab-9cb3-6918fd25831e",
          "status": "Created",
          "code": 201,
          "responseTime": 6330,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6c746795-456b-4679-bfb2-91642c5c04ef",
        "cursor": {
          "ref": "de11af39-38c4-4f27-84d7-83816272189a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9be4b258-9ef6-4064-80a0-2f98f2eb7d04"
        },
        "item": {
          "id": "6c746795-456b-4679-bfb2-91642c5c04ef",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4eba8926-5b6b-4d56-8725-b76a0d096931",
          "status": "Created",
          "code": 201,
          "responseTime": 4487,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e87ac23f-6041-4815-b7ff-15e1c7ee4daf",
        "cursor": {
          "ref": "9c3fa4cc-cfd2-4408-9783-f823848b4098",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "561fcec8-73e2-4c9c-ab7a-5ab55127e1c8"
        },
        "item": {
          "id": "e87ac23f-6041-4815-b7ff-15e1c7ee4daf",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3d32a6ba-e2fc-4593-8e9b-462c8200010e",
          "status": "Created",
          "code": 201,
          "responseTime": 6814,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cdc6bc5f-a8b0-47d4-a37b-dfd45bb94054",
        "cursor": {
          "ref": "c74b9821-48e5-4ed1-bf11-6a1b2921a0f0",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "48fc0e1f-a0eb-4c0f-8311-401035339b3d"
        },
        "item": {
          "id": "cdc6bc5f-a8b0-47d4-a37b-dfd45bb94054",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "37ac5508-793e-4376-8ed8-97eb46a0acfa",
          "status": "Created",
          "code": 201,
          "responseTime": 4583,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6fd62f72-53d6-40fb-96f7-80282c40f27c",
        "cursor": {
          "ref": "e1056dc9-bc0b-4cd8-a09f-20cd7dac6228",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "75a10d19-058d-43ec-b9c8-776431e90e60"
        },
        "item": {
          "id": "6fd62f72-53d6-40fb-96f7-80282c40f27c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "088abeb6-f444-4fe1-b041-24afb9a89760",
          "status": "Created",
          "code": 201,
          "responseTime": 6511,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a6322f87-8698-42e9-8828-28943dd1f197",
        "cursor": {
          "ref": "759cddb2-dfbc-4d14-943a-b74ada9f8442",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ef4b1a57-2804-4c4c-855b-9783a4241998"
        },
        "item": {
          "id": "a6322f87-8698-42e9-8828-28943dd1f197",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f5e22db6-f8fb-491c-87c7-65b4c35c917a",
          "status": "Created",
          "code": 201,
          "responseTime": 6456,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9c296243-cc29-49d1-a333-d9e5b457c2fb",
        "cursor": {
          "ref": "5ebc27ad-5978-4ed3-8358-dc4102c98d79",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c594c2d9-035a-4b20-80f1-07282d9a8ddc"
        },
        "item": {
          "id": "9c296243-cc29-49d1-a333-d9e5b457c2fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2ff47d1c-e2d1-4d04-9125-272dcd4c92a7",
          "status": "Created",
          "code": 201,
          "responseTime": 4459,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "730f6988-3588-4cf6-8232-60f4c6b9809e",
        "cursor": {
          "ref": "64f9b4b9-fcad-47d8-9112-636cd26fad33",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e8824867-dc3e-4be9-abbf-a857c873f02b"
        },
        "item": {
          "id": "730f6988-3588-4cf6-8232-60f4c6b9809e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6e0cc7a5-09b9-4769-a5b7-a4ffffe210a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "31d930b0-20ff-44e3-b838-4b38d83eda5f",
        "cursor": {
          "ref": "5eec3ad7-1ade-40ee-acf1-b32d85fb12b3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "02783768-7020-4814-be48-c2fa50e2e63e"
        },
        "item": {
          "id": "31d930b0-20ff-44e3-b838-4b38d83eda5f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7b04b5e8-eec7-4fc2-a44a-930865531233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "08573775-a3dd-4c90-ba8a-46bac189bdb3",
        "cursor": {
          "ref": "2021fbe0-8046-4d32-8073-63de74dca930",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "61acfd87-537b-4ebd-989c-880bcc7253ca"
        },
        "item": {
          "id": "08573775-a3dd-4c90-ba8a-46bac189bdb3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1f86ff8d-44e5-4113-8bd1-9b940618b4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "65311147-2459-4a67-9994-e9182ab1ff67",
        "cursor": {
          "ref": "5f767922-1bfa-4069-87a7-3f72cda49f67",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3196134f-43ce-456f-9b54-12280d5269fb"
        },
        "item": {
          "id": "65311147-2459-4a67-9994-e9182ab1ff67",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b3077d87-2c9f-4fb8-a984-dfdfb0b1e028",
          "status": "Created",
          "code": 201,
          "responseTime": 6583,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c51626d3-5456-41f2-9783-9155e2c91655",
        "cursor": {
          "ref": "5af098b8-3f60-4f78-b727-a90f44129dc1",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e964a2bc-3da7-4756-9c6c-27fa6075d309"
        },
        "item": {
          "id": "c51626d3-5456-41f2-9783-9155e2c91655",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8f44efce-46e7-4169-bd9c-d5df486c4097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "589715ff-1488-4cdc-90c1-4e3031547a72",
        "cursor": {
          "ref": "e521332c-0f65-4fd9-91b1-710fe06193b8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "abbb5259-a95d-4af2-81e3-5caf4869ad25"
        },
        "item": {
          "id": "589715ff-1488-4cdc-90c1-4e3031547a72",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2f36e1b6-d28f-48e1-a863-11848bb223e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e16448e4-e1ec-4d29-aacd-3cacc886d49a",
        "cursor": {
          "ref": "1eae0234-e08e-4c4e-84d3-1731461ea62d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bc17a0f5-a046-4b1c-9f48-4e26291d242e"
        },
        "item": {
          "id": "e16448e4-e1ec-4d29-aacd-3cacc886d49a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b657d433-9a05-4b0b-8ca1-a93a72b71e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a069a6d1-4bcb-426d-9d9f-c393b3f9da42",
        "cursor": {
          "ref": "f1816ee4-c44a-491e-b98c-1d9b8d77c148",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a88a7fd2-d740-4cd9-8d3e-8ebebd6e2211"
        },
        "item": {
          "id": "a069a6d1-4bcb-426d-9d9f-c393b3f9da42",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b9906f70-fdc2-48b2-ac7c-778450d394a7",
          "status": "Created",
          "code": 201,
          "responseTime": 4393,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "49754c79-62ca-4970-9a57-21633b216593",
        "cursor": {
          "ref": "c6877dc1-74e5-4fe9-80f4-9c1a6df7a6ae",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2f6a0f0b-3d45-41d7-a8ee-f16bd2b7d006"
        },
        "item": {
          "id": "49754c79-62ca-4970-9a57-21633b216593",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f9f4f270-e9d2-407e-baf7-c6fb21b3dfcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "8dbb1576-e5d8-41b0-b2e6-01f69f75f118",
        "cursor": {
          "ref": "11da54d3-858a-49a3-95e1-aedbe9c150ad",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8332d633-27aa-42fc-920d-5000e0d13474"
        },
        "item": {
          "id": "8dbb1576-e5d8-41b0-b2e6-01f69f75f118",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "76dfe28e-57e9-49c0-bbd2-8de66aa498a6",
          "status": "Created",
          "code": 201,
          "responseTime": 6324,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "958b5c7d-403c-4069-9b90-58198448a17d",
        "cursor": {
          "ref": "500eee36-2548-4fc4-8902-83f024c334eb",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "405bbc80-196e-4bc6-a833-db62aa481845"
        },
        "item": {
          "id": "958b5c7d-403c-4069-9b90-58198448a17d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fb7a44a9-afa1-4c99-bcc3-20695e4e7256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "25e490bd-1e47-4b7c-9b0d-b287f98731d4",
        "cursor": {
          "ref": "f8497d5a-3f9d-4c05-b7fb-7d3f0b2bf9cb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8f0de0db-fd5a-4d8c-918b-ee07c9a7909e"
        },
        "item": {
          "id": "25e490bd-1e47-4b7c-9b0d-b287f98731d4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "89157018-0204-4088-b08e-a3d9ae66ca06",
          "status": "Created",
          "code": 201,
          "responseTime": 6296,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "446ece21-0182-46fe-a8fb-a4d9fdba6024",
        "cursor": {
          "ref": "2705947d-934b-4142-b8a2-e4a3b18331b2",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5ffb80d9-101c-43d2-afe2-254196e58643"
        },
        "item": {
          "id": "446ece21-0182-46fe-a8fb-a4d9fdba6024",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e00c65e0-2344-43d0-9d3c-82842aa11ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4429,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "251ddf33-52f8-45a5-93bb-7151961a48cb",
        "cursor": {
          "ref": "7b27651e-2439-4e54-bc5d-de9e10a28d85",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "036359f8-e93b-449b-8abb-fa56cc01ed4e"
        },
        "item": {
          "id": "251ddf33-52f8-45a5-93bb-7151961a48cb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "605bab83-1615-40ee-a72c-919746c77530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6960,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "277bc98f-1e6d-45a5-a97b-15000082b3e9",
        "cursor": {
          "ref": "f25bb16a-aef5-49f0-9474-fcaf3750de8f",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "05172bd8-bc87-4030-a5f5-73fcb1d2d1f7"
        },
        "item": {
          "id": "277bc98f-1e6d-45a5-a97b-15000082b3e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "45b3b400-0fbf-4714-a03c-49f649400784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "58718ed0-d588-46bd-8386-37bf87f98937",
        "cursor": {
          "ref": "d807dc09-be0d-4997-961d-8effe2989705",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f481b9e4-781c-4dfb-af12-59e5c5abfe27"
        },
        "item": {
          "id": "58718ed0-d588-46bd-8386-37bf87f98937",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c4489e1b-dc41-47c5-8964-6bcefb9c566a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4738,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a9af9a87-f1a7-4891-b050-677e311103e9",
        "cursor": {
          "ref": "2747a092-98a4-4f53-8652-9c0d4971947c",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0acccb7c-ee73-4501-ab56-4d5332c10cf3"
        },
        "item": {
          "id": "a9af9a87-f1a7-4891-b050-677e311103e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "39eb14b1-69ae-44f0-9a91-443f966e8fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "6dfe675d-cc96-4621-82e4-1cfc79915d5d",
        "cursor": {
          "ref": "5f221cd3-e084-43cc-9927-bbfc172b72df",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "80148b0e-a05d-466a-950f-21537bfd191f"
        },
        "item": {
          "id": "6dfe675d-cc96-4621-82e4-1cfc79915d5d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d68cdf3b-3f54-4512-882a-7c6137ae23ca",
          "status": "Created",
          "code": 201,
          "responseTime": 8194,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2cdc288f-482d-4836-bbcc-f3751f292871",
        "cursor": {
          "ref": "6357c7ec-7b10-4fad-ad83-ddae257344e5",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bfc1d93c-a044-4345-a948-8182751122f9"
        },
        "item": {
          "id": "2cdc288f-482d-4836-bbcc-f3751f292871",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b31b7b9e-1232-4eed-a2c1-c0162bc90c47",
          "status": "Created",
          "code": 201,
          "responseTime": 8617,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "93477682-915f-498c-8d3e-7351b73b835e",
        "cursor": {
          "ref": "9a7556e1-f80e-4b3f-b775-41ee7dc47733",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8a651f5a-8a61-4d9e-864a-a35b7995ab8b"
        },
        "item": {
          "id": "93477682-915f-498c-8d3e-7351b73b835e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "71e8a77b-82e3-409c-bb16-7250b3b65a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "e6279092-4cd1-4668-a62b-db80c8886dce",
        "cursor": {
          "ref": "01681d37-0723-4b7e-a571-7ca3ad44590a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "22b27a0f-0ee3-4bc6-9469-4f60f1f8c6fe"
        },
        "item": {
          "id": "e6279092-4cd1-4668-a62b-db80c8886dce",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ac004aa0-a416-4c3c-96a1-1a9ee6146621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "9ebf7107-8883-4366-958b-d602002b004b",
        "cursor": {
          "ref": "efc95484-102d-4b01-8450-bf0cd5ebd3ec",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "21cbfe8c-4689-4357-b30b-8bb45a6c4f42"
        },
        "item": {
          "id": "9ebf7107-8883-4366-958b-d602002b004b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5ee3f0b6-929f-45ba-a4b6-8e78fd3173f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "652edab1-9d71-4188-871d-fb2884d73f49",
        "cursor": {
          "ref": "f4aaff6f-9a8d-4253-b428-2b407085619a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6afdf728-f050-4e08-8252-eb3e76b7477a"
        },
        "item": {
          "id": "652edab1-9d71-4188-871d-fb2884d73f49",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3ec5d987-0e0b-426c-9546-53d4e118358d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ab6377b5-e868-4b08-bf99-2a418b40f1ab",
        "cursor": {
          "ref": "db513587-4188-48a0-84ec-117ea5ae0162",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0215c63f-74a5-4222-ade2-0bceeba7abfe"
        },
        "item": {
          "id": "ab6377b5-e868-4b08-bf99-2a418b40f1ab",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9b0c51dd-b231-4164-9446-2fe3795ff4ec",
          "status": "Created",
          "code": 201,
          "responseTime": 10272,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "cea82df2-5e6d-49be-af59-e99ab5c0e9a2",
        "cursor": {
          "ref": "704b52c3-3fe8-4433-aff9-0e94f2a206df",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3a4c0f31-c054-46e4-885b-e5f745e0ef06"
        },
        "item": {
          "id": "cea82df2-5e6d-49be-af59-e99ab5c0e9a2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "83bc812b-1e3b-4519-a653-99203d9f312a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "12da44c6-8d80-4b6b-9f28-9eb1c82368ef",
        "cursor": {
          "ref": "8e22f17f-73d1-4f8c-960b-b331dc5f9ff8",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b4baeed7-4a6d-4542-9361-3d33fbcc0210"
        },
        "item": {
          "id": "12da44c6-8d80-4b6b-9f28-9eb1c82368ef",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1582254e-44fd-4e60-8c87-97f3ba20c109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "a555f7e1-144d-41b4-8bfc-6f09c93bc59f",
        "cursor": {
          "ref": "146b5c74-f5cd-4d2b-a230-e859a5fb6fb0",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3d4c236d-892f-4866-ac05-80eddc449704"
        },
        "item": {
          "id": "a555f7e1-144d-41b4-8bfc-6f09c93bc59f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1883fcc4-6234-4c4c-bc7f-8541d5ac5689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "20e4764a-020c-47d0-b5bc-5d1fc681bf6b",
        "cursor": {
          "ref": "87f5552a-1f63-46a2-8ef4-66cbeb5f24af",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "49a7c310-a6d8-4576-9a65-22abcf44ebf1"
        },
        "item": {
          "id": "20e4764a-020c-47d0-b5bc-5d1fc681bf6b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b8740a2f-0889-4442-af67-dbb6ab02b358",
          "status": "Created",
          "code": 201,
          "responseTime": 9225,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "bd18453d-5358-4623-acb3-91e413152e24",
        "cursor": {
          "ref": "1749e6ba-92f3-45c1-a95f-7b72db887e25",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f1425853-f942-4bb4-a1df-c44e72b79178"
        },
        "item": {
          "id": "bd18453d-5358-4623-acb3-91e413152e24",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4779fdc5-b6c8-452d-bd0a-0935d2ae58b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "aad8ce59-acb2-4efa-b1d8-817ffc432713",
        "cursor": {
          "ref": "fd515503-fba5-47e5-92b8-514ee7a38c48",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3242c300-6bf4-49f7-a89b-279223cfb533"
        },
        "item": {
          "id": "aad8ce59-acb2-4efa-b1d8-817ffc432713",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "770100c9-7b00-4678-bb26-429842ce4823",
          "status": "Created",
          "code": 201,
          "responseTime": 8772,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0cc11ec4-f161-4776-ab2d-dab3b292f366",
        "cursor": {
          "ref": "2e8c5dad-7ae6-4ae8-9edc-7803c66b70d9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0c27ed01-a691-439e-ae98-84aaf8e62050"
        },
        "item": {
          "id": "0cc11ec4-f161-4776-ab2d-dab3b292f366",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d94f7eea-2c38-4db3-88b5-8307cf3b0975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "0374eb99-ee7f-47dd-837b-eae976df7abf",
        "cursor": {
          "ref": "f2fe21d3-e56c-4fa0-9443-468d644ce822",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a0deeb57-1616-4775-a633-ee4623bf3c9e"
        },
        "item": {
          "id": "0374eb99-ee7f-47dd-837b-eae976df7abf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0484ffbb-88d5-481d-bc79-d590c2588c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "71b1488c-9d53-4cda-9dae-98e2d7301b3a",
        "cursor": {
          "ref": "e2de24a2-a79a-44d6-9a8b-e013c5851a9f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6c946731-20c8-4457-932b-84d3284c7bd3"
        },
        "item": {
          "id": "71b1488c-9d53-4cda-9dae-98e2d7301b3a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "58c7416a-9b80-4fca-856a-fbd93d00747a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "3c6914e8-5c32-484c-b27c-a7c59e2d4c0a",
        "cursor": {
          "ref": "249eabff-7c0a-497a-90ca-e64edeadbda2",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "76d8fa74-8eff-4bc5-9b18-5b853c77c66a"
        },
        "item": {
          "id": "3c6914e8-5c32-484c-b27c-a7c59e2d4c0a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7f74cf4f-b35e-4e5a-a3ed-7f20244a21c7",
          "status": "Created",
          "code": 201,
          "responseTime": 9503,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "c44cf121-dcaa-4d6d-b7db-299d42aadf76",
        "cursor": {
          "ref": "862374cc-4fa3-4d9d-9e31-06f49da4c352",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5ada8f57-e3b2-4316-a2d2-7aadffdf5ec6"
        },
        "item": {
          "id": "c44cf121-dcaa-4d6d-b7db-299d42aadf76",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cd46a8f7-8b46-4c80-9dbe-8f98609145a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 664,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "292dddeb-7506-4448-81dc-dfad64563c9c",
        "cursor": {
          "ref": "a1054067-10fa-4462-84ee-2669ea375adc",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ff9a74a1-0e40-484d-94f0-38790f284ad1"
        },
        "item": {
          "id": "292dddeb-7506-4448-81dc-dfad64563c9c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e77fe1d5-ce78-4491-bccd-df1aa20a9025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 522,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "4154783f-e943-4749-90bc-97861375e7a0",
        "cursor": {
          "ref": "4c7fce2a-4aa8-4dc6-af3f-0ad0c569c9e9",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dd61f349-d2f0-4b24-9b9b-1612b1dfb228"
        },
        "item": {
          "id": "4154783f-e943-4749-90bc-97861375e7a0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bc4cf498-3739-487a-98c5-72977bb3a0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 556,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "43589772-0f09-4b96-853b-e5334e9a122c",
        "cursor": {
          "ref": "5ebe6c43-a0ff-4993-b5ac-fb273766da4a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "264ec190-dc22-4f71-b690-7292f25a97d9"
        },
        "item": {
          "id": "43589772-0f09-4b96-853b-e5334e9a122c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1a902c6f-7f2b-43b2-8e98-9710eed9af9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "08fb59f7-a21d-494a-b5d9-58354d0d0ac2",
        "cursor": {
          "ref": "0facd9fd-ea86-4759-8afa-b49822dd1cf6",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5f674af4-fc6c-40e2-84a9-921e957e2499"
        },
        "item": {
          "id": "08fb59f7-a21d-494a-b5d9-58354d0d0ac2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0620d8f0-441d-49bf-96d5-536d638aad1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "b71917f5-467d-4353-be83-a0775a9adc79",
        "cursor": {
          "ref": "2418d7b3-a5fa-43c6-863b-1838ac5db81d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7eab9894-28fb-4c6a-92ab-62b04609f8bd"
        },
        "item": {
          "id": "b71917f5-467d-4353-be83-a0775a9adc79",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dd739ace-d2aa-419b-ac91-5cdf258181c6",
          "status": "Created",
          "code": 201,
          "responseTime": 11328,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "773d5e34-810c-4a26-8334-aa36006bd9b6",
        "cursor": {
          "ref": "136fd3a6-24be-4433-8083-70399c2ac181",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a8fd29f9-3259-4d91-85f1-655afc28bbc2"
        },
        "item": {
          "id": "773d5e34-810c-4a26-8334-aa36006bd9b6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7b6e40ed-06ef-4085-86ed-939e3188155d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3b1e4d7e-c2f8-444b-abe2-863c1f0e148a",
        "cursor": {
          "ref": "b3165f62-5c1e-4229-836b-c2a5611dd7c1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "af1cc440-8b44-4b93-8fe1-d3e71a6c8c2f"
        },
        "item": {
          "id": "3b1e4d7e-c2f8-444b-abe2-863c1f0e148a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e6a472bd-deca-4167-a4b3-1a7538c5ddb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "e3c701c8-d8f4-4a80-b032-28998762c970",
        "cursor": {
          "ref": "2dd2a6a4-5b31-41fc-9724-7287cc1bcf90",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0b4c390c-4a1e-4ae1-b1c8-751361dbb0a9"
        },
        "item": {
          "id": "e3c701c8-d8f4-4a80-b032-28998762c970",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4eb804e8-9684-43a6-86b4-1e42651bf24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "7a1b3727-04d1-46cd-b1d5-75031c930f24",
        "cursor": {
          "ref": "b2eb5f47-41bf-4955-bb8b-e56332225746",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b25e8c65-3097-475b-8a6b-9998242dc756"
        },
        "item": {
          "id": "7a1b3727-04d1-46cd-b1d5-75031c930f24",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "826542fd-5d2c-4390-b9e3-010a215d786e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "81edc3a9-3e26-47a7-a6a5-6c9227611fd3",
        "cursor": {
          "ref": "77201949-b491-4f63-97e1-034ffec87af3",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "404936f5-91c3-48d4-9bc9-60351d06a815"
        },
        "item": {
          "id": "81edc3a9-3e26-47a7-a6a5-6c9227611fd3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ae4f32b7-c6b0-4e6b-9671-1382f5098bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "b6ae82b2-b760-4fc0-a33f-3b4bc4fc3253",
        "cursor": {
          "ref": "346b0b20-2054-4b2a-b4dc-0fc6c182be85",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ad16aefb-8538-4022-8c48-d3d2186a183b"
        },
        "item": {
          "id": "b6ae82b2-b760-4fc0-a33f-3b4bc4fc3253",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "21355949-f70f-4362-91b3-70265b15cc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "eb36d67b-378f-417e-ae76-0589a76fc866",
        "cursor": {
          "ref": "c5122eb2-8ed5-429e-931a-85bacb8bd143",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8fdf4862-f311-48aa-8d30-6f1288834c7b"
        },
        "item": {
          "id": "eb36d67b-378f-417e-ae76-0589a76fc866",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ea96324a-7076-4024-8f13-b52cc4f8dbf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "71870263-664d-4423-a770-5d8429381473",
        "cursor": {
          "ref": "e6a37a0b-026a-4310-b1fd-b5e560a50f94",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "577c4e8d-645c-4987-af8b-029717f22be6"
        },
        "item": {
          "id": "71870263-664d-4423-a770-5d8429381473",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ea2d8cd0-7b11-4e11-8ee9-710e863180b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "d682723f-6cc5-4e7d-9ba8-702b841bbf4c",
        "cursor": {
          "ref": "10d07ae2-71de-45f4-8561-3dff6be64a6c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a6325737-d896-4d9d-abf9-30bb96c01344"
        },
        "item": {
          "id": "d682723f-6cc5-4e7d-9ba8-702b841bbf4c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c3275ba0-5005-4765-8810-9fac27c654e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b726c65-7677-4f34-bc9b-9aa0d34d8094",
        "cursor": {
          "ref": "c516f226-469a-4614-bc0e-fc24c2db3fc2",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4be84057-3cee-4539-9390-ed57005b6c9c"
        },
        "item": {
          "id": "6b726c65-7677-4f34-bc9b-9aa0d34d8094",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "baee1891-220c-4282-847a-99a038f9128f",
          "status": "Created",
          "code": 201,
          "responseTime": 8078,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "415f6514-f010-4f0b-b268-43cfc261acee",
        "cursor": {
          "ref": "d977de5f-02ce-4a7f-a07a-7dd11f0994af",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "56d9650d-7935-40fe-bd33-0320174529f9"
        },
        "item": {
          "id": "415f6514-f010-4f0b-b268-43cfc261acee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "74d2036d-0713-4699-80d4-734f01befc77",
          "status": "Created",
          "code": 201,
          "responseTime": 7640,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:104)"
            }
          }
        ]
      },
      {
        "id": "aa0af1ab-f057-46ce-8efc-f52c298b60be",
        "cursor": {
          "ref": "41651a4d-e46c-4260-ba1c-e9fb74dff105",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a62f1586-22e2-4539-8366-74a9c8feec25"
        },
        "item": {
          "id": "aa0af1ab-f057-46ce-8efc-f52c298b60be",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8ab9e452-4204-46a7-b13e-2a36d7691fdf",
          "status": "Created",
          "code": 201,
          "responseTime": 10205,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:105)"
            }
          }
        ]
      },
      {
        "id": "f99720ee-ebfa-4852-9d67-b406414929f5",
        "cursor": {
          "ref": "c9949216-c421-4c8d-84c0-25998bbab4d4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "eb92e375-39da-4d96-972f-8a4855dccf5a"
        },
        "item": {
          "id": "f99720ee-ebfa-4852-9d67-b406414929f5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bc466932-fc64-4410-bc30-ce5c7646501d",
          "status": "Created",
          "code": 201,
          "responseTime": 7984,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "21d406e7-92b0-4896-b6b8-fe3ec47888d6",
        "cursor": {
          "ref": "62ceadb0-ec8a-4922-8cad-2f15b91784a0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a50b5dc1-104b-4bd2-9251-4eb1e9b88e5c"
        },
        "item": {
          "id": "21d406e7-92b0-4896-b6b8-fe3ec47888d6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "51d0d0c0-1f06-46f6-8b43-a7c794f1930b",
          "status": "Created",
          "code": 201,
          "responseTime": 7836,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "41f4eb09-4716-4ef6-b7c5-6a9178765efb",
        "cursor": {
          "ref": "0d147535-92e3-4843-8499-c738e1449821",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c646d96e-18e6-473d-8ca0-baed7c30b3dc"
        },
        "item": {
          "id": "41f4eb09-4716-4ef6-b7c5-6a9178765efb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fe50f535-a91b-45c2-8e34-e48c5f75b0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 369
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "53c234ac-7796-40c4-8aa9-077d1a4cc5b7",
        "cursor": {
          "ref": "a5f3a7be-02a8-4cb3-b63e-ad3e022139d3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b1189c59-be59-4334-80d3-a2b71ef6e79c"
        },
        "item": {
          "id": "53c234ac-7796-40c4-8aa9-077d1a4cc5b7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a058ca2-2a22-456c-b926-b9e164e801d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "53c234ac-7796-40c4-8aa9-077d1a4cc5b7",
        "cursor": {
          "ref": "a5f3a7be-02a8-4cb3-b63e-ad3e022139d3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b1189c59-be59-4334-80d3-a2b71ef6e79c"
        },
        "item": {
          "id": "53c234ac-7796-40c4-8aa9-077d1a4cc5b7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4a058ca2-2a22-456c-b926-b9e164e801d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "bdefbf42-960a-42f5-a076-2672418e578b",
        "cursor": {
          "ref": "11bfe48b-f4e2-487f-9a2b-26752100868d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "92b09dd7-4530-4410-bfed-230cc3019ca0"
        },
        "item": {
          "id": "bdefbf42-960a-42f5-a076-2672418e578b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c6f2a245-81de-4064-b6cd-971e7f623d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "a2bda564-c67e-4b19-be02-4f8f971c30ef",
        "cursor": {
          "ref": "9a9b425b-bb1b-4abc-bcee-f60a1ee7f6b4",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6d84c0b7-20ed-4ebe-ae21-c48fac47027d"
        },
        "item": {
          "id": "a2bda564-c67e-4b19-be02-4f8f971c30ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1200a54d-b92c-4bdd-bd1d-c3603055ef4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c2e6abf8-2906-4e28-990e-be4483941ed2",
        "cursor": {
          "ref": "0573c384-4b3b-4338-82d6-13475081f720",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bca69e84-37c2-400f-960c-076377b0e575"
        },
        "item": {
          "id": "c2e6abf8-2906-4e28-990e-be4483941ed2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d56fb1dd-f7c1-4c4a-99c9-fa6c555a05c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ccf4551f-70c5-42ed-8867-73bb47db40ab",
        "cursor": {
          "ref": "ad424328-e37d-40c3-82fa-d30a4c434df9",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ba0af3f8-f145-486d-843e-ea169e84596d"
        },
        "item": {
          "id": "ccf4551f-70c5-42ed-8867-73bb47db40ab",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0bfc082a-0dfc-4364-b63e-2e20614c3554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c95c59fe-96cf-4426-bedc-db45c61ed94e",
        "cursor": {
          "ref": "66768bbf-b7d8-47bc-b1b8-1d74f5efbf8c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "da959125-8015-4250-9a92-1fdbbaeb0f5d"
        },
        "item": {
          "id": "c95c59fe-96cf-4426-bedc-db45c61ed94e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "39d7fbdd-abf7-4315-b3e7-f4f432ad7a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f4cc7703-cd51-450e-91b1-0f545d53101e",
        "cursor": {
          "ref": "c0842246-a24f-43cc-95e0-b46db71f9f83",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "879f5209-11b7-4543-897c-abfdcc83877b"
        },
        "item": {
          "id": "f4cc7703-cd51-450e-91b1-0f545d53101e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "29ebd719-74a2-4e98-bc8b-863a66e804bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7f473540-8964-476f-a094-4edb77e74f3d",
        "cursor": {
          "ref": "80a89c40-1959-4c7c-9f43-99eb90c15bdf",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4ecfc9f6-eb26-4bd2-a617-20dd98bcbf0b"
        },
        "item": {
          "id": "7f473540-8964-476f-a094-4edb77e74f3d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3871343f-3cb4-4b5f-b3c0-0d161b5ddd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b48413c8-5f02-43e5-a653-780e52e3e9df",
        "cursor": {
          "ref": "34f85269-1c1e-4c38-9a8e-73ad9aa84934",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "935aa2f8-8bf7-4f98-af58-18b2aff1f5fd"
        },
        "item": {
          "id": "b48413c8-5f02-43e5-a653-780e52e3e9df",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "65e75c54-a9cd-44a5-a45b-13343029f4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cb8abb37-ca8c-4c98-b609-f59afd86e970",
        "cursor": {
          "ref": "2e1e4060-1a1a-4c87-895e-fbd23bf0edd9",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d92a5ca5-6ca9-41c7-bdf8-aee4ed63652e"
        },
        "item": {
          "id": "cb8abb37-ca8c-4c98-b609-f59afd86e970",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ce2b8526-b5fc-40f4-b69c-abbba6eb3ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "cf377c3e-cf5b-4b4e-82d0-aa04fc253519",
        "cursor": {
          "ref": "cee10602-3919-48ef-8a4c-90339acff231",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "db5902a9-c88d-4b43-a217-60b61044dbcf"
        },
        "item": {
          "id": "cf377c3e-cf5b-4b4e-82d0-aa04fc253519",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "26916e83-cbbf-47e2-bcda-77b8a6802597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e0f7a07f-f12d-420b-bf5c-e05e46b94122",
        "cursor": {
          "ref": "6075b6f9-7717-494c-907e-774b8577e113",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "65925935-036a-4222-9146-0fe46c598930"
        },
        "item": {
          "id": "e0f7a07f-f12d-420b-bf5c-e05e46b94122",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "652b5af5-3313-4225-80d6-9f944b630ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "a58b7fa9-0a29-49f3-8178-5a13a086c15e",
        "cursor": {
          "ref": "d7d72adb-0407-4dfe-a57d-1dc1180836ce",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a4f1c1d5-ac0e-40e2-b41c-46f481174450"
        },
        "item": {
          "id": "a58b7fa9-0a29-49f3-8178-5a13a086c15e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "df018238-af2c-4d1c-afd0-36e4e0d462c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "08bd30ed-73ea-4fb9-b5d6-47875cd7239c",
        "cursor": {
          "ref": "725e6225-6e45-4252-9fff-f7eb799623fc",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3fa805aa-197e-4624-a39d-2c2ad32f4a34"
        },
        "item": {
          "id": "08bd30ed-73ea-4fb9-b5d6-47875cd7239c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "087bf301-a0d5-4b4b-8c3d-19774877859b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "75dc4fec-58be-4084-811d-64f94593ccb2",
        "cursor": {
          "ref": "5b76696c-03db-4adf-a6f1-d602e01cc1dd",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fd3028c5-854f-423e-9cfd-84f8171f729d"
        },
        "item": {
          "id": "75dc4fec-58be-4084-811d-64f94593ccb2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4ad6d8e9-eaf9-4684-832e-31d907212151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3f14f633-ed60-43f5-9840-5baf96fcdd10",
        "cursor": {
          "ref": "563e92d5-70b2-418f-9565-fbc2abaf81cf",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3c7f671c-3a77-43c9-bf87-5110981a6809"
        },
        "item": {
          "id": "3f14f633-ed60-43f5-9840-5baf96fcdd10",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7f682549-0f39-4fc1-9f35-928f2f8d9650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fcec1542-a892-4f7c-9052-5933fd83d494",
        "cursor": {
          "ref": "0fe803be-c49c-4cd4-8b87-f31297f4b0a4",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "41e2e843-8083-4c25-9d61-ad27f24e9fb7"
        },
        "item": {
          "id": "fcec1542-a892-4f7c-9052-5933fd83d494",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f0e2f717-83fa-4306-a7cc-3f3b0d986a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "846d0c8e-e767-4b25-a206-0b4b95fc8ee3",
        "cursor": {
          "ref": "3e314eb1-ad9a-4059-9ca6-30f5722af06a",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1256e1d1-ede8-4e74-8cb3-8255d5c21eac"
        },
        "item": {
          "id": "846d0c8e-e767-4b25-a206-0b4b95fc8ee3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e716fb20-a500-412a-aa69-5c8f02866925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5a9c5d27-6734-4910-9f3d-8eee8cfc2bee",
        "cursor": {
          "ref": "178ab347-db7e-4ab3-9c1f-e5631ca344d1",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d9362cb5-3cb5-4dfb-bcd0-25f7cc8b8f4d"
        },
        "item": {
          "id": "5a9c5d27-6734-4910-9f3d-8eee8cfc2bee",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "25c22a44-ab34-4ba6-95e9-3613e45c7e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "25ea8b07-3dbd-4f94-bd4b-2b275a95161a",
        "cursor": {
          "ref": "a955fbeb-78f7-43d0-bf1a-32ad1a82a153",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "41045703-e0af-49e9-8cc9-9d3e1b292724"
        },
        "item": {
          "id": "25ea8b07-3dbd-4f94-bd4b-2b275a95161a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "da2f4934-0717-4c12-8689-c6421d6ae1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "dffa04a1-35f1-4413-8228-4ab277e25d82",
        "cursor": {
          "ref": "1a61c7de-3a63-4160-8932-d240f27c6074",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b95eafdf-a111-4596-9df6-c38fe8665736"
        },
        "item": {
          "id": "dffa04a1-35f1-4413-8228-4ab277e25d82",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "eb7eccbd-0d53-43e3-96e7-af2d956269ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "71d3cc53-d131-472e-a9ae-04d67c3048be",
        "cursor": {
          "ref": "c6e7795e-7bd3-4f47-8ac6-4426904b84dc",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "28cc22f7-89f4-4b46-abc5-74c249436306"
        },
        "item": {
          "id": "71d3cc53-d131-472e-a9ae-04d67c3048be",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "10cd7def-77fe-4d18-94e2-a4651961aea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "6499b042-7073-45cb-998c-87a9b2066c2a",
        "cursor": {
          "ref": "753b92fa-d0bc-4a9f-bf2c-7fe4015791e4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7d6d0cf7-43ca-4dc3-8574-fbf8195a95a6"
        },
        "item": {
          "id": "6499b042-7073-45cb-998c-87a9b2066c2a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "28c8d74a-8947-4ca3-876b-af5136c27a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b89b39a0-b5b2-4613-abb2-267b9178a329",
        "cursor": {
          "ref": "6a195884-5bf0-44b8-b4cf-d699ef020670",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7dff1479-0ec0-4fa3-8715-14a8f6157377"
        },
        "item": {
          "id": "b89b39a0-b5b2-4613-abb2-267b9178a329",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "08d29736-0c7c-4c19-a2e3-04d5946044b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ac7a64a7-950b-40e3-9bd2-a96e7f3378b8",
        "cursor": {
          "ref": "eece8d41-b66f-4c59-9f4b-3e89229186b0",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "357f4819-4ecb-490b-bc9e-0008a9365b05"
        },
        "item": {
          "id": "ac7a64a7-950b-40e3-9bd2-a96e7f3378b8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a83fffd4-31f6-45f3-9391-01227ef9f783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "43b3f88d-b0be-46f2-af83-a4547bb77cca",
        "cursor": {
          "ref": "018f7569-95e2-4ff3-a4c2-ff91002b908b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "23577015-fc66-4c94-9c46-0016efb45386"
        },
        "item": {
          "id": "43b3f88d-b0be-46f2-af83-a4547bb77cca",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b3e3170-a134-42da-a023-5b4fa8bdfd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "3734e526-96a5-42c2-9b0a-04b767dc1099",
        "cursor": {
          "ref": "fd1a405d-d41f-467a-acee-86fe957f2d7e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "54ab804d-f892-4243-be94-f7cd8c2c71b1"
        },
        "item": {
          "id": "3734e526-96a5-42c2-9b0a-04b767dc1099",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4aa38d83-d529-4171-b38e-109645c24e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2dd5da1d-3add-4611-8b3c-2b6054908a26",
        "cursor": {
          "ref": "debe3e77-1036-4dfe-90c7-38b557446841",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cb8545e1-9cee-4640-834b-d748cd9347a5"
        },
        "item": {
          "id": "2dd5da1d-3add-4611-8b3c-2b6054908a26",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9d5ce8fa-bc97-4241-b132-7203b0e1f10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7e564593-da7a-4094-9de9-b40a063e72f5",
        "cursor": {
          "ref": "304eafa6-c633-4cc9-ab0d-69128dfd9a35",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "95c2e93d-a47d-49fe-a40b-249fff684641"
        },
        "item": {
          "id": "7e564593-da7a-4094-9de9-b40a063e72f5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d92cd91d-d12f-4711-b4cb-494215e56d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b60bd70c-6aa2-46c5-b5b8-e1ceff9a745b",
        "cursor": {
          "ref": "c499ee50-686d-45c2-87d7-49b73d8be2b3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b2fb4aec-0f1e-4230-992e-59e148530b10"
        },
        "item": {
          "id": "b60bd70c-6aa2-46c5-b5b8-e1ceff9a745b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "003f8dda-a4fd-493b-a898-caf4f4853c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "47789b35-4875-4364-af54-71a7f1000361",
        "cursor": {
          "ref": "29a8070f-5509-4e17-9593-717ec95ec868",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e50d4a6-415a-4a3b-9d23-1d6494b76eb3"
        },
        "item": {
          "id": "47789b35-4875-4364-af54-71a7f1000361",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "859b883f-a539-477f-a229-c249df78d14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "ab24bca9-64ae-41e0-b724-eeedd4f21288",
        "cursor": {
          "ref": "54c11fea-d623-41db-925e-77495b2604c4",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "977e57ac-f788-4f46-9eda-30b38db1578b"
        },
        "item": {
          "id": "ab24bca9-64ae-41e0-b724-eeedd4f21288",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "421e0b77-3a95-4190-a326-18796ea95542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cc98c9cf-bef4-417b-8ada-592a271e39a0",
        "cursor": {
          "ref": "a81c8bc4-2dec-492d-a389-445a84e55b34",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "aeb3680c-fd8c-4c8f-87f9-0e0cc42e31c1"
        },
        "item": {
          "id": "cc98c9cf-bef4-417b-8ada-592a271e39a0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ea4b4f98-fbd4-46ae-865a-b9eb5e0470da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52db3edd-0c03-4e19-95dc-a619941275cc",
        "cursor": {
          "ref": "660705df-313d-410f-a302-b6ff7ffb221b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e337a947-a1ce-4865-a903-1a2d4ee2c6fb"
        },
        "item": {
          "id": "52db3edd-0c03-4e19-95dc-a619941275cc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4aa88ee6-c959-467e-be44-d72957d8d538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c4c5c8e6-6b74-42cb-9f94-3deb464209d2",
        "cursor": {
          "ref": "075143ea-9e3b-4a70-af53-e6c3072123a2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "522183ed-0e3a-40e3-ba75-5b812c51b745"
        },
        "item": {
          "id": "c4c5c8e6-6b74-42cb-9f94-3deb464209d2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7c557719-d578-4e89-9f47-f51c251f7936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c4c5c8e6-6b74-42cb-9f94-3deb464209d2",
        "cursor": {
          "ref": "075143ea-9e3b-4a70-af53-e6c3072123a2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "522183ed-0e3a-40e3-ba75-5b812c51b745"
        },
        "item": {
          "id": "c4c5c8e6-6b74-42cb-9f94-3deb464209d2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7c557719-d578-4e89-9f47-f51c251f7936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "fd8467da-d914-46f0-a8ac-f52fbf1b6cd1",
        "cursor": {
          "ref": "d82401f3-82ef-46b6-a6a6-db207a1ba5f4",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ecbc2dba-6a8b-443c-8983-c7d858009f07"
        },
        "item": {
          "id": "fd8467da-d914-46f0-a8ac-f52fbf1b6cd1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cdad5afa-fb35-4a2f-9b5d-da48ab49ad9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "28ed5572-f3b5-42aa-83ea-c4dcae77a97b",
        "cursor": {
          "ref": "ff7f2e75-c375-40bc-a3fc-04a18ea45851",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b5c936a4-aad6-4237-a65e-2b3c2664aba0"
        },
        "item": {
          "id": "28ed5572-f3b5-42aa-83ea-c4dcae77a97b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "870101e5-a902-4ca7-ac77-a8c4da08ce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "1e596e7b-5d9f-4213-9b07-ba2c7905ccaa",
        "cursor": {
          "ref": "526d78b4-144e-4e59-a7c8-2c166ac79a47",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f7d2ef8a-ba8e-4d1b-9732-7605e308b6bb"
        },
        "item": {
          "id": "1e596e7b-5d9f-4213-9b07-ba2c7905ccaa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0668794e-2aef-4085-afed-ebb9f384098d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e0a9d161-1ecd-4b07-bcd5-d4e6ad93cc0c",
        "cursor": {
          "ref": "c106499a-6776-43dd-a4c4-caf8bb4e73b5",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fc8cad86-6893-4cd5-8694-01adeb0e1d0a"
        },
        "item": {
          "id": "e0a9d161-1ecd-4b07-bcd5-d4e6ad93cc0c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "80950e5e-eb12-47b3-a309-f780f3a70130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "7993e80b-bb26-4ad4-963d-05e415113445",
        "cursor": {
          "ref": "66e94b3c-431f-4faf-bb30-245f739ac073",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "627e5a56-f984-4e0c-97d2-c5327b216ee7"
        },
        "item": {
          "id": "7993e80b-bb26-4ad4-963d-05e415113445",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "46a6f441-677a-47aa-9bc3-a8b48846e902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f8c375c9-3365-4285-bf9b-b010ff2df2cc",
        "cursor": {
          "ref": "a57b476c-bd6d-4139-97c3-96d14c581319",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f75658a6-7bba-4ab8-81ad-aeed726d8b1d"
        },
        "item": {
          "id": "f8c375c9-3365-4285-bf9b-b010ff2df2cc",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8f769ca8-dda4-4ee4-8bfb-0a2892669dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ff8ed4bf-22b9-4be1-b0f6-4c53e8b32649",
        "cursor": {
          "ref": "4aac13fc-8a34-456e-a27c-e768fcc45b1e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a4116a94-17ae-471e-b701-8cf8c9d70c05"
        },
        "item": {
          "id": "ff8ed4bf-22b9-4be1-b0f6-4c53e8b32649",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "18c476d7-e86b-4548-9c2d-7e3856b62e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "51d8377f-cf58-4a8b-bffd-dbce26618f3a",
        "cursor": {
          "ref": "f4b2e39f-709a-403d-84bb-221af0cb5752",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6063ec15-6555-4ad0-90f4-3573b166fd5f"
        },
        "item": {
          "id": "51d8377f-cf58-4a8b-bffd-dbce26618f3a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6a09739b-2997-47f1-9208-2b12b6ae96e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "857cc1d4-8122-42f6-b601-3809f252096c",
        "cursor": {
          "ref": "0a1a6e3d-dde8-4d67-a48a-59339f772112",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c350f9a6-d230-4c3f-acd1-efb90c1158eb"
        },
        "item": {
          "id": "857cc1d4-8122-42f6-b601-3809f252096c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6f7ac1a2-7a5b-4ad0-befb-3340e647e9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "14a90c6c-029f-481e-b4fc-dbefe41c559f",
        "cursor": {
          "ref": "f4a9d8f7-bc83-438d-b9d8-13c8adb4c7dc",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dd19278e-263a-4014-8ba4-f3235510e312"
        },
        "item": {
          "id": "14a90c6c-029f-481e-b4fc-dbefe41c559f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a6cd9ce7-7e11-423e-a6d0-4910e4e06653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "e1f70194-1b26-448f-860c-211c032f84fc",
        "cursor": {
          "ref": "c9f41491-9396-49a8-af4d-4c6a1dbf4252",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1a8c2993-9062-4875-b40d-9a02002db766"
        },
        "item": {
          "id": "e1f70194-1b26-448f-860c-211c032f84fc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4c4830c-dfe8-44f3-ad5e-52d47c574ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c4351bb3-2b38-4b30-9734-a88adf2fd6e5",
        "cursor": {
          "ref": "84e16f34-4041-4810-8525-ceb25e9aa233",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b0cabc2c-af02-45fb-8c82-a862d240ebe4"
        },
        "item": {
          "id": "c4351bb3-2b38-4b30-9734-a88adf2fd6e5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "935aadac-a1ba-4d83-a54a-844a461b3089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ea3505ca-dc3c-46e0-a627-0a3251efc2d3",
        "cursor": {
          "ref": "9974d037-4a17-4d7c-a2e0-3713eb2df689",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d3d800f2-38db-4fc0-85ff-e009b7f9e7ca"
        },
        "item": {
          "id": "ea3505ca-dc3c-46e0-a627-0a3251efc2d3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b54e0990-f4c5-4adf-8a36-d6fecba674d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "b6fa88be-efd0-4d24-9a20-7770c4378b47",
        "cursor": {
          "ref": "31f0a9f3-82f7-4bd3-8a91-79f61ff3cbae",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e124c782-d8a3-4e2b-a085-1a2bf6fd7d1e"
        },
        "item": {
          "id": "b6fa88be-efd0-4d24-9a20-7770c4378b47",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e859dd4b-65a4-4950-9e42-0e2ee8234bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6375831b-b61d-446f-b0fa-596fbaf5b174",
        "cursor": {
          "ref": "6b93e38a-41fd-4469-9b4f-f85ecce6e49c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "65c3884b-f520-4678-b396-8ad0b883e53b"
        },
        "item": {
          "id": "6375831b-b61d-446f-b0fa-596fbaf5b174",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7177d5f3-3dc2-44d8-a644-a9b587ee396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "275b6c6c-7411-49ac-ac7a-00274c937b2c",
        "cursor": {
          "ref": "13816280-ae68-4a76-a8b4-dc7c34b72ad2",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "96e34020-5095-4368-964a-0918b246525d"
        },
        "item": {
          "id": "275b6c6c-7411-49ac-ac7a-00274c937b2c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ab9fc175-8c9c-406f-9da8-e35b8b3ab293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "934b986f-b8f0-47b0-973d-ba45b937fb68",
        "cursor": {
          "ref": "539eb0ab-7c5b-483b-afa6-ceb06c397112",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8643112f-feed-4e21-8b50-85ed6e6fdf97"
        },
        "item": {
          "id": "934b986f-b8f0-47b0-973d-ba45b937fb68",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bf176415-2dc7-4d42-8caf-fbcef96f2599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7645,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "900803d2-88c9-4f87-b84f-ce66dd2ab507",
        "cursor": {
          "ref": "b6611d53-3d24-4073-b104-931ffda77301",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "96a87f6c-0197-4766-9bd7-aae70330b221"
        },
        "item": {
          "id": "900803d2-88c9-4f87-b84f-ce66dd2ab507",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0a64227b-3694-439a-be6a-1e27a5cc645e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9962,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "e6eab15c-43ba-43af-aa5d-7034d9bc2efb",
        "cursor": {
          "ref": "77c3cf9e-010d-49e1-a4e9-f20ca68779c8",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9695be8e-c9fc-4751-a688-43d33525fd48"
        },
        "item": {
          "id": "e6eab15c-43ba-43af-aa5d-7034d9bc2efb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e5c4f86f-cb93-469d-ae27-958c29e45293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9533,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "22a0b00d-5b5e-4706-a6c8-708b613a1dce",
        "cursor": {
          "ref": "d5a47b6a-0a1d-481b-a99c-71ba2e240260",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e1d538c4-3fca-4aad-bfa7-458fa9a4137f"
        },
        "item": {
          "id": "22a0b00d-5b5e-4706-a6c8-708b613a1dce",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7a33c0de-2988-485f-8c61-b1601e339a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "9f2a12f9-f97b-458d-a1d5-e1b96e4f2477",
        "cursor": {
          "ref": "1ccacf95-6a5e-4a23-86d1-c8892f1cdc74",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1eb689ac-ef78-4b11-a06b-4eb6bf3cea50"
        },
        "item": {
          "id": "9f2a12f9-f97b-458d-a1d5-e1b96e4f2477",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ad672dae-340f-49e9-826d-957f719eea22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7703,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "adad5146-63a4-4b07-a80c-ec86657f68ce",
        "cursor": {
          "ref": "f695c01c-07bd-4732-bf9b-907951bb8443",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b8a2a00b-332b-4eaf-83a2-efeccb6115e8"
        },
        "item": {
          "id": "adad5146-63a4-4b07-a80c-ec86657f68ce",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5eda1a33-ea42-471f-aaff-c4aff490addd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "48466e58-b3b8-4649-91c6-30862046652b",
        "cursor": {
          "ref": "078df4f8-d6ee-4531-acbc-bd23015a9349",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "815beb6e-f828-4b0b-9d36-99d61dd4f6c0"
        },
        "item": {
          "id": "48466e58-b3b8-4649-91c6-30862046652b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5619ff7c-37b6-4ca5-b64f-b7500e6c5751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "8556b551-5795-4721-bbed-cdfa9317269b",
        "cursor": {
          "ref": "7b61e315-8a2d-4934-89d5-7c235ddf0fc2",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ddc27589-663c-40cf-a76d-94733594b7d7"
        },
        "item": {
          "id": "8556b551-5795-4721-bbed-cdfa9317269b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "028eb495-4377-4984-904c-768df25b724f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "4edb9ce7-784f-401e-98cc-5b39e025d78b",
        "cursor": {
          "ref": "bb404040-a680-40a6-a157-31f3c671f9fe",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cadedd0f-0b44-4d97-bffa-7839bd4332e4"
        },
        "item": {
          "id": "4edb9ce7-784f-401e-98cc-5b39e025d78b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6e88c385-82b6-4e7f-9915-8aa3cc797881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "d4423444-4b3c-4c73-a71f-e0ebb5f6eb86",
        "cursor": {
          "ref": "423cf6af-6ea8-41e9-8639-d4dca06c231f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8b6c53c7-fdeb-4b73-8316-df2d79b4fad0"
        },
        "item": {
          "id": "d4423444-4b3c-4c73-a71f-e0ebb5f6eb86",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "987f5855-edf9-41b2-85d6-8540de881e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "3cffebe2-e86e-4f33-953e-fdd25a55aff0",
        "cursor": {
          "ref": "e44a9922-8af6-4d1f-9745-cd7a6f53c700",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "38c58cc7-c7c1-4f9b-abd1-c4afbb93c078"
        },
        "item": {
          "id": "3cffebe2-e86e-4f33-953e-fdd25a55aff0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "91c46eaf-3499-4d64-aad5-9beca51770ce",
          "status": "OK",
          "code": 200,
          "responseTime": 10081,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d63f15e4-9808-499e-a9d9-a1687443871e",
        "cursor": {
          "ref": "c855f73b-9d31-48ad-aea9-9c0d10dcb703",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ef3f856d-a938-49bd-8c1f-d3dda464e790"
        },
        "item": {
          "id": "d63f15e4-9808-499e-a9d9-a1687443871e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32d40c36-d7e1-4c39-9ee9-d1963742013f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "81d069c3-8ba0-447e-ae6b-8743b38d6745",
        "cursor": {
          "ref": "0e676f1d-01e9-4c88-9d9b-c7294a654387",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "12d93e33-31da-4b75-a5d7-e1fe5609b1fa"
        },
        "item": {
          "id": "81d069c3-8ba0-447e-ae6b-8743b38d6745",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "64bd3443-f38d-4e74-bca7-31e2dbdb3818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4c0ed774-4562-4857-9280-00c1bc510b92",
        "cursor": {
          "ref": "8a43974c-cc3f-4e87-b196-aa32ddc1501c",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "217921a1-ec55-4fc8-a74b-22edcbc9aa2f"
        },
        "item": {
          "id": "4c0ed774-4562-4857-9280-00c1bc510b92",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "97d570d1-8d71-400b-8040-a7746fb7097d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "6e4468ca-6721-4ff4-b7da-d2b61d44ae53",
        "cursor": {
          "ref": "dc0ad764-953c-45e2-8714-74fa3db952f2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ecbb2161-2783-4d90-b2e7-59c40464c7dd"
        },
        "item": {
          "id": "6e4468ca-6721-4ff4-b7da-d2b61d44ae53",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e9925a12-7e00-4452-a806-185c171ad742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "4c33123d-1938-4dbf-81d2-6abaee36d5d8",
        "cursor": {
          "ref": "ff349dad-99ca-4fc4-a723-bfb0a663c4db",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "cb114ca0-4932-4aae-b655-03f4317ca10e"
        },
        "item": {
          "id": "4c33123d-1938-4dbf-81d2-6abaee36d5d8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b3a4c0ab-916e-44b3-8a6a-ad282501605c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "29380b4c-d451-4b65-bf68-86ea9192cf14",
        "cursor": {
          "ref": "fbb73553-74f4-459b-9c01-0ba6456251ea",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f7758c5b-25de-4e8f-9790-c3928cd91e7d"
        },
        "item": {
          "id": "29380b4c-d451-4b65-bf68-86ea9192cf14",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "12e60a1e-ea83-4fab-b839-e72441042e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f91c534d-e0dd-43c7-9845-47491e81dcb1",
        "cursor": {
          "ref": "378111d6-a089-440a-9f9d-c4047fb9bade",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8cd7990a-22d0-41a0-8cab-cce1dace45d9"
        },
        "item": {
          "id": "f91c534d-e0dd-43c7-9845-47491e81dcb1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "06d4d356-1ec5-49ec-85f3-5ab85ab88bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "6a9af9b9-f033-4d9b-8fb5-a9c18869144d",
        "cursor": {
          "ref": "31cbea15-4890-4c0e-901c-b7a8fcfb26b5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2146e751-f3c8-4f5b-9e36-9ffa6c2df5e2"
        },
        "item": {
          "id": "6a9af9b9-f033-4d9b-8fb5-a9c18869144d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a690cee0-69c2-438c-b1be-3e2400fb832d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "d3a0ca4b-66b6-4405-be6c-cfae114f3429",
        "cursor": {
          "ref": "318be4a7-296d-43f8-b81b-2ad115965e5a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "60963e50-94ae-4ed5-8749-0af7d5cdce0b"
        },
        "item": {
          "id": "d3a0ca4b-66b6-4405-be6c-cfae114f3429",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f11964e9-1cc4-47bd-8be0-0033ce52e673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "1f4e4e88-6ae3-4a3d-bfee-a9cd324e6de9",
        "cursor": {
          "ref": "0f2c5210-dde6-4b1e-8f51-8e46faeb8c0c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b3799145-bea6-429b-a825-4a3d3383d5bd"
        },
        "item": {
          "id": "1f4e4e88-6ae3-4a3d-bfee-a9cd324e6de9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1ffb6b64-f7e4-4cd2-89ef-0522374e3c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "53dc17e5-48c2-4fc6-9aad-a9271c267322",
        "cursor": {
          "ref": "76de16ea-fdc5-42ae-80ba-e7336616a9e4",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e4c3f895-7cf1-4d0b-9659-361b84b42235"
        },
        "item": {
          "id": "53dc17e5-48c2-4fc6-9aad-a9271c267322",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bb6a14c1-9816-45a7-b6d4-b02288276172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "57f34a24-aebd-4c75-b97b-2c01204ffda7",
        "cursor": {
          "ref": "1f14e860-a937-4818-b1a9-b06e7b065761",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3e02a42f-6ef6-4366-8278-4bd211162752"
        },
        "item": {
          "id": "57f34a24-aebd-4c75-b97b-2c01204ffda7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "870c3cec-042c-4ecf-b609-8623e2dc2165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "d9e5cc9f-bc12-4efa-8cd7-ea2c5c57f89d",
        "cursor": {
          "ref": "7027e056-744f-4c22-85ef-2a7c19dac3e9",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "78ebed91-4db6-4625-994d-ff7578625663"
        },
        "item": {
          "id": "d9e5cc9f-bc12-4efa-8cd7-ea2c5c57f89d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "12809b3b-ee8c-4165-bb96-0c209b9a8caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "51e490c9-f5c2-46d8-8d35-c9d55cf0c4dd",
        "cursor": {
          "ref": "527f8f98-5324-4764-ab84-148e21304490",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7021faa9-482f-4c8a-879c-4d9f0f8119d2"
        },
        "item": {
          "id": "51e490c9-f5c2-46d8-8d35-c9d55cf0c4dd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "58f18e3d-bc34-4294-81ca-dea369b98e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f07c1bfb-f0fc-4bc2-819a-551d68ba2598",
        "cursor": {
          "ref": "138b9873-2d23-4fc6-88ef-3a25d2b9d569",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b2d00eaf-1499-4bc9-96ac-b61688bd057a"
        },
        "item": {
          "id": "f07c1bfb-f0fc-4bc2-819a-551d68ba2598",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e0856558-a369-45a7-aa70-3945765ef50b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "224236cd-4b98-4d8f-9f25-236de5e1d560",
        "cursor": {
          "ref": "3df2d9b0-eef2-4c61-85b8-dd77f8616bb5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8a7672c8-e9b2-4889-8c5c-b38a777aa02d"
        },
        "item": {
          "id": "224236cd-4b98-4d8f-9f25-236de5e1d560",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "71134e04-22e7-4142-b0e7-c793216730da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b8252afb-b86e-41a2-ae91-64cd7e7657f1",
        "cursor": {
          "ref": "e70030cc-af57-4a32-9337-2e36a1f0afde",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cda5b5f0-7df7-4c82-83c9-4707adcb6452"
        },
        "item": {
          "id": "b8252afb-b86e-41a2-ae91-64cd7e7657f1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "62c3c242-fbc6-4d87-89fc-311208d25a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "297f4e2a-5852-4c59-ad6b-590d9f218421",
        "cursor": {
          "ref": "2b238107-2381-4e8c-9f97-4d1237448a09",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "065c2293-f889-430a-86eb-b6acdcf949b3"
        },
        "item": {
          "id": "297f4e2a-5852-4c59-ad6b-590d9f218421",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5b207f4a-a40b-4241-8651-96f4a97cc85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0b45b2f7-a308-4b01-bd16-6e0357a64694",
        "cursor": {
          "ref": "dc544adf-d896-429e-b7aa-a5dd00b45bff",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "21e8f142-4ae9-4bc5-bc66-7275c90be24b"
        },
        "item": {
          "id": "0b45b2f7-a308-4b01-bd16-6e0357a64694",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7f7be36f-646e-4f3d-b752-b755a2d87d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0fbb7f82-0b53-47f9-9e7e-02deebbb5dd9",
        "cursor": {
          "ref": "b39c60e9-1530-4c91-bc95-171cf0a93aaf",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f1c7b27d-0edf-43bb-b82c-a1040d8643dc"
        },
        "item": {
          "id": "0fbb7f82-0b53-47f9-9e7e-02deebbb5dd9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "05522127-0a67-4b67-b1f4-a7bbcb017a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a1d65482-7c66-472c-b8b7-b6f55775e093",
        "cursor": {
          "ref": "c3fe934a-00ce-4573-b5c5-94830c753524",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "79e69233-a46d-47f6-90ea-9a71041ae813"
        },
        "item": {
          "id": "a1d65482-7c66-472c-b8b7-b6f55775e093",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "003e7356-b384-41bd-83a8-9639c134d0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "85bd16dc-74cc-4d52-bc70-465a4aa8efbf",
        "cursor": {
          "ref": "463662c5-9083-42a9-ae08-a39adbd480d5",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "49c0cdf3-f6fa-401e-9280-60a3988cc682"
        },
        "item": {
          "id": "85bd16dc-74cc-4d52-bc70-465a4aa8efbf",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6ce21d70-9102-4b60-bfaa-10ec45910a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "e51a2532-9893-4e9c-877f-416c53d1749e",
        "cursor": {
          "ref": "7dddbf65-84ef-48cd-8951-9dd9c1a3bdf6",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e014e086-c3df-445d-b0a4-c6969ba0d4f5"
        },
        "item": {
          "id": "e51a2532-9893-4e9c-877f-416c53d1749e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "83a7a31f-1d86-4379-ae31-7885ca1664c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "164d75c9-ac3f-4592-ac91-5c413f692eff",
        "cursor": {
          "ref": "a3744d5e-97ce-4f50-8f84-449a3599ad79",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b3b7284f-0c8b-472a-8a80-736557f202bc"
        },
        "item": {
          "id": "164d75c9-ac3f-4592-ac91-5c413f692eff",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "91d7cd42-a16c-42e3-a8a6-9f1317fe1502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "62e6118c-6240-43cd-88d5-a2c54570f33e",
        "cursor": {
          "ref": "f78d70f7-d082-4ccf-968f-011b13e9dc0d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5c26fbe8-bbc5-4fca-8c1d-5e5a6249298a"
        },
        "item": {
          "id": "62e6118c-6240-43cd-88d5-a2c54570f33e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ac5a0ca4-18f2-4195-9dbb-1733947c8715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "f8236110-cbf5-47b7-9523-6efafe94f210",
        "cursor": {
          "ref": "04cc4451-f099-4cdc-8d5a-86cae91cda2a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7eb769a7-c8da-47ee-a1f8-6797cea0bdc2"
        },
        "item": {
          "id": "f8236110-cbf5-47b7-9523-6efafe94f210",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e24ffa87-a317-4392-a806-b2a4fc2bcc13",
          "status": "OK",
          "code": 200,
          "responseTime": 8578,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9cdd5554-2c6c-41bc-bf24-ec773ed682ae",
        "cursor": {
          "ref": "4f5cdee0-af60-4119-b5fa-ee0ec8f155fe",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "41693e0b-efb4-4970-b882-192ba057bb50"
        },
        "item": {
          "id": "9cdd5554-2c6c-41bc-bf24-ec773ed682ae",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "81f8144d-ede0-4ab7-8251-eb44ec445a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "86ed615c-2553-41a6-b123-d8625aab6882",
        "cursor": {
          "ref": "242f8807-5494-406a-ab52-17e2a6a7f462",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "558734f3-2320-4853-a1b5-545c5f16a337"
        },
        "item": {
          "id": "86ed615c-2553-41a6-b123-d8625aab6882",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "29fc7059-4e09-46e1-a719-7ecf94c47c86",
          "status": "OK",
          "code": 200,
          "responseTime": 7551,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "aa8780c1-8c40-416f-b910-653ac3f92851",
        "cursor": {
          "ref": "648b048a-6df3-4b9a-9673-4808f36d81ab",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "56450029-c837-49f2-85d1-d66b74cfde2b"
        },
        "item": {
          "id": "aa8780c1-8c40-416f-b910-653ac3f92851",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "19ba79b7-594b-4d62-911f-01ac2e49c9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "de252ea0-c1cb-49cd-85db-fcf954cd2f09",
        "cursor": {
          "ref": "0c7a1249-523d-4a6f-9bca-51cb846eddf8",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "41cb6b76-a029-4786-a34b-d65b897392d2"
        },
        "item": {
          "id": "de252ea0-c1cb-49cd-85db-fcf954cd2f09",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1c17f20b-e9f8-4b0a-9420-b4af5431cb64",
          "status": "OK",
          "code": 200,
          "responseTime": 10417,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "9ed13321-d3d1-4ef4-bbb9-8d4ca5caa604",
        "cursor": {
          "ref": "dced3058-3fbd-4005-9681-be9ac725260d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "03e96314-69e7-4f13-8f03-64c521017d47"
        },
        "item": {
          "id": "9ed13321-d3d1-4ef4-bbb9-8d4ca5caa604",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9de889ed-c525-435c-acd2-56c08137949c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8108,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "02f3df14-303d-4454-ac23-f29d4de24037",
        "cursor": {
          "ref": "0e5cc59f-8bad-4b0e-bff3-2bbbe26a5273",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5479c319-eac1-4ec9-b2d4-23166bdbebb5"
        },
        "item": {
          "id": "02f3df14-303d-4454-ac23-f29d4de24037",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "33a64bfd-9e3d-480a-a397-4b1e0232b135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8020,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "5cc5580b-828f-422c-9b74-15bc3a4b383f",
        "cursor": {
          "ref": "99e1bb39-86e3-4277-ab8d-a1e971d1d78c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f8190a5e-5854-44ef-83cd-d4fde266b959"
        },
        "item": {
          "id": "5cc5580b-828f-422c-9b74-15bc3a4b383f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "577c6b7e-57fc-46e5-bf5d-835f9ee22baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "968b5103-d8e1-409d-91cd-620692460234",
        "cursor": {
          "ref": "2057a75c-adc8-4b74-afd3-f020e843c702",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7f6be4c7-6e71-4a50-a7b3-4bea6167a362"
        },
        "item": {
          "id": "968b5103-d8e1-409d-91cd-620692460234",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a5a00386-a73d-4ef8-88ce-84e6f9d3cdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7641,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "225aacfa-f651-4aa7-8ea3-78f2437392d0",
        "cursor": {
          "ref": "a33e46ae-b022-4f9f-83ee-b02523b471e9",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dd067f2f-2efe-4c5d-ac6a-cb59e4781b8a"
        },
        "item": {
          "id": "225aacfa-f651-4aa7-8ea3-78f2437392d0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2027b01c-4a8a-4ecd-ad88-accc217ed26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "b691ce4c-66ef-4efd-82b7-b6091cb61b4b",
        "cursor": {
          "ref": "5fc7a8a5-f2ff-43a0-8202-f3aaddab45dc",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ee9166f9-2107-4fff-9871-9f1c48893b3d"
        },
        "item": {
          "id": "b691ce4c-66ef-4efd-82b7-b6091cb61b4b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "35600ad2-2f39-4af0-89e0-dc4725bc9f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6e8a57c6-12e6-409a-b452-0af85b03997d",
        "cursor": {
          "ref": "168cba65-e8d0-4fb8-b4bb-6288d8bc875b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fb4c18e9-88dc-4f24-9301-96b6cb08fc76"
        },
        "item": {
          "id": "6e8a57c6-12e6-409a-b452-0af85b03997d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "24427a0e-5513-455b-87fe-189caf612832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7f8d7d43-9b2a-48ce-aca1-b53d3a0a3d9f",
        "cursor": {
          "ref": "f5ac11b8-fcfb-49e8-9408-c3cee99d22f6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "94c36d1e-8f75-4f08-a5c8-da3abab6c88e"
        },
        "item": {
          "id": "7f8d7d43-9b2a-48ce-aca1-b53d3a0a3d9f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2b62c0bf-be5b-4a81-904d-c6f2bbac39b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ede184c6-f27a-4231-9fa3-f5042950a58a",
        "cursor": {
          "ref": "dadbc19d-06d2-471e-ac94-14ea4d3fc01b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d4559994-a15c-4aa3-b71e-816d38da85c9"
        },
        "item": {
          "id": "ede184c6-f27a-4231-9fa3-f5042950a58a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "79dc8abc-eabd-4344-8a04-6cbb90cd57a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "76ee0425-2d7e-4622-b8c7-6068abc0f53b",
        "cursor": {
          "ref": "70960741-656d-49e0-b4e6-367fd6527411",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "83ab387f-5b19-49e9-b6dc-59cc2c38db10"
        },
        "item": {
          "id": "76ee0425-2d7e-4622-b8c7-6068abc0f53b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4bb42f90-6b6a-4eb6-8b16-af4b426624f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a7678893-c5d9-4325-8b0e-0fba12a2fba1",
        "cursor": {
          "ref": "e90f43b7-e9d5-4134-8f03-e86a0b1157c6",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "61fbcb86-b40e-4f3b-b2fc-12cffb8e08c5"
        },
        "item": {
          "id": "a7678893-c5d9-4325-8b0e-0fba12a2fba1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "75b44655-a3d4-4eae-b4f8-874e69b1e01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "5a83a7b7-e31f-4075-99f6-9a358111c49d",
        "cursor": {
          "ref": "0174b4f9-eedd-4753-93d4-6bc3ad6cef93",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bfacaf4b-2dab-408c-acb0-9e5dbfcd217f"
        },
        "item": {
          "id": "5a83a7b7-e31f-4075-99f6-9a358111c49d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "46f467a8-b149-4513-9f27-ccd31a4cdd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "94fd8c66-f903-4845-8195-1597237be4a8",
        "cursor": {
          "ref": "136d0548-438f-4c27-95e2-7b113c54ea82",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "66b004a1-3244-4e8b-8dcb-3fd404fa9ff8"
        },
        "item": {
          "id": "94fd8c66-f903-4845-8195-1597237be4a8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c150dcac-bea6-4e04-a9f3-37d3e7fb8bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "ca6afde9-4861-4b4a-9358-c865d156164e",
        "cursor": {
          "ref": "8061ef3a-f9a0-4976-9d41-0c79bfc91e2f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "aa847253-7dc9-4816-91e7-4f1b125bc251"
        },
        "item": {
          "id": "ca6afde9-4861-4b4a-9358-c865d156164e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ad10ebdb-aef7-4fb6-8155-0c3587dad752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "9060c8fd-177d-47af-b276-8638701f6f46",
        "cursor": {
          "ref": "8e930661-456d-4482-b8bd-f419e74815f4",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78d0c33a-d0e3-4a53-9206-799312061995"
        },
        "item": {
          "id": "9060c8fd-177d-47af-b276-8638701f6f46",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b9015b45-29ce-44cf-b0c1-b5d9d7b08d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "df08eb16-5758-47c7-8e73-20e81ae7c0ae",
        "cursor": {
          "ref": "94a6c9b9-7b9d-4e41-ac15-7525593fdd86",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "41f0358e-7013-4a5c-8955-438d0042fc2e"
        },
        "item": {
          "id": "df08eb16-5758-47c7-8e73-20e81ae7c0ae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d38a8e93-f137-44ae-aa30-e542a8a7daef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "29f63f6e-3c76-4775-89ba-81c7d46d7f8f",
        "cursor": {
          "ref": "80e8979e-8bb9-4004-a23c-c7135eb5261b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e1453f5d-60f0-451c-80f1-f2111c19613e"
        },
        "item": {
          "id": "29f63f6e-3c76-4775-89ba-81c7d46d7f8f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e4030ce7-e6fa-4cb9-be7c-96858a3ec4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9988ed03-518d-4ac6-8507-207b10ebe6c2",
        "cursor": {
          "ref": "f5e48492-add9-4bb3-913e-b8cf820c5e1b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a71e7aa7-f12e-4d9d-8ff0-ca9403b09acf"
        },
        "item": {
          "id": "9988ed03-518d-4ac6-8507-207b10ebe6c2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c3e20a05-0dc5-4da2-957e-ea161ca90559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a4f6063d-bce3-40ff-a12d-04ca912731d6",
        "cursor": {
          "ref": "b07e4e3d-de31-429a-80dc-7609bf904be1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80bebe5d-0392-4af2-883f-5f11bb9f4edf"
        },
        "item": {
          "id": "a4f6063d-bce3-40ff-a12d-04ca912731d6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d0f22af6-c190-4e47-8432-415e53fcb00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ed4dd97b-2a32-4199-a84f-2b7e6a59a6c6",
        "cursor": {
          "ref": "01218fa4-8a3f-44f9-9949-2733041ee5ab",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d4833099-96e1-406b-bfde-a74d6fc14afe"
        },
        "item": {
          "id": "ed4dd97b-2a32-4199-a84f-2b7e6a59a6c6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b5aa7ad5-a8b2-4859-aacd-7d45ca39f7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "60d2f98c-ea28-4930-b8cd-9c7da2bbe756",
        "cursor": {
          "ref": "f900d582-e302-4ec9-8528-f994ec1c33fd",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "929dcecf-3ae3-421d-96e8-672a18c5225a"
        },
        "item": {
          "id": "60d2f98c-ea28-4930-b8cd-9c7da2bbe756",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b833927b-7c54-49a5-84f1-e8b722a91a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a1ff0357-c629-4b43-844b-a0f8a405f5a2",
        "cursor": {
          "ref": "65cfeae0-2986-4c79-8d6a-f895b945a532",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fa006088-b105-4dc7-ba15-414d6a3d91f4"
        },
        "item": {
          "id": "a1ff0357-c629-4b43-844b-a0f8a405f5a2",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0abba4cd-4d7b-4669-8581-08a6b061a2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c0dedba6-2d0d-4195-950e-a7a2ce7d2c1b",
        "cursor": {
          "ref": "47931723-e143-4396-89bc-5eb43eef69c2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fa99e9b8-e1c7-4992-96f7-7bd1f3faf9ac"
        },
        "item": {
          "id": "c0dedba6-2d0d-4195-950e-a7a2ce7d2c1b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d4fc2815-d354-4ba6-90ad-67bf657c0ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "923d2fb9-b771-4cc3-91a8-8f420e0b31b9",
        "cursor": {
          "ref": "1cc2d2ae-8b0f-47e6-885e-ce7cbb6ce7bf",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b3002d43-f438-4584-a56a-9419fbf63716"
        },
        "item": {
          "id": "923d2fb9-b771-4cc3-91a8-8f420e0b31b9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "573e66fc-a8e0-44bb-9483-7e268d792b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "73aea4ff-f2e3-4171-b582-b9f144adb090",
        "cursor": {
          "ref": "ae3ff0ef-877b-47b4-b21f-4667b8c2494e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "84c3edc0-6d5d-45f6-9715-761c6fe483ad"
        },
        "item": {
          "id": "73aea4ff-f2e3-4171-b582-b9f144adb090",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6bd5190d-2e02-4d59-b685-e4e269fe5906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c77e3e51-bea7-47c5-b748-df2e9a442b89",
        "cursor": {
          "ref": "43927c32-4555-4ec4-bb42-4579aa270f40",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "73878b2d-3f3a-42a6-8d92-52997bff8db3"
        },
        "item": {
          "id": "c77e3e51-bea7-47c5-b748-df2e9a442b89",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e2c3c600-3719-4c89-9456-d1514e88924f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "ac91faf8-4cac-4e1c-811a-8e1dbf06e57e",
        "cursor": {
          "ref": "fa87fc7d-6eec-4934-b30d-0eaec1a1bbfc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f4d17248-f2db-43cf-89b7-9cf313407a41"
        },
        "item": {
          "id": "ac91faf8-4cac-4e1c-811a-8e1dbf06e57e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "11aabd94-4639-4c3a-97ff-5659c1c8b9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "35b21162-5584-4451-812a-47bb61d0271f",
        "cursor": {
          "ref": "1c3d452b-1adc-47c3-8b2e-2c8059ae2b91",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "47454460-e65d-4ceb-8895-5a1b60ab2fc5"
        },
        "item": {
          "id": "35b21162-5584-4451-812a-47bb61d0271f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e9ea5083-95a9-428c-a1b9-9de78e84589e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "80633e66-c387-4499-8e77-a4d3bb3be0e4",
        "cursor": {
          "ref": "b3423d4b-4997-4fc4-8b8b-2476597242ec",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "18e862fb-affc-4cc6-b894-d25e15efdcf5"
        },
        "item": {
          "id": "80633e66-c387-4499-8e77-a4d3bb3be0e4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7c3f225a-542e-4100-a54e-77b47a321f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "99bf4ef5-14a6-4fb1-b513-260c5e710462",
        "cursor": {
          "ref": "eefaabc9-109a-4d48-a995-fe78c1c6a99e",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5003ef95-9728-4e34-a34b-f6faad8db42c"
        },
        "item": {
          "id": "99bf4ef5-14a6-4fb1-b513-260c5e710462",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d2fc46d0-f9e6-4d5b-a6a2-ad0b61009a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "be40489c-146b-43f1-85b6-7d6cd535f3ea",
        "cursor": {
          "ref": "ac27f7f7-224d-4110-8cde-3d7009061b7a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ea46fb1e-4176-48ac-b4e0-0d1a9f94302d"
        },
        "item": {
          "id": "be40489c-146b-43f1-85b6-7d6cd535f3ea",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ff6a6b11-0fd9-4ca1-8fe7-114aa1783280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "4f00cefe-33a6-4c13-a56e-df5ce8889718",
        "cursor": {
          "ref": "c70db853-dbb3-4213-a91c-0f62f9a0da60",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3623942d-f6ad-4a56-b400-0dbf3e106909"
        },
        "item": {
          "id": "4f00cefe-33a6-4c13-a56e-df5ce8889718",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7e174189-9aad-4bf1-9afd-6b3f91382848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "b7a42d63-77c8-41f9-81ab-8a1734e573c2",
        "cursor": {
          "ref": "93f6af28-c5c6-4328-9b3d-9c976c32251c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d42eb93b-5094-43db-b93d-0fa372dcd66f"
        },
        "item": {
          "id": "b7a42d63-77c8-41f9-81ab-8a1734e573c2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eef490a5-a17c-4486-87c4-37ba1c388526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "ee0fa0f5-7fa3-4f72-9cbc-00a883123968",
        "cursor": {
          "ref": "d37c7963-46f2-470f-8e23-2c1cd9a0d095",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "12a47c4a-8d4d-4088-9025-71b70411c9ee"
        },
        "item": {
          "id": "ee0fa0f5-7fa3-4f72-9cbc-00a883123968",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "55c16e37-1d2c-4b06-9107-8e235f7cf7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0a7cc4b7-9457-403e-9acf-0e13b9b1359a",
        "cursor": {
          "ref": "5644a358-8c45-4556-8453-d1541d95bafe",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "44d2f449-2cf6-412b-b5c5-e0984aeeef55"
        },
        "item": {
          "id": "0a7cc4b7-9457-403e-9acf-0e13b9b1359a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1dd0db0e-1762-49e3-ab61-2c816de75554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "b22f3817-2c05-40f2-b759-91038294ed93",
        "cursor": {
          "ref": "21b50214-1019-4c93-b80a-5065e5563042",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "204bf3c5-f719-42ca-ba01-18fc224cb30a"
        },
        "item": {
          "id": "b22f3817-2c05-40f2-b759-91038294ed93",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ed70e134-a9ca-4fbe-bc4a-dac7b3205d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "c7c0fa9d-bee8-4ab6-9a08-09c8eb141259",
        "cursor": {
          "ref": "30dd3c68-67ea-4f66-91a1-2302941db142",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e47cda54-9e91-4f2d-a74c-913168ad875a"
        },
        "item": {
          "id": "c7c0fa9d-bee8-4ab6-9a08-09c8eb141259",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5f5e324e-b186-44b4-81f6-252c7cdde404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "bf202851-dafe-4373-a1c0-18b05ef9979b",
        "cursor": {
          "ref": "0e6943c6-c8af-481c-a585-ffeef1f2c627",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "29514541-b541-4f30-a26c-460bafbc0fb2"
        },
        "item": {
          "id": "bf202851-dafe-4373-a1c0-18b05ef9979b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ce281a32-0c7e-4165-b4ad-04ae3ffd6587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2eaf2525-3098-42eb-a597-a466c0ec882e",
        "cursor": {
          "ref": "caf652d5-9bdd-4dae-9376-5f51764c725b",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5ba95234-9854-4967-9ff6-7c314a8d9a1e"
        },
        "item": {
          "id": "2eaf2525-3098-42eb-a597-a466c0ec882e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dab5c56a-0119-496f-9ae6-48cb887d898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4cd2ebc8-f4f7-4782-ad10-70a1a9ea7300",
        "cursor": {
          "ref": "036e6351-d4d4-4dca-b713-b81c4714b1c1",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a903bd56-55f8-46d0-ab02-bb8b1012a137"
        },
        "item": {
          "id": "4cd2ebc8-f4f7-4782-ad10-70a1a9ea7300",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0307bc2b-c3df-4302-94d7-ccf23503e8c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3b6871-a8ba-41d1-a627-ba5c979f8258",
        "cursor": {
          "ref": "2aed43c7-68be-4905-91f5-8e88f0615716",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fa897664-aa40-4006-8401-1e6b9f9c75d0"
        },
        "item": {
          "id": "3f3b6871-a8ba-41d1-a627-ba5c979f8258",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "360220d9-06cd-4acc-8e32-efd2d2ac37b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "01b18785-6b73-427f-a821-885320a62824",
        "cursor": {
          "ref": "987520c8-a2b9-4834-8351-81f34669a2dc",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c2e1b023-ff6a-41a7-bae1-3d1ea71de291"
        },
        "item": {
          "id": "01b18785-6b73-427f-a821-885320a62824",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c55640aa-53d0-40e5-912c-d31cd209ed56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "bb4848f8-da31-40b9-8318-333081efd5f0",
        "cursor": {
          "ref": "c58a92ea-d824-41a2-a0b9-07373f5c1b96",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4d0fb5ba-396e-491b-9129-ff295e910db3"
        },
        "item": {
          "id": "bb4848f8-da31-40b9-8318-333081efd5f0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "32f3ee2b-8a62-46f7-9134-d0a27b045eaf",
          "status": "OK",
          "code": 200,
          "responseTime": 10455,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c46e06-cc6c-497c-946b-6f980ec76596",
        "cursor": {
          "ref": "0ed8b4fa-7ba0-406b-bf55-89e6f0cfcf41",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5c872858-5d87-4502-bef3-e263e78c2779"
        },
        "item": {
          "id": "93c46e06-cc6c-497c-946b-6f980ec76596",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e4dbe00a-c4f8-47b6-ab81-a1db8609a34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
        "cursor": {
          "ref": "5425f85c-d99b-4368-9adb-bb614ab4a795",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c22919a5-c34e-45db-8a2f-929b13bd4cf7"
        },
        "item": {
          "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "35763ba6-bd48-4b45-8126-e7bf4817d39a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
        "cursor": {
          "ref": "5425f85c-d99b-4368-9adb-bb614ab4a795",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c22919a5-c34e-45db-8a2f-929b13bd4cf7"
        },
        "item": {
          "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "35763ba6-bd48-4b45-8126-e7bf4817d39a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
        "cursor": {
          "ref": "5425f85c-d99b-4368-9adb-bb614ab4a795",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c22919a5-c34e-45db-8a2f-929b13bd4cf7"
        },
        "item": {
          "id": "a3fc1789-095c-40fb-a44e-3ba117f748ed",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "35763ba6-bd48-4b45-8126-e7bf4817d39a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "7c5c7bae-f625-4173-bff3-5187b9eb3448",
        "cursor": {
          "ref": "ab9e5a3c-5ba8-4739-a0c3-288474c66b4e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "98e37d53-1415-4f06-a69d-9aba0d9aafe0"
        },
        "item": {
          "id": "7c5c7bae-f625-4173-bff3-5187b9eb3448",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "0190bb89-254d-4bda-8cfb-b03fe12e979d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ced6ed4d-ce5a-42e2-81e6-e543b4d9086b",
        "cursor": {
          "ref": "46d988e0-21b0-4fd6-9cdb-08d31e7d2385",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b09578f-62ab-4f71-96e0-d88928bd7e76"
        },
        "item": {
          "id": "ced6ed4d-ce5a-42e2-81e6-e543b4d9086b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ba2e2f68-c47d-4a1a-8673-97cb67b15209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ced6ed4d-ce5a-42e2-81e6-e543b4d9086b",
        "cursor": {
          "ref": "46d988e0-21b0-4fd6-9cdb-08d31e7d2385",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b09578f-62ab-4f71-96e0-d88928bd7e76"
        },
        "item": {
          "id": "ced6ed4d-ce5a-42e2-81e6-e543b4d9086b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ba2e2f68-c47d-4a1a-8673-97cb67b15209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6bf2f07f-8973-4b30-88d1-bcdcfef0e540",
        "cursor": {
          "ref": "127bbb1b-4f82-4230-95fd-e098b7ab9cc4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dfcdefe3-813d-48ff-a12b-7660b7c54336"
        },
        "item": {
          "id": "6bf2f07f-8973-4b30-88d1-bcdcfef0e540",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "db84d589-ffa3-42ce-8cd4-111848e1f158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "aa8e6d3b-5a40-479d-b9c2-9cf9557ad745",
        "cursor": {
          "ref": "41e42208-8587-4a98-9003-103f3a5ff7f4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "661717b6-e7fe-40ab-a1f5-699da3f819ee"
        },
        "item": {
          "id": "aa8e6d3b-5a40-479d-b9c2-9cf9557ad745",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "165c516b-083b-47dc-b18c-288d5e7fe166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "aa8e6d3b-5a40-479d-b9c2-9cf9557ad745",
        "cursor": {
          "ref": "41e42208-8587-4a98-9003-103f3a5ff7f4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "661717b6-e7fe-40ab-a1f5-699da3f819ee"
        },
        "item": {
          "id": "aa8e6d3b-5a40-479d-b9c2-9cf9557ad745",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "165c516b-083b-47dc-b18c-288d5e7fe166",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "3e6315f3-44df-4c99-80f9-64919c477216",
        "cursor": {
          "ref": "1f28bf34-aee5-47cf-a6a4-c2e43f00fc84",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ca197f94-9d40-4610-920f-512f9a1365a6"
        },
        "item": {
          "id": "3e6315f3-44df-4c99-80f9-64919c477216",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "09d1b3c1-aef1-4be7-a999-65dbd24c13c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}