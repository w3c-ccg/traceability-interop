{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "86e22385-5788-42ac-85c2-921321818ce6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bbb3f225-dc14-4a3b-b0bc-9c175abfb364",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8f8ca30-9e4f-4c87-babf-83d83e1aecce",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a31efd3d-7b56-4f45-8e11-c2f53b2fdffd"
                }
              }
            ]
          },
          {
            "id": "46e2cf2c-158a-431b-923b-9cfe997826a5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ba27795a-b4c4-405a-8203-075db14c96db",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e33bdd0e-018c-445d-825f-3d9ba6fce060"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fc5a6ad4-bce4-4569-86e6-969124fc14f5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "81ed3e63-0748-424d-8217-4c5d3eff0892",
            "name": "Positive Testing",
            "item": [
              {
                "id": "406bf46c-99fe-4605-8b00-3c01b83bdad7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81b417c6-25e2-4f85-8315-74fa08e1023c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2352a8ac-923d-428c-90de-cd115ab991ca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9bec827b-a19f-4855-82a3-1970720451d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44d58a7f-4b90-4af4-9e35-2ca29088064c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b086994d-4389-4b30-8131-ed9c3993dd24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7eb21957-a4ac-42a4-8ecb-bc361597eba5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e479c67-3802-422a-adf3-b1c2104050b7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f6ce39c3-41b8-4fb6-99da-91368479b707"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35d95a9f-bc9c-4e28-94f5-ef44c62bb66a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92093ae5-f47f-498c-9fa5-f1bfe397aff4"
            }
          }
        ]
      },
      {
        "id": "05031acc-a2c4-4284-b23e-b0357776de23",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "64bcc883-da30-40fe-bf0e-34b284378908",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a50ed73-815b-4a22-8005-aa868aa9337f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad55cc6b-0eca-4fe3-a39e-36932bea9823",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c96fa6-dc29-4aa0-94cd-80edb2d6102c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b44480c-bdd8-4c83-a453-1d6745fba21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da79fc2c-87bc-40ff-a68c-e713c3d667b8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0716d2-1906-41a9-81dc-f89741e747ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7faa122b-d9d8-417d-8e38-a862e4ab3248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf71a64-4e1f-4394-a040-4cb71e0f116d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9382634-9d47-473d-91a1-2e3d672ef679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d0c981b-0bef-4435-8fc5-31c1e20b3732"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f1b19632-1350-4f13-b630-c994dd83ee8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b1cb198-8588-46ca-9a85-80cba251b23f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c959a309-130d-4778-98bf-27deef01130f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94b36221-2398-489d-b089-48de43f7d896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb0526c-5827-4419-98df-b6391f10825f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea56044f-3d54-4c00-8c85-2830b701a922"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "92093fd8-a5ee-4144-9768-4ef1b626a8e1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dd454bd1-e5a3-4690-9753-f5ad5b8d079b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69c6cbe2-6327-4ca4-9701-6dd3d60c0552",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a452ccdd-3594-43d9-a321-59c46ce9b91f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78ce0d4c-c4d4-4573-bd34-07b8eb74f84e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d3d6bf71-5111-474f-8659-255e02e8416f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "335453dd-9fa2-4625-9a5b-677fcde42e12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d7f4f82-c34d-4c34-b1e7-2da08537c5b2"
            }
          }
        ]
      },
      {
        "id": "72dddcec-10d6-4457-8f37-9ca3b7527bda",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "036c7ce0-045e-48e2-8c6c-b83804494463",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24736a3c-24c7-4e0f-9b53-e733a2da3b41",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6f3a6ef9-2396-4ad1-bc2a-cccd5619ba7f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6037a2d8-2f45-4e96-9df9-da6f41c90582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaec8a8a-38fb-4938-9a90-be5d5ba06c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1c5f61-b8b1-44c4-b962-c33f6b7b19f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac8d6ab1-4f64-46fd-aec6-e998650ad110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c252a3f-77db-4a8e-bc80-8a9d8115a2de",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d46afc2-3643-4a3a-a005-d54c72a365c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5565d949-c6fa-4b89-ac1e-ff2f7f962292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d9f663-aa69-4e97-bf42-ee37ba506aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5860f9b9-c639-407f-bcd5-da42632eac8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8de49e-365c-4c33-a9ad-aeb89861eeae",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b4c6bb-d734-4f73-9441-68790ee007e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a86698e-1c37-4435-b8e9-404202e39469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce171471-4f6d-42df-ab1e-4c30c1dc16b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5658f922-51b7-4e34-8137-e536879e760e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95702dd-e848-4615-be58-09be081648f7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc7d2b1-60a1-4e30-a5ba-6c1e6b0e3040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b34e86ba-c9e7-4bff-8024-e6f64e2e0607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f4109-dc01-4015-b621-6b4ffad08c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3fff5cf-1eaf-42cf-9533-a44e3c5452a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c317844-63ba-4fae-9c35-9d4a739cd757",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cf3c67-bdcb-4f6b-9258-1f2afca63b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce62ba00-52a5-4272-96ac-3b24230515e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5dc94d-5631-4961-8ccb-f0ff5c3a917c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b77c45f-41a4-459c-b323-c21b880a1983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943cce64-b92d-4308-bfbe-c57c0e76ad0d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc2ae05-a6ae-4a49-b920-bd1b6a38ce1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f6a2e5-6250-442f-a6df-1820f802e8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7357f4f-5f9d-4ee0-94b3-77008ebd8f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d2725bf-d750-45ba-a029-f182f325a8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146aaa04-a7d2-4f08-aa06-a7d3ac07753d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3508ef6e-4ad3-4bcd-b520-3d80609cc6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9822b381-700d-4616-abe6-d424ffe797f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f40ec2-562e-4784-b7f2-1acbf0fa9fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f50a8e46-9a4a-4ab9-a950-c2602d3eef3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1ad003-6539-4343-90d4-28a3578d9347",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a268c9e9-e71c-4d90-b43a-a4f5e5d0c1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5579993-137e-4b68-966d-faf303a2046f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8152abf-07c2-48ae-af8c-bdc139d4b950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5177f976-e814-47ba-8f11-db52e048c5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203a9537-7e7b-4fb7-9da9-b6b9e3ccf46f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f027a1-e18f-4d1b-a70f-7b7e20306a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e3e1fe-2560-400a-b513-41d79ca89a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4230ae6b-99a7-40b4-bb6e-c9021686a770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7209a439-9f9f-4fd0-b034-00a476a1034f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3a0359-a9ef-44b1-9b72-fbe1c857fd00",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1fc390-a853-4db6-a3e7-9f3c432670eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d633de-4b73-4f72-b729-b9c478756af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9870047-6fba-4ac0-b06f-72adb5d84511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c037b897-e345-43f2-8188-794ffbe5173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f2e6c2-fccb-4d79-8cc9-5832780eec74",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e0a9a2-13ca-40b2-b421-26f5e514d3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530c3527-63f3-4b9d-84e6-9c397a1436d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e8dc3b-9c3d-4493-9842-52067496b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b77366aa-e5d4-4f67-8b69-71ac91b0900d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d46e3d-34b3-4d18-a343-347e5f3d910a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc90f97-fde6-4c63-879c-7cbe73172ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7c9fe7-a323-4b24-aa8b-b5a6725b821b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e9f0a1-ed9c-4ec7-8319-1d908c3d3af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32d9adda-9a9e-44a6-96f9-2c3ec135ad65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca88528-c038-4992-ac48-239eccdd14c0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6509971d-7b92-414c-91d4-172f902526e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9680ab-d9a6-493e-a8d9-9df6e9321f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53ddf63-e679-45c6-9742-9a4a401a500b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "238b7ab9-91fa-4aba-8ae2-b6911fd887a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ba4a7-6ce2-4290-a843-ba3eeae9ce5c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2fdda0-bf4c-4fb6-8988-fe5973476de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91692888-764a-45fe-a25b-2d9a69e726ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887db492-8978-4f52-8a65-69f748dd4d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5eb8b6f-e824-47e4-ac26-0fbfd0f23c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3399f337-57bd-46b9-a87f-9fcaea435a00",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7986f866-cb92-4f7f-8caf-44919a16194f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24706afb-52c4-4d71-af3f-f064d765d6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196fcf9a-4252-43e0-b615-545d3d66b2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d210f787-0078-4b98-a9e1-3bf7c967f17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebac860-a9f8-4956-b467-69b51f359124",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bec30c7-b064-4525-b41c-7346dfa7c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152bd78e-359d-4ca9-8dbe-5b843e3cec20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71be4bed-988e-48b7-b236-0535d59ad820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f4675c5-5392-4ba8-9dd5-2ee446923765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a740515a-9441-42b0-a206-f6b9d55a2750",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ab895d-b756-4d95-9233-3fd6dca78681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2bcc272-f82f-47c1-9b4e-90f0f8bbdc40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117857b5-672e-4985-9000-dc2ca2198487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0411226b-25d6-4e97-a5ba-3fd6cf4e76b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af033b2c-845e-4492-a56f-473320f7442f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f6058b-a293-48be-865c-eaf2def5c59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3527e55-eb2b-47c4-a540-2d0253f48543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd7bfc-1740-455f-b2d3-b977efa9efe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c0df6a-d2ee-4d88-9238-a158aea72084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72da8b3-fe04-42cc-aab0-bbb0a5dba3dc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70a4ed7-b490-4b56-a50d-259f0dfd2a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d240968d-f679-465b-874f-0e521a0e6442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315e521f-eb7c-47fb-9ee0-be1658d448f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba38ca22-6e7c-4529-ad5b-35aedabfae75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f960d5-3559-483e-9776-3c80451a7392",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaca7b7-7dec-4944-9ae1-60acf01e48da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a200ae7c-98b1-4ed9-876f-f2e15b0a7782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92da65dc-f272-48d7-8baa-fb74854b155d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c1d007-2bb9-4ed2-8a0a-af337d954496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c4fd22-270b-4c5b-a453-94d31b6247ce",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49d17a5-7fcb-4dba-a048-60e7555b933a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f89ad83-15ab-4a75-a5fa-d64b44eb3022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1d89bd-8cbf-4afa-9c56-9ab0b9a2d670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff965344-932f-4db5-8e75-b7d4a9787af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f3ae01-714a-4088-a225-62bf89dcc500",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31609e2e-3fe6-4406-8fe1-bc2ab2da0ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7a49b1-5aa3-48bd-aec1-d8a3ab515c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa1d7ce-b30d-45a1-841c-acd4d1de1fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56b74981-0d5a-4da7-9b74-873ed5a97308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbdb42c-7e83-4604-a060-003ca9f57aae",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e16f34-20ce-42b5-99a4-35f88e843769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b0ec4e-37e9-4a54-be9c-eda62e954623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3592e70-3181-4231-a8f4-d2eb303c1bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c647518-974c-4da7-9413-040d2788e446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a053eaf-cc65-4c9b-9463-0f62ee41edae",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10f3243-e12c-41f9-9d4a-1beefa9543ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61331154-bcbf-4708-8e68-d0c403a3f41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af993466-0c06-4e23-950d-3b67e219e964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "70203e09-657b-4b3c-889c-f99e23cf5acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547a08fc-ee22-4c28-b59e-96be16e0b703",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960527c-f659-47c2-841b-20c5d4c57df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55a4bb1-7392-4c0f-884d-0caf4d51d0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d9e867-ffa4-4b72-9cd5-b6c32bac8e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d35445b0-4f84-426b-93fa-e9264d3e252d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861a9a50-c06a-4727-9120-687aa03c3e6d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bdef68-486b-4148-a549-2cc0159fb255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ade4c55-460a-4a13-add5-7d4e3facf691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9347ce-e362-465c-b9be-f462f37bc28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99116bc2-30d6-4f0f-b86d-e7904b8447bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b0acab-836f-4342-a9df-1feb2f239924",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c331ae-08a5-43be-b77c-def13d8df62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ed5d2a-4da0-4063-82af-8839a62d314d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca4d754-663d-465c-a2c0-e60d12106e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9941b0c4-06dd-4b7e-bb4c-1a7704868a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5f5cff-b000-4247-a1c7-93fabe29878a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4f61cd-0988-4905-a707-ba8639733440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58c6425-c627-4d56-bffe-172bcaeb2e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e028e57d-3135-4ef5-af65-21251a0e086d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3331b325-d751-4aab-9fd6-ed4dd9560697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57417f46-9749-4793-bc1b-f599244b590f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44888216-a9c2-416a-a1e3-3d1eb8456335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff83d27d-4a8a-4359-873c-76a1634b6ebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f13ee92-260f-486b-b893-34d870001e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9bfc5b-7dec-4e2a-bd1e-23f418a89088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb30c203-4d97-46ee-bc51-7d273bc7da34",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e490b195-9c23-4204-977c-cc55dc187c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b648a4-d316-411b-bb33-a605682c9bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5e7188-7ab0-4450-9684-b666bf5baa0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "73b4c982-87c3-412b-b87b-cf16dc81ede1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed6aa33-4318-4625-a211-d85d7a1c5f6d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573c25e4-97e2-4b2a-8464-600e2b23ca65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6e720e-1291-4854-ae67-b7b98986378e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1c50a4-d259-4148-867a-61af72ae5f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a17282e-2804-4e02-aa70-24e575ec9359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a781e9-e592-4803-8bb4-9c6224c9fb95",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab4556c-d91f-495f-b1e6-d8c420d44a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5abc740-165f-4a95-9de6-c983cd85c62c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b078192-cbd4-4d64-bf70-ad52080086f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "417673d8-ec2d-4b26-9e38-9009855823bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f798896-745b-4b3b-8515-adb9b6fb66c5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fe3e19-afcb-40b4-b297-1042d5d7b5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "858e6a98-47a8-4829-8439-e808115b1e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4d9a01-d8cd-43fe-8d78-3c1a1ff42a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d50555e5-9fd4-43a1-bf0d-93ddb9f0cb60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f799a2f-283c-4051-9f8b-7398e78db7f9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433c971e-cc8c-4644-b01c-02f9d144b5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdf2d0d-435c-4d69-a38f-80479e164c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dd1688-4b6c-437d-a8ee-b78f7403313a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c385d1b-97e5-4fc3-a6d3-601b275bb4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e9880d-a383-4024-a1e9-f1a0afaf133e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dec794-ed38-41b5-a2e9-f06739414d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17c1f51-248a-49bf-a240-886c91f3fa45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a630562-4c38-4923-9a99-803052afc6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "35656972-c35d-4a18-bc63-50b1cd634ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499ec5dd-8cf3-4085-9d4a-3519218bec10",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef702dc9-a622-4b3c-a176-cc6521123365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfb97420-051b-476d-8597-2866be0db5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba40feb-f924-4e79-be30-d0e5008da7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f963156-7871-47c0-9ee4-63247beaad06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a7261a-693c-4778-a0a2-f947fb818935",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee20708-4553-4d0a-982e-36aa3b741906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1090d714-5f52-491c-a0bb-4834209407c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11574dcd-6f0a-4b9e-aea1-09fbb7696709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19ddbb1f-a50e-4f1c-99bd-11b9dd94dff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d7d069-7c58-4a66-ad18-5e877b7f606c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c949dcdd-ceb1-4ec6-bc26-26a78e63ff51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f64a9f-a3f7-4981-a98b-6f635393f150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435b4a9d-5eb1-4bbc-af9f-cbd7b763d34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4b4700-b576-4f7e-b177-6cc5e939ff9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea8a824-6184-4415-a10e-b9bb992c75e8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f16eca-0596-40c8-8186-0a0512efe24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8c63d4-76e0-4a16-b8d1-a3f48ae4d536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f92c1b5-062e-4da6-aa75-7fd60aac4edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c126165-3a22-42d9-85f1-21b4307683cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72748429-22da-4e8f-962a-d40e9edc2214",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b287a5c3-9da0-4b10-9d89-8e1f5f926d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7917719e-558a-4e57-9e83-b5f7fc9373ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e7956e-c5b8-4021-9108-c817ef7b88be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c13b5a3-55d3-40f1-bff8-9474792b212a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9003f0c-8453-4933-aa93-a4ad51da964b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08f54ee-4cdf-4591-a28f-7a3fc66b07cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69716af4-33df-48b6-9dd0-85517d6be176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f1af51-3609-47be-9043-9f18ba5008b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ec48f97-4219-4227-ae45-b72882b92efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d8ed83-93de-48eb-8179-4f67a0f8f509",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d23426-da79-4033-92b1-811a7012716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fb5f9d-59cd-49a6-89ce-45169310e2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70edb771-35de-4482-ac57-bd20d90ea251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "71c1db3c-a328-418d-af53-32d40cb6ffe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0830e05d-ffaf-44e8-b6b8-4d9d4cd246ba",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3d814d-6c4e-43b0-a2fd-69e0b3241f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2096a0e1-cc40-4668-8398-1b0e8ebe6e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fea4c7-477c-41b0-9dff-aa49167abf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cec1faf-914f-4c1e-bf66-6e69c206416f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea49d50-ee4a-4426-8811-e91be760bffc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f559f9-fd11-4d16-b6aa-6f2184ac71e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a93923a-4f30-483c-8d6e-20f0976fc275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2403e6e7-06cb-4b1d-9e38-30ba8303acb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f08fee-0d05-4ac0-ac60-81ed75040460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040bab97-bd33-4735-a7e7-d5e7a3c82d34",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5a1e2-d6cf-43b9-9901-5125b4edef04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b3dcad-83aa-4703-a6ad-b2991cb34943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f44aae-60c9-4361-b222-edf0e58441b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d43e0baf-29aa-4eb6-985d-c5760e3cfa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143ce0d9-c064-4f4e-b870-bc8a860c2804",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6b0f94-27bd-44e7-a93d-76d6723ef365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b68ef5-480f-4a0b-9222-0bfa3a05505d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e101c881-cf1f-42a5-b37f-ce1dc7bc91e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d937e91c-7e9c-4d62-aec3-c696170d5745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c784da-4a12-4f9a-8f24-762861ffa486",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7c0e30-fe03-4a96-99c1-15bc980506a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6143863-23d4-48fb-9ddb-bbc2e692ed86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3417a822-567a-4685-9dd6-58454d0238c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a69a96e-8cf6-4427-93c5-ce111e01d2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b8eb16-62be-4a1c-b329-36e2456b5e6e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ec8923-8646-4539-bb6e-cd549a09f910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6534c32-e1d7-4024-bcb9-3bc85a95edfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b085d5-9f62-4238-8983-fc0e85b00b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1074dca-64fe-4e88-a2dd-71e2bb8870b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ece6ac-b3e7-431f-b6bc-b2785acc258a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4afe1-7a1f-4b51-9956-a11e502b4663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1cfdf09-f776-4122-9c1e-26a549b73f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a2be84-da1d-400b-8b7b-a58b535b968b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f105132a-6e10-44c5-a867-11c287c132bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026a840e-c0ae-4f3a-9967-b9aeca252751",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91158c8c-fcf1-4423-a2f7-4c507172e492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67bab91-4e86-413e-87d0-76a6e785df3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93095ac7-beac-4312-882c-82b8aaa35948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1627c4c-a469-4607-85a9-964a96b16a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1795da-f943-493a-b54a-dfeed9d051cd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7ebb37-2e61-4dc7-a437-2e29c2f41bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f519e0-eedf-4a19-bb26-a8fcff1d3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d80003-80dd-4da6-8f61-df4e27e09850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8826c38c-44ab-411d-8972-228b2d712e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9276bb7e-23d1-4cc7-a4a7-42776a09b9be",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f0d1a6-ac96-40b1-86bc-db09242b45d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fdcb272-3624-46c2-a492-a3edc10028a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b162788-f2bf-484b-b149-c188cc37d273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "848fd5e9-9089-4410-b139-f79ab7f48744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04034c1-7cd2-47b7-a393-61dd84c88a9c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c700ef8-d490-4e2c-b193-98603e74142c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152dc869-d913-4828-a8b0-041e861981c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078cc886-9ca7-4a46-8e05-5239cfe84e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98a6c799-7ef4-442a-8699-a74991caf377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f1d55b-80b6-4a59-a14f-5fe0adb1c08d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0089f5-ecc1-4505-82d0-efecb3fc8d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7084b704-72c6-43b8-9a1b-8199d001e2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154b28b3-c379-4270-ad58-5e695c906b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d157452-b824-468b-91fa-87d98fd2332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ff85d7-efa4-4bf9-92f9-0ad2d5e638ef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a691305f-e163-434e-abc9-356ed4d58b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5af2b9-2e27-4372-8252-99e873b4965d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6354db40-b8a3-4290-98a4-57602a92c244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c5b9ce-707f-43c2-812a-d2273d0d10be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0fc3a1-d1b9-4c00-b966-d75e9a1857b6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac17a29-f415-4eb6-9d80-a23ef1234780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb84ceb1-7802-40c3-ba5d-b8eed712310d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca0f5aa-8dac-4de4-8bd3-a840fdd64950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "04d48ca8-2c3e-4cf6-ba52-e8ebba37389a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f576a85-18ba-4113-a92d-e02baa661aae",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ac654c-07e5-43b1-90f5-a71914715233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391b72c7-47e8-4820-8e1a-e65dae5ccec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aeaad1c-f2f4-4b0e-9de3-23e938ccaba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ac3b89-c14b-48cc-88d1-6bf1d36191bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3951cd-8ae7-4068-98c3-88355693c986",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9deb00-59b4-495f-878d-11dbfa42ac5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2311910d-0d3b-4018-a532-aa7175ec54b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5233aa-e2a0-4877-ac7c-eb9e6e0b45eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fff6f5d-a374-4fc8-8341-775fe43a05f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c86cb2-402a-4bfa-89b8-c348e01ee2ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5794ae0-071c-4942-892a-4f6e996e0895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d32d70-a367-4669-8268-6399d0069ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6875b9-dcfc-4025-b863-5a41e30a09a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9727f995-6825-44f4-ba60-4e50f5158a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c64e5ee-58cd-4a80-9905-67e2da0d0f2a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d104d30c-9e6a-4b80-93d7-297b7491e435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a58bea-7f60-4371-bfdf-4d995c677b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968d936e-84c3-479b-9c71-54e068c851fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd538a90-f07a-45ee-b037-0f19eb5ee6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17aeec89-c14a-4225-a9a1-4667eba90df5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da77ac7-4803-419e-9088-be5a4446c8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c208a11-4f55-4a53-ad48-159fb809d226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84caf0d1-ca97-45ae-a6a6-c454d243b4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea87c303-3d51-46e0-889a-462f25506a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1989459-5150-4138-a7d9-b0106182984d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfbd873-075f-43b6-8141-3249c16aee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3925775-9a8d-4812-9d31-66d5001b60fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e937d8b7-d52f-4c28-940a-ceb17076deb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "345fd43a-13fd-4100-9488-06790742919e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98580fec-9a1c-46ae-8252-34beb2e32a2b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c1e723-f6de-4f82-8970-241de29f92ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee3ebc4-42ad-4558-a2f1-b2333dc1ad14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1c4e8f-2270-495a-bf4c-7ef20b94b4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b1006f-61de-4bec-92d7-4a7f94298fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c616fe5d-a6eb-4248-a76a-42d84468e813",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2b7b54-a9ff-4080-b72c-fb7f784d4ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549ee7f0-369b-4df0-a686-ca21564b39b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ddc1b0-b7c6-4c86-abcf-057d79e88171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "743b9cdc-f233-40e4-8568-5757716bb3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28b7c31-edf8-4dd2-a52f-81a5631970f9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b6061b-7c1b-4ba9-8829-c2e01e90ef91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cc61d8-fe10-4192-9326-9d89c8827581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab35136-61c7-4cfc-b756-4145c30568b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "811c8c66-6588-46f3-82e7-bb33d821b699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b9b6ca-50b1-46ba-b5ae-fc0d155dba9a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0130d7-c1e7-47ae-9ea1-4f678cb825d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5623ce-5fad-49ea-bb27-7c65f8feec28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb7c1ec-3920-4ed2-a3af-9ceff0e15ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac23fce-f9c0-4a19-a798-1f8eaca3c50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cb9d91-e981-4df4-ad07-a26ece2ed49b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cafb20-e736-4f22-822e-288b230991dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcc67b8-72d3-41e8-9856-b846112c07fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed89e43-43a0-4064-8095-cefc82b1eac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "696a8a3e-3525-44f3-9b26-bab265bf351e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c34d42-1dc8-4a5c-9561-9cc5f7570c3d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25405e51-0e84-4b7a-b368-35026514445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc8ef3c-e827-4143-8cb4-25dd6dd08ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa737ee0-6e00-4b5e-b6b8-68dd6e539302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "683a30b8-6914-4f2d-a687-327475a3e580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a88d3f-e1f7-4767-8d70-9de5fb333676",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51033d7-79c3-481f-a9d9-104f440e1e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7a7754-5790-4519-a393-1eb2df05fd0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7a94e3-8d6c-43c1-87df-beddc4494a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e46dc9-e12e-4e60-94e6-e3dfc635318f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac6c1e0-a841-4769-80e6-69b01ac4a29f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef1770b-2ab1-4536-ac7e-1e85895d4a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcaaafe-e00a-47cf-8895-6fbb665ad686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea609a4-f890-4eeb-b52a-cf676f251cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e96fde0-8ab8-4128-b56e-47308efa9781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2f7fea-2260-4205-b663-d3a71e28af11",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae88177d-15ca-408b-b9fb-903daf152af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5481fa06-ff90-466f-ae32-2be330ddefe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a519f4-d48a-4bb8-bc6d-2c5011e41c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "814427dc-03cb-48ee-bd44-4e0504e1cc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7637ba30-030c-4c90-82e2-c413b68e41af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556219a6-b873-4bc4-8d67-f252437bd774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e5de37-c88b-4486-bf0a-b1aaa771008f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c6d441-2dc7-40fa-9149-e8646272d7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "581db389-f9e0-4f15-9704-8e13c2c674d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354d5a10-ab93-40a1-b833-4d17cd3eadf2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263c99a7-0587-4243-9663-46e9cda689a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771efd5e-18d9-426a-9f37-93ae67b1347e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a78f511-8750-4090-a0a2-63513a37ea28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e53d697-bfd9-4f6e-bf99-aec689f8d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a89ee39-f417-4fc4-b848-d91be8494d22",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721874d2-f8cb-4db9-ad85-9eb698605eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c09f967-3510-4938-b621-cf7635ef0c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9005a7b8-d7eb-4c4a-bdba-b4711856fe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c00846-1b45-47cb-8718-1bf56536c8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c14bcdd-a9ba-4198-a59c-122a8b0a8124",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb98381-f715-452b-9bd4-a569740abf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be49a976-e193-4930-854a-a670443c8d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58382ece-3a7e-48af-b334-c12c89e19a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e2049b8-9552-4fe6-bb3c-18ac864c62f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef6e37c-5058-459b-be44-e1d9f156545b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8b7705-6cca-48ec-948a-586ee4d2fe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa62770-2dfd-47ba-80df-fd07782b8d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e5a9f4-2c93-4ebc-8fed-5646303920c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7242573c-c670-48ea-8df4-10c89199f53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346d7591-1005-417b-a4c3-6b13b590a33d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b565a1-8856-41df-8dd3-30ab020b94a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934068f8-48c1-4f33-9e87-b2728cd01ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ae7686-58ba-4c66-82a9-030a20bd9629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf081e3-387f-4a5b-aaf5-e689c098401d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be06ab8-9998-4963-9402-540074724057",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda3d217-1576-4152-adcd-9822be37ed85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890f6a06-f550-4d87-919d-2e8fb86f764c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3883ead-67bf-4f23-b031-b94d5a397910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5394bd-9f03-49bf-8abe-0f21ff2116fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ded8fe-4297-4f60-bb12-a0944ad078c6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0c1d8b-49b3-4319-9c3c-5377785ed283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b50546c-1086-46ba-886a-8ada1bed22bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1784bfb-3b6f-4e38-8359-d8615ca23228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f757aabd-f134-4b46-9f68-ec5ed45f2c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b20db5-1a03-459a-80d5-ad53ad1c2d41",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1a6660-a490-4bab-9182-b7b5f3181241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f0c2bc-ee58-4d54-be71-66917f438bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882ae689-13fc-438e-add0-2f80fe2265a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd8c957-b502-4c99-8277-8b68e896680a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79e4835-b370-48c8-89a3-df4a75a1bcdb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d4bf32-c135-4191-bbd5-fe5a1eb1db88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe37ffa-f53a-4de6-8a9b-b2cd007be6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64794953-2eee-486b-a085-9d930c109028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7617175-a9c6-4f4a-8b23-2cd74b67a3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea24e73-0e5a-4c95-9560-1cc82d38e568",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a5277e-106b-4747-8814-cc7b782cb31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48b8f241-941f-41fb-937d-571188928456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3c748f-e1e3-4a1d-aec7-32417b324616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81b00e3b-907d-4f2a-9e00-eebeb971014c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7092d9-49f5-4f47-b388-c5832ab05928",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae33f76-6a1f-4efb-ae8c-1b87506a407e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8ed3b0-4e79-4ffc-a75b-c13825f20ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b7e223-27bb-4e10-995e-ae2681588d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "990a807f-8ca2-40ad-9c03-61853afbe2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ad1d5d-9d39-4c95-9c06-522d8db50a5a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce4be7a-8d5d-41b2-a758-825b3cbb8b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57610a52-9f95-4d05-adcd-d758025524c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8316a8-fe8c-45ed-8357-14fb79140358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70e46272-f5a9-4fac-953a-6ee5a2f96d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbc56eb-9d9d-49b0-ad8c-60247177fb21",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d30829c-ca52-4e3b-a786-4b405ab77df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c807ef-42b1-4eb4-be37-1b71b118db60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e903843-6223-44bc-ab75-de2d4f222084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11862b23-0bf4-4c5a-883f-9529dd7cebe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d567ac20-3974-4192-895c-bbb2dd49cb05",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1078e6e1-264f-4bcf-9549-41e01d3b9a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78590851-94aa-423d-9313-4dca31385cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6b41db-b194-4f25-b35b-656fe590a4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19687a8d-0883-4ff4-8ff6-a35c68b1801b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4299eef0-d6bd-4707-9db9-41d0a62a5591",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbafbaa-0a91-487d-8084-838a4c0366a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5234f32d-6c49-4f47-a904-51c71d8a73b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923a5272-2439-418d-b159-17862150ffa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3d817a-b3e9-42f8-b68d-624709f78c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601b0b74-7a58-43d6-be7a-cfd5cc09569e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e802cc83-e76c-4d78-995d-04046181d139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66ac6aa-dbdc-46b3-946c-17d34f553488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e18a34-2b43-4d08-a15e-7db5c7465a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3de4cdee-a1ab-49cf-ae59-0e87505a729d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba88c16-67ab-4546-8a3a-3c7bc4ea7883",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe3f723-e24b-4ccd-9f28-323351781134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6524a3f6-8136-457f-a93c-158a6945819f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0f364c-aa84-4b7b-aed3-4bfffb9dbac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa1467f-03a7-4627-ba63-d99eff6105b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed1040f-109e-4f5e-ab0f-1f2260794871",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93fc08b-57bc-4267-b56f-b1d1734550a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df45bd2e-86bc-453c-8f73-819f51db65c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca73b50a-cf64-4b20-b0a7-3c6087060959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4a65ca-3424-4419-afe8-bc3f1f043d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4edf65-b3a6-44b9-91f7-106f046cc573",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb86f28-9abc-4daa-978e-e45b0575cdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85bc54a-496f-4888-a70e-7296f13b0847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a73ac06-510b-49ea-9716-a7a665b1a790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f57a8c-62c7-4d22-b371-641d545ba597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60373892-47f2-44ee-b9cc-dfaa9287abb6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e86eba-f3ed-45bf-9dbd-4af604ea73c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "19f28626-1b99-45e6-a94d-2b1e46c8db2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e41673-614a-4fef-8147-43d289dccaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c28ddcd5-9150-4424-a8a4-29cb01e9d7de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4df75c8d-8aea-406f-beae-369f4a0fe196",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c987cb80-5b97-4242-a56e-2897676faadf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6f7570-39cc-4f03-989f-bc18f00b5029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63d9fa30-c744-480c-9488-9af3e80fc778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465c44c4-2a6d-479c-b39a-597030ff05c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9368c72-5f8c-4a6d-a79f-2ce2137c8597"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89bc0bef-ef85-4114-a507-e12d80b2443a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "536ae355-6f9c-4d18-87e7-6f16de9ba287"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "556d10d0-fa9a-43a3-8486-084d8480981c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "494819c4-de2f-4fba-93c6-e6e7b53fdcfb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e352833-23e7-48ea-8101-202b8b6b48c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75f126c8-5c6b-45bc-b4a1-a460e86582ff"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aee119ab-0ab9-419e-9464-42e621e065e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e7a75df-10db-4f93-8718-e3a7d1140160"
                }
              }
            ]
          },
          {
            "id": "46621576-a22d-4f35-94a6-5f34b17cc4ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f72ea51-a599-466d-ba99-641a63f1e98c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "170c7624-1162-41dc-9c3e-089026a6c4c3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c3f71b-b5b5-4c3d-bf1f-8c474555876a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "64d0e418-d5f2-4e56-80e6-c28514dbbb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c26f0a-9b10-4664-8d1f-70ac43bc5c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d41015d-37ce-4e64-aa39-182c5badc5a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73426874-629c-41a9-8745-08224df3e952",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "681b6425-baaf-44c4-929e-40e506725593",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68290be9-2078-4cff-9ae7-bbe1df4c2ad1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe803a01-25cc-424b-8778-2d3ed1ca85c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ddfa92e-096e-495d-9db9-863913581c6e"
                    }
                  }
                ]
              },
              {
                "id": "2421b5c0-33aa-4965-86de-34974e0bdf7c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93c18cb0-cf22-4400-8726-e93dff30c95c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "27634333-2efd-42e0-810b-3524a100a37c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a029ed86-2e00-4566-b710-023a9839b823",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9d98bcb-da55-4c6c-8089-62ba14b75b72"
                    }
                  }
                ]
              },
              {
                "id": "a5e8a86c-362e-4e1d-a458-90c996c07d1d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9767e3f1-d17d-4d82-93c1-d8096b075ea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33f0a58f-8bc9-4b83-9497-3dce7546abad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7f30c15-0cc8-4a72-b43d-ef165c108fbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9fcfe4bd-7cda-4011-aa05-c351f44eea11"
                    }
                  }
                ]
              },
              {
                "id": "cd26c9a5-4516-44c9-9759-d2bc4b9450db",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31d9341d-e15f-463d-a00a-67fcf84a6c8d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24d80ec3-aaa6-4cc1-8f2e-e3d3805807ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "216850a0-107e-4155-8b27-931654245d56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fb688882-a4fd-4676-9001-3891cc87e26f"
                    }
                  }
                ]
              },
              {
                "id": "b89356b4-b05f-419b-9edd-0554454646a5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d21362be-ef34-4586-ac84-eb10595186d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61a6262f-4006-41dc-a4be-da329b149782"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd21b799-d243-41b9-b406-948f2fa0c0f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b892b8c2-af78-47cb-88e5-32a3704d58f1"
                    }
                  }
                ]
              },
              {
                "id": "2ae56656-377c-4ce8-acf1-e55bf8e4ff8c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e86fe47e-5295-4b67-b7d8-c3ad6535bb10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5805e54-3a9e-46e6-886f-85471308b6aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e791f056-bc95-4e34-99ea-65ad022a5173",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b895778a-5167-497e-be58-34afba4f2a50"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "804238a8-2d2d-414f-8c36-a23ae70893c7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f0031c0-869b-455f-b0c6-2088f2c7cda2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c880b449-e1c2-4852-b4a0-bd608ace5b5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d499435b-daaa-4169-b089-f565aac2c5d2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4201ee32-43d7-4603-9020-d47d9ee817fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3c8b84a9-32ef-4d40-90ef-90ec83f2588a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1855c97-9626-4142-919e-ec8ca43a862c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfdf6d21-2a86-4024-83a0-bc1a7f200fbd"
            }
          }
        ]
      },
      {
        "id": "c08bc5db-a88a-4c1b-9985-07e328d86070",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f4a0dc66-2088-4638-921c-8fd019c306e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "58e2b134-e84f-464d-8db3-8fce80090c7d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3c8e1b6a-c407-4b47-bb2d-1c1967fe7196",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34608aee-a27d-43fd-8f3e-5cbbc89b9fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6086c12-6b27-4e86-8f5c-f219219e840b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163b7484-a349-4a4f-8c00-f2472840f9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7f8d68-5895-4dd2-ad63-7a58c807626c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625eeb81-bc90-437d-b92f-454c8132523a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce2b734-a80a-4273-9b54-be105467a42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a88266e-6c65-49f6-a6b7-df21cafd4f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e43f98-1bd6-4d12-bd97-4244249aef6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd46ca1a-5169-422b-9432-a9b570840bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21bfbcd-f2a8-40db-bc2a-f35eca03014f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5146b9df-ca0a-4f7c-a2ac-e8543c564151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133a7103-3f15-4e10-bc63-f2c6ed2fadbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cbb316-c260-40d8-8784-a2a85dde5cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb27265-d882-4e71-9b11-5df6a19ab32c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4600976-7f24-4bff-9f95-9d05040ced7b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01cac4c-4a45-4c7a-a4e4-b041bf0225c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3c33bc-7bff-4d9d-ba8d-8759c2415472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d73e7cc-f4a9-4929-91d7-d300c8ac6451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9afb7e18-15d0-45bd-99db-6da73bc6e1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af825016-c1c8-45f9-a08d-8ef7c90d6088",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40436834-5401-4f61-81ad-209e8d3f8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcec032-5d97-4842-a5c9-aeaddd77648d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946afd6f-d4b3-4e3b-8037-c2a749a59c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f69c398-678e-4a45-bf73-5fce26b0f53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee7d6eb-dd22-4115-ab30-000d51ebb17e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e809da-0677-40a4-96da-dd694e705728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07e5701-89fc-465d-85a8-80d2ef6bd96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a80ac9-32e9-4ac1-94ac-2e7512313c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1599439-de11-49f9-a213-4b8c218532fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28cfb54-ec87-45a8-8879-b3f50a0736e8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437d39a4-5de7-43fe-b6da-df97def80575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f610bc4-ab76-478a-bb43-c83492e596e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b886ad8-d4a5-4634-8c3f-facfde226ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6bf656-12d2-4019-85fe-029cf5c92210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fe3bcd-abfd-4284-8760-f6bf11ad19bd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83a2875-9a4c-485e-89b5-02ccead8437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2568e40b-a875-4675-946b-8799469dbcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54cef30-cbf6-4256-8cc5-25425c2c2803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0dcc4d6-466c-4614-8add-09db5f8cb5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262cbaaf-025d-4b53-bdc1-4ac5c0746762",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283cf752-f746-434f-9c44-a85492ad8aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84175f63-6155-4ff0-91fb-be305d4475e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7255ae5b-8b5a-4c69-bb53-99e2545e4981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6642f98-9624-48c0-a63d-e281cedaadac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a279aef-e7c7-4b67-b5f4-5c5c09ebed09",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7db75c-c0b2-42c8-9e9d-aef94b0fd7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56517c91-7723-4922-a10a-be26a661b182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78af93d2-977d-4dff-ae5d-ba32514bd68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b50ad08-5a63-42c8-b808-7dd71ee1c26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ad6cad-ce7b-443d-a72e-7272f627112c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af66acf8-b1bb-4e64-995a-01fcfd41c410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bdfd89-18fa-425e-9dce-00138e86aa80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2b32c3-d5a8-436a-afc0-3883f2fb1035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f3301fb4-f9ed-4636-9a4f-7802aeed93cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393651bf-651d-407a-a7f2-51878c1ecfc2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6be5b7-5b49-4050-ba64-d005d72aff3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a0089e-1bb6-4e82-b516-d801f5eb6953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c035722c-3333-48de-a2c0-8a2b19e19803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb76817-4e20-4088-a6f2-7f6b6ef7a457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13617f02-93db-4e81-a750-6349f203e7e9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0ec52e-cb23-421f-941a-9f6cbac08764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632ad04f-2386-4af7-a496-a7f20c2ef04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180a2584-a3b6-44ae-baf3-253c49d7c5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d765dbf-8cb6-4b41-ad62-40500f611df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2ee69c-95cd-4152-b5c8-7476ed55fc1c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba364682-ef68-4582-b8f3-69806162f2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066b199d-2106-4c50-b546-4ea2f58c0e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f307d15-724e-464b-9abb-05ba44ec7ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f22039a-42e2-413d-981c-d1d94c4e12b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd990dc-5389-43b4-8438-f6c361787d3d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452fe8cf-7685-4d1c-b6a5-c7385646aab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a14e7d-9fa9-49b7-bcbe-63edfbe1f140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0f31f1-be24-4f63-8196-5629e17e6c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c64ceb55-154d-47af-a9a6-9769f039a519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404750cc-943c-4e36-b90f-74bc6b3b2bbb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5d2b61-7ffa-4087-8d97-8d4c2f80dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d961c495-535e-4050-9379-cd04f1124d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ef11ee-d54c-488e-90a2-a642b9ed135e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d32e94aa-e47d-42ab-a3e3-c7e2c38020a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c085a63f-d2f7-4c0a-8444-666301fdd3e2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e0ddb8-305f-41cc-a693-b64ff36d9595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf607e00-b97b-44c2-a6a8-32397694cac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ca9310-79be-48c0-8696-22c0aebffa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "68399d35-21ac-4e8b-a9e0-6d566f6abb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac74bb6-f537-4826-9d33-ac6b31e2be9f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd519c9d-ce9c-4b1d-b68d-49842bb87398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe98e724-6a11-4556-8cf7-46d795a018c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ee5fec-0810-4e81-acff-062a7bea81cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85732f30-0e28-45df-82f4-a57f4863b7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba50d369-f916-438f-84b0-b34132ce919d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae789be-0330-462e-86e6-af87e8b08ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7572c31-5eb7-4b78-b098-6f591e6db4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69843045-4749-465a-aa0f-5e55d18b1e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd5c62c-fd79-4f23-8811-6d8a06ef0130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2635e36-7cda-4372-8335-47fa549f5a63",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a505457-9ffa-453e-99c1-4a4c479d07dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b04fc7d-c5bc-423a-a559-0a3d48ff2db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a7c802-1cf6-4e67-b525-66d1eb574297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b7d11f-144b-46fb-a495-101d0e2941f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d24277-05ac-4b91-8a6f-018f2dee1d2d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11217487-a1ff-4eee-8262-aed225c170aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6661f268-1a1f-49f7-9f01-b926ac34744b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00554df-955d-49f9-8036-dd0fc968b788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3bb3d7-2dc6-4252-805a-e093996e6e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb93fed4-5fd9-4525-9bce-5d2a0c9defba",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d979461d-22e4-4b4d-b0b2-a1301a8394fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f19bff02-877b-4efa-8aa4-a02a91cdbe14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef79385c-8f0e-457c-89dc-6f9ed6857189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf09d208-bdfc-48bf-937c-19aa05c20594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b01c7e4-c3a0-42d2-82fc-1cc9c7f77a77",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a22d1fd-4804-4d20-8bfe-218974641019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534fa386-1081-4010-bad8-7ae2fae28d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348d3b4e-b100-449a-b93f-d37f0caaf773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcebf594-ed65-4b50-99f9-6d42bbf46c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb9a501-eb8f-479f-8d94-c2fa54808810",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a36dca-1994-4c3b-ae27-ed1f19b765c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33f1f66-e4c9-4307-8f21-209b09641b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c722bf3-e708-4854-8101-9f16fe9e2cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc33584-1923-4eae-8da9-b48929e063e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b1dc7-741d-43cb-b0df-090390f6a919",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5175844-5780-46d7-a51a-129bffe01232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec4a0a9-6322-485b-9d30-2cd72592cf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9df1ab-adca-47f6-a248-2202b9492ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa4c809-e73c-4017-97d6-1aeaa59c1a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640f787f-9d2e-4946-972c-c4d46359a202",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27aca1cd-6f1b-4749-8a16-dc4f10da9ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed23543-44b1-4f5b-8a49-58e7540a1f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6388a9b6-3722-4a06-819c-001d626db4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0eadd2f-2ea1-4c2d-a01e-9dc77b2b0a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f218d19-6939-47a8-961b-d3fd7dd86c5c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f9005f-fc6b-4734-84e7-1f7c7e8285b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38d2790-cccb-4158-bed6-6f09dc363ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff8a8cc-04d3-44a4-a354-cbc4c0a859c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b046539-d3a4-45a2-a61c-5113f0ce7031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331dbaa1-f13b-4cbc-9e8e-a79c2d14b0e0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdce6e39-7286-486e-93ef-ef6945b0ec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89220fad-1fef-4160-b7fa-79c7f298abb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8054c1-eb27-457d-9aa4-4ba410a97f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8013d955-02f3-4808-8b10-a4c1f75f2b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a08fd1-1e76-4e77-9898-905895819ba0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcc9787-8296-4a3f-9a8b-5b3362c99c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f9b1eb-4c0a-4c0d-9907-193965005821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377f2bc7-5d65-412f-897e-e083b8845d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7329375-b4e4-4d71-a585-a74bbbdabb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2bf65f-713c-4bf9-b60e-2be4ccc5b3a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5110dff-8051-49f4-9da9-706df41627cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71d0e73-7324-4add-9639-99489299b898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9243a22a-eb93-4286-82e0-8bc85a171506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb67443-23dd-4b7d-8573-0a1c95862482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0742d7-de3d-4e3b-b4a4-244060032b6a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b15918f-abbd-4dcc-88ec-d0df534a293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7a767b-d10e-4bd9-9056-921b4f5637c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54bd08b-fa22-4760-b4d2-15ffae108cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e9fe30-da0a-48b5-824b-75a0063d3a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e971a2ad-4516-4e17-8785-2cd534a1ad27",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a26d9d-17aa-4d16-b7dc-15bfccd38791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0f4c83-9789-4612-b898-7fcf41fdfa2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d13e52c-34ab-4795-9c21-a7dbe1ba0641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc9698c-cb79-4201-8fe5-e6f979c90bf8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e1dcd182-f51e-4940-9196-407dbfbd2298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81aa868f-a873-4099-a79c-3ebbc4ba92c7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81eadb37-974f-402c-94d2-443d96205542",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "97044ee6-e10d-49dd-acd6-f37a174954c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b85ae61-1c51-46be-b7df-05b4cc96e6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47d41b90-f4fc-416e-92d5-86de9f682087"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d63ed831-6660-4563-98ea-abb8cd1be2ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88983cc5-c313-4494-a046-d9c3b17b60ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1c4c5d1-1ba9-4c75-8d70-21f8480c4b63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7db31142-83b6-4617-a46f-8893c2175563"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a2f5410-51e9-40e7-9d94-9c0883cf6714",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac08d01d-eff3-4554-9d87-a44db7d6a04e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8749ce9f-1a86-4c50-ba3f-8f8cb7b07220",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b01408c-85a6-4b6e-a396-db0b70c2bbc4"
            }
          }
        ]
      },
      {
        "id": "be121102-514e-49bd-87aa-67b6bd6ea564",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ae307f86-903b-40fb-8dbe-dda473e9cca9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40fb5447-7abc-4adf-9690-5ae962677853",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85271bd0-8941-4fcf-aedc-bed3878422d5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1aa1ef-7595-4ca2-bfec-c79cdb3e3a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16ec95a-1b10-4df7-9d63-bac5104f5b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8823e8-0871-4c2b-acbc-1f717f36c244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1a580f-6916-416e-a9c4-c5cd3794c58d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adcb532-4d45-48ed-bd3e-b269fcc7a8e9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b62f2d-f250-4e72-9542-b5d4c105601d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b675cb-3ab4-49d5-bc27-84f574d60359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77430b9e-10b6-4cdf-a767-30fea997c7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f12b808a-106d-42ec-b025-f9693f6caa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e037faa6-14cf-4a16-a241-6211f101aa78",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f478301e-9359-44d5-b060-73bcf2f32cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f01bde-70b5-46fe-b20b-e6d2c41d754e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb99db4-0374-4adc-8c96-51afba6cb9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47171584-6cd2-484b-bb1b-02564366bd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76cebf-3d6b-41f7-bd17-89cf60aebbc3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f487796e-ba63-451b-a800-a5e75745f492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d482673-b13f-44e9-9e6c-6bd023389fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9479da1d-5cfb-497e-8381-19fa10c88475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e73430-19a0-4db7-8369-085ed98ab621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dd00df-947c-4dae-aeaa-0d763fc65f13",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bfb7f7-a077-4745-afab-3d5dd19b7bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df585cf-4207-49ae-a1f3-b438e3cc7827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd18c9b-6af4-4bc2-bca6-7c4e0308d488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f36024-5ffa-4e55-a706-9fe6426bea43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c2aa43-06c6-40db-814e-a9447f784736",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603e8f40-d68b-457d-8b09-4adc4dae47e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757def7a-6a3d-42b0-922a-9e7afd0452ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c67d55-0165-4a07-b7a1-40757abd45e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9175bb6-b1ca-4aaf-a234-f5ff4dab7792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80541eeb-4869-46c9-b7f5-0d9dcb9eb63e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82d4039-5fb5-4f19-b3da-d1d0ceb9306c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d25b1d-2d22-4ccf-a588-bdc6f3e6b2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a7ae01-b64a-4782-986f-e085474de6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b51426d-9545-4aac-bc66-4d1e4b9cab04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f594d2-3a5a-4cdc-84e8-b7af4570ad10",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb4c3da-85a0-46a6-9ac0-7723b9a8dcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9cbd0e-967b-407a-9ed9-20c2490ba2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b597ebc-b00e-4db1-851b-9063893ea299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "143db792-1323-484d-87eb-354ce0fb4757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a98b483-5965-4f87-ab43-96b47f499fba",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f81f9e5-2949-4531-a519-a40e5dfac188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2ec3c8-4414-4978-ac45-0c536a23a437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef54976c-baa2-4a3e-8881-c7be7b68b5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78119cb1-8687-4006-8306-07bc743b99f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c801ffb0-4494-473a-8b4d-5c8a425bdfb3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f188b62-a51f-4918-a3ea-2bf220ace365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fc38c5-0f57-423d-9f5f-22eb041e91a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60c10c6-1b62-4f31-8fc1-99cb3b82c076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e991be76-10f7-497b-af42-85d4ce2ba9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ad091d-9c07-4932-a4ea-74e47c4cf0dc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b308dc1e-8654-4ec2-9ace-e5f8503e91e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20aad678-68a0-40d4-8e7e-daf61adc507f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5160d4c-3957-48ef-ae29-014df6fc1c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6f89a817-1122-4e40-ae46-d422b5100e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b89692-6061-4a85-a5a1-439438e63876",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0192b7ea-6055-444c-a118-3b394c6f1b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b542deb-490f-4e17-a2d3-f8bbb44e5d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cadcbf9-51d6-4ac6-89f1-e96b44392652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f573f2f-9ffd-4058-92f9-4cb8c31de64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e765e76c-ff25-42cc-988a-4d8aaf04ebff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9576cf64-4289-462e-95f0-35d2727e2d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e100b4e-674a-4f02-9937-a08e6215d694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2f1932-ca5f-4388-800a-863d0646e1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72258204-86a8-4178-bf9d-397866ee0825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17493e72-e114-4d3c-a859-7bad817ee089",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de30584-1d76-4b0e-a0fe-6057c6e1dacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77bae28a-1cf9-4360-8448-1bf834b5a875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aaed94-2335-4368-90c2-73ecf64e67a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "04cf7720-68df-452a-ae74-c6e0a65548af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9770fc-7534-43ee-83a2-89397241cf6b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d2ecaf-5c93-406f-9122-cd807741ede9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6007319-5695-45b3-8892-7ebaddcd1218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fc299c-f346-4cd2-a133-934a05840f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cdd8518-6fd0-46e0-8b7c-00eb1fa16dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20049014-8ae8-4fe6-8993-3b9c1879f81c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78637da4-2dbb-40ef-b2c8-fb0890bcde80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08142869-601b-4acf-8a7c-4df9f214011d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f834994-ebef-487c-ae31-1fb76bc43837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ca9c66-a062-4198-a86c-afc68556d1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f64246-0fdc-40a3-8caf-247bdc2c24c5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e814426d-a1ba-42c4-9e74-21a041e660c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47858936-d4fc-4c58-a01b-9142fc163298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffddb12c-0b39-4f80-ab05-2856c94469d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "471ed5ee-49f7-4eaa-9782-88c297648eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5398f5ef-c93e-4d5b-b6fa-b8a80e0ad330",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24c1b15-c1a9-4527-a564-7937b52bfc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ca2f6b-c700-4b78-b99e-d7cb7be50938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98d61b2-59fb-4bfa-b0aa-7ea1637a019e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4771aa9c-0706-47d1-966e-876231369704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e676bc-7acb-49b2-9e19-91d3f0c76233",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f84d031-8339-45ec-a489-7aa0f20c908f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb84b23-7a2b-4b92-8432-59c64f823b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a44d7c-e492-435e-9d2d-aab9cf384424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa7d019-efae-446b-a3c5-bde19953fa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a125a8cd-16b4-4b5b-ad28-cf6a7896da67",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486494a8-7a62-4857-bd4c-b673c3c1b55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8f2b05-875f-4853-8e8b-67dacd83ed8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39df9b2-c565-4946-98c8-f3fa651f75ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69e64c8c-3f68-455d-9c71-49eaf55c2386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1ee1ef-1bda-42a4-9ceb-19f9e4eddff1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500c6f73-373f-4284-83f7-94bfa7bbc10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82e8ca9-f94b-4fbd-9630-fddcf170f4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d824490-288e-4661-a889-30cefe819c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a626571-a9e6-4788-8bff-01d48bbfdb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22f38e1-9286-4aa4-b2a2-9235d21a75a3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771b10a3-d4e0-4bd6-9951-05c6914bb12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e9ba6f-70ee-47e0-92b4-d8f8e979272d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb461a7d-0db2-4da1-9a08-7f4a70b2ea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5704447a-c20b-4d09-8820-1ce0f4e34de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d7a2ca-de01-4e24-ae74-35f787d683a7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db321a6a-2a1b-435e-809a-946a5933835e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94569cb8-6929-421a-9976-a06686caf9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb00f261-b926-4bd6-bef6-f19438c8bfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "421be383-86a6-4471-8af9-ac99b2b8a91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb388de-35ed-482c-9461-b653f3a51258",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7996d366-8cde-40af-b810-2b2d35e062b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d7d2ce7-06f5-49c7-8c11-daa7f403ff81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15a7fb5-a103-4cbb-b8dd-9ffe44c168b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "139c9827-5297-44c9-a4ea-8f5cf64e81a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74180184-aeea-4aac-8afe-2e46acc57045",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af6f36c-a66d-47fc-95ec-a4639afb21eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c981a3-9f8c-429d-9742-36ffeefcf151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4624aeca-7b2e-4fd6-94cc-bf8f35abd92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d70310d-ebdc-4b3b-9fa7-08ee3e2ba267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923e0779-eb89-41ca-97ff-d543f97e8122",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3210c7-8b75-4cb2-8169-818560307800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd60250-c3a9-47a2-aa5a-29a9829ac1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224ec849-92fb-44c9-9257-b4dbe7fac453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d55e38-05d8-4a1e-afe1-636ca477fbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf0d54d-2527-4918-9a1e-fd0ceb550588",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a93985-e8f4-4e79-9f19-57ef3e7ba265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb374f9-2cb2-460d-886b-43c2b7462e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad025731-522b-4aa7-a614-c44569e4e876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "854cd875-ec1a-4021-80cd-6cb279d80f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498a7455-a27c-4076-9cf6-b060af1e99af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532afb6f-01d9-4875-b701-24f44cdb5008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e96553-6a43-4b05-a15c-82746f44eacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84916586-760c-4a22-b2ee-30a429d9d603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eacd4ca0-bffc-4ea6-a1b2-f570a03d8b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649f2734-0d1e-41d2-af86-970cbd866fb2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883fe381-a39c-48d0-9947-d09a856643e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c63bbb-b3aa-41ca-8d22-56836647a3b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cf5dee-4684-4183-a158-c023cd0cd3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "265e2fc3-ecf6-42b3-8cea-a13d7d51c600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3d8bdf-2803-49eb-aa09-b9bd0d88d21c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f0a69c-62d1-4d5b-bcf5-6fd9414b7c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bafb0a3-b88a-4fe6-936a-151b9fc61372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac5c056-9402-4dbf-9a86-50c2ede4cf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a375e03-77a7-4415-b68d-1540dfb6a319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67620705-1300-45a0-89b6-e3b469c978f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21a6da9-e691-4b9d-99e5-ef728a20214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ace220-669e-4b7a-a55b-7e03956bff1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba3db92-96e7-49bf-8a0e-51b1268d1997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f8be73-58cd-420d-849b-f4d1bc66897f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d426a09d-6df6-4e93-ab3f-ca7f6431546f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562f9549-8bd3-43a5-a2ee-fbd8bda46120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac303587-a8e1-416b-88ad-46c8dbfe1324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d569fe3d-1776-44f3-9f3c-2ecc0f16ee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "421ef3d2-2005-4ffd-973d-e2c5e9c19dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86a7050-54ac-4e66-9b3d-682f2179a550",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb04573c-54d7-4fbc-b7f3-571caa5b10bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d98781-764b-4b2d-b8cb-9fdfdd1a472a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2372225-034f-4b96-ad8f-6b09f1d6e02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a93dff02-dda5-4178-bcbf-3e0b19112792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d16897d-77ce-4d1b-b7ae-05362b142482",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716fda4f-8c37-4ed8-ac12-245df04f5987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe67f6a6-7efc-42c6-a1a5-83746d87c368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4b4676-27f1-45f2-82f3-a2c2425e1b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38abcc71-7e89-4e43-82c3-02bf347e9d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3847dd9e-c501-491a-b45e-1b6067ef9b87",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1839ad11-f833-4073-a136-2e40c35a6749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa2b868-e993-453e-b422-651de0960fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c27b14-6dc5-4a40-82d4-3b94d52f0269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f42e55-4060-4e3d-9581-6fddb0f16cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1951d5e3-e4f1-45af-a451-5721afeab452",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be1b28-2602-42b2-abb5-8e8f87b9472e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473f7e39-6457-4904-972f-a3988b433847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ea290e-b5ec-4db6-836f-e6806bc3155d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "613e2b1e-658f-47d1-96c1-8eb184959b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64d44fd-1301-4769-a320-33ca6e8b6651",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e3c262-1cf8-45fd-b7a3-27589b3c1553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4cd32e0-0bfc-4e87-98ed-1d49e1596e76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f189e1-17c0-441a-acda-dabd5f1af37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "512a9081-e349-401a-9c6a-52349501901e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38a58c05-7447-4c3a-995a-943f1e11e418",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e86748ef-1cf8-4875-a05b-2fdc208be67c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab897be-3e0c-452a-838d-ee66e268c700",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7e14b7-7c89-4fd5-864a-f1b06288e1b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32256cf7-8989-4d26-b943-3fb3a2128f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24620574-d9aa-4106-9a93-323acea53a4d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e9f7d54-5d10-4578-b444-50f17f8e4448",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29e4252f-1dd1-490c-b9eb-c20b8deefb90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bbcf87c-cfcf-4c1a-9d05-da5041dc497e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e1ce7f8-3f76-4d24-922d-7feab4b5dbca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8463b91a-0d19-47a6-918d-4478317a04b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6c415dd-40b4-451d-8b13-830faa3626fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01e3b0f8-1543-4698-9e64-daf795083cd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d93fbe2f-b255-4db2-8cc8-c1ae2c052521"
            }
          }
        ]
      },
      {
        "id": "dc6d992c-a170-4cd8-ac8b-f19926c69f0b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "02192a8d-901e-4216-9571-1876d0a7286c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bffa71e-72f8-4192-88a7-c4f42ee5c6ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d914d495-a5a0-429e-aa3b-cb224e9d17b4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96cd0db-afb4-43e3-9ea9-c95d5cdeffc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b76e517-c155-4d76-bd25-baf65660826c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1654c7a-9f64-4ffd-9d41-65e2186e5b3a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664c7c51-50ea-4f9b-bdeb-35b2e76f94f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9a8714-5edb-4d9c-9e11-6cb9bdb0c9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e860b0ab-7083-45c7-b533-a603d2dc5f61",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25af3a1-041c-466b-b612-06fdcc90c635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cfb879-9265-4722-8e31-5f4da0b3187e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac7a56d-211d-4cf5-9098-e7806763a34b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22146548-16a8-498e-9e15-69d36436e7db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b433d203-3564-43a9-afcb-9b5048794f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23db9ca-6e97-48ad-89f8-ec2518a2980b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b91269f-c9b1-4957-b491-ddf787e7636d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00750773-d38d-4bfe-b9a6-b178e267a4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c7abba-0d70-4d55-b071-831d2589feac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c482bc7-abbe-4ebe-9470-da8f324d4579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5839c9-ca11-4ce3-b661-5b700c83f7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe77c86-26d8-4c62-a228-72de324aba90",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f946cc-651c-4357-bd5c-0ef4c0ee0057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86cc17b-10b0-44df-96ad-dcb3119d25e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fe9c4f-7ecb-4cd2-921d-f0366dabbc20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9e4f6c1-df83-4e23-b168-be21aa464761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11e7cdb-3c8d-4afd-828c-dbb4fa4273c3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9423a9ac-dbbc-48db-af05-a79187e80406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aca7c4f-e210-4408-bc81-c0c51e3c1edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb4550b-4cec-4479-bc6b-fb8cf61e45b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e11167-ac90-4af5-8c2f-4e2248cb3960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1401ccd4-8290-4201-8978-1e30f7ff6fe1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861a4229-be31-4d20-af6f-6885bd48a24d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d23cc6c5-e41a-4e3b-8a29-ef6b6aa31176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07446785-0040-4b48-8683-fab8428b53c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed8d61e-d850-4afc-9252-e61f2f39cbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a1edf4-bb81-40bf-95ca-972e76db6571",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bb7bc5-9d26-44da-9e87-290dd3bdb394",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cab66189-e71a-4070-8093-413aa134815b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93727eb5-9efd-4f80-abc6-0246a8c96295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b90234-80f7-4918-be5d-77c110696933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9f5992-e3e6-4924-b623-7289c7a6bbb9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c85b805-8811-49f1-9a7e-30396e099b03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed52a11c-1772-410f-9781-6a7618468b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bd53c9-c367-4643-bb29-b89ee611a9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8337628-b7a6-4777-9934-d9cc0c105bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7173fe-3312-475c-a97c-8b67a138784a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9050ab45-4ef2-4b79-a659-dd7405193083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc29eef-a3a4-4cd0-9c51-e1b24a79e116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82227f9-9abd-429f-82a4-424d67ac2eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec703cc-2bba-4250-8c69-e7a349a4b5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90521ba3-4037-44e8-b686-49d3c93ddb68",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cecdbc-4630-4f19-a8a0-45583db0b201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e61eb86-63de-4732-a72c-efdab8d19991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f950c32-4579-4a77-8e4c-8fc489471c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f26f51-6b58-479f-979b-43068c864b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91b0442-3566-4491-a955-7521e6f3f6ec",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e238089-428f-420e-96d0-30dfc346cb44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d869e96-0b99-4808-b27f-0c67e752fa67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f48a63d-35ec-4ca9-a84a-1c1ed99371e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd780b02-18bb-4dea-b2c2-c15ff21f135e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903e986f-1a0b-4a55-be36-1f6676db4cbf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495f635a-59d2-4be5-a9ff-aa37b034a66e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524d4d3a-7655-47c1-9fa9-d45ef1ab52cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7cc298-9c4d-445c-bbeb-17962d970c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ed15b2-8a9b-4788-817f-eec21d2e9a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632f4c31-3670-4759-8b8c-000ce58fb1f3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783dfdc2-d8b1-43aa-a3a8-a03e0481e08c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea1aca37-101f-4f8a-8a61-f49e15bfc24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e456766-56ad-4653-b8c4-5e48cafdae99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4d775d-0202-4930-aa21-1d2ac3b0c49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475d4ad3-0730-423e-afeb-69d99a625d8e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64c9d30-732d-4f94-bbd4-e4fe18fd1044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513edec5-d8e0-4056-846a-fb215ab04c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b7f50e-d54b-4ebd-b1e7-bf8c6e7b661d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab812371-d1f8-4971-b663-f58d375b8d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a88c34-0043-4ddd-8ef3-f759f95d9356",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2173a0d-358a-424c-ba54-fffa39c10743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c14f3c-b973-4cdb-932d-32886e755cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bcd485-e98c-4afa-b550-4821a1a1e70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2a7b8a-f267-4fb3-8f0b-16a837562d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6987d2-2aaf-4320-92e3-535042ae1062",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d21ffd-1db7-4378-9433-cd01cf94d4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd343f1-e108-405f-8a35-30b87af7adc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49d8cff-1d36-48b7-bb94-77c81b8f3bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab78bed-4f25-4bbf-884b-df4ca904b138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0e64f4-7ce1-4bcf-80b8-1d011ccfb8f1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c88339-f5f5-47df-8598-51d5970b92ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5414482c-08a1-49cd-a00c-84e6a30bb1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731101a9-be95-4501-9649-2038e494a56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95fca7ea-5e53-4b0c-9caa-ba34718c6d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a87ff4-25cb-4c69-80a9-b0ea06e05407",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77356dfa-adc9-4fe3-b825-22aafca76c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5f0bed-29ef-43ab-80bb-7181f10dee9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8a1188-c899-40e4-befc-82e97e212f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443e2447-5f1b-4988-99ad-cc7c799397e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b4c65a-1801-4926-bde6-880351e4047f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5b7119-b1f5-4600-b5af-dc81e3b3b182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e843923e-28e2-4973-92a4-f6efd8a6d3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6536c45-58ac-42f7-838d-2c58d2cd5eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c9300e-2ed5-49c1-bd52-5d85a3f8e658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f9d6d4-2503-4d47-b42a-428b48b8a920",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f4ff54-5a54-4753-9123-ff02329da1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7777d0e8-e7c8-4590-aaad-98821d45a929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2be741e-f368-41b8-b83e-063bc6bd3e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e6ac8e8-376e-47d7-893f-a507921a7a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161f4a13-289f-47db-92cb-900842a1fbfa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b647482-dfb8-4a50-99df-327b4e30743f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf8080a-9e29-4c70-8c6a-2db3e0ef0465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e6b89f-a2ff-4ed7-9301-994e4cc6df69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73fb221-091c-4f1c-97e8-81bb530d7726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820b1e7a-b9ff-4207-956f-88c40f48fcad",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24fe1a-8910-43d2-9250-8ada93f3bfdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60bfbcd6-cca7-4c66-b5a3-28b42f02fb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efed30d-b185-4fea-aeea-66b4323b7544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fddf06-de6c-43cc-bccf-b04fc7700ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496c3ba5-a190-449e-bff7-14f0f22c1bd1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d17f997-d9f8-4470-9bac-9ef884621635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6e36036-341e-4543-93fa-305d35f5ab37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e8bd04-2f52-4ab2-9f87-347d252f924f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a653d2f-21f0-420c-83c8-47eaa7c9a3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950e6a8a-0c2b-41fa-81d8-c511adfe862e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ad79d0-3c9b-4e50-9fe0-bd87be45458a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c39a45bd-8566-41fe-93c9-b2ebb91baf25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba8ff29-5ae7-4b60-b986-e8a30c906cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1052a26f-c0d5-4795-b763-5b543899fd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985452c7-0bc1-4396-8a52-0fff04fb2828",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4192774f-2fc6-439d-b49e-1a529daee1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae4856b-098f-4b9c-adf9-2289a5a6e508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8dc64b-3139-43b2-9c67-f7639c2955aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a34031-6f32-4e14-b7e3-613532a39676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e035a6ca-3c1f-4e26-9cab-273f7ab0b949",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358716e6-3cbf-473a-a5d2-71c5ae64d992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1723e3ba-9bf8-4411-986e-04687cd2710c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e93f31-33a1-4252-ab5f-2fd0c98a4830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eacfcbf1-4ba3-4704-b63a-283e5803505a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1f058e-2c5f-4dce-808d-5838ae83345a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c509d344-3d1b-4fb5-989a-c92b5f42347c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26755010-c405-4696-b95c-a3b75f2af2c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8833d60b-5af7-445b-8b60-4f9ded4fb815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccebee4-d852-4c56-95e5-7946f9eda3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438f6244-5819-48b5-93dc-0c122ef56347",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbac16d1-f869-4ddf-a9de-3edb56f75cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b4b57f-a672-4354-9e13-3438dbedc833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c81a9c9-9d75-49d4-bcc6-373946b74653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8116c806-d049-4f9b-9005-c4aa507069f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decefa25-8975-4a71-a272-71257697d279",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60bef8d-650b-409c-82e4-a94c562c96ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7471b0e-fe80-4d15-802e-97a2f0dd500a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acacfd8-c88f-4624-871f-a2d534c34aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039946c9-4d6c-45dc-be76-5738651f884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba29459-1984-4617-b55e-5863440e4139",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc09dca8-338d-4c5b-bf70-a56c771bb17e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e26a11dc-f11e-4df3-afad-f8f0d3e8b362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20be5cb7-6b7f-413b-acdf-f6fce40cef6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0194872f-7434-4c97-b97e-e31ecbb49505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed72a328-0b55-444e-a389-a71a4f9917f9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5cf5c0-db57-495c-91fb-0e49c3dc09f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47e5d20-9651-4a9d-9ced-c87e7f822d22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2f4f85-d053-4514-ad02-07d9b69e9752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd40f0d-aef2-4232-885f-da457f2bd06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53187b36-e274-433a-845a-21407904f4e7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55897fe9-460e-46ba-9797-dea673211574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "055798a3-520f-40c6-a4c4-deb340344e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674c11d4-19c4-4209-9ab8-42ef6b497aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a504b397-c9c4-46f8-9801-d88bcbf11240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874085c5-d139-482f-b2dc-6ad9da187378",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6eabbf-748b-455b-83bd-d6432a9b2506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c790a8d-c199-4aa0-a9bb-2bfb40d57678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb77b3-6a13-4965-a498-a090c0e5f56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acaf21c6-30a5-4a4b-85ea-52addf6c3d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caaee8a-3aa8-4118-a4d3-f7c0e1c1cd58",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011e1181-765e-40eb-b650-c503812952d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd76adc-4dc3-4f49-b69a-fc5eb8e0a3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e794760-737d-4380-91ad-6ff31b2f5a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b28ca3d-7691-4faf-80ef-8f5ff71695d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a6fbcb-cd87-4716-9d2d-cc4d9f960269",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30763ace-f0a5-45bd-b0b6-67533ec96dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c48c11a-cfe2-4ed7-bf54-eefeb51abab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76d2771-38d2-4e82-b500-485b4b257cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30e70eb-a05c-473e-aa78-4b8c502614fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d868303-bec9-40e1-9252-80e65ff6d864",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcb0c84-3634-45c1-8fda-f88f04a2b269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338b2f11-f0a8-4949-bb84-f21b5e98ba4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f25145-19ff-4856-9e5a-d9eab4babb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3725b091-1be7-4476-aa4d-e8ca8f3ed90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acf94fb-f069-421e-aae7-01bdf17d3327",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2ec46e-9b03-4614-be48-206a62577c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de36b38a-efc8-4472-b013-d5690384adbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f510ba-d16e-4d18-8eb2-b3deb6e87ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dba3da-d3e2-4238-8020-643eee761364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7ced5b-744a-4c6c-9627-4dde75322e98",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44923b48-d364-4d9d-8aee-bc51bfe60ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74224837-0efe-4688-8c65-e48014806340"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a35b8e-806c-4402-b41b-d31fea37a070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fa2dac-e5e6-481c-a6eb-7059e25a0e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28872d1a-e925-4161-9681-fa8b1636f3b7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e93ffa-d5c6-4871-bab3-9ec1a5ba16a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c265f60-78df-4c82-bbdf-b2b6271da338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22690b6c-2149-49e0-90e9-bc4c2361d990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc3b1dd-1046-4a75-a94c-57373fd6b3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44c7e22-5d4c-423a-8c5e-4c60d064d99f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b86b34d-40b9-4781-8a29-831d656b16ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f6f739-6010-4729-a55e-9840dc8b7a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d17c41-e910-49cc-a69d-656610006a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528193fe-6118-469f-938f-3d4ab167c38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea976dd6-8d55-4bf9-807f-5f1c363d21ff",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b6e0eaf-21f6-46da-a017-eeac03963524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754b7d05-130a-462a-9196-434f14756cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee04cacb-1c8b-4dce-b29b-555a90434ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e11fa7-4e33-435e-8d5f-bb793638aa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd09e8f-370f-4642-8d48-3506d2f2bdeb",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84916c1f-5d80-4d1b-a42f-1ad058e5cbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bc1356-5ca8-424d-ad60-39eff0d01512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd98eba-2b7c-422d-b456-5800da7af213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "077d1c58-e235-456a-b56a-9c5a88c7a57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc56794-0935-4af7-a607-e5b8be70dcc2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34517e66-8e12-462a-ade6-e266209f0ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acd223e-58ee-40de-801e-fbdb16a08f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59b782-f924-4b53-816a-fe3c0b6dd434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d832e0eb-7fb4-42e3-8b02-1d7d7832d601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee6b35b-b838-4d9e-9113-658ba66cff5f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec2b93d-730c-4dd1-b330-70db98f0726f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9b5a04-b3b0-4e2f-9463-48ef6713c132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a7475c-8570-46cc-b2f6-56a695d4f352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be08258-2998-4c24-8ee9-f69e1ab36e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2aca5d8-e10d-4005-99eb-48af3b2f5518",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc2139a-60d7-4723-87e7-4b5fa7b84da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756925f2-bc15-4457-a51b-25663d8c0443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb05a1ad-ea8d-4fdc-88de-9cbfb31b0f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae55598-3a2e-4982-9e4a-09036282d185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a367e6-3dd9-4e4e-a7d3-5f8aea2b20c6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699a3978-2f33-49a0-8041-56c2f8bd2ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ef8165-849c-42b2-99bb-509bd1592668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1469ac53-93be-45d5-adad-8a78b855bb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1606678-8f43-4b77-b305-383e47f7313b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f741238-10df-43cb-afc1-288e21e9298f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e82c67-2b7b-4829-b844-6ef64073845f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56735968-8c59-4a1b-b83a-60052a7de109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94d05f0-717c-45d0-bdb3-bc50561488aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd58805a-d57e-4755-97d1-33e1954b4422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba92d01b-e687-4272-ab84-287ef05a564b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc71e729-a626-4bbb-9e57-a7fef1bbd2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed0518c-49e4-4f70-8e3d-2aa2ad95d81b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab34075f-1e84-4061-ae21-1e56591f96b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cf47b5-2eb5-46e2-b6db-fd8021ee9428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5e981f-6f4e-4844-bfea-be155fd4360f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6cef03-658e-434e-80f5-8b4239341361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9166aa-1abf-42be-b7dd-0b5d42c599bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c7f262-758c-427f-9d94-137067b65d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4249ba38-b255-4bd6-8dfd-06786e2de507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02b4b44-d793-4d38-b582-0b573d988611",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643cf1a4-9fa3-4a08-b92d-dbce2eab529c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b96287-ad78-494f-aaa9-ada4115a6e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "260a18e5-3ec5-4591-8e4a-d9ac24de67d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84793546-4cc0-4f8d-9a22-59da7de6035e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1e7ca-9469-4d81-81d8-a894e7edb450",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1475848-c14b-47cb-ab2d-814b7e0ab684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34aa843f-b382-4238-9c6d-a9ca822f4156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72742a8b-3ffd-48b4-a99e-de8e9fe9d749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73d978b-5700-4ab7-9a0d-0fa553253b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd5be78-6634-47e7-b9fb-7759ff44c9a2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aded58-8847-460d-8845-9a931ef3f114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b36f64-6393-4a0f-b681-b691b9f1f8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab02692-fed4-4ca0-8cb2-f977ea8417d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a614ce-2b9c-4bd2-a73b-22e1d39ea47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a34b123-fbd2-47f3-a86e-29878213e82c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3565308a-1121-400b-b9f0-fbb4aea2503b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fba619-46e8-449d-bbf5-e213d935882a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd0e50d-f85b-43d2-8d2d-d4e0e05eca55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa9a06b-6fe5-49c7-8e99-957dedf1fc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4190bd2d-cd68-4d3f-a00d-ce99cb5f549f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c93f323-9fe7-46c9-9d1d-e5dab1909acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec314fc-abad-4853-acce-9ae59e9b9260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513e63ca-820f-4f32-935c-2cfa9f07a1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d1b9f0-4f0d-426c-981b-a38bc94c4998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740f14dd-771c-4f12-9712-eef193f54a4e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b778c82f-7e54-43e5-aece-3bb12f9b9bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f866a72-cb39-48a0-a2bd-283a9698b4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c510a9-af19-400e-a254-5bd52198a795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a1c509-7bae-41f9-a596-1380ebe8c92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b536b22f-427d-4d83-999d-39ed350f5b05",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77201a42-b61a-42e0-b88e-79087e39b78d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612102fd-194e-4728-991c-c8502d5722a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59818edf-9ad7-4760-bd2c-06d41b7b7530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9946df81-7be2-47cc-8ed9-e51c1004d675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e5dd74-9c1c-462e-9c9b-73e42b06664f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758ddb4e-2ecf-40d9-9c46-1774eb2a41b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52901cc7-9741-44bd-b5b2-6a8a1ed3429d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ca9c17-fc73-41ed-b040-70d9eac42926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac923b90-4004-44b6-be03-1f3a8d4ac29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1057bd73-6d3f-4a1a-ae34-c6175b0b9d47",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b1973d-1cd9-42fb-9b85-c40736000c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e589db0-a4f5-4248-9294-83537586eebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5141de-73d4-48a1-a31c-82b79f6e0ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2858872-fcc6-4515-95f1-b11ae491a3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbedf8fc-6d36-4191-a9af-2a8c60491bfc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1324449b-cbf7-455e-8ecc-0d16d000cb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ffa6d2-8eea-4139-8d55-fd3ebe4cf4f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a47ac3b-fa38-44c8-a6ef-9dc4ccd0a43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d2ff97-5132-4775-a3c9-37b7108bb4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa6744b-81a1-4035-8bb4-58c9aef4898d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e22917e-3c84-4687-9e4d-9574bcc3b7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b2feeb-56ad-42de-89a8-fd6c334ec107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c252a48c-75a5-415f-8cfe-514dc371d035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdde6ba7-6bae-400a-b21e-8208806f25e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac07581-cb19-4640-b427-80a1282b6ac4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8ac324-e3af-4222-b6d0-202b79005b9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8b51f1b-89f4-492e-b39a-51269f04bdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a427b4b8-6dfc-48da-a642-d0e291c46b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9356db-fe59-4a4f-ad7c-5b1c08f3cbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d60023-4990-4e64-bd21-1a951090bcca",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5404e8d4-cc61-4d9e-839b-81904168546c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2cf127b-3431-47c1-8fc9-801ea6f2c273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2857a4-a000-432a-a1a5-c3406ee0a4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021089a5-2049-4515-a969-5ae3f976c769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eba38f-192d-4cb8-8515-78ba909b9c04",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891d2bed-ec77-44e0-8086-2b08319c92d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce95cbba-ea45-4841-9dd9-9d7485a812bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d96cf6-5435-498b-a8b2-760204c25f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e700db15-6738-4774-9a34-2313d0334888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ab9976-ebf9-48e9-add1-dfe063d7085e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d643d713-410c-4f52-bd3e-06c0ce35b126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d643976-5b3d-4ad5-9e8a-760fe8afd731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa296ac4-d353-4760-b17c-4834dfaebac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d629fb-0afe-4a20-b1c9-20240dd14220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e81791-dae4-4c3d-9cfe-a39b30c86ffd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15763d8c-9634-40d8-b9ec-45b2019c67ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e259f287-e355-4a6b-98eb-228a8d1b74cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0205063-04d8-4597-8ea6-f7b35fd26a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aad799b-57af-45db-b1d7-a7c3a5cee2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b52d9-7b1d-4d1a-8c14-847612691136",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82161842-526b-4578-8ffd-d372f140f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a718cb29-aad5-4027-ab36-444a1834adc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f181ee17-3a5e-4230-8320-57b026c8915f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed56a5d8-a0ba-490b-8d92-8f18c6428c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176535dd-bbd0-4511-b7d2-bde37898f938",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefec8e6-9eb2-4f69-8eb8-bc6086dd5134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89996425-d57e-4905-9830-56c00272b698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca2915d-0d85-4dce-823b-8df329f52bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46688db-25ec-419c-8986-665a96d15943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2f9004-2155-49b5-a446-c4440c712de5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6bab0b-9fb9-4843-9d49-1bb27debcdc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebce3b43-9c67-4089-b1d7-dbe35d03d4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba828f10-bf4f-4b11-9cd9-88250eb88799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d320b5-82dd-49fb-8605-23fbd77f3de8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d94f35-1629-4c06-92a8-9629806e2b11",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a807c88-7d17-4422-971c-02a2b545a0eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5bbed48-486e-44e4-ad68-336d06e4a47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a8df23-68ab-4fdb-a5c5-53e26d942cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90910774-3e53-40cf-8b54-30adc824cc71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bb120e-d081-46eb-9a22-127693440001",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c73ce56-4fbf-406d-9080-71eaf88ba6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7b615a-07f0-4073-bc1a-3da9eb7c4521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f460db0f-6e66-4e9f-a52d-c3c568ebde54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3c3059-3f55-433e-896d-18a8766f9f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b00ee95-6b82-484b-b07d-4d845157e9a1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af5ba8-e128-4d5c-a63b-fc7426e48472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "522308a1-7d33-44fb-9803-87352af0173d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5716bee-77b4-4ac7-a81b-da3755572a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0de3514-87a9-4db4-b17b-c4c91b421fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ae74a6-e122-40c1-9096-9543d7d94c9f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dcee89-33fe-49a7-a745-bd67c74d0caa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7db56165-a155-4cb1-807c-ae02dfd702f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a36dcc-b993-4277-b5f2-58db46bfee23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f96ad0-440f-46e9-8b8b-0da198945235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaba0ce-2ff6-4f0f-9d0c-1d0e42b0e6ac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e349461e-d2b7-4077-b08f-7ed90b0576a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75654e5-5d03-44d6-98c8-eaf35b89143a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53f0e69-82d0-4a7b-aa00-7ae9eb21b21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f74bfe4-6db0-4259-851b-249dde5f5fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05228cc7-de0e-4d96-9f47-3e94d81e6e13",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6210743-acd9-4d53-9690-68b60ba62a34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c1207e-be34-4d9b-8be5-1be3783dc246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35016519-0adb-4636-89c4-66272551b454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67850032-1826-4526-b5ba-cdf0f737084e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f5f1479-3f5a-4cae-9f49-ee53aa6271d8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a015e6-db38-4477-be9d-3b0f28bb7f01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b7b732-707f-4765-9ae1-39223557f300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5d72a9-00f4-43aa-b646-5ac7d2bffe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cbda5f-1bf2-4a96-b8f3-b428c0cc5dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a4375e-37ce-49c9-b507-12d6a9429e2c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60b4a07-d969-4e1b-9306-e75a1b7a95b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90fbab0f-59b2-4b64-b05e-fd57db5baea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9687d438-3030-414e-9a9f-351c80242e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad769509-005c-4108-a420-8f421e15c30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0606e1fd-bee0-4496-8aef-a66bb90fde4a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bcc654-b259-4393-ab5e-66c801fbcbc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f57b26-a7c7-4957-9e84-6a218a22799d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b51f74-28a4-4a37-a998-3e213a5ce9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04a7203-ea3c-42fd-8915-87657f8a5c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08239091-233a-4b5b-895b-c18b56920e0f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4761ea9c-24c8-4395-ab6f-6483db04a9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa7a135-6738-46f9-a9ff-da6128ba9324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1faa85-6c4c-4949-898b-370f0b686cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47048b32-b227-4132-bf16-213143093692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c5cd5a-0e97-4116-8508-8187e8984f0c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be49887-e9cf-4e01-9837-61b4ebec2522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df07c47-f921-4afe-ae56-42e63e86147d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe994eae-c3ba-4954-8b04-f0642fe99601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefe832c-4a76-41cd-9618-a3010b4cb4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850ddf07-f1d5-4ee3-a689-10f2f6934732",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365487eb-1a8b-4e75-b740-985fc172cd94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06715e90-ea31-412f-a261-cc87fa624936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af0c16d-ff84-49ae-a27c-acba2521669d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9168a861-de95-45d6-a9b4-88abd3128ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2784171b-14d5-425f-b737-05aed104feea",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6244e2-cc0d-4342-afa7-a0342db5094c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2592ba-3898-4e31-b4b6-07291a4ea660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed72707-7a9e-4596-8dbd-0da9034d634c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dabf6b7-3031-406d-a7f7-860bd05c0982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9222b984-c14e-4472-88b3-0322c32817bd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd00553-1176-47a2-ad84-e2c55c872fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1fef6b5-77ad-48b1-b88f-b76a62d51055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb1a12f-117a-47a4-a152-ab7fc02f3d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b8f72a-70d0-4c2c-b5ff-1d7fcbfbf1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8536fbfc-8c67-4997-9e5e-f9ed5e32b657",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a608c116-4f59-4874-b51d-27f460956d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d013322-6dd2-4a9d-8e06-2e0b770fa9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f892973f-07f5-4299-826f-2dec8cc61f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79bb958-a2fb-4417-8ada-8f98cef6a6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5488bcef-8480-458a-87b9-c9a10f5cf086",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ae91fa-7e16-42ed-b411-1b76ed4bdb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d281ea-5d2d-42e6-8c51-4e851224baae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998dc921-db31-47ea-9af9-15ff0b614248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb20e38a-a1cd-48fb-9d6d-d9e94f844f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcee97b8-b74c-4cc2-bcdc-719c6fce4859",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc13b3ff-9ebe-43b6-990a-3f1035ee0031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe7c206-34cf-4b39-b566-27784875cbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4b1d9e-a533-4257-a173-08d5d2e2f33e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42d2bc4-adfd-4cc9-817f-bf9013991e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cf6cb3-c520-4a90-9450-ed139dbbea45",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea08056a-3223-42a0-b08e-fc9ae4ad237d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "638a36c5-590e-4053-8013-87bf3071aa8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7c5552-f80e-4f9a-9065-bfbbd8d6a1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62e9c0b-4dd7-4cc5-bb80-e130cfefec6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e1ef8-a118-4609-b205-6b1e784747c9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93233b08-c088-49ba-97c2-76edd7d3a85c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38f516d-8cdd-43ab-bde0-84ea997196aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6ba9c2-789b-480c-b63f-5246d9325e6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc229f3-ac2a-49c2-8370-25f7ca03bfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14055d5-5aaa-4eca-8d6a-15ba2ceaf502",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530c745b-1f40-479d-89f4-cfe401c41a76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce551ad-7cd8-4e16-bf27-ada0a41fa500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f02b4f-c83d-4162-bcbb-453de5c78584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637f5748-62cb-4a41-a2b8-d8836f1a2d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e97d484-8d5e-4519-b711-2a99c8946f20",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad30ce70-06a5-411b-9d6e-634cdcc88c0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82e3f361-38e2-48ce-8161-906d0df290d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5d08e9-2dcb-44ca-a8b7-48f2429cfb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09520ab9-fbbb-4b6f-810c-ae79108826b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7898753f-d668-48c7-a7c8-0d3356ead462",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ef1940-5460-4d95-9eb3-3bd868f66819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f90ab9-05f0-48c3-8acf-74cfdb2ec5c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b97137-01e1-4b01-a526-e25957ff0783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151fb87d-44ed-4a87-a388-2c3bbb38c750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41513cd-d8ab-4ca0-a936-2d54411a849b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e94535a-9f4d-40cd-adc0-f2e6d7b5d58d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c19161b-ac1c-4a1f-a77b-ac4142f53724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64538bb9-2e46-4e3a-9419-a18fc8bcd148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e82338-48d3-4ab4-ad27-08d49cd3cf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7a0fd6-e52c-4126-8ef3-1c35296372f3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f3538f-499e-4cc0-81fe-f3a81898d7b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a62056-2a50-4f93-9c3a-6b26216b1b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f79eaa2-85a4-44ef-b4ac-678a28165f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708c539c-1db0-49f2-8c9a-a33d1775ce9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cd2116-5127-48be-90d5-3cdbdb50803e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7965be1e-7022-4536-90ab-bea6e49d9029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e60e97ac-f5d8-4fbf-82c1-3d4f2e144095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609a3612-db7f-4268-860a-9b80670e0635",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39839c97-4731-49d7-94b0-9670bac5bdba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8772fe-f899-4b32-ae9d-0c552f9bd02f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3aa1bd8-d7e6-4279-97d6-0f6c9cb51c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d11a34e0-8f00-43af-9d60-56da68ff1294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709b6546-d8c2-49fd-a131-4ea03f2849a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f608075-935a-433a-a668-c094b02d5519"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d11bc68-5ebd-4bf3-8adf-bbac2c64807b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e65d1c26-8757-4c6b-828e-61a51dcf988d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f68d232-f96f-4d01-ae87-bbf2bf117de0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98a8f930-8dd1-40b1-8c9a-79cf0fcec652"
                    }
                  }
                ]
              },
              {
                "id": "a5afa118-aa72-46f5-94de-356f77498b72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fc72785-5195-4c24-89dd-657a8530dfdb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b399fe2c-fcf1-42de-bd01-1898b6d5fd60",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b145b611-c538-465f-8946-86bee9468973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86014ca1-bdc5-4f3d-a1cf-d3f80f4a30c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "176f74a5-b5ba-41a3-b608-e8e102cfbcae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88175746-a62a-4f72-a5c6-6fb6c3200e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68ff2794-b6ca-44e8-9012-7af9d91798bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5110b4da-e774-4299-bbaa-cdacb9ca060f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94bda11b-fdfd-4f03-959c-9864543ea434"
                    }
                  }
                ]
              },
              {
                "id": "d017ce7e-d95c-49ff-8c75-c8c862b2b92f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6cf87d96-1239-469a-89af-0a004c54994d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2682aa3-cd1d-45ab-962c-3c3554945aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "46c41d6b-7128-4f26-a2c3-0aaea8677e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567b039b-480a-4fd0-8a97-30b258d63844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847594d4-3e85-4413-9735-eb78665a574a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "141c8145-2e42-4568-8c13-0da290cd363d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40c1fe21-2526-423a-b6a4-d152e9693e0c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d4a97a6-9a65-4850-b7f8-a40a613e2b96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8fd3518c-1500-4f74-a86b-c9155159f7d2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "935a8a92-38a4-4584-b7a9-ba37077a335a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a976bdf9-2d28-43c4-9299-ee57d104273a"
                    }
                  }
                ]
              },
              {
                "id": "a98578c1-2308-43db-9492-44371201077e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "132a9ab4-5ac9-4f03-a126-8a3674931819",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab2680ca-6f6f-4951-8117-488e66b295a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d1f0be4-1dc3-4e22-b393-a92971ca082f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c588a6c9-4f12-4f95-bda6-9f6c4c6768ce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "879256f0-ad6c-46d1-a62c-0b675d3ec8c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "06589df1-eaf4-45a0-966c-f011bc925b52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed854378-3e8f-4450-bad2-e80fdb999f9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b94e3c1c-e0f4-45d6-8790-1d6b2da2775d"
            }
          }
        ]
      },
      {
        "id": "c1cacfcd-bf27-4c2f-8412-4d7061cd34fa",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e821a7d4-8a7b-4de9-afa9-3d17f816c68b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6817cfdf-82e1-4168-af1d-63a04a85ac69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e40eca0b-7693-42b1-a801-55339e8756be",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4801ac7b-b30d-4aae-b5e4-2b0048295ad7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e5deaaf1-8bcb-4db8-aeca-9eb825bf076c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c91e33-8198-4375-b7e7-d28e70707c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3779ed37-fde6-476f-b730-68c9f0b61b68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c20c0f2-0824-4aed-bcec-7d942c73ee5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36fdad50-f9c4-4052-86e9-b010c1e45216"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bffc9610-e9e4-4ea3-9400-f902edccae0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53fb6444-21a1-487e-bb31-6eceb18b1589"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9614a700-cae0-44cb-9062-6f92c4eb3e97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "93aa5330-696a-4647-b867-dbc3326360fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d09ef21-b283-40dd-b357-e2c8b15124be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ea7a605-9274-4983-8a8d-0eb9aadb70db"
            }
          }
        ]
      },
      {
        "id": "3da4e3d3-6f3b-496b-ba40-83a7737950bb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "701be9db-388a-4144-b42f-3c7a20ba950c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3430d65-8f33-4e57-b9ab-0307b6c25868",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9bf51aff-ccec-44e9-812d-d1049467eea8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5591f5b-006d-4580-86af-2597817b76e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b21224e2-248b-4780-8cc2-350149fe0d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fb2f24-32c2-4ff5-932e-e1bc5272a3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35b9b63c-72e4-4143-ab4e-31370227cc8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f2624ac-08b5-4128-b132-66285a7b127d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e389d74-0544-4426-bdfe-4627888407c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed507937-a50c-450f-9b2f-14858e8d6772",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad806711-5c6f-4daf-b595-275ef9871640"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "52db76d7-2c2d-499e-aa2e-d6cd32e7e963",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b5ebfef6-ada2-47fb-b492-c5c4eb4545db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "766ff16b-c019-4edb-9ba7-55d350372bd4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "549aeabe-06a9-473f-b70a-1f3054f3a9be"
            }
          }
        ]
      },
      {
        "id": "05e56dd3-2e64-415a-9384-a5eb80e356e0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "620f9576-cf34-48ca-8747-fac5389186f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c71d751e-8c56-476e-b0f1-547035dcb01d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b88d0fd-cad8-48e8-9bbb-b747885c89ee",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3211712a-6814-4eca-af5a-b8753ebfe9ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf0afd41-79d8-4c0a-b249-7d47b2bcaa58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bf61f1-a855-4972-b061-125c6a3e8547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d2fbbfb-ea44-4fac-b161-a25386948ab5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f3d6b95-6055-4c57-99a9-9cff8f3278e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a04a815-4f0d-45f7-be52-5743ce3b83c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85613541-319a-4322-bfc4-204e5be46dca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31bef742-40f8-4dac-82e3-282be2ff3201"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "372bae79-4e2c-44f4-904d-17ae1d49f9ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb7825e5-9db0-44cc-8a71-6a61f3608322"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53d19c42-0390-44aa-a4f5-1604ed7e6e94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdf3e64a-c66b-4eea-ad73-49016bc6d4af"
            }
          }
        ]
      },
      {
        "id": "3441bb5b-7716-4c92-88b6-31f3e78ddd99",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57d95628-7493-49ef-b3ce-80be5e9bb545",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d32cd2f9-fee9-4192-8f32-263ec639647e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "418d2c7c-0834-4b33-9a0b-2d8b58063cef",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c117cfdf-b5ae-4ce5-8e30-f7ffb78669b3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f7b172e-65fe-4df0-acc3-adfe306caedb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 91.6982456140351,
      "responseMin": 20,
      "responseMax": 554,
      "responseSd": 65.73428834017135,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698885232122,
      "completed": 1698885273313
    },
    "executions": [
      {
        "id": "bbb3f225-dc14-4a3b-b0bc-9c175abfb364",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "653a0600-8517-4bae-8cb7-df67178c9c3f",
          "httpRequestId": "6b2a68a2-1f98-41a9-9724-8fd81cc64cd7"
        },
        "item": {
          "id": "bbb3f225-dc14-4a3b-b0bc-9c175abfb364",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "aace068d-4011-47cd-b65a-d10ac8ca21dc",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 0
        }
      },
      {
        "id": "46e2cf2c-158a-431b-923b-9cfe997826a5",
        "cursor": {
          "ref": "e8bfa5b6-63a2-454a-85e8-8d0237101757",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "63a302c4-82ae-46f0-8e32-a1f31df4d3eb"
        },
        "item": {
          "id": "46e2cf2c-158a-431b-923b-9cfe997826a5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4ab85fd1-3a63-480b-93b4-0a63edb6d396",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "406bf46c-99fe-4605-8b00-3c01b83bdad7",
        "cursor": {
          "ref": "8d7dcabb-d4d5-41ca-a3b8-3f9f963e9c57",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8bd19f3a-f14f-401c-a1fd-28ffaacef72a"
        },
        "item": {
          "id": "406bf46c-99fe-4605-8b00-3c01b83bdad7",
          "name": "did_json"
        },
        "response": {
          "id": "30ff7ef4-ccd9-4275-aefa-bfb0d97c2416",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad55cc6b-0eca-4fe3-a39e-36932bea9823",
        "cursor": {
          "ref": "f9872587-8cea-4e29-afc7-f3d7e5ac29d2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "245cc8fd-2c5f-4f9e-9c4d-2fc0cef28bd1"
        },
        "item": {
          "id": "ad55cc6b-0eca-4fe3-a39e-36932bea9823",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ec72c56-6de7-4648-90b4-713a40213948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad55cc6b-0eca-4fe3-a39e-36932bea9823",
        "cursor": {
          "ref": "f9872587-8cea-4e29-afc7-f3d7e5ac29d2",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "245cc8fd-2c5f-4f9e-9c4d-2fc0cef28bd1"
        },
        "item": {
          "id": "ad55cc6b-0eca-4fe3-a39e-36932bea9823",
          "name": "did:invalid"
        },
        "response": {
          "id": "7ec72c56-6de7-4648-90b4-713a40213948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da79fc2c-87bc-40ff-a68c-e713c3d667b8",
        "cursor": {
          "ref": "2cab3b78-6474-4098-98d5-4369b7640d9c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "72c302a6-b4a7-40aa-b8d9-1322df1ee077"
        },
        "item": {
          "id": "da79fc2c-87bc-40ff-a68c-e713c3d667b8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d8c9164e-e4bf-4c58-8bba-6e5a2637f72c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 131,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf71a64-4e1f-4394-a040-4cb71e0f116d",
        "cursor": {
          "ref": "ffe10172-8e8d-40ed-a86a-012e8b782b18",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ea7315a-6f9a-4f02-8f87-4fe60ae462b2"
        },
        "item": {
          "id": "5cf71a64-4e1f-4394-a040-4cb71e0f116d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bb99ccf3-5e4f-4407-b205-92f0626ceac9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 75,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1cb198-8588-46ca-9a85-80cba251b23f",
        "cursor": {
          "ref": "273a5ece-6634-41d1-a9db-2e0822f516e3",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4b16b917-5f81-48cd-b111-18743536159f"
        },
        "item": {
          "id": "5b1cb198-8588-46ca-9a85-80cba251b23f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "efc04e73-1f61-4249-984f-cc58d8be0897",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd454bd1-e5a3-4690-9753-f5ad5b8d079b",
        "cursor": {
          "ref": "0f49d1b6-2660-4844-894a-4d80b006fa38",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "93dd3821-44c7-47fc-819b-a18a2be73511"
        },
        "item": {
          "id": "dd454bd1-e5a3-4690-9753-f5ad5b8d079b",
          "name": "identifiers"
        },
        "response": {
          "id": "ae3f9829-f5db-41b6-8adc-028d586eef74",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3a6ef9-2396-4ad1-bc2a-cccd5619ba7f",
        "cursor": {
          "ref": "24613e41-2bce-4d82-b0f2-941cdd734857",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7fc26f22-b76b-4cdf-8598-c91fab088555"
        },
        "item": {
          "id": "6f3a6ef9-2396-4ad1-bc2a-cccd5619ba7f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "633ccb09-5f12-43f8-9442-0940296ae8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c252a3f-77db-4a8e-bc80-8a9d8115a2de",
        "cursor": {
          "ref": "6eeb71b2-f7a0-43aa-92c8-4ac08940de44",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4c320381-ab82-4f92-b291-4efa8251914b"
        },
        "item": {
          "id": "3c252a3f-77db-4a8e-bc80-8a9d8115a2de",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f1a0d12e-976c-4ea0-89dd-e58cfdc7a6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8de49e-365c-4c33-a9ad-aeb89861eeae",
        "cursor": {
          "ref": "3e362219-5c05-46af-88fe-27c4ae322abe",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d9183c4a-1002-4c80-acbc-57b0401cb080"
        },
        "item": {
          "id": "8a8de49e-365c-4c33-a9ad-aeb89861eeae",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "03cd6829-168d-4aea-8b96-07a0163cd931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95702dd-e848-4615-be58-09be081648f7",
        "cursor": {
          "ref": "a775b5a7-2fc8-46c6-9bdc-01cdf750e9e2",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dad2916e-2115-487f-9749-6e30c94e265f"
        },
        "item": {
          "id": "a95702dd-e848-4615-be58-09be081648f7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1b5852af-dd8d-4f25-afa1-1b8796088a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c317844-63ba-4fae-9c35-9d4a739cd757",
        "cursor": {
          "ref": "aa5b2dae-0329-4b68-9fe8-38c8faaf708c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ede644cd-e589-4bb6-8349-ca4581b5f610"
        },
        "item": {
          "id": "0c317844-63ba-4fae-9c35-9d4a739cd757",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c1347aa2-e53f-4c20-bc97-5ff258f58298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943cce64-b92d-4308-bfbe-c57c0e76ad0d",
        "cursor": {
          "ref": "e29179f3-568a-4c44-97e5-44ec88067425",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dc1c12a5-289e-4724-877e-5341b474fe6e"
        },
        "item": {
          "id": "943cce64-b92d-4308-bfbe-c57c0e76ad0d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bf5f6615-1b73-4eb6-9c69-79da81e96d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146aaa04-a7d2-4f08-aa06-a7d3ac07753d",
        "cursor": {
          "ref": "1e6911d3-150c-4fc4-9f60-a227e33010b8",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2abf998c-678b-476d-aa7f-a77748a5cd13"
        },
        "item": {
          "id": "146aaa04-a7d2-4f08-aa06-a7d3ac07753d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4d5de9cd-f5e3-442f-9baf-6a4c22feba68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1ad003-6539-4343-90d4-28a3578d9347",
        "cursor": {
          "ref": "f7a273ee-c8c6-46c1-b5d8-ea42ce8ba41d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3014cc33-61ca-4321-8129-3e22b64d8a49"
        },
        "item": {
          "id": "ce1ad003-6539-4343-90d4-28a3578d9347",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a76bf29d-bd34-47bb-8d30-b8734056e3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203a9537-7e7b-4fb7-9da9-b6b9e3ccf46f",
        "cursor": {
          "ref": "2ca14fe9-7ebc-47fd-9f62-d2581516a28e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "455d6b1d-2e14-4d3f-b041-3fff8c9ee12f"
        },
        "item": {
          "id": "203a9537-7e7b-4fb7-9da9-b6b9e3ccf46f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5d603cff-816e-437f-a4dd-19d2aa1d4220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3a0359-a9ef-44b1-9b72-fbe1c857fd00",
        "cursor": {
          "ref": "4cd6bc8e-00d8-4d7b-8281-5c02c9c67027",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a286b816-fc9d-4a65-94bc-9741eaa22cec"
        },
        "item": {
          "id": "ee3a0359-a9ef-44b1-9b72-fbe1c857fd00",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "68c185ec-cd6e-4b0c-9a7d-e07dec024d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f2e6c2-fccb-4d79-8cc9-5832780eec74",
        "cursor": {
          "ref": "ccc6e5cf-004e-420b-bde3-42227db8ef5e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "99f4d62e-d577-456c-84e1-389bd6429515"
        },
        "item": {
          "id": "06f2e6c2-fccb-4d79-8cc9-5832780eec74",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b0f6efef-c17b-4cad-86a1-f4fe4d85173f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d46e3d-34b3-4d18-a343-347e5f3d910a",
        "cursor": {
          "ref": "96a5e279-4294-472c-8b12-5e335966bf95",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "65f15122-3c87-4d99-9465-dd0192062faa"
        },
        "item": {
          "id": "e5d46e3d-34b3-4d18-a343-347e5f3d910a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fe22cd18-a081-4815-b703-301aead4df9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca88528-c038-4992-ac48-239eccdd14c0",
        "cursor": {
          "ref": "f70e6455-763c-49ca-9bfc-6cf7a42eb0b2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "05157db0-7f82-4fdf-a8e9-21258f486060"
        },
        "item": {
          "id": "6ca88528-c038-4992-ac48-239eccdd14c0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "41cfd837-565d-4c57-8468-015b87c26cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7ba4a7-6ce2-4290-a843-ba3eeae9ce5c",
        "cursor": {
          "ref": "7b61337e-4134-4adc-9494-4a6b7cdb0581",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6d2a5cab-015d-40a4-9323-656c6f94d406"
        },
        "item": {
          "id": "cc7ba4a7-6ce2-4290-a843-ba3eeae9ce5c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "575f9d44-d58f-4876-8636-94a52e2fdcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3399f337-57bd-46b9-a87f-9fcaea435a00",
        "cursor": {
          "ref": "ceba6865-5914-4192-ae78-79d06f41c5b5",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8383df4b-6aba-4225-9bb0-cd689f3011ce"
        },
        "item": {
          "id": "3399f337-57bd-46b9-a87f-9fcaea435a00",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e4a5caf7-4179-4bb2-bb92-df9dd0625097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebac860-a9f8-4956-b467-69b51f359124",
        "cursor": {
          "ref": "82989441-d006-4a0f-bf22-c64cc5c686ae",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6494d940-0245-4837-b93f-a785fd9bd50a"
        },
        "item": {
          "id": "1ebac860-a9f8-4956-b467-69b51f359124",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c574211d-0e61-4ba7-a7a9-2301e7093511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a740515a-9441-42b0-a206-f6b9d55a2750",
        "cursor": {
          "ref": "ac800498-9619-439d-a806-a4a9defaa0d9",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "24acb264-ab4f-41ae-8ce9-5997454ffb67"
        },
        "item": {
          "id": "a740515a-9441-42b0-a206-f6b9d55a2750",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7104711d-3132-470d-ac62-0dce8a50bef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af033b2c-845e-4492-a56f-473320f7442f",
        "cursor": {
          "ref": "2f77190d-bab6-4d65-951d-2f75097309c9",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86d24b5e-53ab-46f5-bcdd-75f5cf70846e"
        },
        "item": {
          "id": "af033b2c-845e-4492-a56f-473320f7442f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "46ef3887-5cb6-456f-a353-e8b7d73d8898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72da8b3-fe04-42cc-aab0-bbb0a5dba3dc",
        "cursor": {
          "ref": "73db169a-b548-4811-b4b7-dbbb5dfcaaeb",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "99c5a0d7-9726-4b7c-9c94-d70ccb98081f"
        },
        "item": {
          "id": "e72da8b3-fe04-42cc-aab0-bbb0a5dba3dc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1745de6e-d9af-4b17-bc15-6a8119cb0ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f960d5-3559-483e-9776-3c80451a7392",
        "cursor": {
          "ref": "3be25df5-9a44-4025-93b0-7ac98ebd93cd",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d1edc5d6-d3ac-462e-bf50-084aa66d799a"
        },
        "item": {
          "id": "f5f960d5-3559-483e-9776-3c80451a7392",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b47e681a-acad-4713-aec2-e30ec41681c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c4fd22-270b-4c5b-a453-94d31b6247ce",
        "cursor": {
          "ref": "2e429ad8-7b66-4de7-a5de-1fe096cd4102",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5f2517e3-a98d-4045-bebf-77498066be39"
        },
        "item": {
          "id": "e4c4fd22-270b-4c5b-a453-94d31b6247ce",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2771caf4-6b6e-4ae3-af46-89dd5867913d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f3ae01-714a-4088-a225-62bf89dcc500",
        "cursor": {
          "ref": "12fc4829-c9c2-4141-aa83-14e34da6e124",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "93f86a6b-11ae-4455-bbf5-6c96c090e7a2"
        },
        "item": {
          "id": "c4f3ae01-714a-4088-a225-62bf89dcc500",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "403ccce8-0ab6-45b7-93b3-a659905eda8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbdb42c-7e83-4604-a060-003ca9f57aae",
        "cursor": {
          "ref": "32b1504b-3435-4dc3-a84d-ddd839dad38a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0697e582-16c0-4f74-9bd8-2db393926a1f"
        },
        "item": {
          "id": "7bbdb42c-7e83-4604-a060-003ca9f57aae",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b2d9299d-8991-4971-be91-a95d6416edc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a053eaf-cc65-4c9b-9463-0f62ee41edae",
        "cursor": {
          "ref": "daf962de-0110-4b37-9752-d5acd380c74e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f19436ec-456f-4c24-b5e7-93eddbfab9d9"
        },
        "item": {
          "id": "4a053eaf-cc65-4c9b-9463-0f62ee41edae",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "001406df-92e5-46b8-b53b-0dc059f158f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547a08fc-ee22-4c28-b59e-96be16e0b703",
        "cursor": {
          "ref": "fe5c1207-90b0-44f6-baf5-b7b902b31c88",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c16ab40f-b8c1-479b-aee6-c16a52e353b2"
        },
        "item": {
          "id": "547a08fc-ee22-4c28-b59e-96be16e0b703",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6e559d83-e1c1-422a-95a2-134a324e9632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861a9a50-c06a-4727-9120-687aa03c3e6d",
        "cursor": {
          "ref": "c73e9753-f39a-4e06-8c41-63eb5ce4bd68",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "52be4356-cf51-4842-a28e-788097af09c6"
        },
        "item": {
          "id": "861a9a50-c06a-4727-9120-687aa03c3e6d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fe47a3d5-e0c8-4c02-a462-9b42b23dac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b0acab-836f-4342-a9df-1feb2f239924",
        "cursor": {
          "ref": "1dfcee05-3334-44af-bfaa-461b432f0bd7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9da37d20-90df-4014-ad26-9106e7877f6d"
        },
        "item": {
          "id": "16b0acab-836f-4342-a9df-1feb2f239924",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d2270e81-b327-4f4f-ab6d-bc8d1d0f355e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5f5cff-b000-4247-a1c7-93fabe29878a",
        "cursor": {
          "ref": "4add1159-04b9-4375-a03f-f6fdd319546d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "eb889ae2-d5f8-4329-9880-1440d60184b3"
        },
        "item": {
          "id": "3e5f5cff-b000-4247-a1c7-93fabe29878a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "160dab86-d3ec-4ad0-a2ee-6ad68128c616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57417f46-9749-4793-bc1b-f599244b590f",
        "cursor": {
          "ref": "47d9d4e1-f621-4e50-a1e5-e68ddd980f27",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "55f65d68-b1ca-4b99-b230-27bcf935234f"
        },
        "item": {
          "id": "57417f46-9749-4793-bc1b-f599244b590f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b637098c-9c8b-4664-9c71-d1fde268ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb30c203-4d97-46ee-bc51-7d273bc7da34",
        "cursor": {
          "ref": "aa667713-e222-4382-9896-cf234542b0b1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "896ac32a-bff3-406d-88a6-dd0d00b748e2"
        },
        "item": {
          "id": "fb30c203-4d97-46ee-bc51-7d273bc7da34",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3fb90aea-fd71-4e59-85f3-019e5400db26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed6aa33-4318-4625-a211-d85d7a1c5f6d",
        "cursor": {
          "ref": "d542ba9f-b182-47b9-a424-27b4b0665772",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fc8c90f0-55d0-4aff-b005-d7618fd05795"
        },
        "item": {
          "id": "5ed6aa33-4318-4625-a211-d85d7a1c5f6d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e1b26799-b012-4c7c-b3b3-f6ba00b656e1",
          "status": "Created",
          "code": 201,
          "responseTime": 554,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "77a781e9-e592-4803-8bb4-9c6224c9fb95",
        "cursor": {
          "ref": "a71246db-afa8-4e7b-9cc4-bce586b3c258",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "64517a26-8ce5-4d50-87b9-db5b3a4fd074"
        },
        "item": {
          "id": "77a781e9-e592-4803-8bb4-9c6224c9fb95",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8913162c-824d-46c1-b13a-5d6654168a86",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1f798896-745b-4b3b-8515-adb9b6fb66c5",
        "cursor": {
          "ref": "84a624eb-251e-40a8-b3dc-31525ba42685",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0cdd96a5-4b54-4151-8470-c971f696a86e"
        },
        "item": {
          "id": "1f798896-745b-4b3b-8515-adb9b6fb66c5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dda8dfd3-925f-481f-93fe-09d39bf83975",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0f799a2f-283c-4051-9f8b-7398e78db7f9",
        "cursor": {
          "ref": "69c82394-8c73-4a44-b250-aa19657084c8",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4f5c853e-e6e2-4e33-a00e-6f037d08c639"
        },
        "item": {
          "id": "0f799a2f-283c-4051-9f8b-7398e78db7f9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1d0b68b3-f299-4795-96f6-175a7eff992b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e9880d-a383-4024-a1e9-f1a0afaf133e",
        "cursor": {
          "ref": "a4d0e38b-33a8-4ac9-b6bc-257a38084ca4",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1db4ebfc-6bba-4f7f-a63f-9c8eb42955b9"
        },
        "item": {
          "id": "48e9880d-a383-4024-a1e9-f1a0afaf133e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0969d278-580a-4cf8-833c-c09495ae60ca",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "499ec5dd-8cf3-4085-9d4a-3519218bec10",
        "cursor": {
          "ref": "a3067e2e-9425-4b56-99c9-15df5de17f62",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4beb2086-cd60-4cfa-9fd8-28c29cba759f"
        },
        "item": {
          "id": "499ec5dd-8cf3-4085-9d4a-3519218bec10",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5fb5aee5-dc26-44d6-b2dc-82c9d542532b",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "42a7261a-693c-4778-a0a2-f947fb818935",
        "cursor": {
          "ref": "21cdf273-626f-441c-a0ab-1fc5728c2a6b",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "23c347ea-f59d-449a-89e3-00b50397c245"
        },
        "item": {
          "id": "42a7261a-693c-4778-a0a2-f947fb818935",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ec86755b-3f96-4558-9704-95b68e1aa9d1",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "73d7d069-7c58-4a66-ad18-5e877b7f606c",
        "cursor": {
          "ref": "d3bd388e-514c-4fbe-bfbd-4331f150b554",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c8b0d76a-6fc9-45cc-a3a4-9e99dc912483"
        },
        "item": {
          "id": "73d7d069-7c58-4a66-ad18-5e877b7f606c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9f5a6195-8a88-4ffd-931a-510fd3c9c585",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0ea8a824-6184-4415-a10e-b9bb992c75e8",
        "cursor": {
          "ref": "610bf267-cc63-4c87-98ff-bc57f6016a71",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "356449a2-cb4e-405e-a7df-d8c7b5665638"
        },
        "item": {
          "id": "0ea8a824-6184-4415-a10e-b9bb992c75e8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fe602604-c044-4692-851a-eb9f8865dd81",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "72748429-22da-4e8f-962a-d40e9edc2214",
        "cursor": {
          "ref": "6def4f1a-1a42-4904-8da8-32dd2b5853b1",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "65c4ac4b-a257-4549-8de8-05b332aa4edd"
        },
        "item": {
          "id": "72748429-22da-4e8f-962a-d40e9edc2214",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7cb0a135-8328-43a9-91dc-02a6f05bd5e0",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d9003f0c-8453-4933-aa93-a4ad51da964b",
        "cursor": {
          "ref": "fdeca2fc-9873-400b-b0c7-2c0eae8ebeef",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "75d46f34-d86e-4076-a642-4c9c413420c7"
        },
        "item": {
          "id": "d9003f0c-8453-4933-aa93-a4ad51da964b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "98155f24-dad9-4b31-9a00-14443e1a08b3",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "41d8ed83-93de-48eb-8179-4f67a0f8f509",
        "cursor": {
          "ref": "3c14d538-5224-4094-9cb2-18fbbde6641b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "876e502b-bc0f-4f6a-8f43-350f5eb5f44e"
        },
        "item": {
          "id": "41d8ed83-93de-48eb-8179-4f67a0f8f509",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "da304555-b170-489d-a277-41a631295049",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0830e05d-ffaf-44e8-b6b8-4d9d4cd246ba",
        "cursor": {
          "ref": "f2fc7055-75db-45bb-8964-117850d1e47a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3e836e1b-b474-4633-b834-26552a8cb0d3"
        },
        "item": {
          "id": "0830e05d-ffaf-44e8-b6b8-4d9d4cd246ba",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a74da663-45cf-4609-87c8-96efd3b4255d",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9ea49d50-ee4a-4426-8811-e91be760bffc",
        "cursor": {
          "ref": "9763a679-11ff-4dfd-b957-8599e0cc2a96",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c9681696-5f02-4f16-8a7d-ae86ac5218f0"
        },
        "item": {
          "id": "9ea49d50-ee4a-4426-8811-e91be760bffc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ebf3a9ad-2f85-420a-9abc-e0b476304fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040bab97-bd33-4735-a7e7-d5e7a3c82d34",
        "cursor": {
          "ref": "67cb0ca1-675b-4c93-9018-300c48cb7441",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3f715e63-60fc-4bb3-95fe-5e9b82da7cc4"
        },
        "item": {
          "id": "040bab97-bd33-4735-a7e7-d5e7a3c82d34",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "cc865278-8c11-4835-a822-cf8021c8438a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143ce0d9-c064-4f4e-b870-bc8a860c2804",
        "cursor": {
          "ref": "7a97ffbe-6e11-4a81-8b71-f7944928592d",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "11933585-481c-4f11-8c82-0ff185dbf6a4"
        },
        "item": {
          "id": "143ce0d9-c064-4f4e-b870-bc8a860c2804",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e3c58de9-25cc-49a7-9206-9ee535bb4210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c784da-4a12-4f9a-8f24-762861ffa486",
        "cursor": {
          "ref": "9b746032-1b8a-4219-a282-cc4c34413442",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4189fe7b-a4b2-4b3f-8f3a-302ac2d9f404"
        },
        "item": {
          "id": "b2c784da-4a12-4f9a-8f24-762861ffa486",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1c5ac5b8-7d7b-4ba0-bc02-4772f0e999d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b8eb16-62be-4a1c-b329-36e2456b5e6e",
        "cursor": {
          "ref": "41eb706e-1f7d-4edd-b850-5f528f28fc3b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "889c3341-2156-4775-839d-68193f29dbb9"
        },
        "item": {
          "id": "d2b8eb16-62be-4a1c-b329-36e2456b5e6e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5108555c-e60e-4c94-a0af-1cbf89d49d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ece6ac-b3e7-431f-b6bc-b2785acc258a",
        "cursor": {
          "ref": "c8fdf467-8393-4758-946e-5b33a7869358",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a1a9e952-9bd2-4f35-b324-9d89b1ad3806"
        },
        "item": {
          "id": "a2ece6ac-b3e7-431f-b6bc-b2785acc258a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "48cbf038-8e6e-4da2-982e-cc3ede865d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026a840e-c0ae-4f3a-9967-b9aeca252751",
        "cursor": {
          "ref": "b02087fc-8b4e-4465-8fa3-28ba15b6c13b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "46021056-4b23-4a5d-8a48-a06a41d0a18c"
        },
        "item": {
          "id": "026a840e-c0ae-4f3a-9967-b9aeca252751",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "98251607-2085-4324-b67a-52f597d67929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1795da-f943-493a-b54a-dfeed9d051cd",
        "cursor": {
          "ref": "d4165cde-ccfd-4997-8ccf-b463cc1bb159",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "15dedea2-59e5-4617-8381-643ed7933a9c"
        },
        "item": {
          "id": "7b1795da-f943-493a-b54a-dfeed9d051cd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "328d8bc3-aa05-4612-8552-f1d6cb8890d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9276bb7e-23d1-4cc7-a4a7-42776a09b9be",
        "cursor": {
          "ref": "8b261d8b-9219-4ec6-8b09-9dc4dfc9412e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7541fd64-9f56-4481-825b-d381ab5a4b08"
        },
        "item": {
          "id": "9276bb7e-23d1-4cc7-a4a7-42776a09b9be",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7446d448-657c-4f67-a576-9491d5584c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04034c1-7cd2-47b7-a393-61dd84c88a9c",
        "cursor": {
          "ref": "4a21119b-c518-4b54-a15c-86fde64f55ec",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1c6c5be9-7eff-49ef-8479-46b515fb9ed8"
        },
        "item": {
          "id": "c04034c1-7cd2-47b7-a393-61dd84c88a9c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9becb29e-9aec-42b3-b7c7-482b6c6f536f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f1d55b-80b6-4a59-a14f-5fe0adb1c08d",
        "cursor": {
          "ref": "a9326c4b-027e-4313-baec-8354dc8432dd",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "825066dc-2344-40c2-8011-51c646b7d757"
        },
        "item": {
          "id": "c4f1d55b-80b6-4a59-a14f-5fe0adb1c08d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8188c99a-d838-484c-964e-b20b3f8a9542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ff85d7-efa4-4bf9-92f9-0ad2d5e638ef",
        "cursor": {
          "ref": "ae59f557-e638-4931-a3a1-0662811285ad",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cee41189-b780-47f5-b8a3-70f1ed4403fc"
        },
        "item": {
          "id": "f0ff85d7-efa4-4bf9-92f9-0ad2d5e638ef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b7f4543b-50c5-4d17-a113-2fe15771c698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0fc3a1-d1b9-4c00-b966-d75e9a1857b6",
        "cursor": {
          "ref": "6330af40-7cd1-42fd-8d8a-fae0de5c5a5e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5a40bc1a-8b22-4512-a669-cee053843d05"
        },
        "item": {
          "id": "5b0fc3a1-d1b9-4c00-b966-d75e9a1857b6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9a0ba615-cb83-4e64-8002-aced08125e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f576a85-18ba-4113-a92d-e02baa661aae",
        "cursor": {
          "ref": "0fc128d8-828c-428d-809d-db8765960eef",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d841d91b-f181-4021-a83d-cd258cfa3425"
        },
        "item": {
          "id": "8f576a85-18ba-4113-a92d-e02baa661aae",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "06ad7553-d364-43c0-bfc4-5376482a08c1",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "bc3951cd-8ae7-4068-98c3-88355693c986",
        "cursor": {
          "ref": "407d96e0-1fa6-4166-9d18-26c4a83793c3",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5ec76bad-c936-412f-b7eb-df915e0267a5"
        },
        "item": {
          "id": "bc3951cd-8ae7-4068-98c3-88355693c986",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f3bc8b20-a328-4a7f-bb80-e28b155f933c",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c6c86cb2-402a-4bfa-89b8-c348e01ee2ab",
        "cursor": {
          "ref": "173b4d49-c949-4d80-988e-55bee35c1c90",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7ad8a305-e4c9-432a-b8ac-f014df447c1a"
        },
        "item": {
          "id": "c6c86cb2-402a-4bfa-89b8-c348e01ee2ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1ec6fc62-c6c8-484b-9680-88cd26e722a5",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6c64e5ee-58cd-4a80-9905-67e2da0d0f2a",
        "cursor": {
          "ref": "e5eb9d64-89a8-462a-986d-d75d1417ef73",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6d2c2145-53a1-4cbd-9840-b0058c2b4986"
        },
        "item": {
          "id": "6c64e5ee-58cd-4a80-9905-67e2da0d0f2a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f09d970a-449c-4b5f-a0c7-70086655ed87",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "17aeec89-c14a-4225-a9a1-4667eba90df5",
        "cursor": {
          "ref": "5351661f-9695-45d6-b62b-d75f7737d4a6",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "351d38b6-4400-45aa-9147-23fcd40b8f78"
        },
        "item": {
          "id": "17aeec89-c14a-4225-a9a1-4667eba90df5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a6c9869b-f3d9-4956-b612-5ba166f897a0",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a1989459-5150-4138-a7d9-b0106182984d",
        "cursor": {
          "ref": "ef10a867-b66e-4b50-bf77-cf075288467d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "278abab6-e10f-487c-aa7a-8c6db7ed0276"
        },
        "item": {
          "id": "a1989459-5150-4138-a7d9-b0106182984d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "94c3c6ca-c4dc-4246-a371-3d9637fbef49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98580fec-9a1c-46ae-8252-34beb2e32a2b",
        "cursor": {
          "ref": "344bc4a1-5f41-4869-91d5-40a2d1ac1560",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eb37dd80-b4e7-495e-bdf7-7df3c6070902"
        },
        "item": {
          "id": "98580fec-9a1c-46ae-8252-34beb2e32a2b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c0559ef0-8ed6-415b-9093-5aa0156be6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c616fe5d-a6eb-4248-a76a-42d84468e813",
        "cursor": {
          "ref": "55e35148-bd70-4e54-a075-4aa1709d8a36",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f10289b3-d15b-46c2-86ba-73f0145a7f27"
        },
        "item": {
          "id": "c616fe5d-a6eb-4248-a76a-42d84468e813",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c41110c7-39bc-4662-9775-b524a478744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b7c31-edf8-4dd2-a52f-81a5631970f9",
        "cursor": {
          "ref": "7f7d3fd8-7cce-48f7-8902-b59c56472d01",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c723b518-9feb-4ebd-a071-a6fc58ffa288"
        },
        "item": {
          "id": "d28b7c31-edf8-4dd2-a52f-81a5631970f9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "be0fd45f-d274-4147-bf9c-853c1001ba93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b9b6ca-50b1-46ba-b5ae-fc0d155dba9a",
        "cursor": {
          "ref": "d8f586ff-730f-498d-951a-2c5d2d055504",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9bbfd5e6-65f5-489b-9a12-8d6cf176133f"
        },
        "item": {
          "id": "48b9b6ca-50b1-46ba-b5ae-fc0d155dba9a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0165b7ec-2847-4607-a3a1-715d67c08816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cb9d91-e981-4df4-ad07-a26ece2ed49b",
        "cursor": {
          "ref": "7ca84e96-4448-4059-ba61-eb147854eff3",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "28517c06-9da9-465f-8ec9-720537dd88eb"
        },
        "item": {
          "id": "36cb9d91-e981-4df4-ad07-a26ece2ed49b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e843609e-33c2-4346-822a-ed243698cc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c34d42-1dc8-4a5c-9561-9cc5f7570c3d",
        "cursor": {
          "ref": "015732e5-d26b-4281-aa61-0cc69cbb8297",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18f430d1-4493-4577-bdc3-b30cc4f1ab1b"
        },
        "item": {
          "id": "a1c34d42-1dc8-4a5c-9561-9cc5f7570c3d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1f6cc0ee-f4a7-40c0-8501-f02a27d42505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a88d3f-e1f7-4767-8d70-9de5fb333676",
        "cursor": {
          "ref": "232d09aa-8e92-469f-829c-98cd8057fb7e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c645131c-811c-495c-abb7-7b1ff518dc2f"
        },
        "item": {
          "id": "d8a88d3f-e1f7-4767-8d70-9de5fb333676",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ee70e579-a62c-41b7-9289-fc58f4ee08e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac6c1e0-a841-4769-80e6-69b01ac4a29f",
        "cursor": {
          "ref": "5bb17abc-0cc0-4789-9fba-a414d907499c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "577b8e3f-fd6b-4b08-8fad-8a9900f52e85"
        },
        "item": {
          "id": "8ac6c1e0-a841-4769-80e6-69b01ac4a29f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7ba1a5b9-a651-4582-af71-8c84cc98d835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f7fea-2260-4205-b663-d3a71e28af11",
        "cursor": {
          "ref": "68271559-c1f7-487c-bd10-8d2c23b7a6b5",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a9e8b7e1-7425-4d77-ab46-9bea1cbca2cb"
        },
        "item": {
          "id": "ed2f7fea-2260-4205-b663-d3a71e28af11",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "45d2b704-cfd3-4ddc-930f-bedd2f4f3df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7637ba30-030c-4c90-82e2-c413b68e41af",
        "cursor": {
          "ref": "0da3f8d7-e292-48de-b3db-8763c673c471",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5500a261-b72b-487a-8c31-b28811dfcc5b"
        },
        "item": {
          "id": "7637ba30-030c-4c90-82e2-c413b68e41af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8984621e-9d89-4334-bfe2-6debacd080ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354d5a10-ab93-40a1-b833-4d17cd3eadf2",
        "cursor": {
          "ref": "fa3ac3bd-6d88-43f9-b123-e7b77d0a2947",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "04d3fe27-f07a-4f11-b6a7-a9cbbcc813e2"
        },
        "item": {
          "id": "354d5a10-ab93-40a1-b833-4d17cd3eadf2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d1ab8e7f-730a-4ab7-90b8-9b640b3e07fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a89ee39-f417-4fc4-b848-d91be8494d22",
        "cursor": {
          "ref": "90d11789-e7e0-4376-86e8-6f28498e7ef6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "57f15f29-1433-40d4-b94b-6ccad7c35296"
        },
        "item": {
          "id": "0a89ee39-f417-4fc4-b848-d91be8494d22",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3ce3b36d-cb52-4c80-afda-760326d7aea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c14bcdd-a9ba-4198-a59c-122a8b0a8124",
        "cursor": {
          "ref": "8f1ff201-91de-4406-bc23-0d78e134c456",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ecb4ad2e-7b34-48dd-889e-a689e7c19c28"
        },
        "item": {
          "id": "1c14bcdd-a9ba-4198-a59c-122a8b0a8124",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cd6a85ca-e965-4d0d-8ce7-9c70e5e18c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef6e37c-5058-459b-be44-e1d9f156545b",
        "cursor": {
          "ref": "c64a54c9-a365-433d-9477-10611ed78643",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f85c8cd0-e2a3-4f28-83f0-57c1f6c961c1"
        },
        "item": {
          "id": "4ef6e37c-5058-459b-be44-e1d9f156545b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0b7338e6-201c-492c-ab1a-37e97a9449d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346d7591-1005-417b-a4c3-6b13b590a33d",
        "cursor": {
          "ref": "1ceae156-9864-4958-b423-4c0db39fe95a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ea249e7e-6c00-40c9-93eb-9a4f96c6ab26"
        },
        "item": {
          "id": "346d7591-1005-417b-a4c3-6b13b590a33d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c57c7971-1dac-4117-85ff-d961574ddb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be06ab8-9998-4963-9402-540074724057",
        "cursor": {
          "ref": "76c8ab59-c7e7-4383-b81e-91f06a464e53",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1d426278-a3d7-411f-a1bf-9021ea83ee7a"
        },
        "item": {
          "id": "9be06ab8-9998-4963-9402-540074724057",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5e83be17-d1f5-4bf0-82e4-3b5b3ac6b793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ded8fe-4297-4f60-bb12-a0944ad078c6",
        "cursor": {
          "ref": "a6cc0d70-36d6-4c2b-9785-8c16ed1b8517",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7609046f-c039-4d6e-a26a-5c5034b0c2ee"
        },
        "item": {
          "id": "90ded8fe-4297-4f60-bb12-a0944ad078c6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1b6e0672-f5de-4b28-85c8-7a3dec1b3886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b20db5-1a03-459a-80d5-ad53ad1c2d41",
        "cursor": {
          "ref": "cf58a242-bb4c-4e54-9007-4b7f31a77f98",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d778ec94-34fc-4138-9529-6841423bd6a5"
        },
        "item": {
          "id": "c1b20db5-1a03-459a-80d5-ad53ad1c2d41",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d0cf513f-11d2-473c-84c3-d7cc140ab7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79e4835-b370-48c8-89a3-df4a75a1bcdb",
        "cursor": {
          "ref": "a9de7757-0125-40de-9fef-c4645013684c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "16730f60-cbdf-4908-85c2-e10f37969773"
        },
        "item": {
          "id": "a79e4835-b370-48c8-89a3-df4a75a1bcdb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1fbe48a8-b517-4c01-8150-fdbed83e42ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea24e73-0e5a-4c95-9560-1cc82d38e568",
        "cursor": {
          "ref": "f5a5ab59-642c-4902-bc02-cf4303d2d782",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fd7619db-dde6-4f8b-8f5d-88e27566f99f"
        },
        "item": {
          "id": "5ea24e73-0e5a-4c95-9560-1cc82d38e568",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "637e1d54-9349-46ea-a8e3-f60af90eaf0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7092d9-49f5-4f47-b388-c5832ab05928",
        "cursor": {
          "ref": "04f8c2e8-b16a-4910-b257-20a43151fa61",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cfb791be-6b51-49d4-bb61-45273abe16f2"
        },
        "item": {
          "id": "5a7092d9-49f5-4f47-b388-c5832ab05928",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "11de9698-e27f-4215-b465-273f8a1ee653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ad1d5d-9d39-4c95-9c06-522d8db50a5a",
        "cursor": {
          "ref": "e243e8d4-95f3-4615-bd30-4d990604bf41",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "28039b0e-1801-4792-a612-557fe912bd90"
        },
        "item": {
          "id": "59ad1d5d-9d39-4c95-9c06-522d8db50a5a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7fe2fb7f-e29a-452a-b459-2245fbb79fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbc56eb-9d9d-49b0-ad8c-60247177fb21",
        "cursor": {
          "ref": "bebdd331-3bcb-4622-ae0f-8cf5e3839164",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b2f0e5a5-e55b-425c-99f3-4f37d9e5d2eb"
        },
        "item": {
          "id": "5cbc56eb-9d9d-49b0-ad8c-60247177fb21",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "cad97d75-5732-4cba-b6cb-7f65e849675c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d567ac20-3974-4192-895c-bbb2dd49cb05",
        "cursor": {
          "ref": "6add64e4-cced-4481-83c3-026620fb8570",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0199c225-0e28-458d-8e7f-602e97e6fb44"
        },
        "item": {
          "id": "d567ac20-3974-4192-895c-bbb2dd49cb05",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "459a20e8-b131-43f8-9590-c31dfc7c0a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4299eef0-d6bd-4707-9db9-41d0a62a5591",
        "cursor": {
          "ref": "5da43481-7e29-4846-b834-bce8596ef91f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0ed62397-b857-4d75-a5fa-b07eebb3c647"
        },
        "item": {
          "id": "4299eef0-d6bd-4707-9db9-41d0a62a5591",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "114d38b1-e39d-4588-bda5-bb85e7e3b445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601b0b74-7a58-43d6-be7a-cfd5cc09569e",
        "cursor": {
          "ref": "f5a59d3a-67b6-402b-b34f-ac31a17a5119",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dc9e6e2e-91f4-4f68-9aeb-f25c28c68149"
        },
        "item": {
          "id": "601b0b74-7a58-43d6-be7a-cfd5cc09569e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4189d21e-f3cc-4976-94e4-9e20314675af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba88c16-67ab-4546-8a3a-3c7bc4ea7883",
        "cursor": {
          "ref": "7f3a1521-a167-46be-9607-fcd220d42932",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ad7f3ace-a0f3-4403-825d-7a3d5a6f9f6a"
        },
        "item": {
          "id": "5ba88c16-67ab-4546-8a3a-3c7bc4ea7883",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "77c6b43a-407c-44ab-8d94-aa9e6d3dd8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed1040f-109e-4f5e-ab0f-1f2260794871",
        "cursor": {
          "ref": "d5c184a4-f93e-4eb1-a5f3-930ac8988129",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a4796611-b444-48b2-85a8-6ca6b5493899"
        },
        "item": {
          "id": "0ed1040f-109e-4f5e-ab0f-1f2260794871",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "75d2b5bd-d2eb-47c3-bcd6-b2d74ec756dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4edf65-b3a6-44b9-91f7-106f046cc573",
        "cursor": {
          "ref": "ce38d04b-e748-4883-b05a-e96f0234360a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5b303fe4-4abc-4ed9-8de9-3abb310c5f0c"
        },
        "item": {
          "id": "db4edf65-b3a6-44b9-91f7-106f046cc573",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "1336585e-5d30-47a0-b753-3d2af01f1c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60373892-47f2-44ee-b9cc-dfaa9287abb6",
        "cursor": {
          "ref": "8f6eb331-a9c9-4723-a5e7-aa0d9f39d4e5",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "fbe5ab57-6bf4-465f-b99b-270b9b02b6ff"
        },
        "item": {
          "id": "60373892-47f2-44ee-b9cc-dfaa9287abb6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bd29c9a9-c5e9-453c-b8bb-d3d785f8bb0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c987cb80-5b97-4242-a56e-2897676faadf",
        "cursor": {
          "ref": "0875d7d4-d69f-484b-a975-cdc3425c9751",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d14b19af-ac53-4210-a440-c2ef6325dc04"
        },
        "item": {
          "id": "c987cb80-5b97-4242-a56e-2897676faadf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f761bd0e-0117-4914-bc43-838aac571482",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170c7624-1162-41dc-9c3e-089026a6c4c3",
        "cursor": {
          "ref": "fef0b49e-5b17-4b87-bce2-5a719162b08d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dcb37ada-17aa-4718-a5ed-a41e59320e2c"
        },
        "item": {
          "id": "170c7624-1162-41dc-9c3e-089026a6c4c3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b3527d91-3875-443f-896d-392f6c350598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "73426874-629c-41a9-8745-08224df3e952",
        "cursor": {
          "ref": "1619b67f-7e72-4081-af7e-8f785073b502",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5b4994c2-a084-4b6b-bf4d-b95b63382751"
        },
        "item": {
          "id": "73426874-629c-41a9-8745-08224df3e952",
          "name": "credentials_issue"
        },
        "response": {
          "id": "88204215-7f42-4692-ab03-4348f9610565",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2421b5c0-33aa-4965-86de-34974e0bdf7c",
        "cursor": {
          "ref": "ffbb2d61-b89c-43d6-95dd-7d35cacd4e3a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "14c4897a-0ea9-4854-9273-6a2d96944886"
        },
        "item": {
          "id": "2421b5c0-33aa-4965-86de-34974e0bdf7c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dde4e83b-a344-425e-9deb-7e8ce47d5566",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8a86c-362e-4e1d-a458-90c996c07d1d",
        "cursor": {
          "ref": "0723aff3-cd39-4f7a-8137-910b38bbf75d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eb410ffe-7cf0-4ee6-ae5b-ab3eb1f5f564"
        },
        "item": {
          "id": "a5e8a86c-362e-4e1d-a458-90c996c07d1d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "83ebbd3c-71f3-448b-b26a-05622d5e8283",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd26c9a5-4516-44c9-9759-d2bc4b9450db",
        "cursor": {
          "ref": "0be3fe8b-0a30-4709-9c66-a6a4e0518ec3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ac5a0167-ab6b-49c8-a246-5e3937d3a1a6"
        },
        "item": {
          "id": "cd26c9a5-4516-44c9-9759-d2bc4b9450db",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5ff8930a-0655-4b10-8421-64ac258efdf5",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89356b4-b05f-419b-9edd-0554454646a5",
        "cursor": {
          "ref": "12092568-c226-4eca-94f7-7af73709320f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "66ea85a7-6a55-48cb-90df-efe43a8e8d5d"
        },
        "item": {
          "id": "b89356b4-b05f-419b-9edd-0554454646a5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "470e7ba3-9220-402c-b5d3-10e9e65b56e5",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-02T00:34:10.899Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-02T00:34:10.899Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2ae56656-377c-4ce8-acf1-e55bf8e4ff8c",
        "cursor": {
          "ref": "957a94f5-43ae-476f-a840-28b18e8a4c92",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f2d43e5d-a4b1-42a3-bc52-211901e6f849"
        },
        "item": {
          "id": "2ae56656-377c-4ce8-acf1-e55bf8e4ff8c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "16fc6395-bea2-43d8-b2cc-667ef158c59a",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8e1b6a-c407-4b47-bb2d-1c1967fe7196",
        "cursor": {
          "ref": "caac7dae-ef78-433b-8aa7-41bcd724e6b4",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4d3a0cf8-f943-4ae9-98b9-6b75058e3a55"
        },
        "item": {
          "id": "3c8e1b6a-c407-4b47-bb2d-1c1967fe7196",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff539cc4-bb3c-48b3-a719-b5082bf6d5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625eeb81-bc90-437d-b92f-454c8132523a",
        "cursor": {
          "ref": "833d610d-9632-437a-8f61-7560e76fb70b",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4d72b3ed-9923-4e28-944d-6296d8929728"
        },
        "item": {
          "id": "625eeb81-bc90-437d-b92f-454c8132523a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ca79bdd6-d927-4fc8-9031-4d0c0f95ef33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21bfbcd-f2a8-40db-bc2a-f35eca03014f",
        "cursor": {
          "ref": "b92d3673-b15a-4ae2-80d9-eaabf0f1ea83",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3e74ab19-33a2-4c6d-9749-fca3142d1ca0"
        },
        "item": {
          "id": "a21bfbcd-f2a8-40db-bc2a-f35eca03014f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "686a358d-fa5f-4b10-9f03-ead41733c227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4600976-7f24-4bff-9f95-9d05040ced7b",
        "cursor": {
          "ref": "4434b82d-a291-4c2f-bfc0-bebc76da1a44",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b066ff3d-b7f3-4643-b19d-42cd81bf04d1"
        },
        "item": {
          "id": "f4600976-7f24-4bff-9f95-9d05040ced7b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4e678a48-bd15-4737-998e-3beb4ebfb581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af825016-c1c8-45f9-a08d-8ef7c90d6088",
        "cursor": {
          "ref": "06c547be-b3cf-48df-bbfb-b639faaecbcc",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d73d0dc2-8602-4330-91e1-72e27242188c"
        },
        "item": {
          "id": "af825016-c1c8-45f9-a08d-8ef7c90d6088",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4534d339-20ef-4f97-8b17-9b21b4bce549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee7d6eb-dd22-4115-ab30-000d51ebb17e",
        "cursor": {
          "ref": "5f7f5822-8957-4e56-9364-e1e49c38a7d4",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "bd245a7a-e055-4cd3-b3e7-58376da19b19"
        },
        "item": {
          "id": "4ee7d6eb-dd22-4115-ab30-000d51ebb17e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3fdaa171-3b82-4357-8c39-c6fe00c8b31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28cfb54-ec87-45a8-8879-b3f50a0736e8",
        "cursor": {
          "ref": "987f1dcf-7eac-49b3-acb5-516a124bce6b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "689e7825-f855-450f-8439-915cbef3b286"
        },
        "item": {
          "id": "a28cfb54-ec87-45a8-8879-b3f50a0736e8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9882b1f8-89f7-4cec-b25f-efde44258bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fe3bcd-abfd-4284-8760-f6bf11ad19bd",
        "cursor": {
          "ref": "2efa4c89-fadd-4275-816b-80bd06f7c279",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6552854f-0529-4ae5-b2a1-27791691b2d8"
        },
        "item": {
          "id": "d7fe3bcd-abfd-4284-8760-f6bf11ad19bd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e02122b7-b831-481a-ab08-51e338aa9bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "262cbaaf-025d-4b53-bdc1-4ac5c0746762",
        "cursor": {
          "ref": "f95e49c1-352e-4c38-af3b-46aaef1e6e68",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4ea09ce8-cc76-4566-a758-dfc31b1b3a60"
        },
        "item": {
          "id": "262cbaaf-025d-4b53-bdc1-4ac5c0746762",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e05d58d3-6602-47ef-828a-5101a28fc86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a279aef-e7c7-4b67-b5f4-5c5c09ebed09",
        "cursor": {
          "ref": "fdedc799-e722-460c-80de-63211a3302af",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "57e000ba-9e99-48d6-a9a4-3fc938fc51b6"
        },
        "item": {
          "id": "1a279aef-e7c7-4b67-b5f4-5c5c09ebed09",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "be89a16d-993a-4c56-b197-15ca1d501407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ad6cad-ce7b-443d-a72e-7272f627112c",
        "cursor": {
          "ref": "50ac6b7b-b44e-4ed4-b763-6a5ee9f63c5b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "973522ed-9754-4ee6-985d-89983a34b624"
        },
        "item": {
          "id": "67ad6cad-ce7b-443d-a72e-7272f627112c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ab5d9089-da20-4e1d-8ddc-11664a468658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393651bf-651d-407a-a7f2-51878c1ecfc2",
        "cursor": {
          "ref": "1b64ec03-414b-403b-8b4a-c30cc03e09c4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "acba9af7-f9eb-4e0f-b814-28fb02655ae4"
        },
        "item": {
          "id": "393651bf-651d-407a-a7f2-51878c1ecfc2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "71709c9e-cbca-4a5b-849f-d6d73106c5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13617f02-93db-4e81-a750-6349f203e7e9",
        "cursor": {
          "ref": "94518c77-7618-4bdc-9ff0-02f66742b0d4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6be29215-ff3f-4530-b045-f5c8d7b65462"
        },
        "item": {
          "id": "13617f02-93db-4e81-a750-6349f203e7e9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b5a0300e-28eb-46d1-8449-e4e8e790ea39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2ee69c-95cd-4152-b5c8-7476ed55fc1c",
        "cursor": {
          "ref": "3cc58bc8-eaf8-4ba2-b590-2101f7d625fe",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f92cb390-1899-4f31-8ac9-274073414a6d"
        },
        "item": {
          "id": "ee2ee69c-95cd-4152-b5c8-7476ed55fc1c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "721d53e6-d7c4-4624-a51d-96cdf5bf8ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd990dc-5389-43b4-8438-f6c361787d3d",
        "cursor": {
          "ref": "5baf2ca6-fa36-43ec-90e9-00e4c62e2658",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5f06817a-aba2-4771-86cd-5de084a99e12"
        },
        "item": {
          "id": "8bd990dc-5389-43b4-8438-f6c361787d3d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c790a92c-95c4-422c-841a-b813fb94b3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404750cc-943c-4e36-b90f-74bc6b3b2bbb",
        "cursor": {
          "ref": "7d0f5fbd-72e3-4601-809a-769df9a57630",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "08779027-8db1-4481-ba42-23dc38848283"
        },
        "item": {
          "id": "404750cc-943c-4e36-b90f-74bc6b3b2bbb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ba9f8b1f-658f-41e8-99ce-9b7037db98f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c085a63f-d2f7-4c0a-8444-666301fdd3e2",
        "cursor": {
          "ref": "787b2434-b087-4384-9a43-4b1123855e3a",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "69139a93-f72d-4794-862b-ded91a977b25"
        },
        "item": {
          "id": "c085a63f-d2f7-4c0a-8444-666301fdd3e2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "df0a456b-dadc-41e2-9010-d60cfc976a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac74bb6-f537-4826-9d33-ac6b31e2be9f",
        "cursor": {
          "ref": "0e4db8e7-4d7b-40f6-b45d-28022e236fd4",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f07d33e3-cf0c-476f-968b-29588f9fb0f8"
        },
        "item": {
          "id": "2ac74bb6-f537-4826-9d33-ac6b31e2be9f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "be46de7c-f691-42e1-b68b-585d730b74cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba50d369-f916-438f-84b0-b34132ce919d",
        "cursor": {
          "ref": "02159f8b-7435-4a76-9d31-efd024ade75c",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7e462ed2-fdfb-49a1-8814-ef2ebde50b01"
        },
        "item": {
          "id": "ba50d369-f916-438f-84b0-b34132ce919d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "82303ec0-a676-4068-95fa-3163d12fa2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2635e36-7cda-4372-8335-47fa549f5a63",
        "cursor": {
          "ref": "f20518c2-b350-48d7-b13c-2a4c479ae0f0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9b58328c-9413-4022-a1a1-eeb00170b6a2"
        },
        "item": {
          "id": "b2635e36-7cda-4372-8335-47fa549f5a63",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "815d4b92-490f-4f01-b3dc-5cfd1ba60aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d24277-05ac-4b91-8a6f-018f2dee1d2d",
        "cursor": {
          "ref": "1042eec8-cddb-4d8a-a6d8-ea49a8b04683",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "56719b2b-ad36-472a-a3d1-f4784e5af4c1"
        },
        "item": {
          "id": "a1d24277-05ac-4b91-8a6f-018f2dee1d2d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "08ef6511-a974-4c58-908d-2f3ac0fca3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb93fed4-5fd9-4525-9bce-5d2a0c9defba",
        "cursor": {
          "ref": "af98fa98-186f-4934-93fb-ebf551dfc5d0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cc68e0d7-66ac-4372-8d67-6cc1cf3d81ae"
        },
        "item": {
          "id": "eb93fed4-5fd9-4525-9bce-5d2a0c9defba",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c55c54fe-9dc9-44fb-9d56-21a5b08133fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b01c7e4-c3a0-42d2-82fc-1cc9c7f77a77",
        "cursor": {
          "ref": "97376bcc-82e3-4302-90ed-2a6503c827b0",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "15269a0e-30ff-41c3-b208-26446a001555"
        },
        "item": {
          "id": "1b01c7e4-c3a0-42d2-82fc-1cc9c7f77a77",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "203d0766-bb8e-41f9-9d93-5315000b3397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb9a501-eb8f-479f-8d94-c2fa54808810",
        "cursor": {
          "ref": "bcfd85e2-a590-482c-855c-d51201d14ed8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3936aa09-f5f1-4673-9b72-3998beda0aa7"
        },
        "item": {
          "id": "aeb9a501-eb8f-479f-8d94-c2fa54808810",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d671c891-6258-4f04-a74e-e360ee81d0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44b1dc7-741d-43cb-b0df-090390f6a919",
        "cursor": {
          "ref": "67014a6f-0cb9-4693-af9f-b6a91cc717f3",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "782067c8-6432-4933-8c5d-99dde4ddcd5b"
        },
        "item": {
          "id": "d44b1dc7-741d-43cb-b0df-090390f6a919",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e1d4f6ad-4027-45f6-9e59-dc15df4be5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640f787f-9d2e-4946-972c-c4d46359a202",
        "cursor": {
          "ref": "1351bde9-20f2-4fbe-99f2-e5a84bc77694",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0ab218f2-f3e2-4b26-bcad-49acdc01d1c2"
        },
        "item": {
          "id": "640f787f-9d2e-4946-972c-c4d46359a202",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a65e6ef8-9b3f-43ef-95e3-66f954af10f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f218d19-6939-47a8-961b-d3fd7dd86c5c",
        "cursor": {
          "ref": "519a956c-482c-4c41-87bc-f277a0e6b20f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8fa7deb4-3b01-47e5-827f-dc642569f10c"
        },
        "item": {
          "id": "8f218d19-6939-47a8-961b-d3fd7dd86c5c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "13f05951-2b42-46af-9986-3f2ec7c37d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331dbaa1-f13b-4cbc-9e8e-a79c2d14b0e0",
        "cursor": {
          "ref": "479c2b70-571b-417e-8564-ebeadcef0ecf",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a299c57c-89f1-4d9d-880b-a97a17f2dbd0"
        },
        "item": {
          "id": "331dbaa1-f13b-4cbc-9e8e-a79c2d14b0e0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0fb4286f-3048-43ba-9514-a569fa3ae84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a08fd1-1e76-4e77-9898-905895819ba0",
        "cursor": {
          "ref": "38075692-4eef-48ee-8563-6bbb911f58e7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0a15460e-3af5-4d33-9e02-63b613b4917c"
        },
        "item": {
          "id": "45a08fd1-1e76-4e77-9898-905895819ba0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "553eeb1c-2511-4655-b572-573c948bbe28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2bf65f-713c-4bf9-b60e-2be4ccc5b3a9",
        "cursor": {
          "ref": "18535dbf-764a-405f-b419-42b0fa093b1b",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2a06d516-f90d-409b-8aaa-6ad468e97267"
        },
        "item": {
          "id": "1a2bf65f-713c-4bf9-b60e-2be4ccc5b3a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2fe50bf6-2745-4aec-80c6-fd92ce73f25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0742d7-de3d-4e3b-b4a4-244060032b6a",
        "cursor": {
          "ref": "97936f82-6a95-4311-aaf7-dcbe6910635e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b99dd5a3-9f82-4021-aff2-5289c82cbf62"
        },
        "item": {
          "id": "df0742d7-de3d-4e3b-b4a4-244060032b6a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "220d78bb-a186-4a62-aff2-ec8cdc37c4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e971a2ad-4516-4e17-8785-2cd534a1ad27",
        "cursor": {
          "ref": "ee277a06-07c5-44b9-a244-54d7cf089c5b",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2d16bec7-9395-4236-9082-2b4fe396e2c9"
        },
        "item": {
          "id": "e971a2ad-4516-4e17-8785-2cd534a1ad27",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3c03e63b-2874-4438-bb58-1d94fb37c1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81aa868f-a873-4099-a79c-3ebbc4ba92c7",
        "cursor": {
          "ref": "3bfc89ab-b5e8-48a0-b275-ea5a412c6477",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bef840b6-9a4f-4cec-ba75-8b52ba6c6cfc"
        },
        "item": {
          "id": "81aa868f-a873-4099-a79c-3ebbc4ba92c7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9f6a757-df83-4746-8d89-82b385787dd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85271bd0-8941-4fcf-aedc-bed3878422d5",
        "cursor": {
          "ref": "c384bcb8-b97c-4668-91b5-6fbf5575cd80",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5559f4cb-52fd-47ee-b688-d4942e3c2384"
        },
        "item": {
          "id": "85271bd0-8941-4fcf-aedc-bed3878422d5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "41034db0-2acb-456c-ae30-67e8b3972e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adcb532-4d45-48ed-bd3e-b269fcc7a8e9",
        "cursor": {
          "ref": "e40098ac-8ac4-43ce-8781-6068bfb74cc1",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fe713f4f-74b2-4cd1-8377-ea378a09ae92"
        },
        "item": {
          "id": "0adcb532-4d45-48ed-bd3e-b269fcc7a8e9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0c2d2457-087d-4a40-8912-c17c56c07f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e037faa6-14cf-4a16-a241-6211f101aa78",
        "cursor": {
          "ref": "42e0fd5d-f3e7-4c76-b8cb-aca07c1b9074",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d6cd3160-4440-414c-b755-d62c0042c28a"
        },
        "item": {
          "id": "e037faa6-14cf-4a16-a241-6211f101aa78",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "82a26d88-93da-44bd-948f-d621ae77a2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a76cebf-3d6b-41f7-bd17-89cf60aebbc3",
        "cursor": {
          "ref": "67466836-7995-4725-9808-a312eef8ce97",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "42d6052b-b499-4ec1-9ca3-b3a9bb97efc7"
        },
        "item": {
          "id": "2a76cebf-3d6b-41f7-bd17-89cf60aebbc3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cda292dc-bdd4-4cbe-b6b8-460b9eb2af46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dd00df-947c-4dae-aeaa-0d763fc65f13",
        "cursor": {
          "ref": "ed748a93-410a-4d31-b80a-e0997fbd1e3c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "27f51c21-40d8-448c-94cc-8894fac47455"
        },
        "item": {
          "id": "33dd00df-947c-4dae-aeaa-0d763fc65f13",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f0292107-969c-4b88-b6e9-3a191a6e4bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c2aa43-06c6-40db-814e-a9447f784736",
        "cursor": {
          "ref": "a7e20203-670b-41ef-9cb5-7f30bf69c350",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ee9ebec0-4e5e-40d5-b11b-7538d46bcea1"
        },
        "item": {
          "id": "88c2aa43-06c6-40db-814e-a9447f784736",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f1f67696-a283-4042-81bf-eb437c4dbb6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80541eeb-4869-46c9-b7f5-0d9dcb9eb63e",
        "cursor": {
          "ref": "dc3f46d7-9ddb-4cac-b912-594c49d5e975",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "be12a36f-d333-41cd-9af4-b57d61303fe7"
        },
        "item": {
          "id": "80541eeb-4869-46c9-b7f5-0d9dcb9eb63e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "78cd3002-b555-4e39-8c5d-c1de5323a009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f594d2-3a5a-4cdc-84e8-b7af4570ad10",
        "cursor": {
          "ref": "e596a21f-7939-459b-9678-1255f6d22976",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7a6bbc5d-97ed-46a1-9e00-083c974d58e1"
        },
        "item": {
          "id": "31f594d2-3a5a-4cdc-84e8-b7af4570ad10",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "437a5b5e-ccb3-4546-8e6d-63d6a8fa4a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a98b483-5965-4f87-ab43-96b47f499fba",
        "cursor": {
          "ref": "7cb40b95-4e2a-4fe9-b655-48939cf5df54",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9a41c607-8f78-4c82-98f5-4d5f88241b24"
        },
        "item": {
          "id": "2a98b483-5965-4f87-ab43-96b47f499fba",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a29492c3-57e8-4ed9-b8a9-56fcd9696653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c801ffb0-4494-473a-8b4d-5c8a425bdfb3",
        "cursor": {
          "ref": "32d47bb3-858c-4591-9d4b-34719fe6e376",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c9556d20-9c38-4dec-9479-fa4be0048b32"
        },
        "item": {
          "id": "c801ffb0-4494-473a-8b4d-5c8a425bdfb3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a495889d-0fa8-4f7c-a674-833e54a57d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ad091d-9c07-4932-a4ea-74e47c4cf0dc",
        "cursor": {
          "ref": "fc69b4a2-7e08-4df2-9913-1dedc6535382",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "511be521-9f2a-4708-beb7-92ae042d4c82"
        },
        "item": {
          "id": "f6ad091d-9c07-4932-a4ea-74e47c4cf0dc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b695aa63-1c80-43e6-9825-2181dffcdbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b89692-6061-4a85-a5a1-439438e63876",
        "cursor": {
          "ref": "0a314192-8ddd-4455-a311-de351cd768f6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "49b3d4b7-9073-455e-b092-4d4be69aeb82"
        },
        "item": {
          "id": "79b89692-6061-4a85-a5a1-439438e63876",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a1179c17-5e70-47b5-8816-56ec902f8017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e765e76c-ff25-42cc-988a-4d8aaf04ebff",
        "cursor": {
          "ref": "9fc46ce4-77d7-4958-aa59-4034012b9e23",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a2805edd-7469-4aa4-9e3c-bc4e85a46b15"
        },
        "item": {
          "id": "e765e76c-ff25-42cc-988a-4d8aaf04ebff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "61f26517-385d-456c-a5bd-ed92248c1d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17493e72-e114-4d3c-a859-7bad817ee089",
        "cursor": {
          "ref": "789cb6f9-b6d8-484d-ac5d-fb8d043e64d6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "73e3a442-ec6a-42c6-a863-e124b93f6078"
        },
        "item": {
          "id": "17493e72-e114-4d3c-a859-7bad817ee089",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3c471b9c-8aab-4df2-aaba-74c0b89c0fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9770fc-7534-43ee-83a2-89397241cf6b",
        "cursor": {
          "ref": "70df5de3-9926-47e4-9f36-bbe80d1a5176",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ad6ed583-bcc3-49df-be8e-7ba866bc2dd5"
        },
        "item": {
          "id": "9c9770fc-7534-43ee-83a2-89397241cf6b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "68e534ae-15b0-4615-8e37-28447f2d4637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20049014-8ae8-4fe6-8993-3b9c1879f81c",
        "cursor": {
          "ref": "42ee4342-3c76-44b0-b467-bee593f2cfde",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a42cd41a-ec2d-46cd-9498-955574f63d75"
        },
        "item": {
          "id": "20049014-8ae8-4fe6-8993-3b9c1879f81c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "352d04f0-c685-40a6-8449-840bd4e69231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f64246-0fdc-40a3-8caf-247bdc2c24c5",
        "cursor": {
          "ref": "65c3edf9-9b3a-4f9b-a11f-151758900a68",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "945cd152-9277-4a0c-99e6-c6f6041908bf"
        },
        "item": {
          "id": "d9f64246-0fdc-40a3-8caf-247bdc2c24c5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "271ab96e-0b9d-4126-99d7-385f180c5812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5398f5ef-c93e-4d5b-b6fa-b8a80e0ad330",
        "cursor": {
          "ref": "47ffea70-4169-4904-9fe6-10b1ced27fc9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "75e6799b-4320-4dfd-b594-7e99962d1395"
        },
        "item": {
          "id": "5398f5ef-c93e-4d5b-b6fa-b8a80e0ad330",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d80cdee4-b592-4c24-bedc-5edddf3df7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e676bc-7acb-49b2-9e19-91d3f0c76233",
        "cursor": {
          "ref": "727cbee4-6686-4ae5-bf1b-987fe368b3e1",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "63bd60eb-e75a-4535-8ade-9ae52320b3b0"
        },
        "item": {
          "id": "b7e676bc-7acb-49b2-9e19-91d3f0c76233",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9943bfab-4f82-4175-bec6-29226d1c4a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a125a8cd-16b4-4b5b-ad28-cf6a7896da67",
        "cursor": {
          "ref": "acc7190b-daef-4687-ac5c-7c1400c50fe9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d3987fbe-24c6-42b7-9b11-e03369b4935b"
        },
        "item": {
          "id": "a125a8cd-16b4-4b5b-ad28-cf6a7896da67",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a3136405-8c04-4737-bbf3-810581e23eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1ee1ef-1bda-42a4-9ceb-19f9e4eddff1",
        "cursor": {
          "ref": "f78c3978-0c29-47b2-90bc-7fa8ef7579fd",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eb38e29b-dece-428f-99e1-6cd03988a525"
        },
        "item": {
          "id": "ed1ee1ef-1bda-42a4-9ceb-19f9e4eddff1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "97275b52-d774-4e14-a1e2-2764b579edb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22f38e1-9286-4aa4-b2a2-9235d21a75a3",
        "cursor": {
          "ref": "2caa8bdb-d900-42ff-9d56-81f2a83f12e0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "16bada3e-dc7f-46ae-9a57-f115bf84fc84"
        },
        "item": {
          "id": "c22f38e1-9286-4aa4-b2a2-9235d21a75a3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f7a87589-eae0-4b8b-beaa-2def9760c91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d7a2ca-de01-4e24-ae74-35f787d683a7",
        "cursor": {
          "ref": "11a2bd09-23b0-47fb-ac29-2ebf3ed53371",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7dee7513-4054-4828-8a29-427f339278b2"
        },
        "item": {
          "id": "c1d7a2ca-de01-4e24-ae74-35f787d683a7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f98cdd12-3e43-4583-861e-b981a40372c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb388de-35ed-482c-9461-b653f3a51258",
        "cursor": {
          "ref": "184c7490-dbf9-4119-b670-7b3d0c2a086e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "989862e4-e461-4600-a228-06935b2f05d9"
        },
        "item": {
          "id": "8cb388de-35ed-482c-9461-b653f3a51258",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "01652178-2c69-42fd-a62a-70cbdb3acea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74180184-aeea-4aac-8afe-2e46acc57045",
        "cursor": {
          "ref": "0b496a35-e1bf-48f4-8658-106bc322f1dc",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b806fad9-7fc4-498d-8770-4ab4bce79148"
        },
        "item": {
          "id": "74180184-aeea-4aac-8afe-2e46acc57045",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "41b8f746-1313-49f6-b29b-c447ab4212dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923e0779-eb89-41ca-97ff-d543f97e8122",
        "cursor": {
          "ref": "40e6e697-6f82-4018-b003-d40f35f61cc7",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ad359a42-0034-40cb-becd-19b16cf4d865"
        },
        "item": {
          "id": "923e0779-eb89-41ca-97ff-d543f97e8122",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5d08905e-2345-4959-a6d1-147fbbaea9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf0d54d-2527-4918-9a1e-fd0ceb550588",
        "cursor": {
          "ref": "8f880646-b291-4507-aadf-4adf185f2cbe",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6ce8077a-1d66-4cb4-a2b1-dad486f5b652"
        },
        "item": {
          "id": "faf0d54d-2527-4918-9a1e-fd0ceb550588",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d5ae8a34-fcc2-4540-8cff-3f31d038084e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498a7455-a27c-4076-9cf6-b060af1e99af",
        "cursor": {
          "ref": "978bd6d6-a8bb-40bf-bec3-edc158840745",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bb9132e3-9ddf-472a-bf73-076bf3163a49"
        },
        "item": {
          "id": "498a7455-a27c-4076-9cf6-b060af1e99af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a292a3a0-431d-4a70-8dc8-642224f46306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649f2734-0d1e-41d2-af86-970cbd866fb2",
        "cursor": {
          "ref": "0e254cf4-5ea3-4ee1-a907-4c84e9752adf",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3b41a629-c03f-4a3a-91b8-fdd57e08b738"
        },
        "item": {
          "id": "649f2734-0d1e-41d2-af86-970cbd866fb2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9efce516-73ad-419d-a0a9-bcb975033bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3d8bdf-2803-49eb-aa09-b9bd0d88d21c",
        "cursor": {
          "ref": "b0e0f506-9197-474b-8c1f-1677b09d9389",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "43539c54-68f4-4f74-907c-dbd899635ca0"
        },
        "item": {
          "id": "8f3d8bdf-2803-49eb-aa09-b9bd0d88d21c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6aee8182-a180-4b1d-865b-071ec84abfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67620705-1300-45a0-89b6-e3b469c978f5",
        "cursor": {
          "ref": "e0c0a1be-06e9-4d15-adfc-ea10e68b11b3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d58aa15f-d19f-42be-a225-fc4876a19b2a"
        },
        "item": {
          "id": "67620705-1300-45a0-89b6-e3b469c978f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d5a2f345-8980-4c9c-8a9e-4c856cd26c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d426a09d-6df6-4e93-ab3f-ca7f6431546f",
        "cursor": {
          "ref": "2b75b4d4-856c-4fba-aec5-73a2dc1257d0",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2741c52-35f3-4653-8db0-37662783027e"
        },
        "item": {
          "id": "d426a09d-6df6-4e93-ab3f-ca7f6431546f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3167ddc7-69ea-4540-8cb1-d6ff238b177d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86a7050-54ac-4e66-9b3d-682f2179a550",
        "cursor": {
          "ref": "07e0eee0-b1b4-492e-904b-dcfa13c5f5b6",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1368879d-460d-4487-9e2b-fb58317a9fe2"
        },
        "item": {
          "id": "e86a7050-54ac-4e66-9b3d-682f2179a550",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3267ff81-437e-43e0-97ea-85d1fd8b505a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d16897d-77ce-4d1b-b7ae-05362b142482",
        "cursor": {
          "ref": "2906be7c-6b6d-4c16-a9a1-26767643b87c",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ab9cc1aa-27f2-4c77-9e3f-bc8e5d1c9d47"
        },
        "item": {
          "id": "5d16897d-77ce-4d1b-b7ae-05362b142482",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "32d538fc-d651-44da-8fee-2e0aca32b62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3847dd9e-c501-491a-b45e-1b6067ef9b87",
        "cursor": {
          "ref": "ed6eec1e-7ffc-4a3c-b17c-3863b37a0b44",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "00a7f56a-4396-4ae3-91b4-983c7c7b5d82"
        },
        "item": {
          "id": "3847dd9e-c501-491a-b45e-1b6067ef9b87",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f56d1356-cea2-4d66-9eac-484f9f8603c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1951d5e3-e4f1-45af-a451-5721afeab452",
        "cursor": {
          "ref": "3865b5dc-7494-41c5-9b85-f6397f016502",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3a8217be-0deb-42aa-b8cc-4ae9bd45e09f"
        },
        "item": {
          "id": "1951d5e3-e4f1-45af-a451-5721afeab452",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a974d62c-2bd1-4a94-80aa-600da31e91c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64d44fd-1301-4769-a320-33ca6e8b6651",
        "cursor": {
          "ref": "4556f0a2-85d3-45bf-9279-a20f94e10efe",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "36054766-23b1-49a7-a139-4f488d252c2f"
        },
        "item": {
          "id": "e64d44fd-1301-4769-a320-33ca6e8b6651",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "19167fb9-89c0-4a0f-8513-85415e982263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86748ef-1cf8-4875-a05b-2fdc208be67c",
        "cursor": {
          "ref": "0f9baaa6-1128-4977-8e0a-aec0f2768c30",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2fc385d1-fd73-4b08-b366-6c6839e9d7cf"
        },
        "item": {
          "id": "e86748ef-1cf8-4875-a05b-2fdc208be67c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ffbaacd5-9319-4afb-92cf-d183689950ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d914d495-a5a0-429e-aa3b-cb224e9d17b4",
        "cursor": {
          "ref": "c72d2af0-532c-4ad8-929f-1f533bdbd9c1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a18be401-4eca-4d17-9bac-d2a7717b3b73"
        },
        "item": {
          "id": "d914d495-a5a0-429e-aa3b-cb224e9d17b4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39ffbb83-0934-48f5-ae69-6bc595b240f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1654c7a-9f64-4ffd-9d41-65e2186e5b3a",
        "cursor": {
          "ref": "da36cf52-e7da-48e6-a0ed-a9d3883b4fb0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ae510945-74e2-46d4-a515-9ec4eab3caed"
        },
        "item": {
          "id": "a1654c7a-9f64-4ffd-9d41-65e2186e5b3a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c1be3cf1-6f06-44ab-82fa-d408a002855c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e860b0ab-7083-45c7-b533-a603d2dc5f61",
        "cursor": {
          "ref": "150914d9-761f-4e94-97e6-33daa66377b7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3de7b52c-4fb4-4f34-a159-a3ed18fbd448"
        },
        "item": {
          "id": "e860b0ab-7083-45c7-b533-a603d2dc5f61",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1dc4de96-2b62-4756-a070-5373e5cea0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac7a56d-211d-4cf5-9098-e7806763a34b",
        "cursor": {
          "ref": "0416e02b-9128-4675-8ce0-cf55d21d5e34",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "93e48b94-3786-418e-9b27-24ec55b9eb34"
        },
        "item": {
          "id": "bac7a56d-211d-4cf5-9098-e7806763a34b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "081f6ba7-a065-4a3f-abcd-62f354992853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23db9ca-6e97-48ad-89f8-ec2518a2980b",
        "cursor": {
          "ref": "8864438e-1884-4dae-8649-701b23fedb60",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b32c951a-b865-4e06-a58a-77303d41f56b"
        },
        "item": {
          "id": "c23db9ca-6e97-48ad-89f8-ec2518a2980b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "94356e2b-3639-4295-95bc-3a13ecfef14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c7abba-0d70-4d55-b071-831d2589feac",
        "cursor": {
          "ref": "069a2c32-e3a0-4507-941d-b54f06a4d277",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "91f2a81d-9f9e-4226-90a2-3e16811bd21c"
        },
        "item": {
          "id": "80c7abba-0d70-4d55-b071-831d2589feac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "352eb97b-fd11-41fa-b863-8ed30eba874f",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0fe77c86-26d8-4c62-a228-72de324aba90",
        "cursor": {
          "ref": "a66a12a0-f8ff-4a18-9c71-3b5603bca7c5",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bdfa81b2-04d7-4652-90bb-7aaade2ea102"
        },
        "item": {
          "id": "0fe77c86-26d8-4c62-a228-72de324aba90",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "081ec19e-d468-4d83-a4f0-02af6827cec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11e7cdb-3c8d-4afd-828c-dbb4fa4273c3",
        "cursor": {
          "ref": "0d573de4-56d9-4e7c-8ed6-cd8376a38851",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ff0e55ba-1056-467d-b31d-962f015e720e"
        },
        "item": {
          "id": "b11e7cdb-3c8d-4afd-828c-dbb4fa4273c3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2c9b16f1-7e46-4948-ad4d-e38bb93f5856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1401ccd4-8290-4201-8978-1e30f7ff6fe1",
        "cursor": {
          "ref": "d2a484d0-7832-4d95-836e-580fdd812668",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fa593035-3ef1-42ad-86de-281c3dd33c46"
        },
        "item": {
          "id": "1401ccd4-8290-4201-8978-1e30f7ff6fe1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6041f2b9-059f-4b93-af6b-733d51784770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a1edf4-bb81-40bf-95ca-972e76db6571",
        "cursor": {
          "ref": "dfed4c27-c421-4b3d-9f9d-21679ff11ee8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d3c4046d-a4a5-4c22-b185-16ff5af7e935"
        },
        "item": {
          "id": "f3a1edf4-bb81-40bf-95ca-972e76db6571",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "df5abc70-91bf-4e81-9146-24af5e87cfa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9f5992-e3e6-4924-b623-7289c7a6bbb9",
        "cursor": {
          "ref": "394e0fdf-3879-449c-84f2-b98484c5a243",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e61d9d9a-1bdf-493b-ba24-cb9b16e5942d"
        },
        "item": {
          "id": "1a9f5992-e3e6-4924-b623-7289c7a6bbb9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0232d80c-574d-41d5-a527-b47ea804ecd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7173fe-3312-475c-a97c-8b67a138784a",
        "cursor": {
          "ref": "18fdeacf-f7bb-4fad-b598-e5e9260ad0a4",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "298f9648-a44f-42df-a178-7c2f0556c4a2"
        },
        "item": {
          "id": "5d7173fe-3312-475c-a97c-8b67a138784a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "44e83131-7e53-4119-bc7f-c3c076cbc65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90521ba3-4037-44e8-b686-49d3c93ddb68",
        "cursor": {
          "ref": "9ba75ccd-6bad-488d-8b74-f5852b4647b8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9f2b0255-0bca-4be3-8ef8-cf154629da69"
        },
        "item": {
          "id": "90521ba3-4037-44e8-b686-49d3c93ddb68",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d9e685ed-84e0-4984-a958-b72e55c9d469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91b0442-3566-4491-a955-7521e6f3f6ec",
        "cursor": {
          "ref": "f9f04a1c-048a-47d0-9670-90ddd66e746e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "edf493d9-88ad-4dc1-bbd8-a6bfb372137c"
        },
        "item": {
          "id": "d91b0442-3566-4491-a955-7521e6f3f6ec",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b7f86d84-d1c5-41bc-92e9-1ce1567b709f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903e986f-1a0b-4a55-be36-1f6676db4cbf",
        "cursor": {
          "ref": "d8c43dc2-613f-45f6-9957-02e848ea2d9d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "85294d48-ecea-42d8-bd69-0863aa466a8c"
        },
        "item": {
          "id": "903e986f-1a0b-4a55-be36-1f6676db4cbf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e5bed5f9-8bc1-4784-8e5a-51116ff1235c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632f4c31-3670-4759-8b8c-000ce58fb1f3",
        "cursor": {
          "ref": "c5f6c30e-b879-4f46-af8c-b7389532df97",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4dcf7e0a-45be-4793-b94f-82856a829535"
        },
        "item": {
          "id": "632f4c31-3670-4759-8b8c-000ce58fb1f3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c55031f7-9a46-4559-af99-da02cf7a586b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475d4ad3-0730-423e-afeb-69d99a625d8e",
        "cursor": {
          "ref": "97018752-f4ec-47af-9506-ea8b2535e924",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "70a619ac-f872-4b42-b95a-e95781d03fa4"
        },
        "item": {
          "id": "475d4ad3-0730-423e-afeb-69d99a625d8e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "193104af-f97c-46d2-8839-8368a5820bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a88c34-0043-4ddd-8ef3-f759f95d9356",
        "cursor": {
          "ref": "bac9bfcc-94c9-4c13-8552-4018cf9dfe5e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b26ddb23-bd86-48c6-a478-3c743f2b1c8a"
        },
        "item": {
          "id": "d6a88c34-0043-4ddd-8ef3-f759f95d9356",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "edce55df-78f1-49a4-a04c-0b3ade41fd3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6987d2-2aaf-4320-92e3-535042ae1062",
        "cursor": {
          "ref": "00ec2966-b930-4154-8fe8-9fed66548f32",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "64d273b3-3e5c-4964-bc2c-590551e78a9b"
        },
        "item": {
          "id": "5a6987d2-2aaf-4320-92e3-535042ae1062",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3fb23937-be80-4d4d-b2dd-0bc7edc3e0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0e64f4-7ce1-4bcf-80b8-1d011ccfb8f1",
        "cursor": {
          "ref": "6017f619-d327-4e5e-b3c8-4019f98179f9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1d2d0c5a-7af0-4107-91ff-fd0cee88feca"
        },
        "item": {
          "id": "6c0e64f4-7ce1-4bcf-80b8-1d011ccfb8f1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0901171d-81ec-4f47-a7dc-5a1b06a6d2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a87ff4-25cb-4c69-80a9-b0ea06e05407",
        "cursor": {
          "ref": "1fbea4b3-d959-494c-84da-a2c41a78bf29",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "dc19cc87-fb65-464d-9bc5-6b2917dd7ced"
        },
        "item": {
          "id": "65a87ff4-25cb-4c69-80a9-b0ea06e05407",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "274a81b8-afca-4bbc-a55c-b2fc47041176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b4c65a-1801-4926-bde6-880351e4047f",
        "cursor": {
          "ref": "e69f04a3-d828-4422-857d-69c54c551657",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6ca734b8-5a6c-4c05-b966-7943a46c4c65"
        },
        "item": {
          "id": "38b4c65a-1801-4926-bde6-880351e4047f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "98009dbb-ddc3-462e-8a60-8340bfde3c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f9d6d4-2503-4d47-b42a-428b48b8a920",
        "cursor": {
          "ref": "9976d0b4-ae4f-44e6-984b-aa6d6d9877e5",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f12dc190-92e4-4aa3-a535-8af6757110b9"
        },
        "item": {
          "id": "78f9d6d4-2503-4d47-b42a-428b48b8a920",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b3395976-5e72-4c43-8e93-e182b9513367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161f4a13-289f-47db-92cb-900842a1fbfa",
        "cursor": {
          "ref": "f2a83dd7-f33b-4b88-89d7-530568d15359",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2e66d8a8-9027-47a9-85c5-c34b5a0931ba"
        },
        "item": {
          "id": "161f4a13-289f-47db-92cb-900842a1fbfa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a15e2d64-6858-401e-8357-ca4eb9bf1598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820b1e7a-b9ff-4207-956f-88c40f48fcad",
        "cursor": {
          "ref": "1b68daa5-c0b2-4d0e-96e7-62a27d5f9d52",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7b60fc9f-cd27-43d3-b16c-7dfadd4e4757"
        },
        "item": {
          "id": "820b1e7a-b9ff-4207-956f-88c40f48fcad",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dfd90282-bf1f-4583-aad1-242aac9469b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496c3ba5-a190-449e-bff7-14f0f22c1bd1",
        "cursor": {
          "ref": "f40bdabe-7dda-4324-9a0f-33917e01e5e8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fefa7086-d5c5-4613-b8dd-0f9536680926"
        },
        "item": {
          "id": "496c3ba5-a190-449e-bff7-14f0f22c1bd1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9b064754-85ab-4484-8d81-ccf5d260f21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950e6a8a-0c2b-41fa-81d8-c511adfe862e",
        "cursor": {
          "ref": "31f110bb-4908-43c4-ad0d-b7d18d262cd6",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9771eddd-53b6-4e2e-a78b-531503b6f080"
        },
        "item": {
          "id": "950e6a8a-0c2b-41fa-81d8-c511adfe862e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d076b558-8d98-44c8-9c44-5ff637654949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985452c7-0bc1-4396-8a52-0fff04fb2828",
        "cursor": {
          "ref": "e99b12be-3a43-4c97-a211-74a6862641af",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9b1d8beb-9a4a-44a8-983c-d71120ab0ca3"
        },
        "item": {
          "id": "985452c7-0bc1-4396-8a52-0fff04fb2828",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a54b654f-6532-417c-aecb-e37359ccffa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e035a6ca-3c1f-4e26-9cab-273f7ab0b949",
        "cursor": {
          "ref": "9dcdd995-4a75-4640-b221-8f06b98eb57a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "733d9acc-d8d4-4588-a9a3-b10a63fd88e3"
        },
        "item": {
          "id": "e035a6ca-3c1f-4e26-9cab-273f7ab0b949",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "47ea928f-001a-4e9f-ac67-a18f59c0fcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1f058e-2c5f-4dce-808d-5838ae83345a",
        "cursor": {
          "ref": "f1d8b179-4149-44ba-9fe6-228b67052a6e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "061775a4-06a2-4185-ac19-1bbb8aa772e1"
        },
        "item": {
          "id": "0e1f058e-2c5f-4dce-808d-5838ae83345a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50ef288b-4237-4e47-b715-e022fa228c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438f6244-5819-48b5-93dc-0c122ef56347",
        "cursor": {
          "ref": "d56ec3b1-191c-4e43-85c1-a99ea6f5f71d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "882963b1-b733-44b9-bfe1-2f9a82c07eef"
        },
        "item": {
          "id": "438f6244-5819-48b5-93dc-0c122ef56347",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "65dc3d5d-81ee-49f4-a6d8-641a35546647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decefa25-8975-4a71-a272-71257697d279",
        "cursor": {
          "ref": "3f01acf5-6aef-4c4c-995a-74f9fc8a58c5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "79af4c10-d650-4b21-9be0-a0b2a722bb24"
        },
        "item": {
          "id": "decefa25-8975-4a71-a272-71257697d279",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e7897794-5ee8-40ec-9b46-f4297c9ced67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba29459-1984-4617-b55e-5863440e4139",
        "cursor": {
          "ref": "a92800f7-7c20-45cf-8b84-7b8170a0b9a3",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bc9b70aa-4cc4-4efc-b3e7-62b338bf8a9b"
        },
        "item": {
          "id": "eba29459-1984-4617-b55e-5863440e4139",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "181d1a7e-63f0-4914-97f5-8b1cb2fa1086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed72a328-0b55-444e-a389-a71a4f9917f9",
        "cursor": {
          "ref": "e4ef3db9-3c98-4e3c-9e81-05c2511da3ee",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1fe40f9f-dfc3-43f0-b8ef-93b56d1453f9"
        },
        "item": {
          "id": "ed72a328-0b55-444e-a389-a71a4f9917f9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5a2d010d-a9da-48b5-9d78-da7080d1820f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53187b36-e274-433a-845a-21407904f4e7",
        "cursor": {
          "ref": "6e118729-914c-42fc-b435-3f8ab4238565",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "56ec9356-4902-423b-9553-e632f6e716d9"
        },
        "item": {
          "id": "53187b36-e274-433a-845a-21407904f4e7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5b9d67e2-407f-44ee-8f80-654e4200b57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874085c5-d139-482f-b2dc-6ad9da187378",
        "cursor": {
          "ref": "af71842f-e081-4a6b-892a-b84c6c8984cd",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "94978f93-9628-4ef1-b7aa-0fb565abaf79"
        },
        "item": {
          "id": "874085c5-d139-482f-b2dc-6ad9da187378",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9386339f-4a2e-4024-821e-2a674ade7c19",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5caaee8a-3aa8-4118-a4d3-f7c0e1c1cd58",
        "cursor": {
          "ref": "af8334d2-a096-419e-a8ce-b9c312aae806",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4283dda5-39db-4fda-888c-6e78ac1d6690"
        },
        "item": {
          "id": "5caaee8a-3aa8-4118-a4d3-f7c0e1c1cd58",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "56102dd6-3b41-491f-88d2-c8d0a49765ee",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "19a6fbcb-cd87-4716-9d2d-cc4d9f960269",
        "cursor": {
          "ref": "00c542a5-bb6f-48bd-92e2-31670b6c87d5",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6c8c4145-715f-44cd-8085-ff6ac923f8cd"
        },
        "item": {
          "id": "19a6fbcb-cd87-4716-9d2d-cc4d9f960269",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9da76a27-9a09-457f-9a9c-7215236d9804",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9d868303-bec9-40e1-9252-80e65ff6d864",
        "cursor": {
          "ref": "b0242031-a631-4572-bc69-5ec585ebf46a",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec9b2b95-29df-4347-a4e6-9ef9d311598a"
        },
        "item": {
          "id": "9d868303-bec9-40e1-9252-80e65ff6d864",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2048dc2a-209f-4879-962b-2595dd810600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acf94fb-f069-421e-aae7-01bdf17d3327",
        "cursor": {
          "ref": "31fee129-c101-491b-a13d-0bb30eec252c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9ecfd832-2751-45b1-9727-cb34ff8316e1"
        },
        "item": {
          "id": "7acf94fb-f069-421e-aae7-01bdf17d3327",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "146665c4-65a8-4aa7-8c3a-682db94339b4",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0e7ced5b-744a-4c6c-9627-4dde75322e98",
        "cursor": {
          "ref": "20e5443f-2093-4b62-b27b-05f0a610504b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a5efdbf3-dc63-49a5-bf8b-e0bff2ee0e82"
        },
        "item": {
          "id": "0e7ced5b-744a-4c6c-9627-4dde75322e98",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "14c62517-8f99-49c0-8802-e699fcf5af99",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "28872d1a-e925-4161-9681-fa8b1636f3b7",
        "cursor": {
          "ref": "fd336297-fa91-4132-840e-decdd91b3239",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ebd1583b-4249-4a47-a616-84613345c5df"
        },
        "item": {
          "id": "28872d1a-e925-4161-9681-fa8b1636f3b7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "26e67863-e027-41a9-8d31-7ebf5aef6b77",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d44c7e22-5d4c-423a-8c5e-4c60d064d99f",
        "cursor": {
          "ref": "c0845cf8-0425-4f42-8bdb-3dcfffce1e87",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a4333e51-26b7-4da0-a208-d2ff98652cbd"
        },
        "item": {
          "id": "d44c7e22-5d4c-423a-8c5e-4c60d064d99f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "247362ba-3f99-4e55-bd4f-87d0f561c16e",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ea976dd6-8d55-4bf9-807f-5f1c363d21ff",
        "cursor": {
          "ref": "983eda10-855f-4eda-ad43-7ec627ebbe11",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a547e448-00a7-41b6-955b-574cc01f8f34"
        },
        "item": {
          "id": "ea976dd6-8d55-4bf9-807f-5f1c363d21ff",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1e8e4cfa-f204-460b-ba8d-edddf9f6f8cb",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dbd09e8f-370f-4642-8d48-3506d2f2bdeb",
        "cursor": {
          "ref": "c59df1cf-27e4-466c-88b9-9cfafdb4db66",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4469853d-0806-41cb-af63-c4f9d4bfffb2"
        },
        "item": {
          "id": "dbd09e8f-370f-4642-8d48-3506d2f2bdeb",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1b1487da-a233-4cc6-952d-f8f35f090f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "cbc56794-0935-4af7-a607-e5b8be70dcc2",
        "cursor": {
          "ref": "3558a070-a611-4ea9-9982-695bebef6897",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "764990ae-dfdb-46f2-b410-20700a6233a2"
        },
        "item": {
          "id": "cbc56794-0935-4af7-a607-e5b8be70dcc2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "04ef428e-f183-4601-b12f-6b14e89aa12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee6b35b-b838-4d9e-9113-658ba66cff5f",
        "cursor": {
          "ref": "caa962b3-d4c7-4098-af09-2ee2b2a1d6d5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c15f7f5-3c2b-45db-bea1-22f9caea70e8"
        },
        "item": {
          "id": "eee6b35b-b838-4d9e-9113-658ba66cff5f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b80808fb-9802-4f7f-99f6-a6b90fa835ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2aca5d8-e10d-4005-99eb-48af3b2f5518",
        "cursor": {
          "ref": "e4137930-b2af-44e9-842f-dba19b10a157",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "21595b79-b0e5-4e04-8177-e0e7cd4b0dc2"
        },
        "item": {
          "id": "b2aca5d8-e10d-4005-99eb-48af3b2f5518",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "91d70dd2-ffb2-4953-b3ba-99a77eaf20fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a367e6-3dd9-4e4e-a7d3-5f8aea2b20c6",
        "cursor": {
          "ref": "7691866a-0194-4478-ae18-fc41a543ced1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "66a054a6-f38d-4e41-a560-ea1837ba3bc3"
        },
        "item": {
          "id": "73a367e6-3dd9-4e4e-a7d3-5f8aea2b20c6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "102309a8-09b4-45ae-b5aa-da0cd482ab89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f741238-10df-43cb-afc1-288e21e9298f",
        "cursor": {
          "ref": "fd8dc2c7-7762-4cc2-b4c9-9daf18f6533d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0624bad6-b202-4213-bc2f-ebd3e77804d5"
        },
        "item": {
          "id": "6f741238-10df-43cb-afc1-288e21e9298f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "18371b71-d1f6-4de9-ac2d-593a4bb8d41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba92d01b-e687-4272-ab84-287ef05a564b",
        "cursor": {
          "ref": "cff433df-4539-458b-849a-467c4c5204df",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "12987e74-b5ff-44ee-a45b-14103403f4fe"
        },
        "item": {
          "id": "ba92d01b-e687-4272-ab84-287ef05a564b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "57c9eedf-4ce2-4815-b0a2-a907998e4190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5e981f-6f4e-4844-bfea-be155fd4360f",
        "cursor": {
          "ref": "b64746e8-60b4-49ec-8829-09d168a4fbd4",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "114715c0-bdcb-4ee4-8f31-615838d4962e"
        },
        "item": {
          "id": "da5e981f-6f4e-4844-bfea-be155fd4360f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b63dbcf4-57d0-4293-89b5-a8e5c83e8dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02b4b44-d793-4d38-b582-0b573d988611",
        "cursor": {
          "ref": "6662541c-b3e3-4bb9-902c-1c0d6718c669",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "93afa039-0b5c-4aa6-92ae-dacaa1fd92b3"
        },
        "item": {
          "id": "e02b4b44-d793-4d38-b582-0b573d988611",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b37014af-6a31-47b8-8cf0-cfd81e3cc242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f1e7ca-9469-4d81-81d8-a894e7edb450",
        "cursor": {
          "ref": "c634ab36-79cd-4f72-9857-ac82d6b8b8f8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1b59081b-a485-4910-ab23-a8c323fec89b"
        },
        "item": {
          "id": "74f1e7ca-9469-4d81-81d8-a894e7edb450",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7c47b2f7-c5bc-43f9-9252-8ad11508348a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd5be78-6634-47e7-b9fb-7759ff44c9a2",
        "cursor": {
          "ref": "d9dcc7d1-f9dd-4fb2-9fa0-2bc4c2f95f55",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5d20805f-ed8f-4fc0-a60c-d01bbae720cb"
        },
        "item": {
          "id": "ffd5be78-6634-47e7-b9fb-7759ff44c9a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "24cf3986-b8d9-4195-8603-0b6c8615d5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a34b123-fbd2-47f3-a86e-29878213e82c",
        "cursor": {
          "ref": "4a212c69-5ca3-4d2f-9cd0-d2c969a86ed2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "222740dc-90b4-47a5-a344-4ce6b65f1023"
        },
        "item": {
          "id": "4a34b123-fbd2-47f3-a86e-29878213e82c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0ca550a8-60f6-4a59-b517-5bf90dc8a1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4190bd2d-cd68-4d3f-a00d-ce99cb5f549f",
        "cursor": {
          "ref": "469ec376-e6cf-4914-ad15-7d20d9225513",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f2376cb6-3af5-4d6f-9350-7d6c24570db1"
        },
        "item": {
          "id": "4190bd2d-cd68-4d3f-a00d-ce99cb5f549f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e0eafc5d-ad73-42f6-9e14-f034e1479e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740f14dd-771c-4f12-9712-eef193f54a4e",
        "cursor": {
          "ref": "da1720ae-74ff-42d5-8315-fd16dab14ca9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "301d4d46-5678-4f28-a182-7b1604a50c1f"
        },
        "item": {
          "id": "740f14dd-771c-4f12-9712-eef193f54a4e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "971dd708-a7a3-4b95-aa99-6a3ca92bbad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b536b22f-427d-4d83-999d-39ed350f5b05",
        "cursor": {
          "ref": "f8e9adcc-eb1f-4a67-8476-cf904025fbb2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "af3f9c8b-f757-409f-b9e5-12a00b44faf2"
        },
        "item": {
          "id": "b536b22f-427d-4d83-999d-39ed350f5b05",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ed3113fc-d97b-4d38-8574-e1083b3b485c",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "95e5dd74-9c1c-462e-9c9b-73e42b06664f",
        "cursor": {
          "ref": "4a6c9b97-3f82-4179-a767-769c32cd10ee",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a3809e92-b374-4005-b203-b0515ebf40e3"
        },
        "item": {
          "id": "95e5dd74-9c1c-462e-9c9b-73e42b06664f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "66017d52-6951-46d0-a311-db5bb2050f95",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1057bd73-6d3f-4a1a-ae34-c6175b0b9d47",
        "cursor": {
          "ref": "14071dec-a875-4c47-8869-ee9f6ff70173",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3740f434-40a7-4cda-bf4a-f1b884e3f1c3"
        },
        "item": {
          "id": "1057bd73-6d3f-4a1a-ae34-c6175b0b9d47",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "10b3bbba-0794-4d80-8141-e100f6f60709",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "dbedf8fc-6d36-4191-a9af-2a8c60491bfc",
        "cursor": {
          "ref": "dddc9a2d-e48a-4f9c-a9df-41a63c0184d9",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "44388769-e5a8-4c47-9875-1681025096da"
        },
        "item": {
          "id": "dbedf8fc-6d36-4191-a9af-2a8c60491bfc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8abe756b-7326-4154-a74d-c45f8d0ccd13",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4aa6744b-81a1-4035-8bb4-58c9aef4898d",
        "cursor": {
          "ref": "fcf31510-4711-46aa-a52d-0ee70ce96c6a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f43ff4a9-4c80-44ba-b7bb-bab87f3ec00f"
        },
        "item": {
          "id": "4aa6744b-81a1-4035-8bb4-58c9aef4898d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c0dabb9-a49e-4e11-be46-1a15f640d6b7",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7ac07581-cb19-4640-b427-80a1282b6ac4",
        "cursor": {
          "ref": "7f68b140-175a-4d24-9747-eae1b8595adc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ee97ab80-1c02-48d9-9d0a-140c22d02e39"
        },
        "item": {
          "id": "7ac07581-cb19-4640-b427-80a1282b6ac4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "42241321-09d9-4ae8-8eea-d30b4806ee5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d60023-4990-4e64-bd21-1a951090bcca",
        "cursor": {
          "ref": "85e109c5-9389-43bb-b08f-a9de700ae994",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e341bef3-da98-4cf1-a69b-dd91e861a73b"
        },
        "item": {
          "id": "c4d60023-4990-4e64-bd21-1a951090bcca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0b186d57-4e9e-4255-9456-e232ff1c8c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eba38f-192d-4cb8-8515-78ba909b9c04",
        "cursor": {
          "ref": "92e2123c-fe70-4d30-9815-cc72ba943725",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "da0bba42-e78a-4467-9d1e-a00d6ba67ea6"
        },
        "item": {
          "id": "b3eba38f-192d-4cb8-8515-78ba909b9c04",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "78ea8a02-00c1-48e0-94f3-0804127e1a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ab9976-ebf9-48e9-add1-dfe063d7085e",
        "cursor": {
          "ref": "3ea7a698-47cf-4e61-9be4-a8004cb26df2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "60a58f3e-9af3-42ca-903a-8843e9399ff8"
        },
        "item": {
          "id": "30ab9976-ebf9-48e9-add1-dfe063d7085e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2dcb5c3c-9ea3-45dd-911b-df29e2a8c348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e81791-dae4-4c3d-9cfe-a39b30c86ffd",
        "cursor": {
          "ref": "eeefd6cd-8ff3-4cec-b506-1ed2ae6e876e",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e2e90fad-4460-48b4-8380-d7b862e7ab19"
        },
        "item": {
          "id": "54e81791-dae4-4c3d-9cfe-a39b30c86ffd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "118f56e0-ee9e-4e33-9610-e2650e5c1b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b52d9-7b1d-4d1a-8c14-847612691136",
        "cursor": {
          "ref": "14b0c101-f893-4963-a274-97418ac18908",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6a37a21d-2a06-49d5-ba7c-2d0a6dba1571"
        },
        "item": {
          "id": "895b52d9-7b1d-4d1a-8c14-847612691136",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "549eb0cb-cdbe-479a-8cde-9a7c13730c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176535dd-bbd0-4511-b7d2-bde37898f938",
        "cursor": {
          "ref": "1403c12d-730f-4072-923e-86720869aee9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d279c01e-af9f-4e0e-a6f3-b6a1057b3205"
        },
        "item": {
          "id": "176535dd-bbd0-4511-b7d2-bde37898f938",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "36b7a9d5-62ca-4c8f-938d-6891d6982850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2f9004-2155-49b5-a446-c4440c712de5",
        "cursor": {
          "ref": "36a449ce-a017-4c44-8025-7f4843b76c29",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e654c95-226c-47b8-bcf0-7a78b36c43d6"
        },
        "item": {
          "id": "1d2f9004-2155-49b5-a446-c4440c712de5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "953f2e5b-b99f-4c77-84b0-137d56edc769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d94f35-1629-4c06-92a8-9629806e2b11",
        "cursor": {
          "ref": "b489b005-7324-4a28-b143-a644d04d320e",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "b17221e6-6bed-483d-bdc1-710c60ef3c2e"
        },
        "item": {
          "id": "f1d94f35-1629-4c06-92a8-9629806e2b11",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "87ae3073-0310-47bd-9010-6bc759baa021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bb120e-d081-46eb-9a22-127693440001",
        "cursor": {
          "ref": "98f83c96-8b49-4ebf-901c-7fc8eee4cd09",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e9090efa-3bab-482a-9dc2-25677c17e797"
        },
        "item": {
          "id": "95bb120e-d081-46eb-9a22-127693440001",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "205edcb4-284d-4108-b9bc-da816a1c49df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b00ee95-6b82-484b-b07d-4d845157e9a1",
        "cursor": {
          "ref": "54ffa9fd-a5ca-4dce-be23-eb9d90434497",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9a2a7e14-1c0e-4582-8f4d-517c40f80813"
        },
        "item": {
          "id": "3b00ee95-6b82-484b-b07d-4d845157e9a1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5b839ca2-0099-4d2d-a115-547a01738a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ae74a6-e122-40c1-9096-9543d7d94c9f",
        "cursor": {
          "ref": "bc5f74c9-3461-4e11-adf9-057c337b0b94",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6761c50b-09e5-4005-853d-24ba75d5c415"
        },
        "item": {
          "id": "55ae74a6-e122-40c1-9096-9543d7d94c9f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "83c4c676-89ff-4436-b823-2d41edde2e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acaba0ce-2ff6-4f0f-9d0c-1d0e42b0e6ac",
        "cursor": {
          "ref": "608be105-16c9-490b-9a70-9f884d3937f4",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "86896de5-8280-4dc0-826f-c04833cf826d"
        },
        "item": {
          "id": "acaba0ce-2ff6-4f0f-9d0c-1d0e42b0e6ac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "774ff5d0-71a9-4930-bbdf-6c9b6fada2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05228cc7-de0e-4d96-9f47-3e94d81e6e13",
        "cursor": {
          "ref": "86eefcba-1296-436b-8d52-f2ac177bce99",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1b73f70d-fe68-42bb-af10-23f044c9008b"
        },
        "item": {
          "id": "05228cc7-de0e-4d96-9f47-3e94d81e6e13",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "653ce168-7537-4e2a-9268-384b7d7d4052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5f1479-3f5a-4cae-9f49-ee53aa6271d8",
        "cursor": {
          "ref": "16256e0a-1e6a-411d-951c-b39f538aa439",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0394e5b2-065d-4141-bb41-355e54906d38"
        },
        "item": {
          "id": "9f5f1479-3f5a-4cae-9f49-ee53aa6271d8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2da43fcd-e582-4b25-a653-6c17011b5960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a4375e-37ce-49c9-b507-12d6a9429e2c",
        "cursor": {
          "ref": "69cd33f7-e735-4bf9-97c5-53303925faff",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "490630a7-db0d-40fb-9c49-cb0af8d42722"
        },
        "item": {
          "id": "44a4375e-37ce-49c9-b507-12d6a9429e2c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "235ff70f-452e-4e28-afb7-e1834c30892f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0606e1fd-bee0-4496-8aef-a66bb90fde4a",
        "cursor": {
          "ref": "f789cd2c-1b7b-4b0b-9d9a-427acca6f6ac",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "33588bad-3c55-4431-ae11-6904f2f242c2"
        },
        "item": {
          "id": "0606e1fd-bee0-4496-8aef-a66bb90fde4a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f75255ef-4793-40a1-91c4-dc1d7fdaa363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08239091-233a-4b5b-895b-c18b56920e0f",
        "cursor": {
          "ref": "37a56f07-be0d-49af-9dbc-cc2153b15588",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "02978b36-46b1-4102-a694-011583237c23"
        },
        "item": {
          "id": "08239091-233a-4b5b-895b-c18b56920e0f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4fd9fd0c-77fd-4d33-9ec4-29c4934cfb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c5cd5a-0e97-4116-8508-8187e8984f0c",
        "cursor": {
          "ref": "3e88919b-58af-4e93-a5a9-22fe48e6f1a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3ec082d5-2f76-4f6b-a691-12765facb7ac"
        },
        "item": {
          "id": "f9c5cd5a-0e97-4116-8508-8187e8984f0c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "243ed069-103b-48af-86ce-4c6ca1ead6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850ddf07-f1d5-4ee3-a689-10f2f6934732",
        "cursor": {
          "ref": "6f858339-6369-4683-bdac-16440ccb9f96",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "32cd4948-0ada-4507-b5ad-dcc6dca30a8d"
        },
        "item": {
          "id": "850ddf07-f1d5-4ee3-a689-10f2f6934732",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "10a4b39a-a793-4542-b983-df7d2b18f30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2784171b-14d5-425f-b737-05aed104feea",
        "cursor": {
          "ref": "c386705b-e03e-4055-82fe-717b6ae7f4ef",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5447676d-7c00-45dc-9258-e6a22c79e91c"
        },
        "item": {
          "id": "2784171b-14d5-425f-b737-05aed104feea",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a969568d-80e5-4d03-9dbd-51cc418417e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9222b984-c14e-4472-88b3-0322c32817bd",
        "cursor": {
          "ref": "f9bd102a-2deb-472d-87dd-9a60e8342ca8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5cadcd34-8352-45c6-bee7-e84e5a25dc96"
        },
        "item": {
          "id": "9222b984-c14e-4472-88b3-0322c32817bd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0de59b4a-8bf0-4f6d-bbc7-b0020308e1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8536fbfc-8c67-4997-9e5e-f9ed5e32b657",
        "cursor": {
          "ref": "06b9b7ac-9cde-4936-8b01-d67bd72689cf",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2de8fb2f-0d9f-4b91-90b6-3eb32a17de29"
        },
        "item": {
          "id": "8536fbfc-8c67-4997-9e5e-f9ed5e32b657",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0566c3e0-daaa-4ea4-aad3-557df0816513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5488bcef-8480-458a-87b9-c9a10f5cf086",
        "cursor": {
          "ref": "29c844a9-f524-4dac-bc78-701ea76a27d6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "227f5546-d255-4bc1-be26-cd0b1743c389"
        },
        "item": {
          "id": "5488bcef-8480-458a-87b9-c9a10f5cf086",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "681d980f-8e11-4a75-87c5-1c6419037868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcee97b8-b74c-4cc2-bcdc-719c6fce4859",
        "cursor": {
          "ref": "fb22737f-c4d7-4e0d-aadf-7612cf277627",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "4f401150-910a-4e70-99d6-5daeb14ac9d7"
        },
        "item": {
          "id": "dcee97b8-b74c-4cc2-bcdc-719c6fce4859",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4df4cc34-76cf-4a5a-b251-5d63482b0620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cf6cb3-c520-4a90-9450-ed139dbbea45",
        "cursor": {
          "ref": "319d14d4-1fc3-41de-be22-d73ad1d39100",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8f2e5feb-216e-4f95-a462-a4d2a6d7d95b"
        },
        "item": {
          "id": "24cf6cb3-c520-4a90-9450-ed139dbbea45",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "98393c62-3d47-4979-8655-05f04638e6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843e1ef8-a118-4609-b205-6b1e784747c9",
        "cursor": {
          "ref": "942ca66d-7411-42ce-aae7-6b7de9f98953",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f2037019-cb6b-4366-a2ed-51b0b10d56c1"
        },
        "item": {
          "id": "843e1ef8-a118-4609-b205-6b1e784747c9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e40132b7-5889-43d6-a83a-f2982548f472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14055d5-5aaa-4eca-8d6a-15ba2ceaf502",
        "cursor": {
          "ref": "e7d0fe65-0be3-469e-a00d-1fa9f4df1f0a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e1663ce9-408b-43dc-829f-a1ff1ec5ac2f"
        },
        "item": {
          "id": "e14055d5-5aaa-4eca-8d6a-15ba2ceaf502",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8df0eb97-2e43-4029-a033-3857e389fc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e97d484-8d5e-4519-b711-2a99c8946f20",
        "cursor": {
          "ref": "68c036f5-f97c-48db-8487-b0ed6c41d872",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c6ab0def-a825-4c9c-b7c0-c54dabc480ea"
        },
        "item": {
          "id": "7e97d484-8d5e-4519-b711-2a99c8946f20",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "bc2dea32-e69b-48d8-bb0a-a701752107f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7898753f-d668-48c7-a7c8-0d3356ead462",
        "cursor": {
          "ref": "0a642223-218f-40e4-8cb1-de6ca836af0e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "84a8ea1d-66db-4501-a851-12c1d53cd4c2"
        },
        "item": {
          "id": "7898753f-d668-48c7-a7c8-0d3356ead462",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5a8b158e-421b-4a95-9e32-f054e81373f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41513cd-d8ab-4ca0-a936-2d54411a849b",
        "cursor": {
          "ref": "f9af9813-c322-4db4-8f5f-62843f4308dc",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4c79349c-6505-4daa-9302-0b9364a7a187"
        },
        "item": {
          "id": "c41513cd-d8ab-4ca0-a936-2d54411a849b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "41803ce5-5247-4a70-83e7-8be0630e23b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7a0fd6-e52c-4126-8ef3-1c35296372f3",
        "cursor": {
          "ref": "6030a6b2-4cd2-4c98-a670-65cb63aa3616",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "fc182460-5711-4584-928d-7830e845f024"
        },
        "item": {
          "id": "3d7a0fd6-e52c-4126-8ef3-1c35296372f3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "85c9bf79-6b2d-4c3d-855d-85fb835f8b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cd2116-5127-48be-90d5-3cdbdb50803e",
        "cursor": {
          "ref": "7b83a6f7-0718-4cf6-9808-e4675332ee21",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e74e8571-4904-4084-a7ef-f6bfa7f96a04"
        },
        "item": {
          "id": "02cd2116-5127-48be-90d5-3cdbdb50803e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "54eebacb-4738-4e85-9a99-5bc348519fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8772fe-f899-4b32-ae9d-0c552f9bd02f",
        "cursor": {
          "ref": "316edcad-dd36-46c9-a986-ad725b69798a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "231db8cd-f9e6-480c-bd84-ac13704b66c1"
        },
        "item": {
          "id": "4e8772fe-f899-4b32-ae9d-0c552f9bd02f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f4a41d6b-11d7-48df-b017-2ed33826488e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc72785-5195-4c24-89dd-657a8530dfdb",
        "cursor": {
          "ref": "9cd2547e-33a3-4e03-ad08-811aa4cbbddf",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7182a944-0574-4e32-aa9c-3561b34701e5"
        },
        "item": {
          "id": "7fc72785-5195-4c24-89dd-657a8530dfdb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "554ada3f-ef4c-4916-970d-d1af0f2918a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf87d96-1239-469a-89af-0a004c54994d",
        "cursor": {
          "ref": "63f7ec39-4b64-4b41-997e-e2cda5e81cc5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "49172e28-57e2-4e22-ac7d-d3da1e9eeff8"
        },
        "item": {
          "id": "6cf87d96-1239-469a-89af-0a004c54994d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "db5d1841-2f50-4f3d-903b-9bce8e586089",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "40c1fe21-2526-423a-b6a4-d152e9693e0c",
        "cursor": {
          "ref": "6895c8e1-c9a4-47ce-a8d6-c3c133b999a7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4c58bb86-a530-4d46-beee-80044b669975"
        },
        "item": {
          "id": "40c1fe21-2526-423a-b6a4-d152e9693e0c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a00e1aab-4f80-40b8-b607-2e855c3e5b49",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98578c1-2308-43db-9492-44371201077e",
        "cursor": {
          "ref": "0b271a90-4c8e-4de9-808a-7d3bcecb3910",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8bda7c37-72a5-4807-87b4-8a470038f209"
        },
        "item": {
          "id": "a98578c1-2308-43db-9492-44371201077e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "227eb6e3-2103-458b-b5d7-bb21bd945c96",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40eca0b-7693-42b1-a801-55339e8756be",
        "cursor": {
          "ref": "ffb329a4-ea4e-4210-b4b7-875c8e7a7541",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5f219770-5bb5-419d-a9c7-5df42d2a2ed9"
        },
        "item": {
          "id": "e40eca0b-7693-42b1-a801-55339e8756be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e5dd08c-8a86-41ca-90fd-f29eb97c150a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40eca0b-7693-42b1-a801-55339e8756be",
        "cursor": {
          "ref": "ffb329a4-ea4e-4210-b4b7-875c8e7a7541",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5f219770-5bb5-419d-a9c7-5df42d2a2ed9"
        },
        "item": {
          "id": "e40eca0b-7693-42b1-a801-55339e8756be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e5dd08c-8a86-41ca-90fd-f29eb97c150a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf51aff-ccec-44e9-812d-d1049467eea8",
        "cursor": {
          "ref": "a2e73954-8384-4f93-8074-c0c4118b3b7b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3bfc87ec-4602-41fe-b579-92163d4c0900"
        },
        "item": {
          "id": "9bf51aff-ccec-44e9-812d-d1049467eea8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d0339434-2847-49b3-a75e-492ba6a2dd70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b88d0fd-cad8-48e8-9bbb-b747885c89ee",
        "cursor": {
          "ref": "ad49dec5-fb1d-4446-a400-cd542ae27b8e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "bb313f07-0886-4fae-85f9-7aebe30c2be5"
        },
        "item": {
          "id": "1b88d0fd-cad8-48e8-9bbb-b747885c89ee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c50fadfb-9a21-41e5-ae83-933ebeed3861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}